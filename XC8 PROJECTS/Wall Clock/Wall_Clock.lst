

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 10 14:04:07 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F870
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0015                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0017                     	;# 
    63  0018                     	;# 
    64  0019                     	;# 
    65  001A                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0092                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009E                     	;# 
    79  009F                     	;# 
    80  010C                     	;# 
    81  010D                     	;# 
    82  010E                     	;# 
    83  010F                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0092                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0092                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176                           
   177                           	psect	idataBANK0
   178  077D                     __pidataBANK0:	
   179                           
   180                           ;initializer for _alarm_hrs
   181  077D  340C               	retlw	12
   182                           
   183                           ;initializer for _date_flag
   184  077E  3401               	retlw	1
   185                           
   186                           ;initializer for _day
   187  077F  3401               	retlw	1
   188                           
   189                           ;initializer for _hrs
   190  0780  340C               	retlw	12
   191                           
   192                           ;initializer for _min_flag
   193  0781  3401               	retlw	1
   194                           
   195                           ;initializer for _month
   196  0782  3401               	retlw	1
   197                           
   198                           ;initializer for _year
   199  0783  340F               	retlw	15
   200                           
   201                           	psect	idataBANK1
   202  075F                     __pidataBANK1:	
   203                           
   204                           ;initializer for _display
   205  075F  343F               	retlw	63
   206  0760  3406               	retlw	6
   207  0761  345B               	retlw	91
   208  0762  344F               	retlw	79
   209  0763  3466               	retlw	102
   210  0764  346D               	retlw	109
   211  0765  347D               	retlw	125
   212  0766  3407               	retlw	7
   213  0767  347F               	retlw	127
   214  0768  346F               	retlw	111
   215  0769  3400               	retlw	0
   216                           
   217                           	psect	strings
   218  0622                     __pstrings:	
   219  0622                     stringtab:	
   220  0622                     __stringtab:	
   221  0622                     stringcode:	
   222                           ;	String table - string pointers are 1 byte each
   223                           
   224  0622                     stringdir:	
   225  0622  3006               	movlw	high stringdir
   226  0623  008A               	movwf	10
   227  0624  0804               	movf	4,w
   228  0625  0A84               	incf	4,f
   229  0626  0782               	addwf	2,f
   230  0627                     __stringbase:	
   231  0627  3400               	retlw	0
   232  0628                     __end_of__stringtab:	
   233  0628                     _MAX7219_Font:	
   234  0628  3420               	retlw	32
   235  0629  3400               	retlw	0
   236  062A  3430               	retlw	48
   237  062B  347E               	retlw	126
   238  062C  3431               	retlw	49
   239  062D  3430               	retlw	48
   240  062E  3432               	retlw	50
   241  062F  346D               	retlw	109
   242  0630  3433               	retlw	51
   243  0631  3479               	retlw	121
   244  0632  3434               	retlw	52
   245  0633  3433               	retlw	51
   246  0634  3435               	retlw	53
   247  0635  345B               	retlw	91
   248  0636  3436               	retlw	54
   249  0637  345F               	retlw	95
   250  0638  3437               	retlw	55
   251  0639  3470               	retlw	112
   252  063A  3438               	retlw	56
   253  063B  347F               	retlw	127
   254  063C  3439               	retlw	57
   255  063D  347B               	retlw	123
   256  063E  3441               	retlw	65
   257  063F  3477               	retlw	119
   258  0640  3442               	retlw	66
   259  0641  341F               	retlw	31
   260  0642  3443               	retlw	67
   261  0643  344E               	retlw	78
   262  0644  3444               	retlw	68
   263  0645  343D               	retlw	61
   264  0646  3445               	retlw	69
   265  0647  344F               	retlw	79
   266  0648  3446               	retlw	70
   267  0649  3447               	retlw	71
   268  064A  3447               	retlw	71
   269  064B  345E               	retlw	94
   270  064C  344C               	retlw	76
   271  064D  340E               	retlw	14
   272  064E  342D               	retlw	45
   273  064F  3401               	retlw	1
   274  0650  3400               	retlw	0
   275  0651  3400               	retlw	0
   276  0652                     __end_of_MAX7219_Font:	
   277  0006                     _PORTB	set	6
   278  001A                     _RCREG	set	26
   279  0018                     _RCSTAbits	set	24
   280  0001                     _TMR0	set	1
   281  005F                     _GIE	set	95
   282  005E                     _PEIE	set	94
   283  0031                     _RB1	set	49
   284  0032                     _RB2	set	50
   285  0033                     _RB3	set	51
   286  0034                     _RB4	set	52
   287  0035                     _RB5	set	53
   288  0036                     _RB6	set	54
   289  0037                     _RB7	set	55
   290  0038                     _RC0	set	56
   291  0039                     _RC1	set	57
   292  003A                     _RC2	set	58
   293  003D                     _RC5	set	61
   294  0065                     _RCIF	set	101
   295  005D                     _T0IE	set	93
   296  005A                     _T0IF	set	90
   297  009F                     _ADCON1	set	159
   298  0081                     _OPTION_REG	set	129
   299  0099                     _SPBRG	set	153
   300  0086                     _TRISB	set	134
   301  0087                     _TRISC	set	135
   302  0098                     _TXSTAbits	set	152
   303  0465                     _RCIE	set	1125
   304                           
   305                           	psect	cinit
   306  0011                     start_initialization:	
   307                           ; #config settings
   308                           
   309  0011                     __initialization:	
   310                           
   311                           ; Clear objects allocated to COMMON
   312  0011  307A               	movlw	low __pbssCOMMON
   313  0012  0084               	movwf	4
   314  0013  307E               	movlw	low (__pbssCOMMON+4)
   315  0014  2775               	fcall	clear_ram0
   316                           
   317                           ; Clear objects allocated to BANK0
   318  0015  1383               	bcf	3,7	;select IRP bank0
   319  0016  3020               	movlw	low __pbssBANK0
   320  0017  0084               	movwf	4
   321  0018  3047               	movlw	low (__pbssBANK0+39)
   322  0019  2775               	fcall	clear_ram0
   323                           
   324                           ; Initialize objects allocated to BANK1
   325  001A  1683               	bsf	3,5	;RP0=1, select bank1
   326  001B  1303               	bcf	3,6	;RP1=0, select bank1
   327  001C  275F               	fcall	__pidataBANK1	;fetch initializer
   328  001D  00A0               	movwf	__pdataBANK1& (0+127)
   329  001E  2760               	fcall	__pidataBANK1+1	;fetch initializer
   330  001F  00A1               	movwf	(__pdataBANK1+1)& (0+127)
   331  0020  2761               	fcall	__pidataBANK1+2	;fetch initializer
   332  0021  00A2               	movwf	(__pdataBANK1+2)& (0+127)
   333  0022  2762               	fcall	__pidataBANK1+3	;fetch initializer
   334  0023  00A3               	movwf	(__pdataBANK1+3)& (0+127)
   335  0024  2763               	fcall	__pidataBANK1+4	;fetch initializer
   336  0025  00A4               	movwf	(__pdataBANK1+4)& (0+127)
   337  0026  2764               	fcall	__pidataBANK1+5	;fetch initializer
   338  0027  00A5               	movwf	(__pdataBANK1+5)& (0+127)
   339  0028  2765               	fcall	__pidataBANK1+6	;fetch initializer
   340  0029  00A6               	movwf	(__pdataBANK1+6)& (0+127)
   341  002A  2766               	fcall	__pidataBANK1+7	;fetch initializer
   342  002B  00A7               	movwf	(__pdataBANK1+7)& (0+127)
   343  002C  2767               	fcall	__pidataBANK1+8	;fetch initializer
   344  002D  00A8               	movwf	(__pdataBANK1+8)& (0+127)
   345  002E  2768               	fcall	__pidataBANK1+9	;fetch initializer
   346  002F  00A9               	movwf	(__pdataBANK1+9)& (0+127)
   347  0030  2769               	fcall	__pidataBANK1+10	;fetch initializer
   348  0031  00AA               	movwf	(__pdataBANK1+10)& (0+127)
   349                           
   350                           ; Initialize objects allocated to BANK0
   351  0032  1283               	bcf	3,5	;RP0=0, select bank0
   352  0033  1303               	bcf	3,6	;RP1=0, select bank0
   353  0034  277D               	fcall	__pidataBANK0	;fetch initializer
   354  0035  00E1               	movwf	__pdataBANK0& (0+127)
   355  0036  277E               	fcall	__pidataBANK0+1	;fetch initializer
   356  0037  00E2               	movwf	(__pdataBANK0+1)& (0+127)
   357  0038  277F               	fcall	__pidataBANK0+2	;fetch initializer
   358  0039  00E3               	movwf	(__pdataBANK0+2)& (0+127)
   359  003A  2780               	fcall	__pidataBANK0+3	;fetch initializer
   360  003B  00E4               	movwf	(__pdataBANK0+3)& (0+127)
   361  003C  2781               	fcall	__pidataBANK0+4	;fetch initializer
   362  003D  00E5               	movwf	(__pdataBANK0+4)& (0+127)
   363  003E  2782               	fcall	__pidataBANK0+5	;fetch initializer
   364  003F  00E6               	movwf	(__pdataBANK0+5)& (0+127)
   365  0040  2783               	fcall	__pidataBANK0+6	;fetch initializer
   366  0041  00E7               	movwf	(__pdataBANK0+6)& (0+127)
   367  0042                     end_of_initialization:	
   368                           ;End of C runtime variable initialization code
   369                           
   370  0042                     __end_of__initialization:	
   371  0042  0183               	clrf	3
   372  0043  2C06               	ljmp	_main	;jump to C main() function
   373                           
   374                           	psect	bssCOMMON
   375  007A                     __pbssCOMMON:	
   376  007A                     _ch:	
   377  007A                     	ds	1
   378  007B                     _error:	
   379  007B                     	ds	1
   380  007C                     _index:	
   381  007C                     	ds	1
   382  007D                     _set_alarm:	
   383  007D                     	ds	1
   384                           
   385                           	psect	bssBANK0
   386  0020                     __pbssBANK0:	
   387  0020                     _randx:	
   388  0020                     	ds	4
   389  0024                     _msecs:	
   390  0024                     	ds	2
   391  0026                     _ran:	
   392  0026                     	ds	2
   393  0028                     _Twenty_Four_Hrs:	
   394  0028                     	ds	1
   395  0029                     _adjustment:	
   396  0029                     	ds	1
   397  002A                     _alarm_auto_repeat:	
   398  002A                     	ds	1
   399  002B                     _alarm_bell:	
   400  002B                     	ds	1
   401  002C                     _alarm_flag:	
   402  002C                     	ds	1
   403  002D                     _alarm_mins:	
   404  002D                     	ds	1
   405  002E                     _beeps:	
   406  002E                     	ds	1
   407  002F                     _eagle_flag:	
   408  002F                     	ds	1
   409  0030                     _hrs_flag:	
   410  0030                     	ds	1
   411  0031                     _mins:	
   412  0031                     	ds	1
   413  0032                     _randf:	
   414  0032                     	ds	1
   415  0033                     _sec_flag:	
   416  0033                     	ds	1
   417  0034                     _secs:	
   418  0034                     	ds	1
   419  0035                     _date_display_array:	
   420  0035                     	ds	8
   421  003D                     _time_display_array:	
   422  003D                     	ds	6
   423  0043                     _alarm_array:	
   424  0043                     	ds	4
   425                           
   426                           	psect	dataBANK0
   427  0061                     __pdataBANK0:	
   428  0061                     _alarm_hrs:	
   429  0061                     	ds	1
   430  0062                     _date_flag:	
   431  0062                     	ds	1
   432  0063                     _day:	
   433  0063                     	ds	1
   434  0064                     _hrs:	
   435  0064                     	ds	1
   436  0065                     _min_flag:	
   437  0065                     	ds	1
   438  0066                     _month:	
   439  0066                     	ds	1
   440  0067                     _year:	
   441  0067                     	ds	1
   442                           
   443                           	psect	dataBANK1
   444  00A0                     __pdataBANK1:	
   445  00A0                     _display:	
   446  00A0                     	ds	11
   447                           
   448                           	psect	clrtext
   449  0775                     clear_ram0:	
   450                           ;	Called with FSR containing the base address, and
   451                           ;	W with the last address+1
   452                           
   453  0775  0064               	clrwdt	;clear the watchdog before getting into this loop
   454  0776                     clrloop0:	
   455  0776  0180               	clrf	0	;clear RAM location pointed to by FSR
   456  0777  0A84               	incf	4,f	;increment pointer
   457  0778  0604               	xorwf	4,w	;XOR with final address
   458  0779  1903               	btfsc	3,2	;have we reached the end yet?
   459  077A  3400               	retlw	0	;all done for this memory range, return
   460  077B  0604               	xorwf	4,w	;XOR again to restore value
   461  077C  2F76               	goto	clrloop0	;do the next byte
   462                           
   463                           	psect	cstackCOMMON
   464  0070                     __pcstackCOMMON:	
   465  0070                     ?_update_date:	
   466  0070                     ?_check_alarm:	
   467                           ; 0 bytes @ 0x0
   468                           
   469  0070                     ?_MAX7219_Init:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0070                     ?_display_time:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0070                     ?_display_secs:	
   476                           ; 0 bytes @ 0x0
   477                           
   478  0070                     ?_display_mins:	
   479                           ; 0 bytes @ 0x0
   480                           
   481  0070                     ?_display_date:	
   482                           ; 0 bytes @ 0x0
   483                           
   484  0070                     ?_MAX7219_ShutdownStop:	
   485                           ; 0 bytes @ 0x0
   486                           
   487  0070                     ?_MAX7219_DisplayTestStop:	
   488                           ; 0 bytes @ 0x0
   489                           
   490  0070                     ?_MAX7219_Clear:	
   491                           ; 0 bytes @ 0x0
   492                           
   493  0070                     ?_MAX7219_SetBrightness:	
   494                           ; 0 bytes @ 0x0
   495                           
   496  0070                     ?_MAX7219_SendByte:	
   497                           ; 0 bytes @ 0x0
   498                           
   499  0070                     ?_update_time:	
   500                           ; 0 bytes @ 0x0
   501                           
   502  0070                     ?_main:	
   503                           ; 0 bytes @ 0x0
   504                           
   505  0070                     ?_ISR:	
   506                           ; 0 bytes @ 0x0
   507                           
   508  0070                     ?_MAX7219_LookupCode:	
   509                           ; 0 bytes @ 0x0
   510                           
   511  0070                     ?___bmul:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ___bmul@multiplicand:	
   515                           ; 1 bytes @ 0x0
   516                           
   517                           
   518                           ; 1 bytes @ 0x0
   519  0070                     	ds	1
   520  0071                     ??___bmul:	
   521                           
   522                           ; 0 bytes @ 0x1
   523  0071                     	ds	1
   524  0072                     ___bmul@product:	
   525                           
   526                           ; 1 bytes @ 0x2
   527  0072                     	ds	1
   528  0073                     ___bmul@multiplier:	
   529                           
   530                           ; 1 bytes @ 0x3
   531  0073                     	ds	1
   532  0074                     ??_ISR:	
   533                           
   534                           ; 0 bytes @ 0x4
   535  0074                     	ds	6
   536                           
   537                           	psect	cstackBANK0
   538  0047                     __pcstackBANK0:	
   539  0047                     ??_update_date:	
   540  0047                     ??_check_alarm:	
   541                           ; 0 bytes @ 0x0
   542                           
   543  0047                     ?_srand:	
   544                           ; 0 bytes @ 0x0
   545                           
   546  0047                     ??_display_secs:	
   547                           ; 0 bytes @ 0x0
   548                           
   549  0047                     ??_display_mins:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0047                     ??_MAX7219_LookupCode:	
   553                           ; 0 bytes @ 0x0
   554                           
   555  0047                     ??_MAX7219_SendByte:	
   556                           ; 0 bytes @ 0x0
   557                           
   558  0047                     ?___awdiv:	
   559                           ; 0 bytes @ 0x0
   560                           
   561  0047                     ?___awmod:	
   562                           ; 2 bytes @ 0x0
   563                           
   564  0047                     ?___lmul:	
   565                           ; 2 bytes @ 0x0
   566                           
   567  0047                     ___awdiv@divisor:	
   568                           ; 4 bytes @ 0x0
   569                           
   570  0047                     ___awmod@divisor:	
   571                           ; 2 bytes @ 0x0
   572                           
   573  0047                     srand@x:	
   574                           ; 2 bytes @ 0x0
   575                           
   576  0047                     ___lmul@multiplier:	
   577                           ; 2 bytes @ 0x0
   578                           
   579                           
   580                           ; 4 bytes @ 0x0
   581  0047                     	ds	1
   582  0048                     update_date@temp:	
   583  0048                     MAX7219_LookupCode@character:	
   584                           ; 1 bytes @ 0x1
   585                           
   586                           
   587                           ; 1 bytes @ 0x1
   588  0048                     	ds	1
   589  0049                     ??_srand:	
   590  0049                     ??_update_time:	
   591                           ; 0 bytes @ 0x2
   592                           
   593  0049                     MAX7219_LookupCode@i:	
   594                           ; 0 bytes @ 0x2
   595                           
   596  0049                     MAX7219_SendByte@dataout:	
   597                           ; 1 bytes @ 0x2
   598                           
   599  0049                     display_secs@number:	
   600                           ; 1 bytes @ 0x2
   601                           
   602  0049                     display_mins@number:	
   603                           ; 2 bytes @ 0x2
   604                           
   605  0049                     ___awdiv@dividend:	
   606                           ; 2 bytes @ 0x2
   607                           
   608  0049                     ___awmod@dividend:	
   609                           ; 2 bytes @ 0x2
   610                           
   611                           
   612                           ; 2 bytes @ 0x2
   613  0049                     	ds	1
   614  004A                     MAX7219_SendByte@mask:	
   615                           
   616                           ; 1 bytes @ 0x3
   617  004A                     	ds	1
   618  004B                     ??___awdiv:	
   619  004B                     ??___awmod:	
   620                           ; 0 bytes @ 0x4
   621                           
   622  004B                     MAX7219_SendByte@i:	
   623                           ; 0 bytes @ 0x4
   624                           
   625  004B                     display_secs@Flag:	
   626                           ; 1 bytes @ 0x4
   627                           
   628  004B                     display_mins@Flag:	
   629                           ; 2 bytes @ 0x4
   630                           
   631  004B                     ___lmul@multiplicand:	
   632                           ; 2 bytes @ 0x4
   633                           
   634                           
   635                           ; 4 bytes @ 0x4
   636  004B                     	ds	1
   637  004C                     ?_MAX7219_Write:	
   638  004C                     MAX7219_Write@dataout:	
   639                           ; 0 bytes @ 0x5
   640                           
   641  004C                     ___awdiv@counter:	
   642                           ; 1 bytes @ 0x5
   643                           
   644  004C                     ___awmod@counter:	
   645                           ; 1 bytes @ 0x5
   646                           
   647                           
   648                           ; 1 bytes @ 0x5
   649  004C                     	ds	1
   650  004D                     ??_MAX7219_Write:	
   651  004D                     MAX7219_Write@reg_number:	
   652                           ; 0 bytes @ 0x6
   653                           
   654  004D                     ___awdiv@sign:	
   655                           ; 1 bytes @ 0x6
   656                           
   657  004D                     ___awmod@sign:	
   658                           ; 1 bytes @ 0x6
   659                           
   660  004D                     display_secs@Mask:	
   661                           ; 1 bytes @ 0x6
   662                           
   663  004D                     display_mins@Mask:	
   664                           ; 2 bytes @ 0x6
   665                           
   666                           
   667                           ; 2 bytes @ 0x6
   668  004D                     	ds	1
   669  004E                     ?_MAX7219_DisplayChar:	
   670  004E                     ??_MAX7219_ShutdownStop:	
   671                           ; 0 bytes @ 0x7
   672                           
   673  004E                     ??_MAX7219_DisplayTestStop:	
   674                           ; 0 bytes @ 0x7
   675                           
   676  004E                     ??_MAX7219_Clear:	
   677                           ; 0 bytes @ 0x7
   678                           
   679  004E                     ??_MAX7219_SetBrightness:	
   680                           ; 0 bytes @ 0x7
   681                           
   682  004E                     MAX7219_DisplayChar@character:	
   683                           ; 0 bytes @ 0x7
   684                           
   685  004E                     ___awdiv@quotient:	
   686                           ; 1 bytes @ 0x7
   687                           
   688                           
   689                           ; 2 bytes @ 0x7
   690  004E                     	ds	1
   691  004F                     ??___lmul:	
   692  004F                     MAX7219_SetBrightness@brightness:	
   693                           ; 0 bytes @ 0x8
   694                           
   695  004F                     MAX7219_Clear@i:	
   696                           ; 1 bytes @ 0x8
   697                           
   698  004F                     MAX7219_DisplayChar@dot:	
   699                           ; 1 bytes @ 0x8
   700                           
   701  004F                     display_secs@bits:	
   702                           ; 1 bytes @ 0x8
   703                           
   704  004F                     display_mins@bits:	
   705                           ; 2 bytes @ 0x8
   706                           
   707                           
   708                           ; 2 bytes @ 0x8
   709  004F                     	ds	1
   710  0050                     ??_MAX7219_Init:	
   711  0050                     ??_MAX7219_DisplayChar:	
   712                           ; 0 bytes @ 0x9
   713                           
   714  0050                     ___lmul@product:	
   715                           ; 0 bytes @ 0x9
   716                           
   717                           
   718                           ; 4 bytes @ 0x9
   719  0050                     	ds	1
   720  0051                     MAX7219_DisplayChar@digit:	
   721  0051                     display_secs@digit:	
   722                           ; 1 bytes @ 0xA
   723                           
   724  0051                     display_mins@digit:	
   725                           ; 2 bytes @ 0xA
   726                           
   727                           
   728                           ; 2 bytes @ 0xA
   729  0051                     	ds	1
   730  0052                     MAX7219_DisplayChar@ch:	
   731                           
   732                           ; 1 bytes @ 0xB
   733  0052                     	ds	1
   734  0053                     ??_display_date:	
   735                           
   736                           ; 0 bytes @ 0xC
   737  0053                     	ds	1
   738  0054                     ?_rand:	
   739  0054                     display_date@i:	
   740                           ; 2 bytes @ 0xD
   741                           
   742                           
   743                           ; 1 bytes @ 0xD
   744  0054                     	ds	1
   745  0055                     ??_display_time:	
   746                           
   747                           ; 0 bytes @ 0xE
   748  0055                     	ds	1
   749  0056                     ??_rand:	
   750                           
   751                           ; 0 bytes @ 0xF
   752  0056                     	ds	2
   753  0058                     display_time@temp:	
   754                           
   755                           ; 1 bytes @ 0x11
   756  0058                     	ds	7
   757  005F                     ??_main:	
   758                           
   759                           ; 0 bytes @ 0x18
   760  005F                     	ds	2
   761                           
   762                           	psect	maintext
   763  0406                     __pmaintext:	
   764 ;;
   765 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   766 ;;
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 13 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\wallclock.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;		None               void
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 17F/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0   BANK1
   783 ;;      Params:         0       0       0
   784 ;;      Locals:         0       0       0
   785 ;;      Temps:          0       2       0
   786 ;;      Totals:         0       2       0
   787 ;;Total ram usage:        2 bytes
   788 ;; Hardware stack levels required when called:    7
   789 ;; This function calls:
   790 ;;		_MAX7219_Init
   791 ;;		___awmod
   792 ;;		_display_time
   793 ;;		_rand
   794 ;;		_srand
   795 ;;		_update_time
   796 ;; This function is called by:
   797 ;;		Startup code after reset
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           
   802                           ;psect for function _main
   803  0406                     _main:	
   804                           
   805                           ;wallclock.c: 15: TRISB = 0x00;
   806                           
   807                           ;incstack = 0
   808                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   809  0406  1683               	bsf	3,5	;RP0=1, select bank1
   810  0407  1303               	bcf	3,6	;RP1=0, select bank1
   811  0408  0186               	clrf	6	;volatile
   812                           
   813                           ;wallclock.c: 16: TRISC = 0xC0;
   814  0409  30C0               	movlw	192
   815  040A  0087               	movwf	7	;volatile
   816                           
   817                           ;wallclock.c: 17: ADCON1 = 0x06;
   818  040B  3006               	movlw	6
   819  040C  009F               	movwf	31	;volatile
   820                           
   821                           ;wallclock.c: 19: PORTB = 0x00;
   822  040D  1283               	bcf	3,5	;RP0=0, select bank0
   823  040E  1303               	bcf	3,6	;RP1=0, select bank0
   824  040F  0186               	clrf	6	;volatile
   825                           
   826                           ;wallclock.c: 20: RC5 = 0;
   827  0410  1287               	bcf	7,5	;volatile
   828                           
   829                           ;wallclock.c: 23: MAX7219_Init ();
   830  0411  26F7               	fcall	_MAX7219_Init
   831                           
   832                           ;wallclock.c: 26: SPBRG=25;
   833  0412  3019               	movlw	25
   834  0413  1683               	bsf	3,5	;RP0=1, select bank1
   835  0414  1303               	bcf	3,6	;RP1=0, select bank1
   836  0415  0099               	movwf	25	;volatile
   837                           
   838                           ;wallclock.c: 29: TXSTAbits.TX9=0;
   839  0416  1318               	bcf	24,6	;volatile
   840                           
   841                           ;wallclock.c: 30: TXSTAbits.TXEN=1;
   842  0417  1698               	bsf	24,5	;volatile
   843                           
   844                           ;wallclock.c: 31: TXSTAbits.SYNC=0;
   845  0418  1218               	bcf	24,4	;volatile
   846                           
   847                           ;wallclock.c: 32: TXSTAbits.BRGH=1;
   848  0419  1518               	bsf	24,2	;volatile
   849                           
   850                           ;wallclock.c: 35: RCSTAbits.SPEN=1;
   851  041A  1283               	bcf	3,5	;RP0=0, select bank0
   852  041B  1303               	bcf	3,6	;RP1=0, select bank0
   853  041C  1798               	bsf	24,7	;volatile
   854                           
   855                           ;wallclock.c: 36: RCSTAbits.RX9=0;
   856  041D  1318               	bcf	24,6	;volatile
   857                           
   858                           ;wallclock.c: 37: RCSTAbits.CREN=1;
   859  041E  1618               	bsf	24,4	;volatile
   860                           
   861                           ;wallclock.c: 38: RCSTAbits.ADDEN=0;
   862  041F  1198               	bcf	24,3	;volatile
   863                           
   864                           ;wallclock.c: 41: RCIE=1;
   865  0420  1683               	bsf	3,5	;RP0=1, select bank1
   866  0421  1303               	bcf	3,6	;RP1=0, select bank1
   867  0422  168C               	bsf	12,5	;volatile
   868                           
   869                           ;wallclock.c: 42: PEIE=1;
   870  0423  170B               	bsf	11,6	;volatile
   871                           
   872                           ;wallclock.c: 45: OPTION_REG = 0xC1;
   873  0424  30C1               	movlw	193
   874  0425  0081               	movwf	1	;volatile
   875                           
   876                           ;wallclock.c: 46: T0IE = 1;
   877  0426  168B               	bsf	11,5	;volatile
   878                           
   879                           ;wallclock.c: 47: TMR0 = 17;
   880  0427  3011               	movlw	17
   881  0428  1283               	bcf	3,5	;RP0=0, select bank0
   882  0429  1303               	bcf	3,6	;RP1=0, select bank0
   883  042A  0081               	movwf	1	;volatile
   884                           
   885                           ;wallclock.c: 49: (GIE = 1);
   886  042B  178B               	bsf	11,7	;volatile
   887                           
   888                           ;wallclock.c: 51: srand(100);
   889  042C  3064               	movlw	100
   890  042D  00C7               	movwf	srand@x
   891  042E  3000               	movlw	0
   892  042F  00C8               	movwf	srand@x+1
   893  0430  276A               	fcall	_srand
   894  0431                     l1986:	
   895                           ;wallclock.c: 53: while(1)
   896                           
   897                           
   898                           ;wallclock.c: 54: {
   899                           ;wallclock.c: 55: if(sec_flag == 1)
   900  0431  1283               	bcf	3,5	;RP0=0, select bank0
   901  0432  1303               	bcf	3,6	;RP1=0, select bank0
   902  0433  0833               	movf	_sec_flag,w
   903  0434  3A01               	xorlw	1
   904  0435  1D03               	skipz
   905  0436  2C31               	goto	l1986
   906                           
   907                           ;wallclock.c: 56: {
   908                           ;wallclock.c: 57: if((secs % 5) == 0)
   909  0437  3005               	movlw	5
   910  0438  00C7               	movwf	___awmod@divisor
   911  0439  3000               	movlw	0
   912  043A  00C8               	movwf	___awmod@divisor+1
   913  043B  0834               	movf	_secs,w
   914  043C  00DF               	movwf	??_main
   915  043D  01E0               	clrf	??_main+1
   916  043E  085F               	movf	??_main,w
   917  043F  00C9               	movwf	___awmod@dividend
   918  0440  0860               	movf	??_main+1,w
   919  0441  00CA               	movwf	___awmod@dividend+1
   920  0442  2592               	fcall	___awmod
   921  0443  1283               	bcf	3,5	;RP0=0, select bank0
   922  0444  1303               	bcf	3,6	;RP1=0, select bank0
   923  0445  0848               	movf	?___awmod+1,w
   924  0446  0447               	iorwf	?___awmod,w
   925  0447  1D03               	skipz
   926  0448  2C59               	goto	l1996
   927                           
   928                           ;wallclock.c: 58: {
   929                           ;wallclock.c: 59: ran = rand();
   930  0449  2539               	fcall	_rand
   931  044A  1283               	bcf	3,5	;RP0=0, select bank0
   932  044B  1303               	bcf	3,6	;RP1=0, select bank0
   933  044C  0855               	movf	?_rand+1,w
   934  044D  01A7               	clrf	_ran+1
   935  044E  07A7               	addwf	_ran+1,f
   936  044F  0854               	movf	?_rand,w
   937  0450  01A6               	clrf	_ran
   938  0451  07A6               	addwf	_ran,f
   939                           
   940                           ;wallclock.c: 60: if((ran % 2) == 0)
   941  0452  1826               	btfsc	_ran,0
   942  0453  2C57               	goto	l186
   943                           
   944                           ;wallclock.c: 61: eagle_flag = 1;
   945  0454  01AF               	clrf	_eagle_flag
   946  0455  0AAF               	incf	_eagle_flag,f
   947  0456  2C59               	goto	l1996
   948  0457                     l186:	
   949                           
   950                           ;wallclock.c: 62: else
   951                           ;wallclock.c: 63: date_flag = 1;
   952  0457  01E2               	clrf	_date_flag
   953  0458  0AE2               	incf	_date_flag,f
   954  0459                     l1996:	
   955                           
   956                           ;wallclock.c: 64: }
   957                           ;wallclock.c: 66: update_time();
   958  0459  2652               	fcall	_update_time
   959                           
   960                           ;wallclock.c: 67: display_time();
   961  045A  2044               	fcall	_display_time
   962                           
   963                           ;wallclock.c: 68: sec_flag = 0;
   964  045B  1283               	bcf	3,5	;RP0=0, select bank0
   965  045C  1303               	bcf	3,6	;RP1=0, select bank0
   966  045D  01B3               	clrf	_sec_flag
   967                           
   968                           ;wallclock.c: 69: if(alarm_bell == 1 && secs < 15)
   969  045E  082B               	movf	_alarm_bell,w
   970  045F  3A01               	xorlw	1
   971  0460  1D03               	skipz
   972  0461  2C68               	goto	l188
   973  0462  300F               	movlw	15
   974  0463  0234               	subwf	_secs,w
   975  0464  1803               	skipnc
   976  0465  2C68               	goto	l188
   977                           
   978                           ;wallclock.c: 70: RC5 = 1;
   979  0466  1687               	bsf	7,5	;volatile
   980  0467  2C69               	goto	l2006
   981  0468                     l188:	
   982                           
   983                           ;wallclock.c: 71: else
   984                           ;wallclock.c: 72: RC5 = 0;
   985  0468  1287               	bcf	7,5	;volatile
   986  0469                     l2006:	
   987                           
   988                           ;wallclock.c: 73: if(beeps > 0)
   989  0469  082E               	movf	_beeps,w
   990  046A  1903               	btfsc	3,2
   991  046B  2C31               	goto	l1986
   992                           
   993                           ;wallclock.c: 74: {
   994                           ;wallclock.c: 75: RB1 = ~RB1;
   995  046C  3002               	movlw	2
   996  046D  0686               	xorwf	6,f
   997                           
   998                           ;wallclock.c: 76: beeps--;
   999  046E  3001               	movlw	1
  1000  046F  02AE               	subwf	_beeps,f
  1001  0470  2C31               	goto	l1986
  1002  0471                     __end_of_main:	
  1003                           
  1004                           	psect	text1
  1005  0652                     __ptext1:	
  1006 ;; *************** function _update_time *****************
  1007 ;; Defined at:
  1008 ;;		line 3 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\timekeeper.C"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;		None               void
  1015 ;; Registers used:
  1016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1
  1022 ;;      Params:         0       0       0
  1023 ;;      Locals:         0       0       0
  1024 ;;      Temps:          0       1       0
  1025 ;;      Totals:         0       1       0
  1026 ;;Total ram usage:        1 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    3
  1029 ;; This function calls:
  1030 ;;		_check_alarm
  1031 ;;		_update_date
  1032 ;; This function is called by:
  1033 ;;		_main
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           
  1038                           ;psect for function _update_time
  1039  0652                     _update_time:	
  1040                           
  1041                           ;timekeeper.C: 6: if(secs == 60)
  1042                           
  1043                           ;incstack = 0
  1044                           ; Regs used in _update_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1045  0652  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0653  1303               	bcf	3,6	;RP1=0, select bank0
  1047  0654  0834               	movf	_secs,w
  1048  0655  3A3C               	xorlw	60
  1049  0656  1D03               	skipz
  1050  0657  0008               	return
  1051                           
  1052                           ;timekeeper.C: 7: {
  1053                           ;timekeeper.C: 8: secs = 0;
  1054  0658  01B4               	clrf	_secs
  1055                           
  1056                           ;timekeeper.C: 9: mins++;
  1057  0659  3001               	movlw	1
  1058  065A  00C9               	movwf	??_update_time
  1059  065B  0849               	movf	??_update_time,w
  1060  065C  07B1               	addwf	_mins,f
  1061                           
  1062                           ;timekeeper.C: 10: if(mins == 60)
  1063  065D  0831               	movf	_mins,w
  1064  065E  3A3C               	xorlw	60
  1065  065F  1D03               	skipz
  1066  0660  2E72               	goto	l1824
  1067                           
  1068                           ;timekeeper.C: 11: {
  1069                           ;timekeeper.C: 12: mins = 0;
  1070  0661  01B1               	clrf	_mins
  1071                           
  1072                           ;timekeeper.C: 13: hrs++;
  1073  0662  3001               	movlw	1
  1074  0663  00C9               	movwf	??_update_time
  1075  0664  0849               	movf	??_update_time,w
  1076  0665  07E4               	addwf	_hrs,f
  1077                           
  1078                           ;timekeeper.C: 14: if(hrs == 24)
  1079  0666  0864               	movf	_hrs,w
  1080  0667  3A18               	xorlw	24
  1081  0668  1D03               	skipz
  1082  0669  2E70               	goto	l1822
  1083                           
  1084                           ;timekeeper.C: 15: {
  1085                           ;timekeeper.C: 16: hrs = 0;
  1086  066A  01E4               	clrf	_hrs
  1087                           
  1088                           ;timekeeper.C: 17: update_date();
  1089  066B  2320               	fcall	_update_date
  1090                           
  1091                           ;timekeeper.C: 18: date_flag = 1;
  1092  066C  1283               	bcf	3,5	;RP0=0, select bank0
  1093  066D  1303               	bcf	3,6	;RP1=0, select bank0
  1094  066E  01E2               	clrf	_date_flag
  1095  066F  0AE2               	incf	_date_flag,f
  1096  0670                     l1822:	
  1097                           
  1098                           ;timekeeper.C: 19: }
  1099                           ;timekeeper.C: 20: hrs_flag = 1;
  1100  0670  01B0               	clrf	_hrs_flag
  1101  0671  0AB0               	incf	_hrs_flag,f
  1102  0672                     l1824:	
  1103                           
  1104                           ;timekeeper.C: 21: }
  1105                           ;timekeeper.C: 22: min_flag = 1;
  1106  0672  01E5               	clrf	_min_flag
  1107  0673  0AE5               	incf	_min_flag,f
  1108                           
  1109                           ;timekeeper.C: 23: if(alarm_flag == 1)
  1110  0674  082C               	movf	_alarm_flag,w
  1111  0675  3A01               	xorlw	1
  1112  0676  1D03               	skipz
  1113  0677  0008               	return
  1114                           
  1115                           ;timekeeper.C: 24: check_alarm();
  1116  0678  270D               	fcall	_check_alarm
  1117  0679  0008               	return
  1118  067A                     __end_of_update_time:	
  1119                           ;timekeeper.C: 25: }
  1120                           ;timekeeper.C: 26: return;
  1121                           
  1122                           
  1123                           	psect	text2
  1124  0320                     __ptext2:	
  1125 ;; *************** function _update_date *****************
  1126 ;; Defined at:
  1127 ;;		line 29 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\timekeeper.C"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;  temp            1    1[BANK0 ] unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;		None               void
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMMON   BANK0   BANK1
  1141 ;;      Params:         0       0       0
  1142 ;;      Locals:         0       1       0
  1143 ;;      Temps:          0       1       0
  1144 ;;      Totals:         0       2       0
  1145 ;;Total ram usage:        2 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    2
  1148 ;; This function calls:
  1149 ;;		Nothing
  1150 ;; This function is called by:
  1151 ;;		_update_time
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           
  1156                           ;psect for function _update_date
  1157  0320                     _update_date:	
  1158                           
  1159                           ;timekeeper.C: 31: unsigned char temp;
  1160                           ;timekeeper.C: 32: switch(day)
  1161                           
  1162                           ;incstack = 0
  1163                           ; Regs used in _update_date: [wreg-fsr0h+status,2+status,0]
  1164  0320  2B8B               	goto	l1596
  1165  0321                     l1542:	
  1166                           ;timekeeper.C: 33: {
  1167                           ;timekeeper.C: 34: case 28:
  1168                           
  1169                           
  1170                           ;timekeeper.C: 35: if(month == 2)
  1171  0321  1283               	bcf	3,5	;RP0=0, select bank0
  1172  0322  1303               	bcf	3,6	;RP1=0, select bank0
  1173  0323  0866               	movf	_month,w
  1174  0324  3A02               	xorlw	2
  1175  0325  1D03               	skipz
  1176  0326  2B3B               	goto	l1554
  1177                           
  1178                           ;timekeeper.C: 36: {
  1179                           ;timekeeper.C: 38: temp = year % 4;
  1180  0327  0867               	movf	_year,w
  1181  0328  3903               	andlw	3
  1182  0329  00C7               	movwf	??_update_date
  1183  032A  0847               	movf	??_update_date,w
  1184  032B  00C8               	movwf	update_date@temp
  1185                           
  1186                           ;timekeeper.C: 39: if(temp == 0)
  1187  032C  08C8               	movf	update_date@temp,f
  1188  032D  1D03               	skipz
  1189  032E  2B34               	goto	l1550
  1190                           
  1191                           ;timekeeper.C: 40: day++;
  1192  032F  3001               	movlw	1
  1193  0330  00C7               	movwf	??_update_date
  1194  0331  0847               	movf	??_update_date,w
  1195  0332  07E3               	addwf	_day,f
  1196  0333  0008               	return
  1197  0334                     l1550:	
  1198                           
  1199                           ;timekeeper.C: 41: else
  1200                           ;timekeeper.C: 42: {
  1201                           ;timekeeper.C: 43: month++;
  1202  0334  3001               	movlw	1
  1203  0335  00C7               	movwf	??_update_date
  1204  0336  0847               	movf	??_update_date,w
  1205  0337  07E6               	addwf	_month,f
  1206                           
  1207                           ;timekeeper.C: 44: day = 1;
  1208  0338  01E3               	clrf	_day
  1209  0339  0AE3               	incf	_day,f
  1210                           
  1211                           ;timekeeper.C: 45: }
  1212                           ;timekeeper.C: 46: }
  1213  033A  0008               	return
  1214  033B                     l1554:	
  1215                           
  1216                           ;timekeeper.C: 47: else
  1217                           ;timekeeper.C: 48: day++;
  1218  033B  3001               	movlw	1
  1219  033C  00C7               	movwf	??_update_date
  1220  033D  0847               	movf	??_update_date,w
  1221  033E  07E3               	addwf	_day,f
  1222                           
  1223                           ;timekeeper.C: 49: break;
  1224  033F  0008               	return
  1225  0340                     l1556:	
  1226                           ;timekeeper.C: 50: case 29:
  1227                           
  1228                           
  1229                           ;timekeeper.C: 52: if(month == 2)
  1230  0340  0866               	movf	_month,w
  1231  0341  3A02               	xorlw	2
  1232  0342  1D03               	skipz
  1233  0343  2B4B               	goto	l1562
  1234                           
  1235                           ;timekeeper.C: 53: {
  1236                           ;timekeeper.C: 54: month++;
  1237  0344  3001               	movlw	1
  1238  0345  00C7               	movwf	??_update_date
  1239  0346  0847               	movf	??_update_date,w
  1240  0347  07E6               	addwf	_month,f
  1241                           
  1242                           ;timekeeper.C: 55: day = 1;
  1243  0348  01E3               	clrf	_day
  1244  0349  0AE3               	incf	_day,f
  1245                           
  1246                           ;timekeeper.C: 56: }
  1247  034A  0008               	return
  1248  034B                     l1562:	
  1249                           
  1250                           ;timekeeper.C: 57: else
  1251                           ;timekeeper.C: 58: day++;
  1252  034B  3001               	movlw	1
  1253  034C  00C7               	movwf	??_update_date
  1254  034D  0847               	movf	??_update_date,w
  1255  034E  07E3               	addwf	_day,f
  1256                           
  1257                           ;timekeeper.C: 59: break;
  1258  034F  0008               	return
  1259  0350                     l1564:	
  1260                           ;timekeeper.C: 60: case 30:
  1261                           
  1262                           
  1263                           ;timekeeper.C: 61: if(month == 4 || month == 6 || month == 9 || month == 11)
  1264  0350  0866               	movf	_month,w
  1265  0351  3A04               	xorlw	4
  1266  0352  1903               	skipnz
  1267  0353  2B60               	goto	l63
  1268  0354  0866               	movf	_month,w
  1269  0355  3A06               	xorlw	6
  1270  0356  1903               	skipnz
  1271  0357  2B60               	goto	l63
  1272  0358  0866               	movf	_month,w
  1273  0359  3A09               	xorlw	9
  1274  035A  1903               	skipnz
  1275  035B  2B60               	goto	l63
  1276  035C  0866               	movf	_month,w
  1277  035D  3A0B               	xorlw	11
  1278  035E  1D03               	skipz
  1279  035F  2B67               	goto	l1574
  1280  0360                     l63:	
  1281                           
  1282                           ;timekeeper.C: 62: {
  1283                           ;timekeeper.C: 63: day = 1;
  1284  0360  01E3               	clrf	_day
  1285  0361  0AE3               	incf	_day,f
  1286                           
  1287                           ;timekeeper.C: 64: month++;
  1288  0362  3001               	movlw	1
  1289  0363  00C7               	movwf	??_update_date
  1290  0364  0847               	movf	??_update_date,w
  1291  0365  07E6               	addwf	_month,f
  1292                           
  1293                           ;timekeeper.C: 65: }
  1294  0366  0008               	return
  1295  0367                     l1574:	
  1296                           
  1297                           ;timekeeper.C: 66: else
  1298                           ;timekeeper.C: 67: day++;
  1299  0367  3001               	movlw	1
  1300  0368  00C7               	movwf	??_update_date
  1301  0369  0847               	movf	??_update_date,w
  1302  036A  07E3               	addwf	_day,f
  1303                           
  1304                           ;timekeeper.C: 68: break;
  1305  036B  0008               	return
  1306  036C                     l1576:	
  1307                           ;timekeeper.C: 69: default :
  1308                           
  1309                           
  1310                           ;timekeeper.C: 70: if(day == 31)
  1311  036C  0863               	movf	_day,w
  1312  036D  3A1F               	xorlw	31
  1313  036E  1D03               	skipz
  1314  036F  2B86               	goto	l1592
  1315                           
  1316                           ;timekeeper.C: 71: {
  1317                           ;timekeeper.C: 72: day = 1;
  1318  0370  01E3               	clrf	_day
  1319  0371  0AE3               	incf	_day,f
  1320                           
  1321                           ;timekeeper.C: 73: month++;
  1322  0372  3001               	movlw	1
  1323  0373  00C7               	movwf	??_update_date
  1324  0374  0847               	movf	??_update_date,w
  1325  0375  07E6               	addwf	_month,f
  1326                           
  1327                           ;timekeeper.C: 74: if(month == 13)
  1328  0376  0866               	movf	_month,w
  1329  0377  3A0D               	xorlw	13
  1330  0378  1D03               	skipz
  1331  0379  0008               	return
  1332                           
  1333                           ;timekeeper.C: 75: {
  1334                           ;timekeeper.C: 76: month = 1;
  1335  037A  01E6               	clrf	_month
  1336  037B  0AE6               	incf	_month,f
  1337                           
  1338                           ;timekeeper.C: 77: year++;
  1339  037C  3001               	movlw	1
  1340  037D  00C7               	movwf	??_update_date
  1341  037E  0847               	movf	??_update_date,w
  1342  037F  07E7               	addwf	_year,f
  1343                           
  1344                           ;timekeeper.C: 78: if(year == 100)
  1345  0380  0867               	movf	_year,w
  1346  0381  3A64               	xorlw	100
  1347  0382  1D03               	skipz
  1348  0383  0008               	return
  1349                           
  1350                           ;timekeeper.C: 79: year = 0;
  1351  0384  01E7               	clrf	_year
  1352                           
  1353                           ;timekeeper.C: 80: }
  1354                           ;timekeeper.C: 81: }
  1355  0385  0008               	return
  1356  0386                     l1592:	
  1357                           
  1358                           ;timekeeper.C: 82: else
  1359                           ;timekeeper.C: 83: day++;
  1360  0386  3001               	movlw	1
  1361  0387  00C7               	movwf	??_update_date
  1362  0388  0847               	movf	??_update_date,w
  1363  0389  07E3               	addwf	_day,f
  1364                           
  1365                           ;timekeeper.C: 85: }
  1366                           
  1367                           ;timekeeper.C: 84: break;
  1368  038A  0008               	return
  1369  038B                     l1596:	
  1370  038B  1283               	bcf	3,5	;RP0=0, select bank0
  1371  038C  1303               	bcf	3,6	;RP1=0, select bank0
  1372  038D  0863               	movf	_day,w
  1373                           
  1374                           ; Switch size 1, requested type "space"
  1375                           ; Number of cases is 3, Range of values is 28 to 30
  1376                           ; switch strategies available:
  1377                           ; Name         Instructions Cycles
  1378                           ; simple_byte           10     6 (average)
  1379                           ; direct_byte           12     9 (fixed)
  1380                           ; jumptable            263     9 (fixed)
  1381                           ;	Chosen strategy is simple_byte
  1382  038E  3A1C               	xorlw	28	; case 28
  1383  038F  1903               	skipnz
  1384  0390  2B21               	goto	l1542
  1385  0391  3A01               	xorlw	1	; case 29
  1386  0392  1903               	skipnz
  1387  0393  2B40               	goto	l1556
  1388  0394  3A03               	xorlw	3	; case 30
  1389  0395  1903               	skipnz
  1390  0396  2B50               	goto	l1564
  1391  0397  2B6C               	goto	l1576
  1392  0398  0008               	return
  1393  0399                     __end_of_update_date:	
  1394                           
  1395                           	psect	text3
  1396  070D                     __ptext3:	
  1397 ;; *************** function _check_alarm *****************
  1398 ;; Defined at:
  1399 ;;		line 88 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\timekeeper.C"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;		None               void
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1
  1413 ;;      Params:         0       0       0
  1414 ;;      Locals:         0       0       0
  1415 ;;      Temps:          0       0       0
  1416 ;;      Totals:         0       0       0
  1417 ;;Total ram usage:        0 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_update_time
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           
  1428                           ;psect for function _check_alarm
  1429  070D                     _check_alarm:	
  1430                           
  1431                           ;timekeeper.C: 90: if(alarm_hrs == hrs && alarm_mins == mins)
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in _check_alarm: [wreg+status,2+status,0]
  1435  070D  1283               	bcf	3,5	;RP0=0, select bank0
  1436  070E  1303               	bcf	3,6	;RP1=0, select bank0
  1437  070F  0861               	movf	_alarm_hrs,w
  1438  0710  0664               	xorwf	_hrs,w
  1439  0711  1D03               	skipz
  1440  0712  2F1E               	goto	l1608
  1441  0713  082D               	movf	_alarm_mins,w
  1442  0714  0631               	xorwf	_mins,w
  1443  0715  1D03               	skipz
  1444  0716  2F1E               	goto	l1608
  1445                           
  1446                           ;timekeeper.C: 91: {
  1447                           ;timekeeper.C: 92: alarm_bell = 1;
  1448  0717  01AB               	clrf	_alarm_bell
  1449  0718  0AAB               	incf	_alarm_bell,f
  1450                           
  1451                           ;timekeeper.C: 93: if(alarm_auto_repeat == 0)
  1452  0719  08AA               	movf	_alarm_auto_repeat,f
  1453  071A  1D03               	skipz
  1454  071B  0008               	return
  1455                           
  1456                           ;timekeeper.C: 94: alarm_flag = 0;
  1457  071C  01AC               	clrf	_alarm_flag
  1458                           
  1459                           ;timekeeper.C: 95: }
  1460  071D  0008               	return
  1461  071E                     l1608:	
  1462                           
  1463                           ;timekeeper.C: 96: else
  1464                           ;timekeeper.C: 97: alarm_bell = 0;
  1465  071E  01AB               	clrf	_alarm_bell
  1466  071F  0008               	return
  1467  0720                     __end_of_check_alarm:	
  1468                           ;timekeeper.C: 98: return;
  1469                           
  1470                           
  1471                           	psect	text4
  1472  0539                     __ptext4:	
  1473 ;; *************** function _rand *****************
  1474 ;; Defined at:
  1475 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\rand.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  2   13[BANK0 ] int 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1
  1489 ;;      Params:         0       2       0
  1490 ;;      Locals:         0       0       0
  1491 ;;      Temps:          0       9       0
  1492 ;;      Totals:         0      11       0
  1493 ;;Total ram usage:       11 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    3
  1496 ;; This function calls:
  1497 ;;		___lmul
  1498 ;;		_srand
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _rand
  1506  0539                     _rand:	
  1507                           
  1508                           ;incstack = 0
  1509                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1510  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1511  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1512  053B  08B2               	movf	_randf,f
  1513  053C  1D03               	skipz
  1514  053D  2D43               	goto	l825
  1515  053E  3001               	movlw	1
  1516  053F  00C7               	movwf	srand@x
  1517  0540  3000               	movlw	0
  1518  0541  00C8               	movwf	srand@x+1
  1519  0542  276A               	fcall	_srand
  1520  0543                     l825:	
  1521  0543  3039               	movlw	57
  1522  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1523  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0546  00D6               	movwf	??_rand
  1525  0547  3030               	movlw	48
  1526  0548  00D7               	movwf	??_rand+1
  1527  0549  3000               	movlw	0
  1528  054A  00D8               	movwf	??_rand+2
  1529  054B  3000               	movlw	0
  1530  054C  00D9               	movwf	??_rand+3
  1531  054D  0823               	movf	_randx+3,w
  1532  054E  00CA               	movwf	___lmul@multiplier+3
  1533  054F  0822               	movf	_randx+2,w
  1534  0550  00C9               	movwf	___lmul@multiplier+2
  1535  0551  0821               	movf	_randx+1,w
  1536  0552  00C8               	movwf	___lmul@multiplier+1
  1537  0553  0820               	movf	_randx,w
  1538  0554  00C7               	movwf	___lmul@multiplier
  1539  0555  3041               	movlw	65
  1540  0556  00CE               	movwf	___lmul@multiplicand+3
  1541  0557  30C6               	movlw	198
  1542  0558  00CD               	movwf	___lmul@multiplicand+2
  1543  0559  304E               	movlw	78
  1544  055A  00CC               	movwf	___lmul@multiplicand+1
  1545  055B  306D               	movlw	109
  1546  055C  00CB               	movwf	___lmul@multiplicand
  1547  055D  25E1               	fcall	___lmul
  1548  055E  1283               	bcf	3,5	;RP0=0, select bank0
  1549  055F  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0560  0847               	movf	?___lmul,w
  1551  0561  07D6               	addwf	??_rand,f
  1552  0562  0848               	movf	?___lmul+1,w
  1553  0563  1803               	skipnc
  1554  0564  0F48               	incfsz	?___lmul+1,w
  1555  0565  2D67               	goto	u1740
  1556  0566  2D68               	goto	u1741
  1557  0567                     u1740:	
  1558  0567  07D7               	addwf	??_rand+1,f
  1559  0568                     u1741:	
  1560  0568  0849               	movf	?___lmul+2,w
  1561  0569  1803               	skipnc
  1562  056A  0F49               	incfsz	?___lmul+2,w
  1563  056B  2D6D               	goto	u1742
  1564  056C  2D6E               	goto	u1743
  1565  056D                     u1742:	
  1566  056D  07D8               	addwf	??_rand+2,f
  1567  056E                     u1743:	
  1568  056E  084A               	movf	?___lmul+3,w
  1569  056F  1803               	skipnc
  1570  0570  0A4A               	incf	?___lmul+3,w
  1571  0571  07D9               	addwf	??_rand+3,f
  1572  0572  0859               	movf	??_rand+3,w
  1573  0573  00A3               	movwf	_randx+3
  1574  0574  0858               	movf	??_rand+2,w
  1575  0575  00A2               	movwf	_randx+2
  1576  0576  0857               	movf	??_rand+1,w
  1577  0577  00A1               	movwf	_randx+1
  1578  0578  0856               	movf	??_rand,w
  1579  0579  00A0               	movwf	_randx
  1580  057A  0820               	movf	_randx,w
  1581  057B  00DA               	movwf	??_rand+4
  1582  057C  0821               	movf	_randx+1,w
  1583  057D  00DB               	movwf	??_rand+5
  1584  057E  0822               	movf	_randx+2,w
  1585  057F  00DC               	movwf	??_rand+6
  1586  0580  0823               	movf	_randx+3,w
  1587  0581  00DD               	movwf	??_rand+7
  1588  0582  3010               	movlw	16
  1589  0583  00DE               	movwf	??_rand+8
  1590  0584                     u1755:	
  1591  0584  0D5D               	rlf	??_rand+7,w
  1592  0585  0CDD               	rrf	??_rand+7,f
  1593  0586  0CDC               	rrf	??_rand+6,f
  1594  0587  0CDB               	rrf	??_rand+5,f
  1595  0588  0CDA               	rrf	??_rand+4,f
  1596  0589  0BDE               	decfsz	??_rand+8,f
  1597  058A  2D84               	goto	u1755
  1598  058B  30FF               	movlw	255
  1599  058C  055A               	andwf	??_rand+4,w
  1600  058D  00D4               	movwf	?_rand
  1601  058E  307F               	movlw	127
  1602  058F  055B               	andwf	??_rand+5,w
  1603  0590  00D5               	movwf	?_rand+1
  1604  0591  0008               	return
  1605  0592                     __end_of_rand:	
  1606                           
  1607                           	psect	text5
  1608  076A                     __ptext5:	
  1609 ;; *************** function _srand *****************
  1610 ;; Defined at:
  1611 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\rand.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  x               2    0[BANK0 ] unsigned int 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;		None               void
  1618 ;; Registers used:
  1619 ;;		wreg
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1
  1625 ;;      Params:         0       2       0
  1626 ;;      Locals:         0       0       0
  1627 ;;      Temps:          0       0       0
  1628 ;;      Totals:         0       2       0
  1629 ;;Total ram usage:        2 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    2
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;;		_rand
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _srand
  1642  076A                     _srand:	
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _srand: [wreg]
  1646  076A  1283               	bcf	3,5	;RP0=0, select bank0
  1647  076B  1303               	bcf	3,6	;RP1=0, select bank0
  1648  076C  0847               	movf	srand@x,w
  1649  076D  00A0               	movwf	_randx
  1650  076E  0848               	movf	srand@x+1,w
  1651  076F  00A1               	movwf	_randx+1
  1652  0770  01A2               	clrf	_randx+2
  1653  0771  01A3               	clrf	_randx+3
  1654  0772  01B2               	clrf	_randf
  1655  0773  0AB2               	incf	_randf,f
  1656  0774  0008               	return
  1657  0775                     __end_of_srand:	
  1658                           
  1659                           	psect	text6
  1660  05E1                     __ptext6:	
  1661 ;; *************** function ___lmul *****************
  1662 ;; Defined at:
  1663 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul32.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1666 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  product         4    9[BANK0 ] unsigned long 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  4    0[BANK0 ] unsigned long 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1
  1678 ;;      Params:         0       8       0
  1679 ;;      Locals:         0       4       0
  1680 ;;      Temps:          0       1       0
  1681 ;;      Totals:         0      13       0
  1682 ;;Total ram usage:       13 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    2
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_rand
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function ___lmul
  1694  05E1                     ___lmul:	
  1695                           
  1696                           ;incstack = 0
  1697                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1698  05E1  3000               	movlw	0
  1699  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  1700  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  1701  05E4  00D3               	movwf	___lmul@product+3
  1702  05E5  3000               	movlw	0
  1703  05E6  00D2               	movwf	___lmul@product+2
  1704  05E7  3000               	movlw	0
  1705  05E8  00D1               	movwf	___lmul@product+1
  1706  05E9  3000               	movlw	0
  1707  05EA  00D0               	movwf	___lmul@product
  1708  05EB                     l1708:	
  1709  05EB  1C47               	btfss	___lmul@multiplier,0
  1710  05EC  2E01               	goto	l1712
  1711  05ED  084B               	movf	___lmul@multiplicand,w
  1712  05EE  07D0               	addwf	___lmul@product,f
  1713  05EF  084C               	movf	___lmul@multiplicand+1,w
  1714  05F0  1103               	clrz
  1715  05F1  1803               	skipnc
  1716  05F2  3E01               	addlw	1
  1717  05F3  1D03               	btfss	3,2
  1718  05F4  07D1               	addwf	___lmul@product+1,f
  1719  05F5  084D               	movf	___lmul@multiplicand+2,w
  1720  05F6  1103               	clrz
  1721  05F7  1803               	skipnc
  1722  05F8  3E01               	addlw	1
  1723  05F9  1D03               	btfss	3,2
  1724  05FA  07D2               	addwf	___lmul@product+2,f
  1725  05FB  084E               	movf	___lmul@multiplicand+3,w
  1726  05FC  1103               	clrz
  1727  05FD  1803               	skipnc
  1728  05FE  3E01               	addlw	1
  1729  05FF  1D03               	btfss	3,2
  1730  0600  07D3               	addwf	___lmul@product+3,f
  1731  0601                     l1712:	
  1732  0601  3001               	movlw	1
  1733  0602  00CF               	movwf	??___lmul
  1734  0603                     u1475:	
  1735  0603  1003               	clrc
  1736  0604  0DCB               	rlf	___lmul@multiplicand,f
  1737  0605  0DCC               	rlf	___lmul@multiplicand+1,f
  1738  0606  0DCD               	rlf	___lmul@multiplicand+2,f
  1739  0607  0DCE               	rlf	___lmul@multiplicand+3,f
  1740  0608  0BCF               	decfsz	??___lmul,f
  1741  0609  2E03               	goto	u1475
  1742  060A  3001               	movlw	1
  1743  060B                     u1485:	
  1744  060B  1003               	clrc
  1745  060C  0CCA               	rrf	___lmul@multiplier+3,f
  1746  060D  0CC9               	rrf	___lmul@multiplier+2,f
  1747  060E  0CC8               	rrf	___lmul@multiplier+1,f
  1748  060F  0CC7               	rrf	___lmul@multiplier,f
  1749  0610  3EFF               	addlw	-1
  1750  0611  1D03               	skipz
  1751  0612  2E0B               	goto	u1485
  1752  0613  084A               	movf	___lmul@multiplier+3,w
  1753  0614  0449               	iorwf	___lmul@multiplier+2,w
  1754  0615  0448               	iorwf	___lmul@multiplier+1,w
  1755  0616  0447               	iorwf	___lmul@multiplier,w
  1756  0617  1D03               	skipz
  1757  0618  2DEB               	goto	l1708
  1758  0619  0853               	movf	___lmul@product+3,w
  1759  061A  00CA               	movwf	?___lmul+3
  1760  061B  0852               	movf	___lmul@product+2,w
  1761  061C  00C9               	movwf	?___lmul+2
  1762  061D  0851               	movf	___lmul@product+1,w
  1763  061E  00C8               	movwf	?___lmul+1
  1764  061F  0850               	movf	___lmul@product,w
  1765  0620  00C7               	movwf	?___lmul
  1766  0621  0008               	return
  1767  0622                     __end_of___lmul:	
  1768                           
  1769                           	psect	text7
  1770  0044                     __ptext7:	
  1771 ;; *************** function _display_time *****************
  1772 ;; Defined at:
  1773 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\display.C"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;		None
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  temp            1   17[BANK0 ] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;		None               void
  1780 ;; Registers used:
  1781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMMON   BANK0   BANK1
  1787 ;;      Params:         0       0       0
  1788 ;;      Locals:         0       1       0
  1789 ;;      Temps:          0       3       0
  1790 ;;      Totals:         0       4       0
  1791 ;;Total ram usage:        4 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    6
  1794 ;; This function calls:
  1795 ;;		___awdiv
  1796 ;;		___awmod
  1797 ;;		_display_date
  1798 ;;		_display_mins
  1799 ;;		_display_secs
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function _display_time
  1807  0044                     _display_time:	
  1808                           
  1809                           ;display.C: 9: char temp;
  1810                           ;display.C: 12: temp = secs;
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _display_time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1814  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0046  0834               	movf	_secs,w
  1817  0047  00D5               	movwf	??_display_time
  1818  0048  0855               	movf	??_display_time,w
  1819  0049  00D8               	movwf	display_time@temp
  1820                           
  1821                           ;display.C: 13: time_display_array[0] = temp % 10;
  1822  004A  300A               	movlw	10
  1823  004B  00C7               	movwf	___awmod@divisor
  1824  004C  3000               	movlw	0
  1825  004D  00C8               	movwf	___awmod@divisor+1
  1826  004E  0858               	movf	display_time@temp,w
  1827  004F  00D5               	movwf	??_display_time
  1828  0050  01D6               	clrf	??_display_time+1
  1829  0051  0855               	movf	??_display_time,w
  1830  0052  00C9               	movwf	___awmod@dividend
  1831  0053  0856               	movf	??_display_time+1,w
  1832  0054  00CA               	movwf	___awmod@dividend+1
  1833  0055  2592               	fcall	___awmod
  1834  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0058  0847               	movf	?___awmod,w
  1837  0059  00D7               	movwf	??_display_time+2
  1838  005A  0857               	movf	??_display_time+2,w
  1839  005B  00BD               	movwf	_time_display_array
  1840                           
  1841                           ;display.C: 14: time_display_array[1] = temp/10;
  1842  005C  300A               	movlw	10
  1843  005D  00C7               	movwf	___awdiv@divisor
  1844  005E  3000               	movlw	0
  1845  005F  00C8               	movwf	___awdiv@divisor+1
  1846  0060  0858               	movf	display_time@temp,w
  1847  0061  00D5               	movwf	??_display_time
  1848  0062  01D6               	clrf	??_display_time+1
  1849  0063  0855               	movf	??_display_time,w
  1850  0064  00C9               	movwf	___awdiv@dividend
  1851  0065  0856               	movf	??_display_time+1,w
  1852  0066  00CA               	movwf	___awdiv@dividend+1
  1853  0067  24DC               	fcall	___awdiv
  1854  0068  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0069  1303               	bcf	3,6	;RP1=0, select bank0
  1856  006A  0847               	movf	?___awdiv,w
  1857  006B  00D7               	movwf	??_display_time+2
  1858  006C  0857               	movf	??_display_time+2,w
  1859  006D  00BE               	movwf	_time_display_array+1
  1860                           
  1861                           ;display.C: 16: display_secs();
  1862  006E  2471               	fcall	_display_secs
  1863                           
  1864                           ;display.C: 17: if(min_flag == 1)
  1865  006F  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0070  1303               	bcf	3,6	;RP1=0, select bank0
  1867  0071  0865               	movf	_min_flag,w
  1868  0072  3A01               	xorlw	1
  1869  0073  1D03               	skipz
  1870  0074  28F4               	goto	l1888
  1871                           
  1872                           ;display.C: 18: {
  1873                           ;display.C: 19: temp = mins;
  1874  0075  0831               	movf	_mins,w
  1875  0076  00D5               	movwf	??_display_time
  1876  0077  0855               	movf	??_display_time,w
  1877  0078  00D8               	movwf	display_time@temp
  1878                           
  1879                           ;display.C: 20: time_display_array[2] = temp % 10;
  1880  0079  300A               	movlw	10
  1881  007A  00C7               	movwf	___awmod@divisor
  1882  007B  3000               	movlw	0
  1883  007C  00C8               	movwf	___awmod@divisor+1
  1884  007D  0858               	movf	display_time@temp,w
  1885  007E  00D5               	movwf	??_display_time
  1886  007F  01D6               	clrf	??_display_time+1
  1887  0080  0855               	movf	??_display_time,w
  1888  0081  00C9               	movwf	___awmod@dividend
  1889  0082  0856               	movf	??_display_time+1,w
  1890  0083  00CA               	movwf	___awmod@dividend+1
  1891  0084  2592               	fcall	___awmod
  1892  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1893  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0087  0847               	movf	?___awmod,w
  1895  0088  00D7               	movwf	??_display_time+2
  1896  0089  0857               	movf	??_display_time+2,w
  1897  008A  00BF               	movwf	_time_display_array+2
  1898                           
  1899                           ;display.C: 21: time_display_array[3] = temp/10;
  1900  008B  300A               	movlw	10
  1901  008C  00C7               	movwf	___awdiv@divisor
  1902  008D  3000               	movlw	0
  1903  008E  00C8               	movwf	___awdiv@divisor+1
  1904  008F  0858               	movf	display_time@temp,w
  1905  0090  00D5               	movwf	??_display_time
  1906  0091  01D6               	clrf	??_display_time+1
  1907  0092  0855               	movf	??_display_time,w
  1908  0093  00C9               	movwf	___awdiv@dividend
  1909  0094  0856               	movf	??_display_time+1,w
  1910  0095  00CA               	movwf	___awdiv@dividend+1
  1911  0096  24DC               	fcall	___awdiv
  1912  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0099  0847               	movf	?___awdiv,w
  1915  009A  00D7               	movwf	??_display_time+2
  1916  009B  0857               	movf	??_display_time+2,w
  1917  009C  00C0               	movwf	_time_display_array+3
  1918                           
  1919                           ;display.C: 23: temp = hrs;
  1920  009D  0864               	movf	_hrs,w
  1921  009E  00D5               	movwf	??_display_time
  1922  009F  0855               	movf	??_display_time,w
  1923  00A0  00D8               	movwf	display_time@temp
  1924                           
  1925                           ;display.C: 26: if(Twenty_Four_Hrs == 0 && hrs > 12)
  1926  00A1  08A8               	movf	_Twenty_Four_Hrs,f
  1927  00A2  1D03               	skipz
  1928  00A3  28AD               	goto	l1864
  1929  00A4  300D               	movlw	13
  1930  00A5  0264               	subwf	_hrs,w
  1931  00A6  1C03               	skipc
  1932  00A7  28AD               	goto	l1864
  1933                           
  1934                           ;display.C: 27: temp = hrs - 12;
  1935  00A8  0864               	movf	_hrs,w
  1936  00A9  3EF4               	addlw	244
  1937  00AA  00D5               	movwf	??_display_time
  1938  00AB  0855               	movf	??_display_time,w
  1939  00AC  00D8               	movwf	display_time@temp
  1940  00AD                     l1864:	
  1941                           
  1942                           ;display.C: 28: if(Twenty_Four_Hrs == 0 && hrs == 0)
  1943  00AD  08A8               	movf	_Twenty_Four_Hrs,f
  1944  00AE  1D03               	skipz
  1945  00AF  28B7               	goto	l286
  1946  00B0  08E4               	movf	_hrs,f
  1947  00B1  1D03               	skipz
  1948  00B2  28B7               	goto	l286
  1949                           
  1950                           ;display.C: 29: temp = 12;
  1951  00B3  300C               	movlw	12
  1952  00B4  00D5               	movwf	??_display_time
  1953  00B5  0855               	movf	??_display_time,w
  1954  00B6  00D8               	movwf	display_time@temp
  1955  00B7                     l286:	
  1956                           
  1957                           ;display.C: 31: if(hrs_flag == 1)
  1958  00B7  0830               	movf	_hrs_flag,w
  1959  00B8  3A01               	xorlw	1
  1960  00B9  1D03               	skipz
  1961  00BA  28C2               	goto	l1874
  1962                           
  1963                           ;display.C: 32: {
  1964                           ;display.C: 33: beeps = temp * 2;
  1965  00BB  0858               	movf	display_time@temp,w
  1966  00BC  00D5               	movwf	??_display_time
  1967  00BD  0755               	addwf	??_display_time,w
  1968  00BE  00D6               	movwf	??_display_time+1
  1969  00BF  0856               	movf	??_display_time+1,w
  1970  00C0  00AE               	movwf	_beeps
  1971                           
  1972                           ;display.C: 34: hrs_flag = 0;
  1973  00C1  01B0               	clrf	_hrs_flag
  1974  00C2                     l1874:	
  1975                           
  1976                           ;display.C: 35: }
  1977                           ;display.C: 37: time_display_array[4] = temp % 10;
  1978  00C2  300A               	movlw	10
  1979  00C3  00C7               	movwf	___awmod@divisor
  1980  00C4  3000               	movlw	0
  1981  00C5  00C8               	movwf	___awmod@divisor+1
  1982  00C6  0858               	movf	display_time@temp,w
  1983  00C7  00D5               	movwf	??_display_time
  1984  00C8  01D6               	clrf	??_display_time+1
  1985  00C9  0855               	movf	??_display_time,w
  1986  00CA  00C9               	movwf	___awmod@dividend
  1987  00CB  0856               	movf	??_display_time+1,w
  1988  00CC  00CA               	movwf	___awmod@dividend+1
  1989  00CD  2592               	fcall	___awmod
  1990  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1991  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  1992  00D0  0847               	movf	?___awmod,w
  1993  00D1  00D7               	movwf	??_display_time+2
  1994  00D2  0857               	movf	??_display_time+2,w
  1995  00D3  00C1               	movwf	_time_display_array+4
  1996                           
  1997                           ;display.C: 38: time_display_array[5] = temp/10;
  1998  00D4  300A               	movlw	10
  1999  00D5  00C7               	movwf	___awdiv@divisor
  2000  00D6  3000               	movlw	0
  2001  00D7  00C8               	movwf	___awdiv@divisor+1
  2002  00D8  0858               	movf	display_time@temp,w
  2003  00D9  00D5               	movwf	??_display_time
  2004  00DA  01D6               	clrf	??_display_time+1
  2005  00DB  0855               	movf	??_display_time,w
  2006  00DC  00C9               	movwf	___awdiv@dividend
  2007  00DD  0856               	movf	??_display_time+1,w
  2008  00DE  00CA               	movwf	___awdiv@dividend+1
  2009  00DF  24DC               	fcall	___awdiv
  2010  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  2011  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  2012  00E2  0847               	movf	?___awdiv,w
  2013  00E3  00D7               	movwf	??_display_time+2
  2014  00E4  0857               	movf	??_display_time+2,w
  2015  00E5  00C2               	movwf	_time_display_array+5
  2016                           
  2017                           ;display.C: 40: if(Twenty_Four_Hrs == 0 && time_display_array[5] == 0)
  2018  00E6  08A8               	movf	_Twenty_Four_Hrs,f
  2019  00E7  1D03               	skipz
  2020  00E8  28F0               	goto	l1884
  2021  00E9  08C2               	movf	_time_display_array+5,f
  2022  00EA  1D03               	skipz
  2023  00EB  28F0               	goto	l1884
  2024                           
  2025                           ;display.C: 41: time_display_array[5] = 10;
  2026  00EC  300A               	movlw	10
  2027  00ED  00D5               	movwf	??_display_time
  2028  00EE  0855               	movf	??_display_time,w
  2029  00EF  00C2               	movwf	_time_display_array+5
  2030  00F0                     l1884:	
  2031                           
  2032                           ;display.C: 43: display_mins();
  2033  00F0  2399               	fcall	_display_mins
  2034                           
  2035                           ;display.C: 45: min_flag = 0;
  2036  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  2037  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  2038  00F3  01E5               	clrf	_min_flag
  2039  00F4                     l1888:	
  2040                           
  2041                           ;display.C: 46: }
  2042                           ;display.C: 47: if(date_flag == 1)
  2043  00F4  0862               	movf	_date_flag,w
  2044  00F5  3A01               	xorlw	1
  2045  00F6  1D03               	skipz
  2046  00F7  299A               	goto	l1920
  2047                           
  2048                           ;display.C: 48: {
  2049                           ;display.C: 49: temp = year;
  2050  00F8  0867               	movf	_year,w
  2051  00F9  00D5               	movwf	??_display_time
  2052  00FA  0855               	movf	??_display_time,w
  2053  00FB  00D8               	movwf	display_time@temp
  2054                           
  2055                           ;display.C: 50: date_display_array[0] = temp % 10;
  2056  00FC  300A               	movlw	10
  2057  00FD  00C7               	movwf	___awmod@divisor
  2058  00FE  3000               	movlw	0
  2059  00FF  00C8               	movwf	___awmod@divisor+1
  2060  0100  0858               	movf	display_time@temp,w
  2061  0101  00D5               	movwf	??_display_time
  2062  0102  01D6               	clrf	??_display_time+1
  2063  0103  0855               	movf	??_display_time,w
  2064  0104  00C9               	movwf	___awmod@dividend
  2065  0105  0856               	movf	??_display_time+1,w
  2066  0106  00CA               	movwf	___awmod@dividend+1
  2067  0107  2592               	fcall	___awmod
  2068  0108  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0109  1303               	bcf	3,6	;RP1=0, select bank0
  2070  010A  0847               	movf	?___awmod,w
  2071  010B  00D7               	movwf	??_display_time+2
  2072  010C  0857               	movf	??_display_time+2,w
  2073  010D  00B5               	movwf	_date_display_array
  2074                           
  2075                           ;display.C: 51: date_display_array[0] = date_display_array[0] + 48;
  2076  010E  0835               	movf	_date_display_array,w
  2077  010F  3E30               	addlw	48
  2078  0110  00D5               	movwf	??_display_time
  2079  0111  0855               	movf	??_display_time,w
  2080  0112  00B5               	movwf	_date_display_array
  2081                           
  2082                           ;display.C: 52: date_display_array[1] = temp/10;
  2083  0113  300A               	movlw	10
  2084  0114  00C7               	movwf	___awdiv@divisor
  2085  0115  3000               	movlw	0
  2086  0116  00C8               	movwf	___awdiv@divisor+1
  2087  0117  0858               	movf	display_time@temp,w
  2088  0118  00D5               	movwf	??_display_time
  2089  0119  01D6               	clrf	??_display_time+1
  2090  011A  0855               	movf	??_display_time,w
  2091  011B  00C9               	movwf	___awdiv@dividend
  2092  011C  0856               	movf	??_display_time+1,w
  2093  011D  00CA               	movwf	___awdiv@dividend+1
  2094  011E  24DC               	fcall	___awdiv
  2095  011F  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0120  1303               	bcf	3,6	;RP1=0, select bank0
  2097  0121  0847               	movf	?___awdiv,w
  2098  0122  00D7               	movwf	??_display_time+2
  2099  0123  0857               	movf	??_display_time+2,w
  2100  0124  00B6               	movwf	_date_display_array+1
  2101                           
  2102                           ;display.C: 53: date_display_array[1] = date_display_array[1] + 48;
  2103  0125  0836               	movf	_date_display_array+1,w
  2104  0126  3E30               	addlw	48
  2105  0127  00D5               	movwf	??_display_time
  2106  0128  0855               	movf	??_display_time,w
  2107  0129  00B6               	movwf	_date_display_array+1
  2108                           
  2109                           ;display.C: 54: date_display_array[2] = '-';
  2110  012A  302D               	movlw	45
  2111  012B  00D5               	movwf	??_display_time
  2112  012C  0855               	movf	??_display_time,w
  2113  012D  00B7               	movwf	_date_display_array+2
  2114                           
  2115                           ;display.C: 56: temp = month;
  2116  012E  0866               	movf	_month,w
  2117  012F  00D5               	movwf	??_display_time
  2118  0130  0855               	movf	??_display_time,w
  2119  0131  00D8               	movwf	display_time@temp
  2120                           
  2121                           ;display.C: 57: date_display_array[3] = temp % 10;
  2122  0132  300A               	movlw	10
  2123  0133  00C7               	movwf	___awmod@divisor
  2124  0134  3000               	movlw	0
  2125  0135  00C8               	movwf	___awmod@divisor+1
  2126  0136  0858               	movf	display_time@temp,w
  2127  0137  00D5               	movwf	??_display_time
  2128  0138  01D6               	clrf	??_display_time+1
  2129  0139  0855               	movf	??_display_time,w
  2130  013A  00C9               	movwf	___awmod@dividend
  2131  013B  0856               	movf	??_display_time+1,w
  2132  013C  00CA               	movwf	___awmod@dividend+1
  2133  013D  2592               	fcall	___awmod
  2134  013E  1283               	bcf	3,5	;RP0=0, select bank0
  2135  013F  1303               	bcf	3,6	;RP1=0, select bank0
  2136  0140  0847               	movf	?___awmod,w
  2137  0141  00D7               	movwf	??_display_time+2
  2138  0142  0857               	movf	??_display_time+2,w
  2139  0143  00B8               	movwf	_date_display_array+3
  2140                           
  2141                           ;display.C: 58: date_display_array[3] = date_display_array[3] + 48;
  2142  0144  0838               	movf	_date_display_array+3,w
  2143  0145  3E30               	addlw	48
  2144  0146  00D5               	movwf	??_display_time
  2145  0147  0855               	movf	??_display_time,w
  2146  0148  00B8               	movwf	_date_display_array+3
  2147                           
  2148                           ;display.C: 59: date_display_array[4] = temp/10;
  2149  0149  300A               	movlw	10
  2150  014A  00C7               	movwf	___awdiv@divisor
  2151  014B  3000               	movlw	0
  2152  014C  00C8               	movwf	___awdiv@divisor+1
  2153  014D  0858               	movf	display_time@temp,w
  2154  014E  00D5               	movwf	??_display_time
  2155  014F  01D6               	clrf	??_display_time+1
  2156  0150  0855               	movf	??_display_time,w
  2157  0151  00C9               	movwf	___awdiv@dividend
  2158  0152  0856               	movf	??_display_time+1,w
  2159  0153  00CA               	movwf	___awdiv@dividend+1
  2160  0154  24DC               	fcall	___awdiv
  2161  0155  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0156  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0157  0847               	movf	?___awdiv,w
  2164  0158  00D7               	movwf	??_display_time+2
  2165  0159  0857               	movf	??_display_time+2,w
  2166  015A  00B9               	movwf	_date_display_array+4
  2167                           
  2168                           ;display.C: 60: date_display_array[4] = date_display_array[4] + 48;
  2169  015B  0839               	movf	_date_display_array+4,w
  2170  015C  3E30               	addlw	48
  2171  015D  00D5               	movwf	??_display_time
  2172  015E  0855               	movf	??_display_time,w
  2173  015F  00B9               	movwf	_date_display_array+4
  2174                           
  2175                           ;display.C: 61: date_display_array[5] = '-';
  2176  0160  302D               	movlw	45
  2177  0161  00D5               	movwf	??_display_time
  2178  0162  0855               	movf	??_display_time,w
  2179  0163  00BA               	movwf	_date_display_array+5
  2180                           
  2181                           ;display.C: 63: temp = day;
  2182  0164  0863               	movf	_day,w
  2183  0165  00D5               	movwf	??_display_time
  2184  0166  0855               	movf	??_display_time,w
  2185  0167  00D8               	movwf	display_time@temp
  2186                           
  2187                           ;display.C: 64: date_display_array[6] = temp % 10;
  2188  0168  300A               	movlw	10
  2189  0169  00C7               	movwf	___awmod@divisor
  2190  016A  3000               	movlw	0
  2191  016B  00C8               	movwf	___awmod@divisor+1
  2192  016C  0858               	movf	display_time@temp,w
  2193  016D  00D5               	movwf	??_display_time
  2194  016E  01D6               	clrf	??_display_time+1
  2195  016F  0855               	movf	??_display_time,w
  2196  0170  00C9               	movwf	___awmod@dividend
  2197  0171  0856               	movf	??_display_time+1,w
  2198  0172  00CA               	movwf	___awmod@dividend+1
  2199  0173  2592               	fcall	___awmod
  2200  0174  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0175  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0176  0847               	movf	?___awmod,w
  2203  0177  00D7               	movwf	??_display_time+2
  2204  0178  0857               	movf	??_display_time+2,w
  2205  0179  00BB               	movwf	_date_display_array+6
  2206                           
  2207                           ;display.C: 65: date_display_array[6] = date_display_array[6] + 48;
  2208  017A  083B               	movf	_date_display_array+6,w
  2209  017B  3E30               	addlw	48
  2210  017C  00D5               	movwf	??_display_time
  2211  017D  0855               	movf	??_display_time,w
  2212  017E  00BB               	movwf	_date_display_array+6
  2213                           
  2214                           ;display.C: 66: date_display_array[7] = temp/10;
  2215  017F  300A               	movlw	10
  2216  0180  00C7               	movwf	___awdiv@divisor
  2217  0181  3000               	movlw	0
  2218  0182  00C8               	movwf	___awdiv@divisor+1
  2219  0183  0858               	movf	display_time@temp,w
  2220  0184  00D5               	movwf	??_display_time
  2221  0185  01D6               	clrf	??_display_time+1
  2222  0186  0855               	movf	??_display_time,w
  2223  0187  00C9               	movwf	___awdiv@dividend
  2224  0188  0856               	movf	??_display_time+1,w
  2225  0189  00CA               	movwf	___awdiv@dividend+1
  2226  018A  24DC               	fcall	___awdiv
  2227  018B  1283               	bcf	3,5	;RP0=0, select bank0
  2228  018C  1303               	bcf	3,6	;RP1=0, select bank0
  2229  018D  0847               	movf	?___awdiv,w
  2230  018E  00D7               	movwf	??_display_time+2
  2231  018F  0857               	movf	??_display_time+2,w
  2232  0190  00BC               	movwf	_date_display_array+7
  2233                           
  2234                           ;display.C: 67: date_display_array[7] = date_display_array[7] + 48;
  2235  0191  083C               	movf	_date_display_array+7,w
  2236  0192  3E30               	addlw	48
  2237  0193  00D5               	movwf	??_display_time
  2238  0194  0855               	movf	??_display_time,w
  2239  0195  00BC               	movwf	_date_display_array+7
  2240                           
  2241                           ;display.C: 69: display_date();
  2242  0196  26C2               	fcall	_display_date
  2243                           
  2244                           ;display.C: 71: date_flag = 0;
  2245  0197  1283               	bcf	3,5	;RP0=0, select bank0
  2246  0198  1303               	bcf	3,6	;RP1=0, select bank0
  2247  0199  01E2               	clrf	_date_flag
  2248  019A                     l1920:	
  2249                           
  2250                           ;display.C: 72: }
  2251                           ;display.C: 73: if(eagle_flag == 1)
  2252  019A  082F               	movf	_eagle_flag,w
  2253  019B  3A01               	xorlw	1
  2254  019C  1D03               	skipz
  2255  019D  0008               	return
  2256                           
  2257                           ;display.C: 74: {
  2258                           ;display.C: 75: date_display_array[7] = ' ';
  2259  019E  3020               	movlw	32
  2260  019F  00D5               	movwf	??_display_time
  2261  01A0  0855               	movf	??_display_time,w
  2262  01A1  00BC               	movwf	_date_display_array+7
  2263                           
  2264                           ;display.C: 76: date_display_array[6] = 'E';
  2265  01A2  3045               	movlw	69
  2266  01A3  00D5               	movwf	??_display_time
  2267  01A4  0855               	movf	??_display_time,w
  2268  01A5  00BB               	movwf	_date_display_array+6
  2269                           
  2270                           ;display.C: 77: date_display_array[5] = 'A';
  2271  01A6  3041               	movlw	65
  2272  01A7  00D5               	movwf	??_display_time
  2273  01A8  0855               	movf	??_display_time,w
  2274  01A9  00BA               	movwf	_date_display_array+5
  2275                           
  2276                           ;display.C: 78: date_display_array[4] = 'G';
  2277  01AA  3047               	movlw	71
  2278  01AB  00D5               	movwf	??_display_time
  2279  01AC  0855               	movf	??_display_time,w
  2280  01AD  00B9               	movwf	_date_display_array+4
  2281                           
  2282                           ;display.C: 79: date_display_array[3] = 'L';
  2283  01AE  304C               	movlw	76
  2284  01AF  00D5               	movwf	??_display_time
  2285  01B0  0855               	movf	??_display_time,w
  2286  01B1  00B8               	movwf	_date_display_array+3
  2287                           
  2288                           ;display.C: 80: date_display_array[2] = 'E';
  2289  01B2  3045               	movlw	69
  2290  01B3  00D5               	movwf	??_display_time
  2291  01B4  0855               	movf	??_display_time,w
  2292  01B5  00B7               	movwf	_date_display_array+2
  2293                           
  2294                           ;display.C: 81: date_display_array[1] = ' ';
  2295  01B6  3020               	movlw	32
  2296  01B7  00D5               	movwf	??_display_time
  2297  01B8  0855               	movf	??_display_time,w
  2298  01B9  00B6               	movwf	_date_display_array+1
  2299                           
  2300                           ;display.C: 82: date_display_array[0] = ' ';
  2301  01BA  3020               	movlw	32
  2302  01BB  00D5               	movwf	??_display_time
  2303  01BC  0855               	movf	??_display_time,w
  2304  01BD  00B5               	movwf	_date_display_array
  2305                           
  2306                           ;display.C: 84: display_date();
  2307  01BE  26C2               	fcall	_display_date
  2308                           
  2309                           ;display.C: 86: eagle_flag = 0;
  2310  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2311  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2312  01C1  01AF               	clrf	_eagle_flag
  2313  01C2  0008               	return
  2314  01C3                     __end_of_display_time:	
  2315                           
  2316                           	psect	text8
  2317  0471                     __ptext8:	
  2318 ;; *************** function _display_secs *****************
  2319 ;; Defined at:
  2320 ;;		line 90 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\display.C"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;		None
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  digit           2   10[BANK0 ] unsigned short 
  2325 ;;  bits            2    8[BANK0 ] unsigned short 
  2326 ;;  Mask            2    6[BANK0 ] unsigned short 
  2327 ;;  Flag            2    4[BANK0 ] unsigned short 
  2328 ;;  number          2    2[BANK0 ] unsigned short 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;		None               void
  2331 ;; Registers used:
  2332 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMMON   BANK0   BANK1
  2338 ;;      Params:         0       0       0
  2339 ;;      Locals:         0      10       0
  2340 ;;      Temps:          0       2       0
  2341 ;;      Totals:         0      12       0
  2342 ;;Total ram usage:       12 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    2
  2345 ;; This function calls:
  2346 ;;		Nothing
  2347 ;; This function is called by:
  2348 ;;		_display_time
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           
  2353                           ;psect for function _display_secs
  2354  0471                     _display_secs:	
  2355                           
  2356                           ;display.C: 92: unsigned short Mask, bits, Flag, digit, number;
  2357                           ;display.C: 93: for(digit = 0; digit < 2; digit++)
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in _display_secs: [wreg-fsr0h+status,2+status,0]
  2361  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0472  1303               	bcf	3,6	;RP1=0, select bank0
  2363  0473  01D1               	clrf	display_secs@digit
  2364  0474  01D2               	clrf	display_secs@digit+1
  2365  0475  3000               	movlw	0
  2366  0476  0252               	subwf	display_secs@digit+1,w
  2367  0477  3002               	movlw	2
  2368  0478  1903               	skipnz
  2369  0479  0251               	subwf	display_secs@digit,w
  2370  047A  1803               	btfsc	3,0
  2371  047B  2CD6               	goto	l295
  2372  047C                     l1622:	
  2373                           
  2374                           ;display.C: 94: {
  2375                           ;display.C: 96: number = display[time_display_array[digit]];
  2376  047C  0851               	movf	display_secs@digit,w
  2377  047D  3E3D               	addlw	_time_display_array& (0+255)
  2378  047E  0084               	movwf	4
  2379  047F  1383               	bcf	3,7	;select IRP bank0
  2380  0480  0800               	movf	0,w
  2381  0481  3EA0               	addlw	_display& (0+255)
  2382  0482  0084               	movwf	4
  2383  0483  0800               	movf	0,w
  2384  0484  00C7               	movwf	??_display_secs
  2385  0485  01C8               	clrf	??_display_secs+1
  2386  0486  0847               	movf	??_display_secs,w
  2387  0487  00C9               	movwf	display_secs@number
  2388  0488  0848               	movf	??_display_secs+1,w
  2389  0489  00CA               	movwf	display_secs@number+1
  2390                           
  2391                           ;display.C: 97: Mask = 0x01;
  2392  048A  3001               	movlw	1
  2393  048B  00CD               	movwf	display_secs@Mask
  2394  048C  3000               	movlw	0
  2395  048D  00CE               	movwf	display_secs@Mask+1
  2396                           
  2397                           ;display.C: 98: for (bits=0; bits<8; bits++)
  2398  048E  01CF               	clrf	display_secs@bits
  2399  048F  01D0               	clrf	display_secs@bits+1
  2400  0490  3000               	movlw	0
  2401  0491  0250               	subwf	display_secs@bits+1,w
  2402  0492  3008               	movlw	8
  2403  0493  1903               	skipnz
  2404  0494  024F               	subwf	display_secs@bits,w
  2405  0495  1803               	btfsc	3,0
  2406  0496  2CC9               	goto	l1644
  2407  0497                     l1632:	
  2408                           
  2409                           ;display.C: 99: {
  2410                           ;display.C: 100: Flag = number & Mask;
  2411  0497  084D               	movf	display_secs@Mask,w
  2412  0498  0549               	andwf	display_secs@number,w
  2413  0499  00CB               	movwf	display_secs@Flag
  2414  049A  084E               	movf	display_secs@Mask+1,w
  2415  049B  054A               	andwf	display_secs@number+1,w
  2416  049C  00CC               	movwf	display_secs@Flag+1
  2417                           
  2418                           ;display.C: 101: if(Flag == 0)
  2419  049D  084C               	movf	display_secs@Flag+1,w
  2420  049E  044B               	iorwf	display_secs@Flag,w
  2421  049F  1D03               	skipz
  2422  04A0  2CAA               	goto	l1638
  2423                           
  2424                           ;display.C: 102: {
  2425                           ;display.C: 103: RB2 = 0;
  2426  04A1  1106               	bcf	6,2	;volatile
  2427                           
  2428                           ;display.C: 104: _delay(1);
  2429  04A2  0000               	nop
  2430                           
  2431                           ;display.C: 105: RB3 = 1;
  2432  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2433  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2434  04A5  1586               	bsf	6,3	;volatile
  2435                           
  2436                           ;display.C: 106: _delay(1);
  2437  04A6  0000               	nop
  2438                           
  2439                           ;display.C: 107: RB3 = 0;
  2440  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2441  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2442  04A9  1186               	bcf	6,3	;volatile
  2443  04AA                     l1638:	
  2444                           
  2445                           ;display.C: 108: }
  2446                           ;display.C: 109: if(Flag > 0)
  2447  04AA  084C               	movf	display_secs@Flag+1,w
  2448  04AB  044B               	iorwf	display_secs@Flag,w
  2449  04AC  1903               	skipnz
  2450  04AD  2CB7               	goto	l1642
  2451                           
  2452                           ;display.C: 110: {
  2453                           ;display.C: 111: RB2 = 1;
  2454  04AE  1506               	bsf	6,2	;volatile
  2455                           
  2456                           ;display.C: 112: _delay(1);
  2457  04AF  0000               	nop
  2458                           
  2459                           ;display.C: 113: RB3 = 1;
  2460  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2461  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2462  04B2  1586               	bsf	6,3	;volatile
  2463                           
  2464                           ;display.C: 114: _delay(1);
  2465  04B3  0000               	nop
  2466                           
  2467                           ;display.C: 115: RB3 = 0;
  2468  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  2469  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  2470  04B6  1186               	bcf	6,3	;volatile
  2471  04B7                     l1642:	
  2472                           
  2473                           ;display.C: 116: }
  2474                           ;display.C: 117: Mask = Mask << 1;
  2475  04B7  1003               	clrc
  2476  04B8  0D4D               	rlf	display_secs@Mask,w
  2477  04B9  00CD               	movwf	display_secs@Mask
  2478  04BA  0D4E               	rlf	display_secs@Mask+1,w
  2479  04BB  00CE               	movwf	display_secs@Mask+1
  2480  04BC  3001               	movlw	1
  2481  04BD  07CF               	addwf	display_secs@bits,f
  2482  04BE  1803               	skipnc
  2483  04BF  0AD0               	incf	display_secs@bits+1,f
  2484  04C0  3000               	movlw	0
  2485  04C1  07D0               	addwf	display_secs@bits+1,f
  2486  04C2  3000               	movlw	0
  2487  04C3  0250               	subwf	display_secs@bits+1,w
  2488  04C4  3008               	movlw	8
  2489  04C5  1903               	skipnz
  2490  04C6  024F               	subwf	display_secs@bits,w
  2491  04C7  1C03               	skipc
  2492  04C8  2C97               	goto	l1632
  2493  04C9                     l1644:	
  2494  04C9  3001               	movlw	1
  2495  04CA  07D1               	addwf	display_secs@digit,f
  2496  04CB  1803               	skipnc
  2497  04CC  0AD2               	incf	display_secs@digit+1,f
  2498  04CD  3000               	movlw	0
  2499  04CE  07D2               	addwf	display_secs@digit+1,f
  2500  04CF  3000               	movlw	0
  2501  04D0  0252               	subwf	display_secs@digit+1,w
  2502  04D1  3002               	movlw	2
  2503  04D2  1903               	skipnz
  2504  04D3  0251               	subwf	display_secs@digit,w
  2505  04D4  1C03               	skipc
  2506  04D5  2C7C               	goto	l1622
  2507  04D6                     l295:	
  2508                           
  2509                           ;display.C: 118: }
  2510                           ;display.C: 119: }
  2511                           ;display.C: 121: RB4 = 1;
  2512  04D6  1606               	bsf	6,4	;volatile
  2513                           
  2514                           ;display.C: 122: _delay(1);
  2515  04D7  0000               	nop
  2516                           
  2517                           ;display.C: 123: RB4 = 0;
  2518  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2519  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2520  04DA  1206               	bcf	6,4	;volatile
  2521  04DB  0008               	return
  2522  04DC                     __end_of_display_secs:	
  2523                           
  2524                           	psect	text9
  2525  0399                     __ptext9:	
  2526 ;; *************** function _display_mins *****************
  2527 ;; Defined at:
  2528 ;;		line 126 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\display.C"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  digit           2   10[BANK0 ] unsigned short 
  2533 ;;  bits            2    8[BANK0 ] unsigned short 
  2534 ;;  Mask            2    6[BANK0 ] unsigned short 
  2535 ;;  Flag            2    4[BANK0 ] unsigned short 
  2536 ;;  number          2    2[BANK0 ] unsigned short 
  2537 ;; Return value:  Size  Location     Type
  2538 ;;		None               void
  2539 ;; Registers used:
  2540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1
  2546 ;;      Params:         0       0       0
  2547 ;;      Locals:         0      10       0
  2548 ;;      Temps:          0       2       0
  2549 ;;      Totals:         0      12       0
  2550 ;;Total ram usage:       12 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    2
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_display_time
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _display_mins
  2562  0399                     _display_mins:	
  2563                           
  2564                           ;display.C: 128: unsigned short Mask, bits, Flag, digit, number;
  2565                           ;display.C: 129: for(digit = 2; digit < 6; digit++)
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _display_mins: [wreg-fsr0h+status,2+status,0]
  2569  0399  3002               	movlw	2
  2570  039A  1283               	bcf	3,5	;RP0=0, select bank0
  2571  039B  1303               	bcf	3,6	;RP1=0, select bank0
  2572  039C  00D1               	movwf	display_mins@digit
  2573  039D  3000               	movlw	0
  2574  039E  00D2               	movwf	display_mins@digit+1
  2575  039F  3000               	movlw	0
  2576  03A0  0252               	subwf	display_mins@digit+1,w
  2577  03A1  3006               	movlw	6
  2578  03A2  1903               	skipnz
  2579  03A3  0251               	subwf	display_mins@digit,w
  2580  03A4  1803               	btfsc	3,0
  2581  03A5  2C00               	goto	l304
  2582  03A6                     l1650:	
  2583                           
  2584                           ;display.C: 130: {
  2585                           ;display.C: 132: number = display[time_display_array[digit]];
  2586  03A6  0851               	movf	display_mins@digit,w
  2587  03A7  3E3D               	addlw	_time_display_array& (0+255)
  2588  03A8  0084               	movwf	4
  2589  03A9  1383               	bcf	3,7	;select IRP bank0
  2590  03AA  0800               	movf	0,w
  2591  03AB  3EA0               	addlw	_display& (0+255)
  2592  03AC  0084               	movwf	4
  2593  03AD  0800               	movf	0,w
  2594  03AE  00C7               	movwf	??_display_mins
  2595  03AF  01C8               	clrf	??_display_mins+1
  2596  03B0  0847               	movf	??_display_mins,w
  2597  03B1  00C9               	movwf	display_mins@number
  2598  03B2  0848               	movf	??_display_mins+1,w
  2599  03B3  00CA               	movwf	display_mins@number+1
  2600                           
  2601                           ;display.C: 133: Mask = 0x01;
  2602  03B4  3001               	movlw	1
  2603  03B5  00CD               	movwf	display_mins@Mask
  2604  03B6  3000               	movlw	0
  2605  03B7  00CE               	movwf	display_mins@Mask+1
  2606                           
  2607                           ;display.C: 134: for (bits=0; bits<8; bits++)
  2608  03B8  01CF               	clrf	display_mins@bits
  2609  03B9  01D0               	clrf	display_mins@bits+1
  2610  03BA  3000               	movlw	0
  2611  03BB  0250               	subwf	display_mins@bits+1,w
  2612  03BC  3008               	movlw	8
  2613  03BD  1903               	skipnz
  2614  03BE  024F               	subwf	display_mins@bits,w
  2615  03BF  1803               	btfsc	3,0
  2616  03C0  2BF3               	goto	l1672
  2617  03C1                     l1660:	
  2618                           
  2619                           ;display.C: 135: {
  2620                           ;display.C: 136: Flag = number & Mask;
  2621  03C1  084D               	movf	display_mins@Mask,w
  2622  03C2  0549               	andwf	display_mins@number,w
  2623  03C3  00CB               	movwf	display_mins@Flag
  2624  03C4  084E               	movf	display_mins@Mask+1,w
  2625  03C5  054A               	andwf	display_mins@number+1,w
  2626  03C6  00CC               	movwf	display_mins@Flag+1
  2627                           
  2628                           ;display.C: 137: if(Flag == 0)
  2629  03C7  084C               	movf	display_mins@Flag+1,w
  2630  03C8  044B               	iorwf	display_mins@Flag,w
  2631  03C9  1D03               	skipz
  2632  03CA  2BD4               	goto	l1666
  2633                           
  2634                           ;display.C: 138: {
  2635                           ;display.C: 139: RB5 = 0;
  2636  03CB  1286               	bcf	6,5	;volatile
  2637                           
  2638                           ;display.C: 140: _delay(1);
  2639  03CC  0000               	nop
  2640                           
  2641                           ;display.C: 141: RB6 = 1;
  2642  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2643  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2644  03CF  1706               	bsf	6,6	;volatile
  2645                           
  2646                           ;display.C: 142: _delay(1);
  2647  03D0  0000               	nop
  2648                           
  2649                           ;display.C: 143: RB6 = 0;
  2650  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2651  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2652  03D3  1306               	bcf	6,6	;volatile
  2653  03D4                     l1666:	
  2654                           
  2655                           ;display.C: 144: }
  2656                           ;display.C: 145: if(Flag > 0)
  2657  03D4  084C               	movf	display_mins@Flag+1,w
  2658  03D5  044B               	iorwf	display_mins@Flag,w
  2659  03D6  1903               	skipnz
  2660  03D7  2BE1               	goto	l1670
  2661                           
  2662                           ;display.C: 146: {
  2663                           ;display.C: 147: RB5 = 1;
  2664  03D8  1686               	bsf	6,5	;volatile
  2665                           
  2666                           ;display.C: 148: _delay(1);
  2667  03D9  0000               	nop
  2668                           
  2669                           ;display.C: 149: RB6 = 1;
  2670  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2671  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2672  03DC  1706               	bsf	6,6	;volatile
  2673                           
  2674                           ;display.C: 150: _delay(1);
  2675  03DD  0000               	nop
  2676                           
  2677                           ;display.C: 151: RB6 = 0;
  2678  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2679  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2680  03E0  1306               	bcf	6,6	;volatile
  2681  03E1                     l1670:	
  2682                           
  2683                           ;display.C: 152: }
  2684                           ;display.C: 153: Mask = Mask << 1;
  2685  03E1  1003               	clrc
  2686  03E2  0D4D               	rlf	display_mins@Mask,w
  2687  03E3  00CD               	movwf	display_mins@Mask
  2688  03E4  0D4E               	rlf	display_mins@Mask+1,w
  2689  03E5  00CE               	movwf	display_mins@Mask+1
  2690  03E6  3001               	movlw	1
  2691  03E7  07CF               	addwf	display_mins@bits,f
  2692  03E8  1803               	skipnc
  2693  03E9  0AD0               	incf	display_mins@bits+1,f
  2694  03EA  3000               	movlw	0
  2695  03EB  07D0               	addwf	display_mins@bits+1,f
  2696  03EC  3000               	movlw	0
  2697  03ED  0250               	subwf	display_mins@bits+1,w
  2698  03EE  3008               	movlw	8
  2699  03EF  1903               	skipnz
  2700  03F0  024F               	subwf	display_mins@bits,w
  2701  03F1  1C03               	skipc
  2702  03F2  2BC1               	goto	l1660
  2703  03F3                     l1672:	
  2704  03F3  3001               	movlw	1
  2705  03F4  07D1               	addwf	display_mins@digit,f
  2706  03F5  1803               	skipnc
  2707  03F6  0AD2               	incf	display_mins@digit+1,f
  2708  03F7  3000               	movlw	0
  2709  03F8  07D2               	addwf	display_mins@digit+1,f
  2710  03F9  3000               	movlw	0
  2711  03FA  0252               	subwf	display_mins@digit+1,w
  2712  03FB  3006               	movlw	6
  2713  03FC  1903               	skipnz
  2714  03FD  0251               	subwf	display_mins@digit,w
  2715  03FE  1C03               	skipc
  2716  03FF  2BA6               	goto	l1650
  2717  0400                     l304:	
  2718                           
  2719                           ;display.C: 154: }
  2720                           ;display.C: 155: }
  2721                           ;display.C: 157: RB7 = 1;
  2722  0400  1786               	bsf	6,7	;volatile
  2723                           
  2724                           ;display.C: 158: _delay(1);
  2725  0401  0000               	nop
  2726                           
  2727                           ;display.C: 159: RB7 = 0;
  2728  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0404  1386               	bcf	6,7	;volatile
  2731  0405  0008               	return
  2732  0406                     __end_of_display_mins:	
  2733                           
  2734                           	psect	text10
  2735  06C2                     __ptext10:	
  2736 ;; *************** function _display_date *****************
  2737 ;; Defined at:
  2738 ;;		line 162 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\display.C"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;		None
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  i               1   13[BANK0 ] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1
  2752 ;;      Params:         0       0       0
  2753 ;;      Locals:         0       1       0
  2754 ;;      Temps:          0       1       0
  2755 ;;      Totals:         0       2       0
  2756 ;;Total ram usage:        2 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    5
  2759 ;; This function calls:
  2760 ;;		_MAX7219_DisplayChar
  2761 ;; This function is called by:
  2762 ;;		_display_time
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function _display_date
  2768  06C2                     _display_date:	
  2769                           
  2770                           ;display.C: 164: char i;
  2771                           ;display.C: 165: for(i = 1; i <= 8; i++)
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _display_date: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2775  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  2776  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  2777  06C4  01D4               	clrf	display_date@i
  2778  06C5  0AD4               	incf	display_date@i,f
  2779  06C6                     L1:	
  2780  06C6  3009               	movlw	9
  2781  06C7  0254               	subwf	display_date@i,w
  2782  06C8  1803               	btfsc	3,0
  2783  06C9  0008               	return
  2784                           
  2785                           ;display.C: 166: {
  2786                           ;display.C: 167: MAX7219_DisplayChar (i, date_display_array[i-1], 0);
  2787  06CA  0854               	movf	display_date@i,w
  2788  06CB  3EFF               	addlw	255
  2789  06CC  3E35               	addlw	_date_display_array& (0+255)
  2790  06CD  0084               	movwf	4
  2791  06CE  1383               	bcf	3,7	;select IRP bank0
  2792  06CF  0800               	movf	0,w
  2793  06D0  00D3               	movwf	??_display_date
  2794  06D1  0853               	movf	??_display_date,w
  2795  06D2  00CE               	movwf	MAX7219_DisplayChar@character
  2796  06D3  01CF               	clrf	MAX7219_DisplayChar@dot
  2797  06D4  0854               	movf	display_date@i,w
  2798  06D5  26DD               	fcall	_MAX7219_DisplayChar
  2799  06D6  3001               	movlw	1
  2800  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2801  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2802  06D9  00D3               	movwf	??_display_date
  2803  06DA  0853               	movf	??_display_date,w
  2804  06DB  07D4               	addwf	display_date@i,f
  2805  06DC  2EC6               	goto	L1
  2806  06DD                     __end_of_display_date:	
  2807                           
  2808                           	psect	text11
  2809  06DD                     __ptext11:	
  2810 ;; *************** function _MAX7219_DisplayChar *****************
  2811 ;; Defined at:
  2812 ;;		line 237 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;  digit           1    wreg     unsigned char 
  2815 ;;  character       1    7[BANK0 ] unsigned char 
  2816 ;;  dot             1    8[BANK0 ] unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  digit           1   10[BANK0 ] unsigned char 
  2819 ;;  ch              1   11[BANK0 ] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;		None               void
  2822 ;; Registers used:
  2823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMMON   BANK0   BANK1
  2829 ;;      Params:         0       2       0
  2830 ;;      Locals:         0       2       0
  2831 ;;      Temps:          0       1       0
  2832 ;;      Totals:         0       5       0
  2833 ;;Total ram usage:        5 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    4
  2836 ;; This function calls:
  2837 ;;		_MAX7219_LookupCode
  2838 ;;		_MAX7219_Write
  2839 ;; This function is called by:
  2840 ;;		_display_date
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           
  2845                           ;psect for function _MAX7219_DisplayChar
  2846  06DD                     _MAX7219_DisplayChar:	
  2847                           
  2848                           ;incstack = 0
  2849                           ; Regs used in _MAX7219_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2850                           ;MAX7219_DisplayChar@digit stored from wreg
  2851  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  2852  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  2853  06DF  00D1               	movwf	MAX7219_DisplayChar@digit
  2854                           
  2855                           ;MAX7219.C: 239: char ch;
  2856                           ;MAX7219.C: 240: ch = MAX7219_LookupCode(character);
  2857  06E0  084E               	movf	MAX7219_DisplayChar@character,w
  2858  06E1  269F               	fcall	_MAX7219_LookupCode
  2859  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  2860  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  2861  06E4  00D0               	movwf	??_MAX7219_DisplayChar
  2862  06E5  0850               	movf	??_MAX7219_DisplayChar,w
  2863  06E6  00D2               	movwf	MAX7219_DisplayChar@ch
  2864                           
  2865                           ;MAX7219.C: 241: if(dot == 1)
  2866  06E7  084F               	movf	MAX7219_DisplayChar@dot,w
  2867  06E8  3A01               	xorlw	1
  2868  06E9  1D03               	skipz
  2869  06EA  2EF0               	goto	l1538
  2870                           
  2871                           ;MAX7219.C: 242: ch = ch | 0x80;
  2872  06EB  0852               	movf	MAX7219_DisplayChar@ch,w
  2873  06EC  3880               	iorlw	128
  2874  06ED  00D0               	movwf	??_MAX7219_DisplayChar
  2875  06EE  0850               	movf	??_MAX7219_DisplayChar,w
  2876  06EF  00D2               	movwf	MAX7219_DisplayChar@ch
  2877  06F0                     l1538:	
  2878                           
  2879                           ;MAX7219.C: 243: MAX7219_Write(digit, ch);
  2880  06F0  0852               	movf	MAX7219_DisplayChar@ch,w
  2881  06F1  00D0               	movwf	??_MAX7219_DisplayChar
  2882  06F2  0850               	movf	??_MAX7219_DisplayChar,w
  2883  06F3  00CC               	movwf	MAX7219_Write@dataout
  2884  06F4  0851               	movf	MAX7219_DisplayChar@digit,w
  2885  06F5  2742               	fcall	_MAX7219_Write
  2886  06F6  0008               	return
  2887  06F7                     __end_of_MAX7219_DisplayChar:	
  2888                           
  2889                           	psect	text12
  2890  069F                     __ptext12:	
  2891 ;; *************** function _MAX7219_LookupCode *****************
  2892 ;; Defined at:
  2893 ;;		line 302 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  character       1    wreg     unsigned char 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  character       1    1[BANK0 ] unsigned char 
  2898 ;;  i               1    2[BANK0 ] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      unsigned char 
  2901 ;; Registers used:
  2902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1
  2908 ;;      Params:         0       0       0
  2909 ;;      Locals:         0       2       0
  2910 ;;      Temps:          0       1       0
  2911 ;;      Totals:         0       3       0
  2912 ;;Total ram usage:        3 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    2
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_MAX7219_DisplayChar
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _MAX7219_LookupCode
  2924  069F                     _MAX7219_LookupCode:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _MAX7219_LookupCode: [wreg-fsr0h+status,2+status,0+pclath]
  2928                           ;MAX7219_LookupCode@character stored from wreg
  2929  069F  1283               	bcf	3,5	;RP0=0, select bank0
  2930  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  2931  06A1  00C8               	movwf	MAX7219_LookupCode@character
  2932                           
  2933                           ;MAX7219.C: 304: char i;
  2934                           ;MAX7219.C: 305: for (i = 0; MAX7219_Font[i].ascii; i++)
  2935  06A2  01C9               	clrf	MAX7219_LookupCode@i
  2936  06A3                     l1526:	
  2937  06A3  0849               	movf	MAX7219_LookupCode@i,w
  2938  06A4  00C7               	movwf	??_MAX7219_LookupCode
  2939  06A5  0747               	addwf	??_MAX7219_LookupCode,w
  2940  06A6  3E01               	addlw	low (_MAX7219_Font-__stringbase)
  2941  06A7  0084               	movwf	4
  2942  06A8  2622               	fcall	stringdir
  2943  06A9  3800               	iorlw	0
  2944  06AA  1903               	btfsc	3,2
  2945  06AB  2EC0               	goto	l1528
  2946                           
  2947                           ;MAX7219.C: 306: if (character == MAX7219_Font[i].ascii)
  2948  06AC  0849               	movf	MAX7219_LookupCode@i,w
  2949  06AD  00C7               	movwf	??_MAX7219_LookupCode
  2950  06AE  0747               	addwf	??_MAX7219_LookupCode,w
  2951  06AF  3E01               	addlw	low (_MAX7219_Font-__stringbase)
  2952  06B0  0084               	movwf	4
  2953  06B1  2622               	fcall	stringdir
  2954  06B2  0648               	xorwf	MAX7219_LookupCode@character,w
  2955  06B3  1D03               	skipz
  2956  06B4  2EBB               	goto	l1524
  2957                           
  2958                           ;MAX7219.C: 307: return MAX7219_Font[i].segs;
  2959  06B5  1403               	setc
  2960  06B6  0D49               	rlf	MAX7219_LookupCode@i,w
  2961  06B7  3E01               	addlw	low (_MAX7219_Font-__stringbase)
  2962  06B8  0084               	movwf	4
  2963  06B9  2622               	fcall	stringdir
  2964  06BA  0008               	return
  2965  06BB                     l1524:	
  2966  06BB  3001               	movlw	1
  2967  06BC  00C7               	movwf	??_MAX7219_LookupCode
  2968  06BD  0847               	movf	??_MAX7219_LookupCode,w
  2969  06BE  07C9               	addwf	MAX7219_LookupCode@i,f
  2970  06BF  2EA3               	goto	l1526
  2971  06C0                     l1528:	
  2972                           
  2973                           ;MAX7219.C: 308: return 0;
  2974  06C0  3000               	movlw	0
  2975  06C1  0008               	return
  2976  06C2                     __end_of_MAX7219_LookupCode:	
  2977                           
  2978                           	psect	text13
  2979  0592                     __ptext13:	
  2980 ;; *************** function ___awmod *****************
  2981 ;; Defined at:
  2982 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awmod.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  divisor         2    0[BANK0 ] int 
  2985 ;;  dividend        2    2[BANK0 ] int 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  sign            1    6[BANK0 ] unsigned char 
  2988 ;;  counter         1    5[BANK0 ] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  2    0[BANK0 ] int 
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMMON   BANK0   BANK1
  2998 ;;      Params:         0       4       0
  2999 ;;      Locals:         0       2       0
  3000 ;;      Temps:          0       1       0
  3001 ;;      Totals:         0       7       0
  3002 ;;Total ram usage:        7 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    2
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;;		_display_time
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           
  3014                           ;psect for function ___awmod
  3015  0592                     ___awmod:	
  3016                           
  3017                           ;incstack = 0
  3018                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3019  0592  1283               	bcf	3,5	;RP0=0, select bank0
  3020  0593  1303               	bcf	3,6	;RP1=0, select bank0
  3021  0594  01CD               	clrf	___awmod@sign
  3022  0595  1FCA               	btfss	___awmod@dividend+1,7
  3023  0596  2D9E               	goto	l1772
  3024  0597  09C9               	comf	___awmod@dividend,f
  3025  0598  09CA               	comf	___awmod@dividend+1,f
  3026  0599  0AC9               	incf	___awmod@dividend,f
  3027  059A  1903               	skipnz
  3028  059B  0ACA               	incf	___awmod@dividend+1,f
  3029  059C  01CD               	clrf	___awmod@sign
  3030  059D  0ACD               	incf	___awmod@sign,f
  3031  059E                     l1772:	
  3032  059E  1FC8               	btfss	___awmod@divisor+1,7
  3033  059F  2DA5               	goto	l1776
  3034  05A0  09C7               	comf	___awmod@divisor,f
  3035  05A1  09C8               	comf	___awmod@divisor+1,f
  3036  05A2  0AC7               	incf	___awmod@divisor,f
  3037  05A3  1903               	skipnz
  3038  05A4  0AC8               	incf	___awmod@divisor+1,f
  3039  05A5                     l1776:	
  3040  05A5  0848               	movf	___awmod@divisor+1,w
  3041  05A6  0447               	iorwf	___awmod@divisor,w
  3042  05A7  1903               	skipnz
  3043  05A8  2DD2               	goto	l1794
  3044  05A9  01CC               	clrf	___awmod@counter
  3045  05AA  0ACC               	incf	___awmod@counter,f
  3046  05AB                     l1784:	
  3047  05AB  1BC8               	btfsc	___awmod@divisor+1,7
  3048  05AC  2DB9               	goto	l1786
  3049  05AD  3001               	movlw	1
  3050  05AE                     u1635:	
  3051  05AE  1003               	clrc
  3052  05AF  0DC7               	rlf	___awmod@divisor,f
  3053  05B0  0DC8               	rlf	___awmod@divisor+1,f
  3054  05B1  3EFF               	addlw	-1
  3055  05B2  1D03               	skipz
  3056  05B3  2DAE               	goto	u1635
  3057  05B4  3001               	movlw	1
  3058  05B5  00CB               	movwf	??___awmod
  3059  05B6  084B               	movf	??___awmod,w
  3060  05B7  07CC               	addwf	___awmod@counter,f
  3061  05B8  2DAB               	goto	l1784
  3062  05B9                     l1786:	
  3063  05B9  0848               	movf	___awmod@divisor+1,w
  3064  05BA  024A               	subwf	___awmod@dividend+1,w
  3065  05BB  1D03               	skipz
  3066  05BC  2DBF               	goto	u1655
  3067  05BD  0847               	movf	___awmod@divisor,w
  3068  05BE  0249               	subwf	___awmod@dividend,w
  3069  05BF                     u1655:	
  3070  05BF  1C03               	skipc
  3071  05C0  2DC7               	goto	l1790
  3072  05C1  0847               	movf	___awmod@divisor,w
  3073  05C2  02C9               	subwf	___awmod@dividend,f
  3074  05C3  0848               	movf	___awmod@divisor+1,w
  3075  05C4  1C03               	skipc
  3076  05C5  03CA               	decf	___awmod@dividend+1,f
  3077  05C6  02CA               	subwf	___awmod@dividend+1,f
  3078  05C7                     l1790:	
  3079  05C7  3001               	movlw	1
  3080  05C8                     u1665:	
  3081  05C8  1003               	clrc
  3082  05C9  0CC8               	rrf	___awmod@divisor+1,f
  3083  05CA  0CC7               	rrf	___awmod@divisor,f
  3084  05CB  3EFF               	addlw	-1
  3085  05CC  1D03               	skipz
  3086  05CD  2DC8               	goto	u1665
  3087  05CE  3001               	movlw	1
  3088  05CF  02CC               	subwf	___awmod@counter,f
  3089  05D0  1D03               	btfss	3,2
  3090  05D1  2DB9               	goto	l1786
  3091  05D2                     l1794:	
  3092  05D2  084D               	movf	___awmod@sign,w
  3093  05D3  1903               	btfsc	3,2
  3094  05D4  2DDA               	goto	l1798
  3095  05D5  09C9               	comf	___awmod@dividend,f
  3096  05D6  09CA               	comf	___awmod@dividend+1,f
  3097  05D7  0AC9               	incf	___awmod@dividend,f
  3098  05D8  1903               	skipnz
  3099  05D9  0ACA               	incf	___awmod@dividend+1,f
  3100  05DA                     l1798:	
  3101  05DA  084A               	movf	___awmod@dividend+1,w
  3102  05DB  01C8               	clrf	?___awmod+1
  3103  05DC  07C8               	addwf	?___awmod+1,f
  3104  05DD  0849               	movf	___awmod@dividend,w
  3105  05DE  01C7               	clrf	?___awmod
  3106  05DF  07C7               	addwf	?___awmod,f
  3107  05E0  0008               	return
  3108  05E1                     __end_of___awmod:	
  3109                           
  3110                           	psect	text14
  3111  04DC                     __ptext14:	
  3112 ;; *************** function ___awdiv *****************
  3113 ;; Defined at:
  3114 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  divisor         2    0[BANK0 ] int 
  3117 ;;  dividend        2    2[BANK0 ] int 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  quotient        2    7[BANK0 ] int 
  3120 ;;  sign            1    6[BANK0 ] unsigned char 
  3121 ;;  counter         1    5[BANK0 ] unsigned char 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  2    0[BANK0 ] int 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMMON   BANK0   BANK1
  3131 ;;      Params:         0       4       0
  3132 ;;      Locals:         0       4       0
  3133 ;;      Temps:          0       1       0
  3134 ;;      Totals:         0       9       0
  3135 ;;Total ram usage:        9 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    2
  3138 ;; This function calls:
  3139 ;;		Nothing
  3140 ;; This function is called by:
  3141 ;;		_display_time
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           
  3146                           ;psect for function ___awdiv
  3147  04DC                     ___awdiv:	
  3148                           
  3149                           ;incstack = 0
  3150                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3151  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3152  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3153  04DE  01CD               	clrf	___awdiv@sign
  3154  04DF  1FC8               	btfss	___awdiv@divisor+1,7
  3155  04E0  2CE8               	goto	l1728
  3156  04E1  09C7               	comf	___awdiv@divisor,f
  3157  04E2  09C8               	comf	___awdiv@divisor+1,f
  3158  04E3  0AC7               	incf	___awdiv@divisor,f
  3159  04E4  1903               	skipnz
  3160  04E5  0AC8               	incf	___awdiv@divisor+1,f
  3161  04E6  01CD               	clrf	___awdiv@sign
  3162  04E7  0ACD               	incf	___awdiv@sign,f
  3163  04E8                     l1728:	
  3164  04E8  1FCA               	btfss	___awdiv@dividend+1,7
  3165  04E9  2CF3               	goto	l1734
  3166  04EA  09C9               	comf	___awdiv@dividend,f
  3167  04EB  09CA               	comf	___awdiv@dividend+1,f
  3168  04EC  0AC9               	incf	___awdiv@dividend,f
  3169  04ED  1903               	skipnz
  3170  04EE  0ACA               	incf	___awdiv@dividend+1,f
  3171  04EF  3001               	movlw	1
  3172  04F0  00CB               	movwf	??___awdiv
  3173  04F1  084B               	movf	??___awdiv,w
  3174  04F2  06CD               	xorwf	___awdiv@sign,f
  3175  04F3                     l1734:	
  3176  04F3  01CE               	clrf	___awdiv@quotient
  3177  04F4  01CF               	clrf	___awdiv@quotient+1
  3178  04F5  0848               	movf	___awdiv@divisor+1,w
  3179  04F6  0447               	iorwf	___awdiv@divisor,w
  3180  04F7  1903               	skipnz
  3181  04F8  2D2A               	goto	l1756
  3182  04F9  01CC               	clrf	___awdiv@counter
  3183  04FA  0ACC               	incf	___awdiv@counter,f
  3184  04FB                     l1744:	
  3185  04FB  1BC8               	btfsc	___awdiv@divisor+1,7
  3186  04FC  2D09               	goto	l1746
  3187  04FD  3001               	movlw	1
  3188  04FE                     u1535:	
  3189  04FE  1003               	clrc
  3190  04FF  0DC7               	rlf	___awdiv@divisor,f
  3191  0500  0DC8               	rlf	___awdiv@divisor+1,f
  3192  0501  3EFF               	addlw	-1
  3193  0502  1D03               	skipz
  3194  0503  2CFE               	goto	u1535
  3195  0504  3001               	movlw	1
  3196  0505  00CB               	movwf	??___awdiv
  3197  0506  084B               	movf	??___awdiv,w
  3198  0507  07CC               	addwf	___awdiv@counter,f
  3199  0508  2CFB               	goto	l1744
  3200  0509                     l1746:	
  3201  0509  3001               	movlw	1
  3202  050A                     u1555:	
  3203  050A  1003               	clrc
  3204  050B  0DCE               	rlf	___awdiv@quotient,f
  3205  050C  0DCF               	rlf	___awdiv@quotient+1,f
  3206  050D  3EFF               	addlw	-1
  3207  050E  1D03               	skipz
  3208  050F  2D0A               	goto	u1555
  3209  0510  0848               	movf	___awdiv@divisor+1,w
  3210  0511  024A               	subwf	___awdiv@dividend+1,w
  3211  0512  1D03               	skipz
  3212  0513  2D16               	goto	u1565
  3213  0514  0847               	movf	___awdiv@divisor,w
  3214  0515  0249               	subwf	___awdiv@dividend,w
  3215  0516                     u1565:	
  3216  0516  1C03               	skipc
  3217  0517  2D1F               	goto	l1752
  3218  0518  0847               	movf	___awdiv@divisor,w
  3219  0519  02C9               	subwf	___awdiv@dividend,f
  3220  051A  0848               	movf	___awdiv@divisor+1,w
  3221  051B  1C03               	skipc
  3222  051C  03CA               	decf	___awdiv@dividend+1,f
  3223  051D  02CA               	subwf	___awdiv@dividend+1,f
  3224  051E  144E               	bsf	___awdiv@quotient,0
  3225  051F                     l1752:	
  3226  051F  3001               	movlw	1
  3227  0520                     u1575:	
  3228  0520  1003               	clrc
  3229  0521  0CC8               	rrf	___awdiv@divisor+1,f
  3230  0522  0CC7               	rrf	___awdiv@divisor,f
  3231  0523  3EFF               	addlw	-1
  3232  0524  1D03               	skipz
  3233  0525  2D20               	goto	u1575
  3234  0526  3001               	movlw	1
  3235  0527  02CC               	subwf	___awdiv@counter,f
  3236  0528  1D03               	btfss	3,2
  3237  0529  2D09               	goto	l1746
  3238  052A                     l1756:	
  3239  052A  084D               	movf	___awdiv@sign,w
  3240  052B  1903               	btfsc	3,2
  3241  052C  2D32               	goto	l1760
  3242  052D  09CE               	comf	___awdiv@quotient,f
  3243  052E  09CF               	comf	___awdiv@quotient+1,f
  3244  052F  0ACE               	incf	___awdiv@quotient,f
  3245  0530  1903               	skipnz
  3246  0531  0ACF               	incf	___awdiv@quotient+1,f
  3247  0532                     l1760:	
  3248  0532  084F               	movf	___awdiv@quotient+1,w
  3249  0533  01C8               	clrf	?___awdiv+1
  3250  0534  07C8               	addwf	?___awdiv+1,f
  3251  0535  084E               	movf	___awdiv@quotient,w
  3252  0536  01C7               	clrf	?___awdiv
  3253  0537  07C7               	addwf	?___awdiv,f
  3254  0538  0008               	return
  3255  0539                     __end_of___awdiv:	
  3256                           
  3257                           	psect	text15
  3258  06F7                     __ptext15:	
  3259 ;; *************** function _MAX7219_Init *****************
  3260 ;; Defined at:
  3261 ;;		line 119 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;		None               void
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, pclath, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMMON   BANK0   BANK1
  3275 ;;      Params:         0       0       0
  3276 ;;      Locals:         0       0       0
  3277 ;;      Temps:          0       1       0
  3278 ;;      Totals:         0       1       0
  3279 ;;Total ram usage:        1 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    5
  3282 ;; This function calls:
  3283 ;;		_MAX7219_Clear
  3284 ;;		_MAX7219_DisplayTestStop
  3285 ;;		_MAX7219_SetBrightness
  3286 ;;		_MAX7219_ShutdownStop
  3287 ;;		_MAX7219_Write
  3288 ;; This function is called by:
  3289 ;;		_main
  3290 ;; This function uses a non-reentrant model
  3291 ;;
  3292                           
  3293                           
  3294                           ;psect for function _MAX7219_Init
  3295  06F7                     _MAX7219_Init:	
  3296                           
  3297                           ;MAX7219.C: 121: (RC0 = 0);
  3298                           
  3299                           ;incstack = 0
  3300                           ; Regs used in _MAX7219_Init: [wreg+status,2+status,0+pclath+cstack]
  3301  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  3302  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  3303  06F9  1007               	bcf	7,0	;volatile
  3304                           
  3305                           ;MAX7219.C: 122: (RC2 = 0);
  3306  06FA  1107               	bcf	7,2	;volatile
  3307                           
  3308                           ;MAX7219.C: 123: (RC1 = 0);
  3309  06FB  1087               	bcf	7,1	;volatile
  3310                           
  3311                           ;MAX7219.C: 125: MAX7219_Write(0x0b, 7);
  3312  06FC  3007               	movlw	7
  3313  06FD  00D0               	movwf	??_MAX7219_Init
  3314  06FE  0850               	movf	??_MAX7219_Init,w
  3315  06FF  00CC               	movwf	MAX7219_Write@dataout
  3316  0700  300B               	movlw	11
  3317  0701  2742               	fcall	_MAX7219_Write
  3318                           
  3319                           ;MAX7219.C: 126: MAX7219_Write(0x09, 0x00);
  3320  0702  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0703  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0704  01CC               	clrf	MAX7219_Write@dataout
  3323  0705  3009               	movlw	9
  3324  0706  2742               	fcall	_MAX7219_Write
  3325                           
  3326                           ;MAX7219.C: 127: MAX7219_ShutdownStop();
  3327  0707  2784               	fcall	_MAX7219_ShutdownStop
  3328                           
  3329                           ;MAX7219.C: 128: MAX7219_DisplayTestStop();
  3330  0708  278B               	fcall	_MAX7219_DisplayTestStop
  3331                           
  3332                           ;MAX7219.C: 129: MAX7219_Clear();
  3333  0709  2720               	fcall	_MAX7219_Clear
  3334                           
  3335                           ;MAX7219.C: 130: MAX7219_SetBrightness(0x06);
  3336  070A  3006               	movlw	6
  3337  070B  2751               	fcall	_MAX7219_SetBrightness
  3338  070C  0008               	return
  3339  070D                     __end_of_MAX7219_Init:	
  3340                           
  3341                           	psect	text16
  3342  0784                     __ptext16:	
  3343 ;; *************** function _MAX7219_ShutdownStop *****************
  3344 ;; Defined at:
  3345 ;;		line 158 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;		None
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;		None
  3350 ;; Return value:  Size  Location     Type
  3351 ;;		None               void
  3352 ;; Registers used:
  3353 ;;		wreg, status,2, status,0, pclath, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMMON   BANK0   BANK1
  3359 ;;      Params:         0       0       0
  3360 ;;      Locals:         0       0       0
  3361 ;;      Temps:          0       0       0
  3362 ;;      Totals:         0       0       0
  3363 ;;Total ram usage:        0 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    4
  3366 ;; This function calls:
  3367 ;;		_MAX7219_Write
  3368 ;; This function is called by:
  3369 ;;		_MAX7219_Init
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           
  3374                           ;psect for function _MAX7219_ShutdownStop
  3375  0784                     _MAX7219_ShutdownStop:	
  3376                           
  3377                           ;MAX7219.C: 160: MAX7219_Write(0x0c, 1);
  3378                           
  3379                           ;incstack = 0
  3380                           ; Regs used in _MAX7219_ShutdownStop: [wreg+status,2+status,0+pclath+cstack]
  3381  0784  1283               	bcf	3,5	;RP0=0, select bank0
  3382  0785  1303               	bcf	3,6	;RP1=0, select bank0
  3383  0786  01CC               	clrf	MAX7219_Write@dataout
  3384  0787  0ACC               	incf	MAX7219_Write@dataout,f
  3385  0788  300C               	movlw	12
  3386  0789  2742               	fcall	_MAX7219_Write
  3387  078A  0008               	return
  3388  078B                     __end_of_MAX7219_ShutdownStop:	
  3389                           
  3390                           	psect	text17
  3391  0751                     __ptext17:	
  3392 ;; *************** function _MAX7219_SetBrightness *****************
  3393 ;; Defined at:
  3394 ;;		line 203 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  brightness      1    wreg     unsigned char 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  brightness      1    8[BANK0 ] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;		None               void
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1
  3408 ;;      Params:         0       0       0
  3409 ;;      Locals:         0       1       0
  3410 ;;      Temps:          0       1       0
  3411 ;;      Totals:         0       2       0
  3412 ;;Total ram usage:        2 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    4
  3415 ;; This function calls:
  3416 ;;		_MAX7219_Write
  3417 ;; This function is called by:
  3418 ;;		_MAX7219_Init
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _MAX7219_SetBrightness
  3424  0751                     _MAX7219_SetBrightness:	
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _MAX7219_SetBrightness: [wreg+status,2+status,0+pclath+cstack]
  3428                           ;MAX7219_SetBrightness@brightness stored from wreg
  3429  0751  1283               	bcf	3,5	;RP0=0, select bank0
  3430  0752  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0753  00CF               	movwf	MAX7219_SetBrightness@brightness
  3432                           
  3433                           ;MAX7219.C: 205: brightness &= 0x0f;
  3434  0754  300F               	movlw	15
  3435  0755  00CE               	movwf	??_MAX7219_SetBrightness
  3436  0756  084E               	movf	??_MAX7219_SetBrightness,w
  3437  0757  05CF               	andwf	MAX7219_SetBrightness@brightness,f
  3438                           
  3439                           ;MAX7219.C: 206: MAX7219_Write(0x0a, brightness);
  3440  0758  084F               	movf	MAX7219_SetBrightness@brightness,w
  3441  0759  00CE               	movwf	??_MAX7219_SetBrightness
  3442  075A  084E               	movf	??_MAX7219_SetBrightness,w
  3443  075B  00CC               	movwf	MAX7219_Write@dataout
  3444  075C  300A               	movlw	10
  3445  075D  2742               	fcall	_MAX7219_Write
  3446  075E  0008               	return
  3447  075F                     __end_of_MAX7219_SetBrightness:	
  3448                           
  3449                           	psect	text18
  3450  078B                     __ptext18:	
  3451 ;; *************** function _MAX7219_DisplayTestStop *****************
  3452 ;; Defined at:
  3453 ;;		line 188 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;		None               void
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0, pclath, cstack
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMMON   BANK0   BANK1
  3467 ;;      Params:         0       0       0
  3468 ;;      Locals:         0       0       0
  3469 ;;      Temps:          0       0       0
  3470 ;;      Totals:         0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    4
  3474 ;; This function calls:
  3475 ;;		_MAX7219_Write
  3476 ;; This function is called by:
  3477 ;;		_MAX7219_Init
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _MAX7219_DisplayTestStop
  3483  078B                     _MAX7219_DisplayTestStop:	
  3484                           
  3485                           ;MAX7219.C: 190: MAX7219_Write(0x0f, 0);
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _MAX7219_DisplayTestStop: [wreg+status,2+status,0+pclath+cstack]
  3489  078B  1283               	bcf	3,5	;RP0=0, select bank0
  3490  078C  1303               	bcf	3,6	;RP1=0, select bank0
  3491  078D  01CC               	clrf	MAX7219_Write@dataout
  3492  078E  300F               	movlw	15
  3493  078F  2742               	fcall	_MAX7219_Write
  3494  0790  0008               	return
  3495  0791                     __end_of_MAX7219_DisplayTestStop:	
  3496                           
  3497                           	psect	text19
  3498  0720                     __ptext19:	
  3499 ;; *************** function _MAX7219_Clear *****************
  3500 ;; Defined at:
  3501 ;;		line 219 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;		None
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  i               1    8[BANK0 ] unsigned char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;		None               void
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, pclath, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMMON   BANK0   BANK1
  3515 ;;      Params:         0       0       0
  3516 ;;      Locals:         0       1       0
  3517 ;;      Temps:          0       1       0
  3518 ;;      Totals:         0       2       0
  3519 ;;Total ram usage:        2 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    4
  3522 ;; This function calls:
  3523 ;;		_MAX7219_Write
  3524 ;; This function is called by:
  3525 ;;		_MAX7219_Init
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           
  3530                           ;psect for function _MAX7219_Clear
  3531  0720                     _MAX7219_Clear:	
  3532                           
  3533                           ;MAX7219.C: 221: char i;
  3534                           ;MAX7219.C: 222: for (i=0; i < 8; i++)
  3535                           
  3536                           ;incstack = 0
  3537                           ; Regs used in _MAX7219_Clear: [wreg+status,2+status,0+pclath+cstack]
  3538  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3539  0721  1303               	bcf	3,6	;RP1=0, select bank0
  3540  0722  01CF               	clrf	MAX7219_Clear@i
  3541  0723                     L2:	
  3542  0723  3008               	movlw	8
  3543  0724  024F               	subwf	MAX7219_Clear@i,w
  3544  0725  1803               	btfsc	3,0
  3545  0726  0008               	return
  3546                           
  3547                           ;MAX7219.C: 223: MAX7219_Write(i, 0x00);
  3548  0727  01CC               	clrf	MAX7219_Write@dataout
  3549  0728  084F               	movf	MAX7219_Clear@i,w
  3550  0729  2742               	fcall	_MAX7219_Write
  3551  072A  3001               	movlw	1
  3552  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3553  072C  1303               	bcf	3,6	;RP1=0, select bank0
  3554  072D  00CE               	movwf	??_MAX7219_Clear
  3555  072E  084E               	movf	??_MAX7219_Clear,w
  3556  072F  07CF               	addwf	MAX7219_Clear@i,f
  3557  0730  2F23               	goto	L2
  3558  0731                     __end_of_MAX7219_Clear:	
  3559                           
  3560                           	psect	text20
  3561  0742                     __ptext20:	
  3562 ;; *************** function _MAX7219_Write *****************
  3563 ;; Defined at:
  3564 ;;		line 322 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  reg_number      1    wreg     unsigned char 
  3567 ;;  dataout         1    5[BANK0 ] unsigned char 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  reg_number      1    6[BANK0 ] unsigned char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;		None               void
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0, pclath, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1
  3579 ;;      Params:         0       1       0
  3580 ;;      Locals:         0       1       0
  3581 ;;      Temps:          0       0       0
  3582 ;;      Totals:         0       2       0
  3583 ;;Total ram usage:        2 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    3
  3586 ;; This function calls:
  3587 ;;		_MAX7219_SendByte
  3588 ;; This function is called by:
  3589 ;;		_MAX7219_Init
  3590 ;;		_MAX7219_ShutdownStop
  3591 ;;		_MAX7219_DisplayTestStop
  3592 ;;		_MAX7219_SetBrightness
  3593 ;;		_MAX7219_Clear
  3594 ;;		_MAX7219_DisplayChar
  3595 ;;		_MAX7219_ShutdownStart
  3596 ;;		_MAX7219_DisplayTestStart
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _MAX7219_Write
  3602  0742                     _MAX7219_Write:	
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _MAX7219_Write: [wreg+status,2+status,0+pclath+cstack]
  3606                           ;MAX7219_Write@reg_number stored from wreg
  3607  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0743  1303               	bcf	3,6	;RP1=0, select bank0
  3609  0744  00CD               	movwf	MAX7219_Write@reg_number
  3610                           
  3611                           ;MAX7219.C: 324: (RC1 = 1);
  3612  0745  1487               	bsf	7,1	;volatile
  3613                           
  3614                           ;MAX7219.C: 325: MAX7219_SendByte(reg_number);
  3615  0746  084D               	movf	MAX7219_Write@reg_number,w
  3616  0747  267A               	fcall	_MAX7219_SendByte
  3617                           
  3618                           ;MAX7219.C: 326: MAX7219_SendByte(dataout);
  3619  0748  1283               	bcf	3,5	;RP0=0, select bank0
  3620  0749  1303               	bcf	3,6	;RP1=0, select bank0
  3621  074A  084C               	movf	MAX7219_Write@dataout,w
  3622  074B  267A               	fcall	_MAX7219_SendByte
  3623                           
  3624                           ;MAX7219.C: 327: (RC1 = 0);
  3625  074C  1283               	bcf	3,5	;RP0=0, select bank0
  3626  074D  1303               	bcf	3,6	;RP1=0, select bank0
  3627  074E  1087               	bcf	7,1	;volatile
  3628                           
  3629                           ;MAX7219.C: 328: (RC1 = 1);
  3630  074F  1487               	bsf	7,1	;volatile
  3631  0750  0008               	return
  3632  0751                     __end_of_MAX7219_Write:	
  3633                           
  3634                           	psect	text21
  3635  067A                     __ptext21:	
  3636 ;; *************** function _MAX7219_SendByte *****************
  3637 ;; Defined at:
  3638 ;;		line 341 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\MAX7219.C"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  dataout         1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  dataout         1    2[BANK0 ] unsigned char 
  3643 ;;  mask            1    3[BANK0 ] unsigned char 
  3644 ;;  i               1    4[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMMON   BANK0   BANK1
  3654 ;;      Params:         0       0       0
  3655 ;;      Locals:         0       3       0
  3656 ;;      Temps:          0       2       0
  3657 ;;      Totals:         0       5       0
  3658 ;;Total ram usage:        5 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    2
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_MAX7219_Write
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function _MAX7219_SendByte
  3670  067A                     _MAX7219_SendByte:	
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _MAX7219_SendByte: [wreg+status,2+status,0]
  3674                           ;MAX7219_SendByte@dataout stored from wreg
  3675  067A  1283               	bcf	3,5	;RP0=0, select bank0
  3676  067B  1303               	bcf	3,6	;RP1=0, select bank0
  3677  067C  00C9               	movwf	MAX7219_SendByte@dataout
  3678                           
  3679                           ;MAX7219.C: 343: char i;
  3680                           ;MAX7219.C: 344: for (i=8; i>0; i--) {
  3681  067D  3008               	movlw	8
  3682  067E  00C7               	movwf	??_MAX7219_SendByte
  3683  067F  0847               	movf	??_MAX7219_SendByte,w
  3684  0680  00CB               	movwf	MAX7219_SendByte@i
  3685  0681                     L3:	
  3686  0681  08CB               	movf	MAX7219_SendByte@i,f
  3687  0682  1903               	btfsc	3,2
  3688  0683  0008               	return
  3689                           
  3690                           ;MAX7219.C: 345: unsigned char mask = 1 << (i - 1);
  3691  0684  3001               	movlw	1
  3692  0685  00C7               	movwf	??_MAX7219_SendByte
  3693  0686  084B               	movf	MAX7219_SendByte@i,w
  3694  0687  3EFF               	addlw	-1
  3695  0688  3E01               	addlw	1
  3696  0689  2E8C               	goto	u1104
  3697  068A                     u1105:	
  3698  068A  1003               	clrc
  3699  068B  0DC7               	rlf	??_MAX7219_SendByte,f
  3700  068C                     u1104:	
  3701  068C  3EFF               	addlw	-1
  3702  068D  1D03               	skipz
  3703  068E  2E8A               	goto	u1105
  3704  068F  0847               	movf	??_MAX7219_SendByte,w
  3705  0690  00C8               	movwf	??_MAX7219_SendByte+1
  3706  0691  0848               	movf	??_MAX7219_SendByte+1,w
  3707  0692  00CA               	movwf	MAX7219_SendByte@mask
  3708                           
  3709                           ;MAX7219.C: 346: (RC2 = 0);
  3710  0693  1107               	bcf	7,2	;volatile
  3711                           
  3712                           ;MAX7219.C: 347: if (dataout & mask)
  3713  0694  0849               	movf	MAX7219_SendByte@dataout,w
  3714  0695  054A               	andwf	MAX7219_SendByte@mask,w
  3715  0696  1903               	btfsc	3,2
  3716  0697  2E9A               	goto	l378
  3717                           
  3718                           ;MAX7219.C: 348: (RC0 = 1);
  3719  0698  1407               	bsf	7,0	;volatile
  3720  0699  2E9B               	goto	l379
  3721  069A                     l378:	
  3722                           
  3723                           ;MAX7219.C: 349: else
  3724                           ;MAX7219.C: 350: (RC0 = 0);
  3725  069A  1007               	bcf	7,0	;volatile
  3726  069B                     l379:	
  3727                           
  3728                           ;MAX7219.C: 351: (RC2 = 1);
  3729  069B  1507               	bsf	7,2	;volatile
  3730  069C  3001               	movlw	1
  3731  069D  02CB               	subwf	MAX7219_SendByte@i,f
  3732  069E  2E81               	goto	L3
  3733  069F                     __end_of_MAX7219_SendByte:	
  3734                           
  3735                           	psect	text22
  3736  01C3                     __ptext22:	
  3737 ;; *************** function _ISR *****************
  3738 ;; Defined at:
  3739 ;;		line 82 in file "E:\Study Material\XC8 PROJECTS\Wall Clock\wallclock.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;		None               void
  3746 ;; Registers used:
  3747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1
  3753 ;;      Params:         0       0       0
  3754 ;;      Locals:         0       0       0
  3755 ;;      Temps:          6       0       0
  3756 ;;      Totals:         6       0       0
  3757 ;;Total ram usage:        6 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    1
  3760 ;; This function calls:
  3761 ;;		___bmul
  3762 ;; This function is called by:
  3763 ;;		Interrupt level 1
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           
  3768                           ;psect for function _ISR
  3769  01C3                     _ISR:	
  3770                           
  3771                           ;wallclock.c: 85: if(T0IE && T0IF)
  3772  01C3  1A8B               	btfsc	11,5	;volatile
  3773  01C4  1D0B               	btfss	11,2	;volatile
  3774  01C5  29FA               	goto	i1l196
  3775  01C6  0000               	nop	;# 
  3776  01C7  0000               	nop	;# 
  3777  01C8  0000               	nop	;# 
  3778  01C9  0000               	nop	;# 
  3779  01CA  0000               	nop	;# 
  3780                           
  3781                           ;wallclock.c: 95: msecs++;
  3782  01CB  3001               	movlw	1
  3783  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  3784  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  3785  01CE  07A4               	addwf	_msecs,f
  3786  01CF  1803               	skipnc
  3787  01D0  0AA5               	incf	_msecs+1,f
  3788  01D1  3000               	movlw	0
  3789  01D2  07A5               	addwf	_msecs+1,f
  3790                           
  3791                           ;wallclock.c: 96: if(msecs == 999)
  3792  01D3  3003               	movlw	3
  3793  01D4  0625               	xorwf	_msecs+1,w
  3794  01D5  1D03               	skipz
  3795  01D6  29D9               	goto	u196_25
  3796  01D7  30E7               	movlw	231
  3797  01D8  0624               	xorwf	_msecs,w
  3798  01D9                     u196_25:	
  3799  01D9  1D03               	skipz
  3800  01DA  29F6               	goto	i1l2036
  3801                           
  3802                           ;wallclock.c: 97: {
  3803                           ;wallclock.c: 98: for(error = 0; error < 68; error++)
  3804  01DB  01FB               	clrf	_error
  3805  01DC  3044               	movlw	68
  3806  01DD  027B               	subwf	_error,w
  3807  01DE  1803               	btfsc	3,0
  3808  01DF  29E9               	goto	i1l199
  3809  01E0                     i1l198:	
  3810  01E0  29C4               	goto	($+1)	;# 
  3811  01E1  3001               	movlw	1
  3812  01E2  00F4               	movwf	??_ISR
  3813  01E3  0874               	movf	??_ISR,w
  3814  01E4  07FB               	addwf	_error,f
  3815  01E5  3044               	movlw	68
  3816  01E6  027B               	subwf	_error,w
  3817  01E7  1C03               	skipc
  3818  01E8  29E0               	goto	i1l198
  3819  01E9                     i1l199:	
  3820  01E9  29C4               	goto	($+1)	;# 
  3821  01EA  29C4               	goto	($+1)	;# 
  3822  01EB  29C4               	goto	($+1)	;# 
  3823                           
  3824                           ;wallclock.c: 109: secs++;
  3825  01EC  3001               	movlw	1
  3826  01ED  00F4               	movwf	??_ISR
  3827  01EE  0874               	movf	??_ISR,w
  3828  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3829  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  3830  01F1  07B4               	addwf	_secs,f
  3831                           
  3832                           ;wallclock.c: 110: sec_flag = 1;
  3833  01F2  01B3               	clrf	_sec_flag
  3834  01F3  0AB3               	incf	_sec_flag,f
  3835                           
  3836                           ;wallclock.c: 111: msecs = 0;
  3837  01F4  01A4               	clrf	_msecs
  3838  01F5  01A5               	clrf	_msecs+1
  3839  01F6                     i1l2036:	
  3840                           
  3841                           ;wallclock.c: 112: }
  3842                           ;wallclock.c: 113: T0IF = 0;
  3843  01F6  110B               	bcf	11,2	;volatile
  3844                           
  3845                           ;wallclock.c: 114: TMR0 = 17;
  3846  01F7  3011               	movlw	17
  3847  01F8  0081               	movwf	1	;volatile
  3848                           
  3849                           ;wallclock.c: 115: return;
  3850  01F9  2B13               	goto	i1l200
  3851  01FA                     i1l196:	
  3852                           
  3853                           ;wallclock.c: 116: }
  3854                           ;wallclock.c: 118: if (RCIE && RCIF)
  3855  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  3856  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  3857  01FC  1E8C               	btfss	12,5	;volatile
  3858  01FD  2B13               	goto	i1l200
  3859  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  3860  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  3861  0200  1E8C               	btfss	12,5	;volatile
  3862  0201  2B13               	goto	i1l200
  3863                           
  3864                           ;wallclock.c: 119: {
  3865                           ;wallclock.c: 120: ch = (char)RCREG;
  3866  0202  081A               	movf	26,w	;volatile
  3867  0203  00F4               	movwf	??_ISR
  3868  0204  0874               	movf	??_ISR,w
  3869  0205  00FA               	movwf	_ch
  3870                           
  3871                           ;wallclock.c: 121: if(set_alarm == 0)
  3872  0206  08FD               	movf	_set_alarm,f
  3873  0207  1D03               	skipz
  3874  0208  2A99               	goto	i1l2082
  3875                           
  3876                           ;wallclock.c: 122: {
  3877                           ;wallclock.c: 123: if((ch-48) >= 0x00 && (ch-48) <= 0x09)
  3878  0209  087A               	movf	_ch,w
  3879  020A  3ED0               	addlw	208
  3880  020B  00F4               	movwf	??_ISR
  3881  020C  30FF               	movlw	255
  3882  020D  1803               	skipnc
  3883  020E  3000               	movlw	0
  3884  020F  00F5               	movwf	??_ISR+1
  3885  0210  1BF5               	btfsc	??_ISR+1,7
  3886  0211  2A99               	goto	i1l2082
  3887  0212  087A               	movf	_ch,w
  3888  0213  3ED0               	addlw	208
  3889  0214  00F4               	movwf	??_ISR
  3890  0215  30FF               	movlw	255
  3891  0216  1803               	skipnc
  3892  0217  3000               	movlw	0
  3893  0218  00F5               	movwf	??_ISR+1
  3894  0219  0875               	movf	??_ISR+1,w
  3895  021A  3A80               	xorlw	128
  3896  021B  00FF               	movwf	127
  3897  021C  3080               	movlw	128
  3898  021D  027F               	subwf	127,w
  3899  021E  1D03               	skipz
  3900  021F  2A22               	goto	u203_25
  3901  0220  300A               	movlw	10
  3902  0221  0274               	subwf	??_ISR,w
  3903  0222                     u203_25:	
  3904  0222  1803               	skipnc
  3905  0223  2A99               	goto	i1l2082
  3906                           
  3907                           ;wallclock.c: 124: {
  3908                           ;wallclock.c: 125: if(index < 6)
  3909  0224  3006               	movlw	6
  3910  0225  027C               	subwf	_index,w
  3911  0226  1803               	skipnc
  3912  0227  2A5E               	goto	i1l2064
  3913                           
  3914                           ;wallclock.c: 126: {
  3915                           ;wallclock.c: 127: time_display_array[index] = ch - 48;
  3916  0228  087A               	movf	_ch,w
  3917  0229  3ED0               	addlw	208
  3918  022A  00F4               	movwf	??_ISR
  3919  022B  087C               	movf	_index,w
  3920  022C  3E3D               	addlw	_time_display_array& (0+255)
  3921  022D  0084               	movwf	4
  3922  022E  0874               	movf	??_ISR,w
  3923  022F  1383               	bcf	3,7	;select IRP bank0
  3924  0230  0080               	movwf	0
  3925                           
  3926                           ;wallclock.c: 129: if(index == 5)
  3927  0231  087C               	movf	_index,w
  3928  0232  3A05               	xorlw	5
  3929  0233  1D03               	skipz
  3930  0234  2A5E               	goto	i1l2064
  3931                           
  3932                           ;wallclock.c: 130: {
  3933                           ;wallclock.c: 131: secs = time_display_array[1] * 10 + time_display_array[0];
  3934  0235  300A               	movlw	10
  3935  0236  00F4               	movwf	??_ISR
  3936  0237  0874               	movf	??_ISR,w
  3937  0238  00F0               	movwf	___bmul@multiplicand
  3938  0239  1283               	bcf	3,5	;RP0=0, select bank0
  3939  023A  1303               	bcf	3,6	;RP1=0, select bank0
  3940  023B  083E               	movf	_time_display_array+1,w
  3941  023C  2731               	fcall	___bmul
  3942  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3943  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3944  023F  073D               	addwf	_time_display_array,w
  3945  0240  00F5               	movwf	??_ISR+1
  3946  0241  0875               	movf	??_ISR+1,w
  3947  0242  00B4               	movwf	_secs
  3948                           
  3949                           ;wallclock.c: 132: mins = time_display_array[3] * 10 + time_display_array[2];
  3950  0243  300A               	movlw	10
  3951  0244  00F4               	movwf	??_ISR
  3952  0245  0874               	movf	??_ISR,w
  3953  0246  00F0               	movwf	___bmul@multiplicand
  3954  0247  0840               	movf	_time_display_array+3,w
  3955  0248  2731               	fcall	___bmul
  3956  0249  1283               	bcf	3,5	;RP0=0, select bank0
  3957  024A  1303               	bcf	3,6	;RP1=0, select bank0
  3958  024B  073F               	addwf	_time_display_array+2,w
  3959  024C  00F5               	movwf	??_ISR+1
  3960  024D  0875               	movf	??_ISR+1,w
  3961  024E  00B1               	movwf	_mins
  3962                           
  3963                           ;wallclock.c: 133: hrs = time_display_array[5] * 10 + time_display_array[4];
  3964  024F  300A               	movlw	10
  3965  0250  00F4               	movwf	??_ISR
  3966  0251  0874               	movf	??_ISR,w
  3967  0252  00F0               	movwf	___bmul@multiplicand
  3968  0253  0842               	movf	_time_display_array+5,w
  3969  0254  2731               	fcall	___bmul
  3970  0255  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0256  1303               	bcf	3,6	;RP1=0, select bank0
  3972  0257  0741               	addwf	_time_display_array+4,w
  3973  0258  00F5               	movwf	??_ISR+1
  3974  0259  0875               	movf	??_ISR+1,w
  3975  025A  00E4               	movwf	_hrs
  3976                           
  3977                           ;wallclock.c: 134: min_flag = 1;
  3978  025B  01E5               	clrf	_min_flag
  3979  025C  0AE5               	incf	_min_flag,f
  3980                           
  3981                           ;wallclock.c: 135: adjustment = 0;
  3982  025D  01A9               	clrf	_adjustment
  3983  025E                     i1l2064:	
  3984                           
  3985                           ;wallclock.c: 136: }
  3986                           ;wallclock.c: 137: }
  3987                           ;wallclock.c: 139: if(index >= 6)
  3988  025E  3006               	movlw	6
  3989  025F  027C               	subwf	_index,w
  3990  0260  1C03               	skipc
  3991  0261  2AE4               	goto	i1l2102
  3992                           
  3993                           ;wallclock.c: 140: {
  3994                           ;wallclock.c: 141: date_display_array[index-6] = ch - 48;
  3995  0262  087A               	movf	_ch,w
  3996  0263  3ED0               	addlw	208
  3997  0264  00F4               	movwf	??_ISR
  3998  0265  087C               	movf	_index,w
  3999  0266  3EFA               	addlw	250
  4000  0267  3E35               	addlw	_date_display_array& (0+255)
  4001  0268  0084               	movwf	4
  4002  0269  0874               	movf	??_ISR,w
  4003  026A  1383               	bcf	3,7	;select IRP bank0
  4004  026B  0080               	movwf	0
  4005                           
  4006                           ;wallclock.c: 143: if(index == 11)
  4007  026C  087C               	movf	_index,w
  4008  026D  3A0B               	xorlw	11
  4009  026E  1D03               	skipz
  4010  026F  2AE4               	goto	i1l2102
  4011                           
  4012                           ;wallclock.c: 144: {
  4013                           ;wallclock.c: 145: year = date_display_array[1] * 10 + date_display_array[0];
  4014  0270  300A               	movlw	10
  4015  0271  00F4               	movwf	??_ISR
  4016  0272  0874               	movf	??_ISR,w
  4017  0273  00F0               	movwf	___bmul@multiplicand
  4018  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0275  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0276  0836               	movf	_date_display_array+1,w
  4021  0277  2731               	fcall	___bmul
  4022  0278  1283               	bcf	3,5	;RP0=0, select bank0
  4023  0279  1303               	bcf	3,6	;RP1=0, select bank0
  4024  027A  0735               	addwf	_date_display_array,w
  4025  027B  00F5               	movwf	??_ISR+1
  4026  027C  0875               	movf	??_ISR+1,w
  4027  027D  00E7               	movwf	_year
  4028                           
  4029                           ;wallclock.c: 146: month = date_display_array[3] * 10 + date_display_array[2];
  4030  027E  300A               	movlw	10
  4031  027F  00F4               	movwf	??_ISR
  4032  0280  0874               	movf	??_ISR,w
  4033  0281  00F0               	movwf	___bmul@multiplicand
  4034  0282  0838               	movf	_date_display_array+3,w
  4035  0283  2731               	fcall	___bmul
  4036  0284  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0285  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0286  0737               	addwf	_date_display_array+2,w
  4039  0287  00F5               	movwf	??_ISR+1
  4040  0288  0875               	movf	??_ISR+1,w
  4041  0289  00E6               	movwf	_month
  4042                           
  4043                           ;wallclock.c: 147: day = date_display_array[5] * 10 + date_display_array[4];
  4044  028A  300A               	movlw	10
  4045  028B  00F4               	movwf	??_ISR
  4046  028C  0874               	movf	??_ISR,w
  4047  028D  00F0               	movwf	___bmul@multiplicand
  4048  028E  083A               	movf	_date_display_array+5,w
  4049  028F  2731               	fcall	___bmul
  4050  0290  1283               	bcf	3,5	;RP0=0, select bank0
  4051  0291  1303               	bcf	3,6	;RP1=0, select bank0
  4052  0292  0739               	addwf	_date_display_array+4,w
  4053  0293  00F5               	movwf	??_ISR+1
  4054  0294  0875               	movf	??_ISR+1,w
  4055  0295  00E3               	movwf	_day
  4056                           
  4057                           ;wallclock.c: 148: date_flag = 1;
  4058  0296  01E2               	clrf	_date_flag
  4059  0297  0AE2               	incf	_date_flag,f
  4060  0298  2AE2               	goto	i1l2098
  4061  0299                     i1l2082:	
  4062                           ;wallclock.c: 155: return;
  4063                           
  4064                           ;wallclock.c: 151: }
  4065                           ;wallclock.c: 152: }
  4066                           ;wallclock.c: 154: index++;
  4067                           
  4068                           ;wallclock.c: 150: return;
  4069                           
  4070                           ;wallclock.c: 149: index = 0;
  4071                           
  4072                           
  4073                           ;wallclock.c: 156: }
  4074                           ;wallclock.c: 157: }
  4075                           ;wallclock.c: 158: if(set_alarm == 1)
  4076  0299  087D               	movf	_set_alarm,w
  4077  029A  3A01               	xorlw	1
  4078  029B  1D03               	skipz
  4079  029C  2AE9               	goto	i1l2106
  4080                           
  4081                           ;wallclock.c: 159: {
  4082                           ;wallclock.c: 160: if((ch-48) >= 0x00 && (ch-48) <= 0x09)
  4083  029D  087A               	movf	_ch,w
  4084  029E  3ED0               	addlw	208
  4085  029F  00F4               	movwf	??_ISR
  4086  02A0  30FF               	movlw	255
  4087  02A1  1803               	skipnc
  4088  02A2  3000               	movlw	0
  4089  02A3  00F5               	movwf	??_ISR+1
  4090  02A4  1BF5               	btfsc	??_ISR+1,7
  4091  02A5  2AE9               	goto	i1l2106
  4092  02A6  087A               	movf	_ch,w
  4093  02A7  3ED0               	addlw	208
  4094  02A8  00F4               	movwf	??_ISR
  4095  02A9  30FF               	movlw	255
  4096  02AA  1803               	skipnc
  4097  02AB  3000               	movlw	0
  4098  02AC  00F5               	movwf	??_ISR+1
  4099  02AD  0875               	movf	??_ISR+1,w
  4100  02AE  3A80               	xorlw	128
  4101  02AF  00FF               	movwf	127
  4102  02B0  3080               	movlw	128
  4103  02B1  027F               	subwf	127,w
  4104  02B2  1D03               	skipz
  4105  02B3  2AB6               	goto	u210_25
  4106  02B4  300A               	movlw	10
  4107  02B5  0274               	subwf	??_ISR,w
  4108  02B6                     u210_25:	
  4109  02B6  1803               	skipnc
  4110  02B7  2AE9               	goto	i1l2106
  4111                           
  4112                           ;wallclock.c: 161: {
  4113                           ;wallclock.c: 162: alarm_array[index] = ch - 48;
  4114  02B8  087A               	movf	_ch,w
  4115  02B9  3ED0               	addlw	208
  4116  02BA  00F4               	movwf	??_ISR
  4117  02BB  087C               	movf	_index,w
  4118  02BC  3E43               	addlw	_alarm_array& (0+255)
  4119  02BD  0084               	movwf	4
  4120  02BE  0874               	movf	??_ISR,w
  4121  02BF  1383               	bcf	3,7	;select IRP bank0
  4122  02C0  0080               	movwf	0
  4123                           
  4124                           ;wallclock.c: 163: if(index == 3)
  4125  02C1  087C               	movf	_index,w
  4126  02C2  3A03               	xorlw	3
  4127  02C3  1D03               	skipz
  4128  02C4  2AE4               	goto	i1l2102
  4129                           
  4130                           ;wallclock.c: 164: {
  4131                           ;wallclock.c: 165: alarm_mins = alarm_array[1] * 10 + alarm_array[0];
  4132  02C5  300A               	movlw	10
  4133  02C6  00F4               	movwf	??_ISR
  4134  02C7  0874               	movf	??_ISR,w
  4135  02C8  00F0               	movwf	___bmul@multiplicand
  4136  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  4137  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  4138  02CB  0844               	movf	_alarm_array+1,w
  4139  02CC  2731               	fcall	___bmul
  4140  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  4141  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  4142  02CF  0743               	addwf	_alarm_array,w
  4143  02D0  00F5               	movwf	??_ISR+1
  4144  02D1  0875               	movf	??_ISR+1,w
  4145  02D2  00AD               	movwf	_alarm_mins
  4146                           
  4147                           ;wallclock.c: 166: alarm_hrs = alarm_array[3] * 10 + alarm_array[2];
  4148  02D3  300A               	movlw	10
  4149  02D4  00F4               	movwf	??_ISR
  4150  02D5  0874               	movf	??_ISR,w
  4151  02D6  00F0               	movwf	___bmul@multiplicand
  4152  02D7  0846               	movf	_alarm_array+3,w
  4153  02D8  2731               	fcall	___bmul
  4154  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  4155  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  4156  02DB  0745               	addwf	_alarm_array+2,w
  4157  02DC  00F5               	movwf	??_ISR+1
  4158  02DD  0875               	movf	??_ISR+1,w
  4159  02DE  00E1               	movwf	_alarm_hrs
  4160                           
  4161                           ;wallclock.c: 168: alarm_flag = 1;
  4162  02DF  01AC               	clrf	_alarm_flag
  4163  02E0  0AAC               	incf	_alarm_flag,f
  4164                           
  4165                           ;wallclock.c: 169: set_alarm = 0;
  4166  02E1  01FD               	clrf	_set_alarm
  4167  02E2                     i1l2098:	
  4168                           
  4169                           ;wallclock.c: 170: index = 0;
  4170  02E2  01FC               	clrf	_index
  4171                           
  4172                           ;wallclock.c: 171: return;
  4173  02E3  2B13               	goto	i1l200
  4174  02E4                     i1l2102:	
  4175                           
  4176                           ;wallclock.c: 172: }
  4177                           ;wallclock.c: 173: index++;
  4178  02E4  3001               	movlw	1
  4179  02E5  00F4               	movwf	??_ISR
  4180  02E6  0874               	movf	??_ISR,w
  4181  02E7  07FC               	addwf	_index,f
  4182                           
  4183                           ;wallclock.c: 174: return;
  4184  02E8  2B13               	goto	i1l200
  4185  02E9                     i1l2106:	
  4186                           
  4187                           ;wallclock.c: 175: }
  4188                           ;wallclock.c: 176: }
  4189                           ;wallclock.c: 177: if(ch == 'T')
  4190  02E9  087A               	movf	_ch,w
  4191  02EA  3A54               	xorlw	84
  4192  02EB  1D03               	skipz
  4193  02EC  2AF2               	goto	i1l2110
  4194                           
  4195                           ;wallclock.c: 178: {
  4196                           ;wallclock.c: 179: Twenty_Four_Hrs = 1;
  4197  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  4198  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  4199  02EF  01A8               	clrf	_Twenty_Four_Hrs
  4200  02F0  0AA8               	incf	_Twenty_Four_Hrs,f
  4201  02F1  2AF9               	goto	i1l2114
  4202  02F2                     i1l2110:	
  4203                           ;wallclock.c: 181: return;
  4204                           
  4205                           ;wallclock.c: 180: min_flag = 1;
  4206                           
  4207                           
  4208                           ;wallclock.c: 182: }
  4209                           ;wallclock.c: 183: if(ch == 'F')
  4210  02F2  087A               	movf	_ch,w
  4211  02F3  3A46               	xorlw	70
  4212  02F4  1D03               	skipz
  4213  02F5  2AFC               	goto	i1l2118
  4214                           
  4215                           ;wallclock.c: 184: {
  4216                           ;wallclock.c: 185: Twenty_Four_Hrs = 0;
  4217  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  4218  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  4219  02F8  01A8               	clrf	_Twenty_Four_Hrs
  4220  02F9                     i1l2114:	
  4221                           
  4222                           ;wallclock.c: 186: min_flag = 1;
  4223  02F9  01E5               	clrf	_min_flag
  4224  02FA  0AE5               	incf	_min_flag,f
  4225                           
  4226                           ;wallclock.c: 187: return;
  4227  02FB  2B13               	goto	i1l200
  4228  02FC                     i1l2118:	
  4229                           
  4230                           ;wallclock.c: 188: }
  4231                           ;wallclock.c: 189: if(ch == 'S')
  4232  02FC  087A               	movf	_ch,w
  4233  02FD  3A53               	xorlw	83
  4234  02FE  1D03               	skipz
  4235  02FF  2B03               	goto	i1l2122
  4236                           
  4237                           ;wallclock.c: 190: {
  4238                           ;wallclock.c: 191: set_alarm = 1;
  4239  0300  01FD               	clrf	_set_alarm
  4240  0301  0AFD               	incf	_set_alarm,f
  4241                           
  4242                           ;wallclock.c: 192: return;
  4243  0302  2B13               	goto	i1l200
  4244  0303                     i1l2122:	
  4245                           
  4246                           ;wallclock.c: 193: }
  4247                           ;wallclock.c: 194: if(ch == 'R')
  4248  0303  087A               	movf	_ch,w
  4249  0304  3A52               	xorlw	82
  4250  0305  1D03               	skipz
  4251  0306  2B0C               	goto	i1l2126
  4252                           
  4253                           ;wallclock.c: 195: {
  4254                           ;wallclock.c: 196: alarm_auto_repeat = 1;
  4255  0307  1283               	bcf	3,5	;RP0=0, select bank0
  4256  0308  1303               	bcf	3,6	;RP1=0, select bank0
  4257  0309  01AA               	clrf	_alarm_auto_repeat
  4258  030A  0AAA               	incf	_alarm_auto_repeat,f
  4259                           
  4260                           ;wallclock.c: 197: return;
  4261  030B  2B13               	goto	i1l200
  4262  030C                     i1l2126:	
  4263                           
  4264                           ;wallclock.c: 198: }
  4265                           ;wallclock.c: 199: if(ch == 'N')
  4266  030C  087A               	movf	_ch,w
  4267  030D  3A4E               	xorlw	78
  4268  030E  1D03               	skipz
  4269  030F  2B13               	goto	i1l200
  4270                           
  4271                           ;wallclock.c: 200: {
  4272                           ;wallclock.c: 201: alarm_auto_repeat = 0;
  4273  0310  1283               	bcf	3,5	;RP0=0, select bank0
  4274  0311  1303               	bcf	3,6	;RP1=0, select bank0
  4275  0312  01AA               	clrf	_alarm_auto_repeat
  4276  0313                     i1l200:	
  4277                           ;wallclock.c: 203: }
  4278                           ;wallclock.c: 204: return;
  4279                           
  4280                           ;wallclock.c: 202: return;
  4281                           
  4282  0313  0879               	movf	??_ISR+5,w
  4283  0314  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0315  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0316  00FF               	movwf	127
  4286  0317  0878               	movf	??_ISR+4,w
  4287  0318  008A               	movwf	10
  4288  0319  0877               	movf	??_ISR+3,w
  4289  031A  0084               	movwf	4
  4290  031B  0E76               	swapf	(??_ISR+2)^(0+-128),w
  4291  031C  0083               	movwf	3
  4292  031D  0EFE               	swapf	126,f
  4293  031E  0E7E               	swapf	126,w
  4294  031F  0009               	retfie
  4295  0320                     __end_of_ISR:	
  4296                           
  4297                           	psect	intentry
  4298  0004                     __pintentry:	
  4299                           ;incstack = 0
  4300                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4301                           
  4302  0004                     interrupt_function:	
  4303  007E                     saved_w	set	btemp
  4304  0004  00FE               	movwf	btemp
  4305  0005  0E03               	swapf	3,w
  4306  0006  00F6               	movwf	??_ISR+2
  4307  0007  0804               	movf	4,w
  4308  0008  00F7               	movwf	??_ISR+3
  4309  0009  080A               	movf	10,w
  4310  000A  00F8               	movwf	??_ISR+4
  4311  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4312  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4313  000D  087F               	movf	btemp+1,w
  4314  000E  00F9               	movwf	??_ISR+5
  4315  000F  29C3               	ljmp	_ISR
  4316                           
  4317                           	psect	text23
  4318  0731                     __ptext23:	
  4319 ;; *************** function ___bmul *****************
  4320 ;; Defined at:
  4321 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  multiplier      1    wreg     unsigned char 
  4324 ;;  multiplicand    1    0[COMMON] unsigned char 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  multiplier      1    3[COMMON] unsigned char 
  4327 ;;  product         1    2[COMMON] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      unsigned char 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1
  4337 ;;      Params:         1       0       0
  4338 ;;      Locals:         2       0       0
  4339 ;;      Temps:          1       0       0
  4340 ;;      Totals:         4       0       0
  4341 ;;Total ram usage:        4 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_ISR
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           
  4351                           ;psect for function ___bmul
  4352  0731                     ___bmul:	
  4353                           
  4354                           ;incstack = 0
  4355                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4356                           ;___bmul@multiplier stored from wreg
  4357  0731  00F3               	movwf	___bmul@multiplier
  4358  0732  01F2               	clrf	___bmul@product
  4359  0733                     i1l1930:	
  4360  0733  1C73               	btfss	___bmul@multiplier,0
  4361  0734  2F39               	goto	i1l1934
  4362  0735  0870               	movf	___bmul@multiplicand,w
  4363  0736  00F1               	movwf	??___bmul
  4364  0737  0871               	movf	??___bmul,w
  4365  0738  07F2               	addwf	___bmul@product,f
  4366  0739                     i1l1934:	
  4367  0739  1003               	clrc
  4368  073A  0DF0               	rlf	___bmul@multiplicand,f
  4369  073B  1003               	clrc
  4370  073C  0CF3               	rrf	___bmul@multiplier,f
  4371  073D  08F3               	movf	___bmul@multiplier,f
  4372  073E  1D03               	skipz
  4373  073F  2F33               	goto	i1l1930
  4374  0740  0872               	movf	___bmul@product,w
  4375  0741  0008               	return
  4376  0742                     __end_of___bmul:	
  4377  007E                     btemp	set	126	;btemp
  4378  007E                     wtemp	set	126
  4379  007E                     wtemp0	set	126
  4380  0080                     wtemp1	set	128
  4381  0082                     wtemp2	set	130
  4382  0084                     wtemp3	set	132
  4383  0086                     wtemp4	set	134
  4384  0088                     wtemp5	set	136
  4385  007F                     wtemp6	set	127
  4386  007E                     ttemp	set	126
  4387  007E                     ttemp0	set	126
  4388  0081                     ttemp1	set	129
  4389  0084                     ttemp2	set	132
  4390  0087                     ttemp3	set	135
  4391  007F                     ttemp4	set	127
  4392  007E                     ltemp	set	126
  4393  007E                     ltemp0	set	126
  4394  0082                     ltemp1	set	130
  4395  0086                     ltemp2	set	134
  4396  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    42
    Data        18
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     26      72
    BANK1            32      0      11

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___bmul

Critical Paths under _main in BANK0

    _main->_rand
    _update_time->_update_date
    _rand->___lmul
    _display_time->_display_date
    _display_date->_MAX7219_DisplayChar
    _MAX7219_DisplayChar->_MAX7219_Write
    _MAX7219_Init->_MAX7219_Clear
    _MAX7219_Init->_MAX7219_SetBrightness
    _MAX7219_ShutdownStop->_MAX7219_Write
    _MAX7219_SetBrightness->_MAX7219_Write
    _MAX7219_DisplayTestStop->_MAX7219_Write
    _MAX7219_Clear->_MAX7219_Write
    _MAX7219_Write->_MAX7219_SendByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8532
                                             24 BANK0      2     2      0
                       _MAX7219_Init
                            ___awmod
                       _display_time
                               _rand
                              _srand
                        _update_time
 ---------------------------------------------------------------------------------
 (1) _update_time                                          1     1      0      23
                                              2 BANK0      1     1      0
                        _check_alarm
                        _update_date
 ---------------------------------------------------------------------------------
 (2) _update_date                                          2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _check_alarm                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rand                                                11     9      2     326
                                             13 BANK0     11     9      2
                             ___lmul
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     128
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     198
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _display_time                                         4     4      0    3756
                                             14 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                       _display_date
                       _display_mins
                       _display_secs
 ---------------------------------------------------------------------------------
 (2) _display_secs                                        12    12      0     228
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _display_mins                                        12    12      0     228
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _display_date                                         2     2      0    1032
                                             12 BANK0      2     2      0
                _MAX7219_DisplayChar
 ---------------------------------------------------------------------------------
 (3) _MAX7219_DisplayChar                                  5     3      2     942
                                              7 BANK0      5     3      2
                 _MAX7219_LookupCode
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (4) _MAX7219_LookupCode                                   3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1038
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     936
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Init                                         1     1      0    3261
                                              9 BANK0      1     1      0
                      _MAX7219_Clear
            _MAX7219_DisplayTestStop
              _MAX7219_SetBrightness
               _MAX7219_ShutdownStop
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (2) _MAX7219_ShutdownStop                                 0     0      0     634
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (2) _MAX7219_SetBrightness                                2     2      0     657
                                              7 BANK0      2     2      0
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (2) _MAX7219_DisplayTestStop                              0     0      0     634
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (2) _MAX7219_Clear                                        2     2      0     702
                                              7 BANK0      2     2      0
                      _MAX7219_Write
 ---------------------------------------------------------------------------------
 (4) _MAX7219_Write                                        2     1      1     634
                                              5 BANK0      2     1      1
                   _MAX7219_SendByte
 ---------------------------------------------------------------------------------
 (5) _MAX7219_SendByte                                     5     5      0     113
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0     516
                                              4 COMMON     6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     516
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX7219_Init
     _MAX7219_Clear
       _MAX7219_Write
         _MAX7219_SendByte
     _MAX7219_DisplayTestStop
       _MAX7219_Write
         _MAX7219_SendByte
     _MAX7219_SetBrightness
       _MAX7219_Write
         _MAX7219_SendByte
     _MAX7219_ShutdownStop
       _MAX7219_Write
         _MAX7219_SendByte
     _MAX7219_Write
       _MAX7219_SendByte
   ___awmod
   _display_time
     ___awdiv
     ___awmod
     _display_date
       _MAX7219_DisplayChar
         _MAX7219_LookupCode
         _MAX7219_Write
           _MAX7219_SendByte
     _display_mins
     _display_secs
   _rand
     ___lmul
     _srand
   _srand
   _update_time
     _check_alarm
     _update_date

 _ISR (ROOT)
   ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       B       7       34.4%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      48       5       90.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      61       8        0.0%
ABS                  0      0      61       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 10 14:04:07 2016

    __size_of_MAX7219_DisplayChar 001A                       _update_time 0652              _MAX7219_ShutdownStop 0784  
                               pc 0002                    ___bmul@product 0072                 MAX7219_SendByte@i 004B  
                              l63 0360                      ___awdiv@sign 004D                                _ch 007A  
                              fsr 0004                     ?_display_date 0070                               l304 0400  
                             l186 0457                               l188 0468                               l286 00B7  
                             l295 04D6                               l378 069A                               l379 069B  
                             l825 0543                               _GIE 005F                               _RB1 0031  
                             _RC0 0038                               _RB2 0032                               _RC1 0039  
                             _RB3 0033                               _RC2 003A                               _RB4 0034  
                             _RB5 0035                               _RB6 0036                               _RC5 003D  
                             _RB7 0037                     ?_display_mins 0070                               _ISR 01C3  
                   ?_display_secs 0070                     ?_display_time 0070                               _day 0063  
                             _hrs 0064                               _ran 0026                               fsr0 0004  
                             indf 0000                      ___awmod@sign 004D             MAX7219_DisplayChar@ch 0052  
                            ?_ISR 0070                              l2006 0469                              l1524 06BB  
                            l1526 06A3                              l1622 047C                              l1550 0334  
                            l1542 0321                              l1528 06C0                              l1632 0497  
                            l1712 0601                              l1608 071E                              l1538 06F0  
                            l1650 03A6                              l1642 04B7                              l1562 034B  
                            l1554 033B                              l1660 03C1                              l1644 04C9  
                            l1708 05EB                              l1564 0350                              l1556 0340  
                            l1734 04F3                              l1670 03E1                              l1638 04AA  
                            l1574 0367                              l1822 0670                              l1760 0532  
                            l1752 051F                              l1744 04FB                              l1728 04E8  
                            l1672 03F3                              l1920 019A                              l1592 0386  
                            l1576 036C                              l1824 0672                              l1746 0509  
                            l1666 03D4                              l1756 052A                              l1772 059E  
                            l1596 038B                              l1790 05C7                              l1784 05AB  
                            l1776 05A5                              l1864 00AD                              l1786 05B9  
                            l1794 05D2                              l1874 00C2                              l1884 00F0  
                            l1798 05DA                              l1888 00F4                              l1986 0431  
                            l1996 0459                              _T0IE 005D                              _T0IF 005A  
                            u1104 068C                              u1105 068A                              u1535 04FE  
                            u1555 050A                              u1635 05AE                              u1475 0603  
                            u1740 0567                              u1565 0516                              u1485 060B  
                            u1741 0568                              u1742 056D                              u1575 0520  
                            u1655 05BF                              u1743 056E                              u1665 05C8  
                            u1755 0584                              _PEIE 005E                              _RCIE 0465  
                            _RCIF 0065                              _TMR0 0001                              _main 0406  
                            _rand 0539                              _mins 0031                              _secs 0034  
                            _year 0067                              btemp 007E                              ltemp 007E  
                            start 0010                              ttemp 007E                              wtemp 007E  
               ___bmul@multiplier 0073            MAX7219_DisplayChar@dot 004F             ?_MAX7219_ShutdownStop 0070  
                           ??_ISR 0074           MAX7219_Write@reg_number 004D                    ??_display_date 0053  
     __size_of_MAX7219_LookupCode 0023                    ??_display_mins 0047                    ??_display_secs 0047  
                           ?_main 0070                    ??_display_time 0055                             ?_rand 0054  
                 __end_of___awdiv 0539                   __end_of___awmod 05E1              MAX7219_SendByte@mask 004A  
                 ___awdiv@divisor 0047                             i1l200 0313                             i1l196 01FA  
                           i1l198 01E0                             i1l199 01E9                   ___awdiv@counter 004C  
                           _RCREG 001A               MAX7219_LookupCode@i 0049                             _SPBRG 0099  
                           _PORTB 0006                             _TRISB 0086                             _TRISC 0087  
             ___lmul@multiplicand 004B              __size_of_check_alarm 0013                             _beeps 002E  
                           _index 007C                             _error 007B                             _randf 0032  
                           _randx 0020                             _msecs 0024                             _month 0066  
                           _srand 076A                   update_date@temp 0048                             pclath 000A  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080              __end_of_MAX7219_Font 0652              __end_of_MAX7219_Init 070D  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F                   __initialization 0011                      __end_of_main 0471  
                    __end_of_rand 0592                _time_display_array 003D                            ??_main 005F  
                          ??_rand 0056    __size_of_MAX7219_SetBrightness 000E     __end_of_MAX7219_SetBrightness 075F  
                          _ADCON1 009F                  ___awdiv@dividend 0049                            ?_srand 0047  
               ?_MAX7219_SendByte 0070                            i1l2110 02F2                            i1l2102 02E4  
                          i1l2122 0303                            i1l2114 02F9                            i1l2106 02E9  
                          i1l2036 01F6                            i1l2126 030C                            i1l2118 02FC  
                          i1l2064 025E                            i1l2082 0299                            i1l2098 02E2  
                          i1l1930 0733                            u210_25 02B6                            i1l1934 0739  
                          u203_25 0222                            u196_25 01D9                ??_MAX7219_SendByte 0047  
          ??_MAX7219_ShutdownStop 004E                            ___bmul 0731                            ___lmul 05E1  
                       ??___awdiv 004B                         ??___awmod 004B                  ___awdiv@quotient 004E  
                 ___awmod@divisor 0047                   ___awmod@counter 004C                     display_date@i 0054  
                          saved_w 007E                            srand@x 0047             __end_of_MAX7219_Clear 0731  
             _MAX7219_DisplayChar 06DD             __end_of_MAX7219_Write 0751           __end_of__initialization 0042  
            __end_of_display_date 06DD              __end_of_display_mins 0406              __end_of_display_secs 04DC  
            __end_of_display_time 01C3               ___bmul@multiplicand 0070          MAX7219_DisplayChar@digit 0051  
                    ?_update_date 0070              ?_MAX7219_DisplayChar 004E                    __pcstackCOMMON 0070  
                    ?_update_time 0070                      __pidataBANK0 077D                      __pidataBANK1 075F  
                   __end_of_srand 0775             __size_of_MAX7219_Init 0016                 _alarm_auto_repeat 002A  
                         ??_srand 0049                        _eagle_flag 002F                        __pbssBANK0 0020  
                      _adjustment 0029                        _alarm_bell 002B                        _alarm_flag 002C  
                      _alarm_mins 002D             ??_MAX7219_DisplayChar 0050                        __pmaintext 0406  
                         ?___bmul 0070                           ?___lmul 0047                        __pintentry 0004  
        ?_MAX7219_DisplayTestStop 0070                    ___lmul@product 0050                      _MAX7219_Font 0628  
                    _MAX7219_Init 06F7                    MAX7219_Clear@i 004F                        __stringtab 0622  
                 __size_of___bmul 0011                           ___awdiv 04DC                   __size_of___lmul 0041  
                         ___awmod 0592        __end_of_MAX7219_LookupCode 06C2                           __ptext1 0652  
                         __ptext2 0320                           __ptext3 070D                           __ptext4 0539  
                         __ptext5 076A                           __ptext6 05E1                           __ptext7 0044  
                         __ptext8 0471                           __ptext9 0399                           _display 00A0  
                    __size_of_ISR 015D                     ??_check_alarm 0047                  ___awmod@dividend 0049  
           __size_of_display_date 001B                           clrloop0 0776             __size_of_display_mins 006D  
           __size_of_display_secs 006B             __size_of_display_time 017F              end_of_initialization 0042  
 __end_of_MAX7219_DisplayTestStop 0791                         _RCSTAbits 0018         __size_of_MAX7219_SendByte 0025  
            __size_of_update_date 0079              __size_of_update_time 0028                      _display_date 06C2  
                    _display_mins 0399                      _display_secs 0471                      _display_time 0044  
           _MAX7219_SetBrightness 0751               __end_of_check_alarm 0720                         _TXSTAbits 0098  
              display_mins@number 0049     __size_of_MAX7219_ShutdownStop 0007                    __end_of___bmul 0742  
                  __end_of___lmul 0622      MAX7219_DisplayChar@character 004E                display_secs@number 0049  
             start_initialization 0011                       __end_of_ISR 0320                          ??___bmul 0071  
                        ??___lmul 004F            __size_of_MAX7219_Clear 0011                _date_display_array 0035  
                     __pdataBANK0 0061                       __pdataBANK1 00A0            __size_of_MAX7219_Write 000F  
                     _check_alarm 070D                       __pbssCOMMON 007A            ?_MAX7219_SetBrightness 0070  
                       ___latbits 0000                     __pcstackBANK0 0047  __size_of_MAX7219_DisplayTestStop 0006  
                     _alarm_array 0043       __end_of_MAX7219_DisplayChar 06F7                   _Twenty_Four_Hrs 0028  
                       _date_flag 0062                         _alarm_hrs 0061                  _MAX7219_SendByte 067A  
                        ?___awdiv 0047                          ?___awmod 0047                         __pstrings 0622  
         MAX7219_SendByte@dataout 0049                _MAX7219_LookupCode 069F                     _MAX7219_Clear 0720  
                  __size_of_srand 000B                     _MAX7219_Write 0742                 interrupt_function 0004  
             ?_MAX7219_LookupCode 0070                         clear_ram0 0775                         _set_alarm 007D  
            ??_MAX7219_LookupCode 0047                       __stringbase 0627   MAX7219_SetBrightness@brightness 004F  
               display_mins@digit 0051                    ?_MAX7219_Clear 0070                 display_secs@digit 0051  
               ___lmul@multiplier 0047                    ?_MAX7219_Write 004C                     ??_update_date 0047  
                   ??_update_time 0049                  __size_of___awdiv 005D                  __size_of___awmod 004F  
              __end_of__stringtab 0628           _MAX7219_DisplayTestStop 078B      __end_of_MAX7219_ShutdownStop 078B  
                        __ptext10 06C2                          __ptext11 06DD                          __ptext20 0742  
                        __ptext12 069F                          __ptext21 067A                          __ptext13 0592  
                        __ptext22 01C3                          __ptext14 04DC                          __ptext23 0731  
                        __ptext15 06F7                          __ptext16 0784                          __ptext17 0751  
                        __ptext18 078B                          __ptext19 0720                     __size_of_main 006B  
                   __size_of_rand 0059                          _min_flag 0065                          _hrs_flag 0030  
                        _sec_flag 0033              MAX7219_Write@dataout 004C                  display_mins@Flag 004B  
                display_mins@Mask 004D                  display_mins@bits 004F                  display_secs@Flag 004B  
                display_secs@Mask 004D               __end_of_update_date 0399                     ?_MAX7219_Init 0070  
             __end_of_update_time 067A           ??_MAX7219_SetBrightness 004E                  display_secs@bits 004F  
                    ?_check_alarm 0070                   ??_MAX7219_Clear 004E                   ??_MAX7219_Write 004D  
                display_time@temp 0058          __end_of_MAX7219_SendByte 069F                          intlevel1 0000  
                       stringcode 0622                    ??_MAX7219_Init 0050         ??_MAX7219_DisplayTestStop 004E  
                      _OPTION_REG 0081                          stringdir 0622                          stringtab 0622  
     MAX7219_LookupCode@character 0048                       _update_date 0320  
