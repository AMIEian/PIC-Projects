

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 05 14:44:46 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   106  0000                     
   107                           	psect	idataBANK0
   108  007A2A                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for ___cgram
   112  007A2A  0C                 	db	12
   113  007A2B  12                 	db	18
   114  007A2C  12                 	db	18
   115  007A2D  0C                 	db	12
   116  007A2E  00                 	db	0
   117  007A2F  00                 	db	0
   118  007A30  00                 	db	0
   119  007A31  00                 	db	0
   120                           
   121                           	psect	mediumconst
   122  007CBE                     __pmediumconst:
   123                           	opt stack 0
   124  007CBE  00                 	db	0
   125  007CBF                     exp@coeff:
   126                           	opt stack 0
   127  007CBF  00                 	db	0
   128  007CC0  80                 	db	128
   129  007CC1  3F                 	db	63
   130  007CC2  72                 	db	114
   131  007CC3  31                 	db	49
   132  007CC4  3F                 	db	63
   133  007CC5  FE                 	db	254
   134  007CC6  75                 	db	117
   135  007CC7  3E                 	db	62
   136  007CC8  58                 	db	88
   137  007CC9  63                 	db	99
   138  007CCA  3D                 	db	61
   139  007CCB  95                 	db	149
   140  007CCC  1D                 	db	29
   141  007CCD  3C                 	db	60
   142  007CCE  C5                 	db	197
   143  007CCF  AE                 	db	174
   144  007CD0  3A                 	db	58
   145  007CD1  79                 	db	121
   146  007CD2  21                 	db	33
   147  007CD3  39                 	db	57
   148  007CD4  94                 	db	148
   149  007CD5  80                 	db	128
   150  007CD6  37                 	db	55
   151  007CD7  93                 	db	147
   152  007CD8  A7                 	db	167
   153  007CD9  35                 	db	53
   154  007CDA  56                 	db	86
   155  007CDB  15                 	db	21
   156  007CDC  34                 	db	52
   157  007CDD                     __end_ofexp@coeff:
   158                           	opt stack 0
   159  007CDD                     log@coeff:
   160                           	opt stack 0
   161  007CDD  00                 	db	0
   162  007CDE  00                 	db	0
   163  007CDF  00                 	db	0
   164  007CE0  00                 	db	0
   165  007CE1  80                 	db	128
   166  007CE2  3F                 	db	63
   167  007CE3  F0                 	db	240
   168  007CE4  FF                 	db	255
   169  007CE5  BE                 	db	190
   170  007CE6  E2                 	db	226
   171  007CE7  A9                 	db	169
   172  007CE8  3E                 	db	62
   173  007CE9  83                 	db	131
   174  007CEA  76                 	db	118
   175  007CEB  BE                 	db	190
   176  007CEC  AE                 	db	174
   177  007CED  2B                 	db	43
   178  007CEE  3E                 	db	62
   179  007CEF  3C                 	db	60
   180  007CF0  C3                 	db	195
   181  007CF1  BD                 	db	189
   182  007CF2  D2                 	db	210
   183  007CF3  13                 	db	19
   184  007CF4  3D                 	db	61
   185  007CF5  78                 	db	120
   186  007CF6  D3                 	db	211
   187  007CF7  BB                 	db	187
   188  007CF8                     __end_oflog@coeff:
   189                           	opt stack 0
   190  0000                     _ADCON0	set	4034
   191  0000                     _ADCON0bits	set	4034
   192  0000                     _ADCON1	set	4033
   193  0000                     _ADRESH	set	4036
   194  0000                     _ADRESL	set	4035
   195  0000                     _EEADR	set	4009
   196  0000                     _EECON1bits	set	4006
   197  0000                     _EECON2	set	4007
   198  0000                     _EEDATA	set	4008
   199  0000                     _INTCONbits	set	4082
   200  0000                     _PIE1bits	set	3997
   201  0000                     _PIR1bits	set	3998
   202  0000                     _PORTB	set	3969
   203  0000                     _RCREG	set	4014
   204  0000                     _RCSTAbits	set	4011
   205  0000                     _SPBRG	set	4015
   206  0000                     _SSPADD	set	4040
   207  0000                     _SSPBUF	set	4041
   208  0000                     _SSPCON1	set	4038
   209  0000                     _SSPCON1bits	set	4038
   210  0000                     _SSPCON2	set	4037
   211  0000                     _SSPCON2bits	set	4037
   212  0000                     _SSPSTAT	set	4039
   213  0000                     _SSPSTATbits	set	4039
   214  0000                     _TRISA	set	3986
   215  0000                     _TRISB	set	3987
   216  0000                     _TRISC	set	3988
   217  0000                     _TRISCbits	set	3988
   218  0000                     _TRISD	set	3989
   219  0000                     _TRISDbits	set	3989
   220  0000                     _TRISE	set	3990
   221  0000                     _TXREG	set	4013
   222  0000                     _TXSTAbits	set	4012
   223  0000                     _INT0IE	set	32660
   224  0000                     _INT0IF	set	32657
   225  0000                     _INTEDG0	set	32654
   226  0000                     _PEIE	set	32662
   227  0000                     _RB1	set	31753
   228  0000                     _RC0	set	31760
   229  0000                     _RC1	set	31761
   230  0000                     _RC2	set	31762
   231  0000                     _RC5	set	31765
   232  0000                     _RCIE	set	31981
   233  0000                     _RCIF	set	31989
   234  0000                     _RD0	set	31768
   235  0000                     _RD1	set	31769
   236  0000                     _RD2	set	31770
   237  0000                     _RD3	set	31771
   238  0000                     _RD4	set	31772
   239  0000                     _RD5	set	31773
   240  0000                     _RD6	set	31774
   241  0000                     _RD7	set	31775
   242  0000                     _RE0	set	31776
   243  0000                     _RE1	set	31777
   244  0000                     _RE2	set	31778
   245  007CF8                     __stringdata:
   246                           	opt stack 0
   247  007CF8                     STR_14:
   248  007CF8  57                 	db	87	;'W'
   249  007CF9  52                 	db	82	;'R'
   250  007CFA  4F                 	db	79	;'O'
   251  007CFB  4E                 	db	78	;'N'
   252  007CFC  47                 	db	71	;'G'
   253  007CFD  20                 	db	32
   254  007CFE  50                 	db	80	;'P'
   255  007CFF  41                 	db	65	;'A'
   256  007D00  43                 	db	67	;'C'
   257  007D01  4B                 	db	75	;'K'
   258  007D02  45                 	db	69	;'E'
   259  007D03  54                 	db	84	;'T'
   260  007D04  20                 	db	32
   261  007D05  52                 	db	82	;'R'
   262  007D06  45                 	db	69	;'E'
   263  007D07  43                 	db	67	;'C'
   264  007D08  45                 	db	69	;'E'
   265  007D09  49                 	db	73	;'I'
   266  007D0A  56                 	db	86	;'V'
   267  007D0B  45                 	db	69	;'E'
   268  007D0C  44                 	db	68	;'D'
   269  007D0D  20                 	db	32
   270  007D0E  00                 	db	0
   271  007D0F  4C                 	db	76	;'L'
   272  007D10  4F                 	db	79	;'O'
   273  007D11  43                 	db	67	;'C'
   274  007D12  41                 	db	65	;'A'
   275  007D13  4C                 	db	76	;'L'
   276  007D14  20                 	db	32
   277  007D15  52                 	db	82	;'R'
   278  007D16  54                 	db	84	;'T'
   279  007D17  43                 	db	67	;'C'
   280  007D18  20                 	db	32
   281  007D19  44                 	db	68	;'D'
   282  007D1A  49                 	db	73	;'I'
   283  007D1B  53                 	db	83	;'S'
   284  007D1C  50                 	db	80	;'P'
   285  007D1D  4C                 	db	76	;'L'
   286  007D1E  41                 	db	65	;'A'
   287  007D1F  59                 	db	89	;'Y'
   288  007D20  2E                 	db	46
   289  007D21  2E                 	db	46
   290  007D22  2E                 	db	46
   291  007D23  21                 	db	33
   292  007D24  00                 	db	0
   293  007D25                     STR_54:
   294  007D25  55                 	db	85	;'U'
   295  007D26  50                 	db	80	;'P'
   296  007D27  44                 	db	68	;'D'
   297  007D28  41                 	db	65	;'A'
   298  007D29  54                 	db	84	;'T'
   299  007D2A  45                 	db	69	;'E'
   300  007D2B  20                 	db	32
   301  007D2C  43                 	db	67	;'C'
   302  007D2D  4F                 	db	79	;'O'
   303  007D2E  4D                 	db	77	;'M'
   304  007D2F  50                 	db	80	;'P'
   305  007D30  4C                 	db	76	;'L'
   306  007D31  45                 	db	69	;'E'
   307  007D32  54                 	db	84	;'T'
   308  007D33  45                 	db	69	;'E'
   309  007D34  44                 	db	68	;'D'
   310  007D35  2E                 	db	46
   311  007D36  2E                 	db	46
   312  007D37  2E                 	db	46
   313  007D38  21                 	db	33
   314  007D39  00                 	db	0
   315  007D3A                     STR_52:
   316  007D3A  55                 	db	85	;'U'
   317  007D3B  50                 	db	80	;'P'
   318  007D3C  44                 	db	68	;'D'
   319  007D3D  41                 	db	65	;'A'
   320  007D3E  54                 	db	84	;'T'
   321  007D3F  49                 	db	73	;'I'
   322  007D40  4E                 	db	78	;'N'
   323  007D41  47                 	db	71	;'G'
   324  007D42  20                 	db	32
   325  007D43  54                 	db	84	;'T'
   326  007D44  48                 	db	72	;'H'
   327  007D45  52                 	db	82	;'R'
   328  007D46  45                 	db	69	;'E'
   329  007D47  53                 	db	83	;'S'
   330  007D48  48                 	db	72	;'H'
   331  007D49  4F                 	db	79	;'O'
   332  007D4A  4C                 	db	76	;'L'
   333  007D4B  44                 	db	68	;'D'
   334  007D4C  53                 	db	83	;'S'
   335  007D4D  00                 	db	0
   336  007D4E                     STR_12:
   337  007D4E  43                 	db	67	;'C'
   338  007D4F  48                 	db	72	;'H'
   339  007D50  41                 	db	65	;'A'
   340  007D51  52                 	db	82	;'R'
   341  007D52  41                 	db	65	;'A'
   342  007D53  43                 	db	67	;'C'
   343  007D54  54                 	db	84	;'T'
   344  007D55  45                 	db	69	;'E'
   345  007D56  52                 	db	82	;'R'
   346  007D57  20                 	db	32
   347  007D58  52                 	db	82	;'R'
   348  007D59  45                 	db	69	;'E'
   349  007D5A  43                 	db	67	;'C'
   350  007D5B  45                 	db	69	;'E'
   351  007D5C  49                 	db	73	;'I'
   352  007D5D  56                 	db	86	;'V'
   353  007D5E  45                 	db	69	;'E'
   354  007D5F  44                 	db	68	;'D'
   355  007D60  20                 	db	32
   356  007D61  00                 	db	0
   357  007D62                     STR_70:
   358  007D62  57                 	db	87	;'W'
   359  007D63  49                 	db	73	;'I'
   360  007D64  52                 	db	82	;'R'
   361  007D65  45                 	db	69	;'E'
   362  007D66  4C                 	db	76	;'L'
   363  007D67  45                 	db	69	;'E'
   364  007D68  53                 	db	83	;'S'
   365  007D69  53                 	db	83	;'S'
   366  007D6A  20                 	db	32
   367  007D6B  46                 	db	70	;'F'
   368  007D6C  41                 	db	65	;'A'
   369  007D6D  49                 	db	73	;'I'
   370  007D6E  4C                 	db	76	;'L'
   371  007D6F  44                 	db	68	;'D'
   372  007D70  2E                 	db	46
   373  007D71  2E                 	db	46
   374  007D72  2E                 	db	46
   375  007D73  21                 	db	33
   376  007D74  00                 	db	0
   377  007D75                     STR_47:
   378  007D75  52                 	db	82	;'R'
   379  007D76  45                 	db	69	;'E'
   380  007D77  51                 	db	81	;'Q'
   381  007D78  55                 	db	85	;'U'
   382  007D79  45                 	db	69	;'E'
   383  007D7A  53                 	db	83	;'S'
   384  007D7B  54                 	db	84	;'T'
   385  007D7C  49                 	db	73	;'I'
   386  007D7D  4E                 	db	78	;'N'
   387  007D7E  47                 	db	71	;'G'
   388  007D7F  20                 	db	32
   389  007D80  52                 	db	82	;'R'
   390  007D81  54                 	db	84	;'T'
   391  007D82  43                 	db	67	;'C'
   392  007D83  2E                 	db	46
   393  007D84  2E                 	db	46
   394  007D85  2E                 	db	46
   395  007D86  00                 	db	0
   396  007D87                     STR_37:
   397  007D87  52                 	db	82	;'R'
   398  007D88  45                 	db	69	;'E'
   399  007D89  41                 	db	65	;'A'
   400  007D8A  44                 	db	68	;'D'
   401  007D8B  49                 	db	73	;'I'
   402  007D8C  4E                 	db	78	;'N'
   403  007D8D  47                 	db	71	;'G'
   404  007D8E  20                 	db	32
   405  007D8F  45                 	db	69	;'E'
   406  007D90  45                 	db	69	;'E'
   407  007D91  50                 	db	80	;'P'
   408  007D92  52                 	db	82	;'R'
   409  007D93  4F                 	db	79	;'O'
   410  007D94  4D                 	db	77	;'M'
   411  007D95  2E                 	db	46
   412  007D96  2E                 	db	46
   413  007D97  2E                 	db	46
   414  007D98  00                 	db	0
   415  007D99                     STR_38:
   416  007D99  53                 	db	83	;'S'
   417  007D9A  45                 	db	69	;'E'
   418  007D9B  4E                 	db	78	;'N'
   419  007D9C  44                 	db	68	;'D'
   420  007D9D  49                 	db	73	;'I'
   421  007D9E  4E                 	db	78	;'N'
   422  007D9F  47                 	db	71	;'G'
   423  007DA0  20                 	db	32
   424  007DA1  50                 	db	80	;'P'
   425  007DA2  41                 	db	65	;'A'
   426  007DA3  43                 	db	67	;'C'
   427  007DA4  4B                 	db	75	;'K'
   428  007DA5  45                 	db	69	;'E'
   429  007DA6  54                 	db	84	;'T'
   430  007DA7  2E                 	db	46
   431  007DA8  2E                 	db	46
   432  007DA9  2E                 	db	46
   433  007DAA  00                 	db	0
   434  007DAB                     STR_18:
   435  007DAB  50                 	db	80	;'P'
   436  007DAC  72                 	db	114	;'r'
   437  007DAD  65                 	db	101	;'e'
   438  007DAE  73                 	db	115	;'s'
   439  007DAF  73                 	db	115	;'s'
   440  007DB0  20                 	db	32
   441  007DB1  61                 	db	97	;'a'
   442  007DB2  20                 	db	32
   443  007DB3  53                 	db	83	;'S'
   444  007DB4  77                 	db	119	;'w'
   445  007DB5  69                 	db	105	;'i'
   446  007DB6  74                 	db	116	;'t'
   447  007DB7  63                 	db	99	;'c'
   448  007DB8  68                 	db	104	;'h'
   449  007DB9  2E                 	db	46
   450  007DBA  2E                 	db	46
   451  007DBB  2E                 	db	46
   452  007DBC  00                 	db	0
   453  007DBD                     STR_7:
   454  007DBD  45                 	db	69	;'E'
   455  007DBE  43                 	db	67	;'C'
   456  007DBF  4F                 	db	79	;'O'
   457  007DC0  20                 	db	32
   458  007DC1  4E                 	db	78	;'N'
   459  007DC2  4F                 	db	79	;'O'
   460  007DC3  54                 	db	84	;'T'
   461  007DC4  20                 	db	32
   462  007DC5  52                 	db	82	;'R'
   463  007DC6  45                 	db	69	;'E'
   464  007DC7  43                 	db	67	;'C'
   465  007DC8  45                 	db	69	;'E'
   466  007DC9  49                 	db	73	;'I'
   467  007DCA  56                 	db	86	;'V'
   468  007DCB  45                 	db	69	;'E'
   469  007DCC  44                 	db	68	;'D'
   470  007DCD  20                 	db	32
   471  007DCE  00                 	db	0
   472  007DCF                     STR_15:
   473  007DCF  43                 	db	67	;'C'
   474  007DD0  48                 	db	72	;'H'
   475  007DD1  41                 	db	65	;'A'
   476  007DD2  52                 	db	82	;'R'
   477  007DD3  41                 	db	65	;'A'
   478  007DD4  43                 	db	67	;'C'
   479  007DD5  54                 	db	84	;'T'
   480  007DD6  45                 	db	69	;'E'
   481  007DD7  52                 	db	82	;'R'
   482  007DD8  20                 	db	32
   483  007DD9  54                 	db	84	;'T'
   484  007DDA  49                 	db	73	;'I'
   485  007DDB  4D                 	db	77	;'M'
   486  007DDC  45                 	db	69	;'E'
   487  007DDD  4F                 	db	79	;'O'
   488  007DDE  55                 	db	85	;'U'
   489  007DDF  54                 	db	84	;'T'
   490  007DE0  00                 	db	0
   491  007DE1                     STR_61:
   492  007DE1  4E                 	db	78	;'N'
   493  007DE2  4F                 	db	79	;'O'
   494  007DE3  54                 	db	84	;'T'
   495  007DE4  48                 	db	72	;'H'
   496  007DE5  49                 	db	73	;'I'
   497  007DE6  4E                 	db	78	;'N'
   498  007DE7  47                 	db	71	;'G'
   499  007DE8  20                 	db	32
   500  007DE9  54                 	db	84	;'T'
   501  007DEA  4F                 	db	79	;'O'
   502  007DEB  20                 	db	32
   503  007DEC  53                 	db	83	;'S'
   504  007DED  45                 	db	69	;'E'
   505  007DEE  4E                 	db	78	;'N'
   506  007DEF  44                 	db	68	;'D'
   507  007DF0  21                 	db	33
   508  007DF1  00                 	db	0
   509  007DF2                     STR_67:
   510  007DF2  46                 	db	70	;'F'
   511  007DF3  4F                 	db	79	;'O'
   512  007DF4  52                 	db	82	;'R'
   513  007DF5  4D                 	db	77	;'M'
   514  007DF6  41                 	db	65	;'A'
   515  007DF7  54                 	db	84	;'T'
   516  007DF8  20                 	db	32
   517  007DF9  43                 	db	67	;'C'
   518  007DFA  4F                 	db	79	;'O'
   519  007DFB  4D                 	db	77	;'M'
   520  007DFC  50                 	db	80	;'P'
   521  007DFD  4C                 	db	76	;'L'
   522  007DFE  45                 	db	69	;'E'
   523  007DFF  54                 	db	84	;'T'
   524  007E00  45                 	db	69	;'E'
   525  007E01  21                 	db	33
   526  007E02  00                 	db	0
   527  007E03                     STR_36:
   528  007E03  53                 	db	83	;'S'
   529  007E04  45                 	db	69	;'E'
   530  007E05  4E                 	db	78	;'N'
   531  007E06  44                 	db	68	;'D'
   532  007E07  49                 	db	73	;'I'
   533  007E08  4E                 	db	78	;'N'
   534  007E09  47                 	db	71	;'G'
   535  007E0A  20                 	db	32
   536  007E0B  54                 	db	84	;'T'
   537  007E0C  4F                 	db	79	;'O'
   538  007E0D  20                 	db	32
   539  007E0E  43                 	db	67	;'C'
   540  007E0F  4E                 	db	78	;'N'
   541  007E10  54                 	db	84	;'T'
   542  007E11  52                 	db	82	;'R'
   543  007E12  2E                 	db	46
   544  007E13  00                 	db	0
   545  007E14                     STR_17:
   546  007E14  57                 	db	87	;'W'
   547  007E15  65                 	db	101	;'e'
   548  007E16  6C                 	db	108	;'l'
   549  007E17  63                 	db	99	;'c'
   550  007E18  6F                 	db	111	;'o'
   551  007E19  6D                 	db	109	;'m'
   552  007E1A  65                 	db	101	;'e'
   553  007E1B  20                 	db	32
   554  007E1C  74                 	db	116	;'t'
   555  007E1D  6F                 	db	111	;'o'
   556  007E1E  20                 	db	32
   557  007E1F  52                 	db	82	;'R'
   558  007E20  54                 	db	84	;'T'
   559  007E21  55                 	db	85	;'U'
   560  007E22  2D                 	db	45
   561  007E23  31                 	db	49	;'1'
   562  007E24  00                 	db	0
   563  007E25                     STR_53:
   564  007E25  55                 	db	85	;'U'
   565  007E26  50                 	db	80	;'P'
   566  007E27  44                 	db	68	;'D'
   567  007E28  41                 	db	65	;'A'
   568  007E29  54                 	db	84	;'T'
   569  007E2A  49                 	db	73	;'I'
   570  007E2B  4E                 	db	78	;'N'
   571  007E2C  47                 	db	71	;'G'
   572  007E2D  20                 	db	32
   573  007E2E  54                 	db	84	;'T'
   574  007E2F  52                 	db	82	;'R'
   575  007E30  49                 	db	73	;'I'
   576  007E31  47                 	db	71	;'G'
   577  007E32  45                 	db	69	;'E'
   578  007E33  52                 	db	82	;'R'
   579  007E34  53                 	db	83	;'S'
   580  007E35  00                 	db	0
   581  007E36                     STR_66:
   582  007E36  46                 	db	70	;'F'
   583  007E37  4F                 	db	79	;'O'
   584  007E38  52                 	db	82	;'R'
   585  007E39  4D                 	db	77	;'M'
   586  007E3A  41                 	db	65	;'A'
   587  007E3B  54                 	db	84	;'T'
   588  007E3C  49                 	db	73	;'I'
   589  007E3D  4E                 	db	78	;'N'
   590  007E3E  47                 	db	71	;'G'
   591  007E3F  20                 	db	32
   592  007E40  4D                 	db	77	;'M'
   593  007E41  45                 	db	69	;'E'
   594  007E42  4D                 	db	77	;'M'
   595  007E43  4F                 	db	79	;'O'
   596  007E44  52                 	db	82	;'R'
   597  007E45  59                 	db	89	;'Y'
   598  007E46  00                 	db	0
   599  007E47                     STR_5:
   600  007E47  57                 	db	87	;'W'
   601  007E48  41                 	db	65	;'A'
   602  007E49  49                 	db	73	;'I'
   603  007E4A  54                 	db	84	;'T'
   604  007E4B  49                 	db	73	;'I'
   605  007E4C  4E                 	db	78	;'N'
   606  007E4D  47                 	db	71	;'G'
   607  007E4E  20                 	db	32
   608  007E4F  46                 	db	70	;'F'
   609  007E50  4F                 	db	79	;'O'
   610  007E51  52                 	db	82	;'R'
   611  007E52  20                 	db	32
   612  007E53  45                 	db	69	;'E'
   613  007E54  43                 	db	67	;'C'
   614  007E55  4F                 	db	79	;'O'
   615  007E56  20                 	db	32
   616  007E57  00                 	db	0
   617  007E58                     STR_10:
   618  007E58  50                 	db	80	;'P'
   619  007E59  41                 	db	65	;'A'
   620  007E5A  43                 	db	67	;'C'
   621  007E5B  4B                 	db	75	;'K'
   622  007E5C  45                 	db	69	;'E'
   623  007E5D  54                 	db	84	;'T'
   624  007E5E  20                 	db	32
   625  007E5F  44                 	db	68	;'D'
   626  007E60  45                 	db	69	;'E'
   627  007E61  4C                 	db	76	;'L'
   628  007E62  49                 	db	73	;'I'
   629  007E63  56                 	db	86	;'V'
   630  007E64  45                 	db	69	;'E'
   631  007E65  52                 	db	82	;'R'
   632  007E66  45                 	db	69	;'E'
   633  007E67  44                 	db	68	;'D'
   634  007E68  00                 	db	0
   635  007E69                     STR_33:
   636  007E69  57                 	db	87	;'W'
   637  007E6A  52                 	db	82	;'R'
   638  007E6B  49                 	db	73	;'I'
   639  007E6C  54                 	db	84	;'T'
   640  007E6D  54                 	db	84	;'T'
   641  007E6E  49                 	db	73	;'I'
   642  007E6F  4E                 	db	78	;'N'
   643  007E70  47                 	db	71	;'G'
   644  007E71  20                 	db	32
   645  007E72  50                 	db	80	;'P'
   646  007E73  41                 	db	65	;'A'
   647  007E74  43                 	db	67	;'C'
   648  007E75  4B                 	db	75	;'K'
   649  007E76  45                 	db	69	;'E'
   650  007E77  54                 	db	84	;'T'
   651  007E78  00                 	db	0
   652  007E79                     STR_3:
   653  007E79  45                 	db	69	;'E'
   654  007E7A  43                 	db	67	;'C'
   655  007E7B  4F                 	db	79	;'O'
   656  007E7C  20                 	db	32
   657  007E7D  53                 	db	83	;'S'
   658  007E7E  55                 	db	85	;'U'
   659  007E7F  43                 	db	67	;'C'
   660  007E80  43                 	db	67	;'C'
   661  007E81  45                 	db	69	;'E'
   662  007E82  53                 	db	83	;'S'
   663  007E83  53                 	db	83	;'S'
   664  007E84  46                 	db	70	;'F'
   665  007E85  55                 	db	85	;'U'
   666  007E86  4C                 	db	76	;'L'
   667  007E87  20                 	db	32
   668  007E88  00                 	db	0
   669  007E89                     STR_8:
   670  007E89  53                 	db	83	;'S'
   671  007E8A  45                 	db	69	;'E'
   672  007E8B  4E                 	db	78	;'N'
   673  007E8C  44                 	db	68	;'D'
   674  007E8D  49                 	db	73	;'I'
   675  007E8E  4E                 	db	78	;'N'
   676  007E8F  47                 	db	71	;'G'
   677  007E90  20                 	db	32
   678  007E91  50                 	db	80	;'P'
   679  007E92  41                 	db	65	;'A'
   680  007E93  43                 	db	67	;'C'
   681  007E94  4B                 	db	75	;'K'
   682  007E95  45                 	db	69	;'E'
   683  007E96  54                 	db	84	;'T'
   684  007E97  20                 	db	32
   685  007E98  00                 	db	0
   686  007E99                     STR_35:
   687  007E99  4D                 	db	77	;'M'
   688  007E9A  45                 	db	69	;'E'
   689  007E9B  4D                 	db	77	;'M'
   690  007E9C  4F                 	db	79	;'O'
   691  007E9D  52                 	db	82	;'R'
   692  007E9E  59                 	db	89	;'Y'
   693  007E9F  20                 	db	32
   694  007EA0  46                 	db	70	;'F'
   695  007EA1  55                 	db	85	;'U'
   696  007EA2  4C                 	db	76	;'L'
   697  007EA3  4C                 	db	76	;'L'
   698  007EA4  2E                 	db	46
   699  007EA5  2E                 	db	46
   700  007EA6  2E                 	db	46
   701  007EA7  00                 	db	0
   702  007EA8                     STR_28:
   703  007EA8  53                 	db	83	;'S'
   704  007EA9  45                 	db	69	;'E'
   705  007EAA  43                 	db	67	;'C'
   706  007EAB  4F                 	db	79	;'O'
   707  007EAC  4E                 	db	78	;'N'
   708  007EAD  44                 	db	68	;'D'
   709  007EAE  20                 	db	32
   710  007EAF  52                 	db	82	;'R'
   711  007EB0  45                 	db	69	;'E'
   712  007EB1  41                 	db	65	;'A'
   713  007EB2  44                 	db	68	;'D'
   714  007EB3  49                 	db	73	;'I'
   715  007EB4  4E                 	db	78	;'N'
   716  007EB5  47                 	db	71	;'G'
   717  007EB6  00                 	db	0
   718  007EB7                     STR_30:
   719  007EB7  4D                 	db	77	;'M'
   720  007EB8  49                 	db	73	;'I'
   721  007EB9  4E                 	db	78	;'N'
   722  007EBA  55                 	db	85	;'U'
   723  007EBB  54                 	db	84	;'T'
   724  007EBC  45                 	db	69	;'E'
   725  007EBD  20                 	db	32
   726  007EBE  52                 	db	82	;'R'
   727  007EBF  45                 	db	69	;'E'
   728  007EC0  41                 	db	65	;'A'
   729  007EC1  44                 	db	68	;'D'
   730  007EC2  49                 	db	73	;'I'
   731  007EC3  4E                 	db	78	;'N'
   732  007EC4  47                 	db	71	;'G'
   733  007EC5  00                 	db	0
   734  007EC6                     STR_22:
   735  007EC6  44                 	db	68	;'D'
   736  007EC7  41                 	db	65	;'A'
   737  007EC8  54                 	db	84	;'T'
   738  007EC9  41                 	db	65	;'A'
   739  007ECA  20                 	db	32
   740  007ECB  54                 	db	84	;'T'
   741  007ECC  4F                 	db	79	;'O'
   742  007ECD  20                 	db	32
   743  007ECE  43                 	db	67	;'C'
   744  007ECF  45                 	db	69	;'E'
   745  007ED0  4E                 	db	78	;'N'
   746  007ED1  54                 	db	84	;'T'
   747  007ED2  45                 	db	69	;'E'
   748  007ED3  52                 	db	82	;'R'
   749  007ED4  00                 	db	0
   750  007ED5                     STR_16:
   751  007ED5  50                 	db	80	;'P'
   752  007ED6  41                 	db	65	;'A'
   753  007ED7  43                 	db	67	;'C'
   754  007ED8  4B                 	db	75	;'K'
   755  007ED9  45                 	db	69	;'E'
   756  007EDA  54                 	db	84	;'T'
   757  007EDB  20                 	db	32
   758  007EDC  54                 	db	84	;'T'
   759  007EDD  49                 	db	73	;'I'
   760  007EDE  4D                 	db	77	;'M'
   761  007EDF  45                 	db	69	;'E'
   762  007EE0  4F                 	db	79	;'O'
   763  007EE1  55                 	db	85	;'U'
   764  007EE2  54                 	db	84	;'T'
   765  007EE3  00                 	db	0
   766  007EE4                     STR_48:
   767  007EE4  52                 	db	82	;'R'
   768  007EE5  45                 	db	69	;'E'
   769  007EE6  51                 	db	81	;'Q'
   770  007EE7  55                 	db	85	;'U'
   771  007EE8  45                 	db	69	;'E'
   772  007EE9  53                 	db	83	;'S'
   773  007EEA  54                 	db	84	;'T'
   774  007EEB  20                 	db	32
   775  007EEC  53                 	db	83	;'S'
   776  007EED  45                 	db	69	;'E'
   777  007EEE  4E                 	db	78	;'N'
   778  007EEF  54                 	db	84	;'T'
   779  007EF0  21                 	db	33
   780  007EF1  00                 	db	0
   781  007EF2                     STR_23:
   782  007EF2  4D                 	db	77	;'M'
   783  007EF3  4F                 	db	79	;'O'
   784  007EF4  44                 	db	68	;'D'
   785  007EF5  45                 	db	69	;'E'
   786  007EF6  20                 	db	32
   787  007EF7  3D                 	db	61	;'='
   788  007EF8  20                 	db	32
   789  007EF9  50                 	db	80	;'P'
   790  007EFA  41                 	db	65	;'A'
   791  007EFB  52                 	db	82	;'R'
   792  007EFC  41                 	db	65	;'A'
   793  007EFD  4D                 	db	77	;'M'
   794  007EFE  2E                 	db	46
   795  007EFF  00                 	db	0
   796  007F00                     STR_65:
   797  007F00  41                 	db	65	;'A'
   798  007F01  4C                 	db	76	;'L'
   799  007F02  4C                 	db	76	;'L'
   800  007F03  20                 	db	32
   801  007F04  44                 	db	68	;'D'
   802  007F05  41                 	db	65	;'A'
   803  007F06  54                 	db	84	;'T'
   804  007F07  41                 	db	65	;'A'
   805  007F08  20                 	db	32
   806  007F09  53                 	db	83	;'S'
   807  007F0A  45                 	db	69	;'E'
   808  007F0B  4E                 	db	78	;'N'
   809  007F0C  54                 	db	84	;'T'
   810  007F0D  00                 	db	0
   811  007F0E                     STR_24:
   812  007F0E  4C                 	db	76	;'L'
   813  007F0F  4F                 	db	79	;'O'
   814  007F10  43                 	db	67	;'C'
   815  007F11  41                 	db	65	;'A'
   816  007F12  4C                 	db	76	;'L'
   817  007F13  20                 	db	32
   818  007F14  44                 	db	68	;'D'
   819  007F15  49                 	db	73	;'I'
   820  007F16  53                 	db	83	;'S'
   821  007F17  50                 	db	80	;'P'
   822  007F18  4C                 	db	76	;'L'
   823  007F19  41                 	db	65	;'A'
   824  007F1A  59                 	db	89	;'Y'
   825  007F1B  00                 	db	0
   826  007F1C                     STR_6:
   827  007F1C  45                 	db	69	;'E'
   828  007F1D  43                 	db	67	;'C'
   829  007F1E  4F                 	db	79	;'O'
   830  007F1F  20                 	db	32
   831  007F20  52                 	db	82	;'R'
   832  007F21  45                 	db	69	;'E'
   833  007F22  43                 	db	67	;'C'
   834  007F23  45                 	db	69	;'E'
   835  007F24  49                 	db	73	;'I'
   836  007F25  56                 	db	86	;'V'
   837  007F26  45                 	db	69	;'E'
   838  007F27  44                 	db	68	;'D'
   839  007F28  20                 	db	32
   840  007F29  00                 	db	0
   841  007F2A                     STR_50:
   842  007F2A  52                 	db	82	;'R'
   843  007F2B  45                 	db	69	;'E'
   844  007F2C  43                 	db	67	;'C'
   845  007F2D  45                 	db	69	;'E'
   846  007F2E  49                 	db	73	;'I'
   847  007F2F  56                 	db	86	;'V'
   848  007F30  45                 	db	69	;'E'
   849  007F31  44                 	db	68	;'D'
   850  007F32  2E                 	db	46
   851  007F33  2E                 	db	46
   852  007F34  2E                 	db	46
   853  007F35  21                 	db	33
   854  007F36  00                 	db	0
   855  007F37                     STR_39:
   856  007F37  50                 	db	80	;'P'
   857  007F38  41                 	db	65	;'A'
   858  007F39  43                 	db	67	;'C'
   859  007F3A  4B                 	db	75	;'K'
   860  007F3B  45                 	db	69	;'E'
   861  007F3C  54                 	db	84	;'T'
   862  007F3D  20                 	db	32
   863  007F3E  53                 	db	83	;'S'
   864  007F3F  45                 	db	69	;'E'
   865  007F40  4E                 	db	78	;'N'
   866  007F41  54                 	db	84	;'T'
   867  007F42  21                 	db	33
   868  007F43  00                 	db	0
   869  007F44                     STR_34:
   870  007F44  54                 	db	84	;'T'
   871  007F45  4F                 	db	79	;'O'
   872  007F46  20                 	db	32
   873  007F47  45                 	db	69	;'E'
   874  007F48  45                 	db	69	;'E'
   875  007F49  50                 	db	80	;'P'
   876  007F4A  52                 	db	82	;'R'
   877  007F4B  4F                 	db	79	;'O'
   878  007F4C  4D                 	db	77	;'M'
   879  007F4D  2E                 	db	46
   880  007F4E  2E                 	db	46
   881  007F4F  2E                 	db	46
   882  007F50  00                 	db	0
   883  007F51                     STR_51:
   884  007F51  55                 	db	85	;'U'
   885  007F52  50                 	db	80	;'P'
   886  007F53  44                 	db	68	;'D'
   887  007F54  41                 	db	65	;'A'
   888  007F55  54                 	db	84	;'T'
   889  007F56  49                 	db	73	;'I'
   890  007F57  4E                 	db	78	;'N'
   891  007F58  47                 	db	71	;'G'
   892  007F59  20                 	db	32
   893  007F5A  52                 	db	82	;'R'
   894  007F5B  54                 	db	84	;'T'
   895  007F5C  43                 	db	67	;'C'
   896  007F5D  00                 	db	0
   897  007F5E                     STR_26:
   898  007F5E  52                 	db	82	;'R'
   899  007F5F  54                 	db	84	;'T'
   900  007F60  43                 	db	67	;'C'
   901  007F61  20                 	db	32
   902  007F62  53                 	db	83	;'S'
   903  007F63  45                 	db	69	;'E'
   904  007F64  54                 	db	84	;'T'
   905  007F65  54                 	db	84	;'T'
   906  007F66  49                 	db	73	;'I'
   907  007F67  4E                 	db	78	;'N'
   908  007F68  47                 	db	71	;'G'
   909  007F69  53                 	db	83	;'S'
   910  007F6A  00                 	db	0
   911  007F6B                     STR_49:
   912  007F6B  53                 	db	83	;'S'
   913  007F6C  45                 	db	69	;'E'
   914  007F6D  54                 	db	84	;'T'
   915  007F6E  54                 	db	84	;'T'
   916  007F6F  49                 	db	73	;'I'
   917  007F70  4E                 	db	78	;'N'
   918  007F71  47                 	db	71	;'G'
   919  007F72  53                 	db	83	;'S'
   920  007F73  20                 	db	32
   921  007F74  4E                 	db	78	;'N'
   922  007F75  4F                 	db	79	;'O'
   923  007F76  54                 	db	84	;'T'
   924  007F77  00                 	db	0
   925  007F78                     STR_21:
   926  007F78  4D                 	db	77	;'M'
   927  007F79  4F                 	db	79	;'O'
   928  007F7A  44                 	db	68	;'D'
   929  007F7B  45                 	db	69	;'E'
   930  007F7C  20                 	db	32
   931  007F7D  3D                 	db	61	;'='
   932  007F7E  20                 	db	32
   933  007F7F  53                 	db	83	;'S'
   934  007F80  45                 	db	69	;'E'
   935  007F81  4E                 	db	78	;'N'
   936  007F82  44                 	db	68	;'D'
   937  007F83  00                 	db	0
   938  007F84                     STR_68:
   939  007F84  52                 	db	82	;'R'
   940  007F85  46                 	db	70	;'F'
   941  007F86  20                 	db	32
   942  007F87  4C                 	db	76	;'L'
   943  007F88  49                 	db	73	;'I'
   944  007F89  4E                 	db	78	;'N'
   945  007F8A  4B                 	db	75	;'K'
   946  007F8B  20                 	db	32
   947  007F8C  4F                 	db	79	;'O'
   948  007F8D  46                 	db	70	;'F'
   949  007F8E  46                 	db	70	;'F'
   950  007F8F  00                 	db	0
   951  007F90                     STR_9:
   952  007F90  50                 	db	80	;'P'
   953  007F91  41                 	db	65	;'A'
   954  007F92  43                 	db	67	;'C'
   955  007F93  4B                 	db	75	;'K'
   956  007F94  45                 	db	69	;'E'
   957  007F95  54                 	db	84	;'T'
   958  007F96  20                 	db	32
   959  007F97  53                 	db	83	;'S'
   960  007F98  45                 	db	69	;'E'
   961  007F99  4E                 	db	78	;'N'
   962  007F9A  54                 	db	84	;'T'
   963  007F9B  00                 	db	0
   964  007F9C                     STR_69:
   965  007F9C  52                 	db	82	;'R'
   966  007F9D  46                 	db	70	;'F'
   967  007F9E  20                 	db	32
   968  007F9F  4C                 	db	76	;'L'
   969  007FA0  49                 	db	73	;'I'
   970  007FA1  4E                 	db	78	;'N'
   971  007FA2  4B                 	db	75	;'K'
   972  007FA3  20                 	db	32
   973  007FA4  4F                 	db	79	;'O'
   974  007FA5  4E                 	db	78	;'N'
   975  007FA6  00                 	db	0
   976  007FA7                     STR_27:
   977  007FA7  4D                 	db	77	;'M'
   978  007FA8  4F                 	db	79	;'O'
   979  007FA9  44                 	db	68	;'D'
   980  007FAA  45                 	db	69	;'E'
   981  007FAB  20                 	db	32
   982  007FAC  3D                 	db	61	;'='
   983  007FAD  20                 	db	32
   984  007FAE  50                 	db	80	;'P'
   985  007FAF  45                 	db	69	;'E'
   986  007FB0  52                 	db	82	;'R'
   987  007FB1  00                 	db	0
   988  007FB2                     STR_25:
   989  007FB2  4D                 	db	77	;'M'
   990  007FB3  4F                 	db	79	;'O'
   991  007FB4  44                 	db	68	;'D'
   992  007FB5  45                 	db	69	;'E'
   993  007FB6  20                 	db	32
   994  007FB7  3D                 	db	61	;'='
   995  007FB8  20                 	db	32
   996  007FB9  47                 	db	71	;'G'
   997  007FBA  45                 	db	69	;'E'
   998  007FBB  54                 	db	84	;'T'
   999  007FBC  00                 	db	0
  1000  007FBD                     STR_11:
  1001  007FBD  47                 	db	71	;'G'
  1002  007FBE  4F                 	db	79	;'O'
  1003  007FBF  54                 	db	84	;'T'
  1004  007FC0  20                 	db	32
  1005  007FC1  41                 	db	65	;'A'
  1006  007FC2  4E                 	db	78	;'N'
  1007  007FC3  20                 	db	32
  1008  007FC4  45                 	db	69	;'E'
  1009  007FC5  43                 	db	67	;'C'
  1010  007FC6  4F                 	db	79	;'O'
  1011  007FC7  00                 	db	0
  1012  007FC8                     STR_1:
  1013  007FC8  4C                 	db	76	;'L'
  1014  007FC9  49                 	db	73	;'I'
  1015  007FCA  4E                 	db	78	;'N'
  1016  007FCB  45                 	db	69	;'E'
  1017  007FCC  20                 	db	32
  1018  007FCD  46                 	db	70	;'F'
  1019  007FCE  52                 	db	82	;'R'
  1020  007FCF  45                 	db	69	;'E'
  1021  007FD0  45                 	db	69	;'E'
  1022  007FD1  00                 	db	0
  1023  007FD2                     STR_4:
  1024  007FD2  45                 	db	69	;'E'
  1025  007FD3  43                 	db	67	;'C'
  1026  007FD4  4F                 	db	79	;'O'
  1027  007FD5  20                 	db	32
  1028  007FD6  46                 	db	70	;'F'
  1029  007FD7  41                 	db	65	;'A'
  1030  007FD8  49                 	db	73	;'I'
  1031  007FD9  4C                 	db	76	;'L'
  1032  007FDA  00                 	db	0
  1033  007FDB                     STR_2:
  1034  007FDB  45                 	db	69	;'E'
  1035  007FDC  43                 	db	67	;'C'
  1036  007FDD  4F                 	db	79	;'O'
  1037  007FDE  20                 	db	32
  1038  007FDF  53                 	db	83	;'S'
  1039  007FE0  45                 	db	69	;'E'
  1040  007FE1  4E                 	db	78	;'N'
  1041  007FE2  54                 	db	84	;'T'
  1042  007FE3  00                 	db	0
  1043  007FE4                     STR_74:
  1044  007FE4  20                 	db	32
  1045  007FE5  48                 	db	72	;'H'
  1046  007FE6  31                 	db	49	;'1'
  1047  007FE7  3D                 	db	61	;'='
  1048  007FE8  00                 	db	0
  1049  007FE9                     STR_79:
  1050  007FE9  20                 	db	32
  1051  007FEA  48                 	db	72	;'H'
  1052  007FEB  32                 	db	50	;'2'
  1053  007FEC  3D                 	db	61	;'='
  1054  007FED  00                 	db	0
  1055  007FEE                     STR_71:
  1056  007FEE  54                 	db	84	;'T'
  1057  007FEF  31                 	db	49	;'1'
  1058  007FF0  3D                 	db	61	;'='
  1059  007FF1  00                 	db	0
  1060  007FF2                     STR_76:
  1061  007FF2  54                 	db	84	;'T'
  1062  007FF3  32                 	db	50	;'2'
  1063  007FF4  3D                 	db	61	;'='
  1064  007FF5  00                 	db	0
  1065  007FF6                     STR_73:
  1066  007FF6  25                 	db	37
  1067  007FF7  30                 	db	48	;'0'
  1068  007FF8  43                 	db	67	;'C'
  1069  007FF9  00                 	db	0
  1070  007FFA                     STR_75:
  1071  007FFA  25                 	db	37
  1072  007FFB  00                 	db	0
  1073  007FFC                     STR_19:
  1074  007FFC  3A                 	db	58	;':'
  1075  007FFD  00                 	db	0
  1076  007FFE                     __end_of__stringdata:
  1077                           	opt stack 0
  1078                           
  1079                           ; #config settings
  1080  007FFE  00                 	db	0	; dummy byte at the end
  1081  0000                     
  1082                           	psect	cinit
  1083  003D08                     __pcinit:
  1084                           	opt stack 0
  1085  003D08                     start_initialization:
  1086                           	opt stack 0
  1087  003D08                     __initialization:
  1088                           	opt stack 0
  1089                           
  1090                           ; Clear objects allocated to BANK1 (256 bytes)
  1091  003D08  EE01  F000         	lfsr	0,__pbssBANK1
  1092  003D0C  EE11 F000          	lfsr	1,256
  1093  003D10                     clear_0:
  1094  003D10  6AEE               	clrf	postinc0,c
  1095  003D12  50E5               	movf	postdec1,w,c
  1096  003D14  50E1               	movf	fsr1l,w,c
  1097  003D16  E1FC               	bnz	clear_0
  1098  003D18  50E2               	movf	fsr1h,w,c
  1099  003D1A  E1FA               	bnz	clear_0
  1100                           
  1101                           ; Clear objects allocated to BANK0 (58 bytes)
  1102  003D1C  EE00  F0BC         	lfsr	0,__pbssBANK0
  1103  003D20  0E3A               	movlw	58
  1104  003D22                     clear_1:
  1105  003D22  6AEE               	clrf	postinc0,c
  1106  003D24  06E8               	decf	wreg,f,c
  1107  003D26  E1FD               	bnz	clear_1
  1108                           
  1109                           ; Clear objects allocated to COMRAM (20 bytes)
  1110  003D28  EE00  F059         	lfsr	0,__pbssCOMRAM
  1111  003D2C  0E14               	movlw	20
  1112  003D2E                     clear_2:
  1113  003D2E  6AEE               	clrf	postinc0,c
  1114  003D30  06E8               	decf	wreg,f,c
  1115  003D32  E1FD               	bnz	clear_2
  1116                           
  1117                           ; Initialize objects allocated to BANK0 (8 bytes)
  1118                           ; load TBLPTR registers with __pidataBANK0
  1119  003D34  0E2A               	movlw	low __pidataBANK0
  1120  003D36  6EF6               	movwf	tblptrl,c
  1121  003D38  0E7A               	movlw	high __pidataBANK0
  1122  003D3A  6EF7               	movwf	tblptrh,c
  1123  003D3C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1124  003D3E  6EF8               	movwf	tblptru,c
  1125  003D40  EE00  F0F6         	lfsr	0,__pdataBANK0
  1126  003D44  EE10 F008          	lfsr	1,8
  1127  003D48                     copy_data0:
  1128  003D48  0009               	tblrd		*+
  1129  003D4A  CFF5 FFEE          	movff	tablat,postinc0
  1130  003D4E  50E5               	movf	postdec1,w,c
  1131  003D50  50E1               	movf	fsr1l,w,c
  1132  003D52  E1FA               	bnz	copy_data0
  1133  003D54                     end_of_initialization:
  1134                           	opt stack 0
  1135  003D54                     __end_of__initialization:
  1136                           	opt stack 0
  1137  003D54  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1138  003D56  6EF8               	movwf	tblptru,c
  1139  003D58  0100               	movlb	0
  1140  003D5A  EFE3  F004         	goto	_main	;jump to C main() function
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec1	equ	0xFE5
  1148                           fsr1h	equ	0xFE2
  1149                           fsr1l	equ	0xFE1
  1150                           
  1151                           	psect	bssCOMRAM
  1152  000059                     __pbssCOMRAM:
  1153                           	opt stack 0
  1154  000059                     _thresh_temp1:
  1155                           	opt stack 0
  1156  000059                     	ds	3
  1157  00005C                     _Current_Pos:
  1158                           	opt stack 0
  1159  00005C                     	ds	1
  1160  00005D                     _Data_End:
  1161                           	opt stack 0
  1162  00005D                     	ds	1
  1163  00005E                     _Destination_ID:
  1164                           	opt stack 0
  1165  00005E                     	ds	1
  1166  00005F                     _Source_ID:
  1167                           	opt stack 0
  1168  00005F                     	ds	1
  1169  000060                     _UQEnd:
  1170                           	opt stack 0
  1171  000060                     	ds	1
  1172  000061                     _UQFront:
  1173                           	opt stack 0
  1174  000061                     	ds	1
  1175  000062                     _c:
  1176                           	opt stack 0
  1177  000062                     	ds	1
  1178  000063                     _day:
  1179                           	opt stack 0
  1180  000063                     	ds	1
  1181  000064                     _device:
  1182                           	opt stack 0
  1183  000064                     	ds	1
  1184  000065                     _dow:
  1185                           	opt stack 0
  1186  000065                     	ds	1
  1187  000066                     _hr:
  1188                           	opt stack 0
  1189  000066                     	ds	1
  1190  000067                     _min:
  1191                           	opt stack 0
  1192  000067                     	ds	1
  1193  000068                     _month:
  1194                           	opt stack 0
  1195  000068                     	ds	1
  1196  000069                     _sec:
  1197                           	opt stack 0
  1198  000069                     	ds	1
  1199  00006A                     _sec_flag:
  1200                           	opt stack 0
  1201  00006A                     	ds	1
  1202  00006B                     _seconds:
  1203                           	opt stack 0
  1204  00006B                     	ds	1
  1205  00006C                     _year:
  1206                           	opt stack 0
  1207  00006C                     	ds	1
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           postdec1	equ	0xFE5
  1215                           fsr1h	equ	0xFE2
  1216                           fsr1l	equ	0xFE1
  1217                           
  1218                           	psect	bssBANK0
  1219  0000BC                     __pbssBANK0:
  1220                           	opt stack 0
  1221  0000BC                     LCDWriteInt@F3701:
  1222                           	opt stack 0
  1223  0000BC                     	ds	5
  1224  0000C1                     USARTWriteInt@F3686:
  1225                           	opt stack 0
  1226  0000C1                     	ds	5
  1227  0000C6                     _h1:
  1228                           	opt stack 0
  1229  0000C6                     	ds	3
  1230  0000C9                     _h2:
  1231                           	opt stack 0
  1232  0000C9                     	ds	3
  1233  0000CC                     _t1:
  1234                           	opt stack 0
  1235  0000CC                     	ds	3
  1236  0000CF                     _t2:
  1237                           	opt stack 0
  1238  0000CF                     	ds	3
  1239  0000D2                     _thresh_hum1:
  1240                           	opt stack 0
  1241  0000D2                     	ds	3
  1242  0000D5                     _thresh_hum2:
  1243                           	opt stack 0
  1244  0000D5                     	ds	3
  1245  0000D8                     _thresh_temp2:
  1246                           	opt stack 0
  1247  0000D8                     	ds	3
  1248  0000DB                     _trig_hum1:
  1249                           	opt stack 0
  1250  0000DB                     	ds	3
  1251  0000DE                     _trig_hum2:
  1252                           	opt stack 0
  1253  0000DE                     	ds	3
  1254  0000E1                     _trig_temp1:
  1255                           	opt stack 0
  1256  0000E1                     	ds	3
  1257  0000E4                     _trig_temp2:
  1258                           	opt stack 0
  1259  0000E4                     	ds	3
  1260  0000E7                     _Current_Read_Page:
  1261                           	opt stack 0
  1262  0000E7                     	ds	2
  1263  0000E9                     _Current_Write_Page:
  1264                           	opt stack 0
  1265  0000E9                     	ds	2
  1266  0000EB                     _Hum1:
  1267                           	opt stack 0
  1268  0000EB                     	ds	2
  1269  0000ED                     _Hum2:
  1270                           	opt stack 0
  1271  0000ED                     	ds	2
  1272  0000EF                     _Temp1:
  1273                           	opt stack 0
  1274  0000EF                     	ds	2
  1275  0000F1                     _Temp2:
  1276                           	opt stack 0
  1277  0000F1                     	ds	2
  1278  0000F3                     _errno:
  1279                           	opt stack 0
  1280  0000F3                     	ds	2
  1281  0000F5                     _min_flag:
  1282                           	opt stack 0
  1283  0000F5                     	ds	1
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           postinc0	equ	0xFEE
  1289                           wreg	equ	0xFE8
  1290                           postdec1	equ	0xFE5
  1291                           fsr1h	equ	0xFE2
  1292                           fsr1l	equ	0xFE1
  1293                           
  1294                           	psect	dataBANK0
  1295  0000F6                     __pdataBANK0:
  1296                           	opt stack 0
  1297  0000F6                     ___cgram:
  1298                           	opt stack 0
  1299  0000F6                     	ds	8
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           tblptrl	equ	0xFF6
  1303                           tablat	equ	0xFF5
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           postdec1	equ	0xFE5
  1307                           fsr1h	equ	0xFE2
  1308                           fsr1l	equ	0xFE1
  1309                           
  1310                           	psect	bssBANK1
  1311  000100                     __pbssBANK1:
  1312                           	opt stack 0
  1313  000100                     _PACKET:
  1314                           	opt stack 0
  1315  000100                     	ds	128
  1316  000180                     _URBuff:
  1317                           	opt stack 0
  1318  000180                     	ds	128
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1h	equ	0xFE2
  1327                           fsr1l	equ	0xFE1
  1328                           
  1329                           	psect	cstackBANK2
  1330  000200                     __pcstackBANK2:
  1331                           	opt stack 0
  1332  000200                     per_minute_reading@result:
  1333                           	opt stack 0
  1334  000200                     per_second_reading@result:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x0
  1338  000200                     	ds	1
  1339  000201                     per_minute_reading@msb:
  1340                           	opt stack 0
  1341  000201                     per_second_reading@msb:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x1
  1345  000201                     	ds	1
  1346  000202                     per_minute_reading@lsb:
  1347                           	opt stack 0
  1348  000202                     per_second_reading@lsb:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x2
  1352  000202                     	ds	1
  1353  000203                     per_minute_reading@reading_count:
  1354                           	opt stack 0
  1355  000203                     per_second_reading@reading_count:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x3
  1359  000203                     	ds	1
  1360                           tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1h	equ	0xFE2
  1368                           fsr1l	equ	0xFE1
  1369                           
  1370                           	psect	cstackBANK0
  1371  000080                     __pcstackBANK0:
  1372                           	opt stack 0
  1373  000080                     _exp$2973:
  1374                           	opt stack 0
  1375                           
  1376                           ; 3 bytes @ 0x0
  1377  000080                     	ds	3
  1378  000083                     exp@exponent:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x3
  1382  000083                     	ds	2
  1383  000085                     exp@sign:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x5
  1387  000085                     	ds	1
  1388  000086                     ?_pow:
  1389                           	opt stack 0
  1390  000086                     pow@x:
  1391                           	opt stack 0
  1392                           
  1393                           ; 3 bytes @ 0x6
  1394  000086                     	ds	3
  1395  000089                     pow@y:
  1396                           	opt stack 0
  1397                           
  1398                           ; 3 bytes @ 0x9
  1399  000089                     	ds	3
  1400  00008C                     _pow$2971:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0xC
  1404  00008C                     	ds	3
  1405  00008F                     _pow$2972:
  1406                           	opt stack 0
  1407                           
  1408                           ; 3 bytes @ 0xF
  1409  00008F                     	ds	3
  1410  000092                     pow@sign:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x12
  1414  000092                     	ds	1
  1415  000093                     pow@yi:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x13
  1419  000093                     	ds	4
  1420  000097                     ?_voltage_to_temp:
  1421                           	opt stack 0
  1422  000097                     ?_voltage_to_hum:
  1423                           	opt stack 0
  1424  000097                     voltage_to_temp@voltage:
  1425                           	opt stack 0
  1426  000097                     voltage_to_hum@voltage:
  1427                           	opt stack 0
  1428                           
  1429                           ; 3 bytes @ 0x17
  1430  000097                     	ds	3
  1431  00009A                     voltage_to_temp@temp:
  1432                           	opt stack 0
  1433  00009A                     voltage_to_hum@temp:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0x1A
  1437  00009A                     	ds	3
  1438  00009D                     _voltage_to_temp$2963:
  1439                           	opt stack 0
  1440  00009D                     _voltage_to_hum$2967:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x1D
  1444  00009D                     	ds	3
  1445  0000A0                     _voltage_to_temp$2964:
  1446                           	opt stack 0
  1447  0000A0                     _voltage_to_hum$2968:
  1448                           	opt stack 0
  1449                           
  1450                           ; 3 bytes @ 0x20
  1451  0000A0                     	ds	3
  1452  0000A3                     _voltage_to_temp$2965:
  1453                           	opt stack 0
  1454  0000A3                     _voltage_to_hum$2969:
  1455                           	opt stack 0
  1456                           
  1457                           ; 3 bytes @ 0x23
  1458  0000A3                     	ds	3
  1459  0000A6                     _voltage_to_temp$2966:
  1460                           	opt stack 0
  1461  0000A6                     _voltage_to_hum$2970:
  1462                           	opt stack 0
  1463                           
  1464                           ; 3 bytes @ 0x26
  1465  0000A6                     	ds	3
  1466  0000A9                     get_current_readings@voltage1:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x29
  1470  0000A9                     	ds	3
  1471  0000AC                     get_current_readings@voltage2:
  1472                           	opt stack 0
  1473                           
  1474                           ; 3 bytes @ 0x2C
  1475  0000AC                     	ds	3
  1476  0000AF                     get_current_readings@voltage3:
  1477                           	opt stack 0
  1478                           
  1479                           ; 3 bytes @ 0x2F
  1480  0000AF                     	ds	3
  1481  0000B2                     get_current_readings@voltage4:
  1482                           	opt stack 0
  1483                           
  1484                           ; 3 bytes @ 0x32
  1485  0000B2                     	ds	3
  1486  0000B5                     get_current_readings@ADCResult:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x35
  1490  0000B5                     	ds	2
  1491  0000B7                     get_current_readings@i:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x37
  1495  0000B7                     	ds	1
  1496  0000B8                     ??_per_second_reading:
  1497  0000B8                     ??_per_minute_reading:
  1498                           
  1499                           ; 0 bytes @ 0x38
  1500  0000B8                     	ds	3
  1501  0000BB                     main@choice:
  1502                           	opt stack 0
  1503                           
  1504                           ; 1 bytes @ 0x3B
  1505  0000BB                     	ds	1
  1506                           tblptru	equ	0xFF8
  1507                           tblptrh	equ	0xFF7
  1508                           tblptrl	equ	0xFF6
  1509                           tablat	equ	0xFF5
  1510                           postinc0	equ	0xFEE
  1511                           wreg	equ	0xFE8
  1512                           postdec1	equ	0xFE5
  1513                           fsr1h	equ	0xFE2
  1514                           fsr1l	equ	0xFE1
  1515                           
  1516                           	psect	cstackCOMRAM
  1517  000001                     __pcstackCOMRAM:
  1518                           	opt stack 0
  1519  000001                     ??_USARTHandleRxInt:
  1520  000001                     
  1521                           ; 1 bytes @ 0x0
  1522  000001                     	ds	4
  1523  000005                     USARTHandleRxInt@data:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x4
  1527  000005                     	ds	1
  1528  000006                     ??_ISR:
  1529                           
  1530                           ; 0 bytes @ 0x5
  1531  000006                     	ds	14
  1532  000014                     ??_IdleI2C:
  1533  000014                     ??_ReadI2C:
  1534  000014                     ??_bcd2bin:
  1535  000014                     ??_USARTDataAvailable:
  1536  000014                     ??_SetChanADC:
  1537  000014                     ??_Check_CRC:
  1538  000014                     ?_Calculate_CRC:
  1539                           	opt stack 0
  1540  000014                     ?_ReadADC:
  1541                           	opt stack 0
  1542  000014                     ?___wmul:
  1543                           	opt stack 0
  1544  000014                     ?___awdiv:
  1545                           	opt stack 0
  1546  000014                     ?___awmod:
  1547                           	opt stack 0
  1548  000014                     ?___ftpack:
  1549                           	opt stack 0
  1550  000014                     ?_frexp:
  1551                           	opt stack 0
  1552  000014                     ?___fttol:
  1553                           	opt stack 0
  1554  000014                     LCDBusyLoop@busy:
  1555                           	opt stack 0
  1556  000014                     bin2bcd@binary_value:
  1557                           	opt stack 0
  1558  000014                     Clear_Packet@i:
  1559                           	opt stack 0
  1560  000014                     USARTWriteChar@ch:
  1561                           	opt stack 0
  1562  000014                     USARTReadData@data:
  1563                           	opt stack 0
  1564  000014                     OpenADC@config2:
  1565                           	opt stack 0
  1566  000014                     OpenI2C@slew:
  1567                           	opt stack 0
  1568  000014                     MyDelay@ms:
  1569                           	opt stack 0
  1570  000014                     getkey@msecs:
  1571                           	opt stack 0
  1572  000014                     USARTInit@baud_rate:
  1573                           	opt stack 0
  1574  000014                     Read_b_eep@badd:
  1575                           	opt stack 0
  1576  000014                     Write_b_eep@badd:
  1577                           	opt stack 0
  1578  000014                     ___wmul@multiplier:
  1579                           	opt stack 0
  1580  000014                     ___awdiv@dividend:
  1581                           	opt stack 0
  1582  000014                     ___awmod@dividend:
  1583                           	opt stack 0
  1584  000014                     ___ftpack@arg:
  1585                           	opt stack 0
  1586  000014                     ___ftge@ff1:
  1587                           	opt stack 0
  1588  000014                     ___fttol@f1:
  1589                           	opt stack 0
  1590  000014                     frexp@value:
  1591                           	opt stack 0
  1592                           
  1593                           ; 3 bytes @ 0x13
  1594  000014                     	ds	1
  1595  000015                     ??_WriteI2C:
  1596  000015                     ??_OpenADC:
  1597  000015                     ??_Check_Busy_Line:
  1598  000015                     LCDBusyLoop@temp:
  1599                           	opt stack 0
  1600  000015                     bin2bcd@retval:
  1601                           	opt stack 0
  1602  000015                     bcd2bin@bcd_value:
  1603                           	opt stack 0
  1604  000015                     SetChanADC@channel:
  1605                           	opt stack 0
  1606  000015                     OpenI2C@sync_mode:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x14
  1610  000015                     	ds	1
  1611  000016                     ??_MyDelay:
  1612  000016                     ??_Calculate_CRC:
  1613  000016                     ??_USARTInit:
  1614  000016                     ??_getkey:
  1615  000016                     LCDBusyLoop@status:
  1616                           	opt stack 0
  1617  000016                     bin2bcd@temp:
  1618                           	opt stack 0
  1619  000016                     bcd2bin@temp:
  1620                           	opt stack 0
  1621  000016                     OpenADC@config:
  1622                           	opt stack 0
  1623  000016                     Write_b_eep@bdat:
  1624                           	opt stack 0
  1625  000016                     WriteI2C@data_out:
  1626                           	opt stack 0
  1627  000016                     Check_Busy_Line@ms:
  1628                           	opt stack 0
  1629  000016                     ___wmul@multiplicand:
  1630                           	opt stack 0
  1631  000016                     ___awdiv@divisor:
  1632                           	opt stack 0
  1633  000016                     ___awmod@divisor:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x15
  1637  000016                     	ds	1
  1638  000017                     ??_clear_rom:
  1639  000017                     LCDByte@isdata:
  1640                           	opt stack 0
  1641  000017                     ds1307_init@seconds:
  1642                           	opt stack 0
  1643  000017                     Creat_Packet@Readings:
  1644                           	opt stack 0
  1645  000017                     Write_b_eep@GIE_BIT_VAL:
  1646                           	opt stack 0
  1647  000017                     ___ftpack@exp:
  1648                           	opt stack 0
  1649  000017                     rom_byte_write@address:
  1650                           	opt stack 0
  1651  000017                     rom_byte_read@address:
  1652                           	opt stack 0
  1653  000017                     beep@del:
  1654                           	opt stack 0
  1655  000017                     frexp@eptr:
  1656                           	opt stack 0
  1657  000017                     ___ftge@ff2:
  1658                           	opt stack 0
  1659                           
  1660                           ; 3 bytes @ 0x16
  1661  000017                     	ds	1
  1662  000018                     ??_LCDByte:
  1663  000018                     ??___fttol:
  1664  000018                     Creat_Packet@F_Code:
  1665                           	opt stack 0
  1666  000018                     Check_Busy_Line@n:
  1667                           	opt stack 0
  1668  000018                     ___awdiv@counter:
  1669                           	opt stack 0
  1670  000018                     ___awmod@counter:
  1671                           	opt stack 0
  1672  000018                     ___ftpack@sign:
  1673                           	opt stack 0
  1674  000018                     clear_rom@page:
  1675                           	opt stack 0
  1676  000018                     ___wmul@product:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x17
  1680  000018                     	ds	1
  1681  000019                     ??___ftpack:
  1682  000019                     ??_frexp:
  1683  000019                     ??_rom_byte_read:
  1684  000019                     LCDByte@hn:
  1685                           	opt stack 0
  1686  000019                     rom_byte_write@byte:
  1687                           	opt stack 0
  1688  000019                     ___awdiv@sign:
  1689                           	opt stack 0
  1690  000019                     ___awmod@sign:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0x18
  1694  000019                     	ds	1
  1695  00001A                     ??_rom_byte_write:
  1696  00001A                     ??___ftge:
  1697  00001A                     LCDByte@ln:
  1698                           	opt stack 0
  1699  00001A                     clear_rom@word:
  1700                           	opt stack 0
  1701  00001A                     ___awdiv@quotient:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x19
  1705  00001A                     	ds	1
  1706  00001B                     LCDByte@c:
  1707                           	opt stack 0
  1708  00001B                     Check_CRC@CRC_HI:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x1A
  1712  00001B                     	ds	1
  1713  00001C                     ?___awtoft:
  1714                           	opt stack 0
  1715  00001C                     ?___lbtoft:
  1716                           	opt stack 0
  1717  00001C                     ?___lltoft:
  1718                           	opt stack 0
  1719  00001C                     ?___lwtoft:
  1720                           	opt stack 0
  1721  00001C                     LCDByte@temp:
  1722                           	opt stack 0
  1723  00001C                     rom_byte_read@msb:
  1724                           	opt stack 0
  1725  00001C                     Check_CRC@CRC_LOW:
  1726                           	opt stack 0
  1727  00001C                     ___awtoft@c:
  1728                           	opt stack 0
  1729  00001C                     ___lwtoft@c:
  1730                           	opt stack 0
  1731  00001C                     ___lltoft@c:
  1732                           	opt stack 0
  1733                           
  1734                           ; 4 bytes @ 0x1B
  1735  00001C                     	ds	1
  1736  00001D                     ??_LCDInit:
  1737  00001D                     LCDGotoXY@y:
  1738                           	opt stack 0
  1739  00001D                     rom_byte_write@msb:
  1740                           	opt stack 0
  1741  00001D                     rom_byte_read@lsb:
  1742                           	opt stack 0
  1743  00001D                     ___fttol@sign1:
  1744                           	opt stack 0
  1745  00001D                     LCDWriteString@msg:
  1746                           	opt stack 0
  1747  00001D                     LCDWriteInt@val:
  1748                           	opt stack 0
  1749  00001D                     Calculate_CRC@sum:
  1750                           	opt stack 0
  1751  00001D                     Check_CRC@sum:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x1C
  1755  00001D                     	ds	1
  1756  00001E                     LCDInit@style:
  1757                           	opt stack 0
  1758  00001E                     LCDGotoXY@x:
  1759                           	opt stack 0
  1760  00001E                     rom_byte_write@lsb:
  1761                           	opt stack 0
  1762  00001E                     rom_byte_read@data:
  1763                           	opt stack 0
  1764  00001E                     ___fttol@lval:
  1765                           	opt stack 0
  1766                           
  1767                           ; 4 bytes @ 0x1D
  1768  00001E                     	ds	1
  1769  00001F                     ??_LCDWriteString:
  1770  00001F                     LCDInit@__i:
  1771                           	opt stack 0
  1772  00001F                     LCDWriteInt@field_length:
  1773                           	opt stack 0
  1774  00001F                     Calculate_CRC@count:
  1775                           	opt stack 0
  1776  00001F                     Check_CRC@count:
  1777                           	opt stack 0
  1778  00001F                     ___awtoft@sign:
  1779                           	opt stack 0
  1780  00001F                     ___lbtoft@c:
  1781                           	opt stack 0
  1782  00001F                     write_packet_to_page@page_no:
  1783                           	opt stack 0
  1784  00001F                     read_packet_from_page@page_no:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x1E
  1788  00001F                     	ds	1
  1789  000020                     ??_LCDWriteInt:
  1790  000020                     ??_Creat_RTC_Packet:
  1791  000020                     ??___lltoft:
  1792  000020                     ?___ftmul:
  1793                           	opt stack 0
  1794  000020                     LCDWriteString@cc:
  1795                           	opt stack 0
  1796  000020                     Check_CRC@length:
  1797                           	opt stack 0
  1798  000020                     Add_Reading_To_Packet@t1:
  1799                           	opt stack 0
  1800  000020                     ___ftmul@f1:
  1801                           	opt stack 0
  1802                           
  1803                           ; 3 bytes @ 0x1F
  1804  000020                     	ds	1
  1805  000021                     ??_write_packet_to_page:
  1806  000021                     ??_read_packet_from_page:
  1807  000021                     ??_Eco_Test:
  1808  000021                     ??_Eco_Replay:
  1809  000021                     Check_CRC@CRC:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x20
  1813  000021                     	ds	1
  1814  000022                     Eco_Test@re:
  1815                           	opt stack 0
  1816  000022                     Eco_Replay@ts:
  1817                           	opt stack 0
  1818  000022                     ___fttol@exp1:
  1819                           	opt stack 0
  1820  000022                     Add_Reading_To_Packet@h1:
  1821                           	opt stack 0
  1822  000022                     LCDWriteInt@str:
  1823                           	opt stack 0
  1824                           
  1825                           ; 5 bytes @ 0x21
  1826  000022                     	ds	1
  1827  000023                     ?___altoft:
  1828                           	opt stack 0
  1829  000023                     ?___attoft:
  1830                           	opt stack 0
  1831  000023                     write_packet_to_page@msb:
  1832                           	opt stack 0
  1833  000023                     read_packet_from_page@data:
  1834                           	opt stack 0
  1835  000023                     Creat_RTC_Packet@crc_h:
  1836                           	opt stack 0
  1837  000023                     Eco_Test@data:
  1838                           	opt stack 0
  1839  000023                     Eco_Replay@data:
  1840                           	opt stack 0
  1841  000023                     ___attoft@c:
  1842                           	opt stack 0
  1843  000023                     ___ftmul@f2:
  1844                           	opt stack 0
  1845  000023                     ___altoft@c:
  1846                           	opt stack 0
  1847                           
  1848                           ; 4 bytes @ 0x22
  1849  000023                     	ds	1
  1850  000024                     write_packet_to_page@lsb:
  1851                           	opt stack 0
  1852  000024                     read_packet_from_page@msb:
  1853                           	opt stack 0
  1854  000024                     Creat_RTC_Packet@crc_l:
  1855                           	opt stack 0
  1856  000024                     Eco_Replay@n:
  1857                           	opt stack 0
  1858  000024                     ___lltoft@exp:
  1859                           	opt stack 0
  1860  000024                     Add_Reading_To_Packet@t2:
  1861                           	opt stack 0
  1862  000024                     Eco_Test@ts:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x23
  1866  000024                     	ds	1
  1867  000025                     ??_Receive_Packet:
  1868  000025                     read_packet_from_page@lsb:
  1869                           	opt stack 0
  1870  000025                     write_packet_to_page@address:
  1871                           	opt stack 0
  1872  000025                     Creat_RTC_Packet@packet_crc:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x24
  1876  000025                     	ds	1
  1877  000026                     ??___ftmul:
  1878  000026                     Eco_Test@n:
  1879                           	opt stack 0
  1880  000026                     ___attoft@sign:
  1881                           	opt stack 0
  1882  000026                     read_packet_from_page@address:
  1883                           	opt stack 0
  1884  000026                     Add_Reading_To_Packet@h2:
  1885                           	opt stack 0
  1886  000026                     Receive_Packet@msecs:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x25
  1890  000026                     	ds	1
  1891  000027                     ??_Send_Packet:
  1892  000027                     ??___altoft:
  1893  000027                     write_packet_to_page@count:
  1894                           	opt stack 0
  1895  000027                     LCDWriteInt@j:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x26
  1899  000027                     	ds	1
  1900  000028                     ??_Add_Reading_To_Packet:
  1901  000028                     read_packet_from_page@count:
  1902                           	opt stack 0
  1903  000028                     Receive_Packet@count:
  1904                           	opt stack 0
  1905  000028                     Send_Packet@ts:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x27
  1909  000028                     	ds	1
  1910  000029                     Receive_Packet@n:
  1911                           	opt stack 0
  1912  000029                     ___ftmul@exp:
  1913                           	opt stack 0
  1914  000029                     LCDWriteInt@i:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x28
  1918  000029                     	ds	1
  1919  00002A                     Add_Reading_To_Packet@t1_h:
  1920                           	opt stack 0
  1921  00002A                     Send_Packet@count:
  1922                           	opt stack 0
  1923  00002A                     Receive_Packet@result:
  1924                           	opt stack 0
  1925  00002A                     ___ftmul@f3_as_product:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x29
  1929  00002A                     	ds	1
  1930  00002B                     ??_DisplayReadings:
  1931  00002B                     Add_Reading_To_Packet@t1_l:
  1932                           	opt stack 0
  1933  00002B                     Send_Packet@result:
  1934                           	opt stack 0
  1935  00002B                     ___altoft@exp:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x2A
  1939  00002B                     	ds	1
  1940  00002C                     Add_Reading_To_Packet@h1_h:
  1941                           	opt stack 0
  1942  00002C                     Send_Packet@n:
  1943                           	opt stack 0
  1944  00002C                     ___altoft@sign:
  1945                           	opt stack 0
  1946                           
  1947                           ; 1 bytes @ 0x2B
  1948  00002C                     	ds	1
  1949  00002D                     Add_Reading_To_Packet@h1_l:
  1950                           	opt stack 0
  1951  00002D                     Send_Packet@data:
  1952                           	opt stack 0
  1953  00002D                     ___ftmul@cntr:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x2C
  1957  00002D                     	ds	1
  1958  00002E                     Add_Reading_To_Packet@t2_h:
  1959                           	opt stack 0
  1960  00002E                     tx_packet@attempts:
  1961                           	opt stack 0
  1962  00002E                     _DisplayReadings$1261:
  1963                           	opt stack 0
  1964  00002E                     ___ftmul@sign:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x2D
  1968  00002E                     	ds	1
  1969  00002F                     ?___ftdiv:
  1970                           	opt stack 0
  1971  00002F                     ?___ftneg:
  1972                           	opt stack 0
  1973  00002F                     Add_Reading_To_Packet@t2_l:
  1974                           	opt stack 0
  1975  00002F                     tx_packet@res:
  1976                           	opt stack 0
  1977  00002F                     _DisplayReadings$1267:
  1978                           	opt stack 0
  1979  00002F                     ___ftdiv@f1:
  1980                           	opt stack 0
  1981  00002F                     ___ftneg@f1:
  1982                           	opt stack 0
  1983                           
  1984                           ; 3 bytes @ 0x2E
  1985  00002F                     	ds	1
  1986  000030                     Add_Reading_To_Packet@h2_h:
  1987                           	opt stack 0
  1988  000030                     rtc_setting@atm:
  1989                           	opt stack 0
  1990  000030                     data_to_center@result:
  1991                           	opt stack 0
  1992  000030                     DisplayReadings@fract:
  1993                           	opt stack 0
  1994                           
  1995                           ; 1 bytes @ 0x2F
  1996  000030                     	ds	1
  1997  000031                     Add_Reading_To_Packet@h2_l:
  1998                           	opt stack 0
  1999  000031                     rtc_setting@mem_loc:
  2000                           	opt stack 0
  2001  000031                     data_to_center@attempts:
  2002                           	opt stack 0
  2003  000031                     DisplayReadings@dec:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x30
  2007  000031                     	ds	1
  2008  000032                     ?___ftadd:
  2009                           	opt stack 0
  2010  000032                     Add_Reading_To_Packet@CRC_HI:
  2011                           	opt stack 0
  2012  000032                     rtc_setting@s:
  2013                           	opt stack 0
  2014  000032                     ___ftadd@f1:
  2015                           	opt stack 0
  2016  000032                     ___ftdiv@f2:
  2017                           	opt stack 0
  2018                           
  2019                           ; 3 bytes @ 0x31
  2020  000032                     	ds	1
  2021  000033                     Add_Reading_To_Packet@CRC_LOW:
  2022                           	opt stack 0
  2023  000033                     rtc_setting@result:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x32
  2027  000033                     	ds	1
  2028  000034                     rtc_setting@i:
  2029                           	opt stack 0
  2030  000034                     Add_Reading_To_Packet@CRC:
  2031                           	opt stack 0
  2032                           
  2033                           ; 2 bytes @ 0x33
  2034  000034                     	ds	1
  2035  000035                     ??___ftdiv:
  2036  000035                     ___ftadd@f2:
  2037                           	opt stack 0
  2038                           
  2039                           ; 3 bytes @ 0x34
  2040  000035                     	ds	3
  2041  000038                     ??___ftadd:
  2042  000038                     ___ftdiv@cntr:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0x37
  2046  000038                     	ds	1
  2047  000039                     ___ftdiv@f3:
  2048                           	opt stack 0
  2049                           
  2050                           ; 3 bytes @ 0x38
  2051  000039                     	ds	2
  2052  00003B                     ___ftadd@sign:
  2053                           	opt stack 0
  2054                           
  2055                           ; 1 bytes @ 0x3A
  2056  00003B                     	ds	1
  2057  00003C                     ___ftadd@exp2:
  2058                           	opt stack 0
  2059  00003C                     ___ftdiv@exp:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x3B
  2063  00003C                     	ds	1
  2064  00003D                     ___ftadd@exp1:
  2065                           	opt stack 0
  2066  00003D                     ___ftdiv@sign:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x3C
  2070  00003D                     	ds	1
  2071  00003E                     ?_modf:
  2072                           	opt stack 0
  2073  00003E                     ?___ftsub:
  2074                           	opt stack 0
  2075  00003E                     ?_floor:
  2076                           	opt stack 0
  2077  00003E                     ?_eval_poly:
  2078                           	opt stack 0
  2079  00003E                     RTUInit@adr:
  2080                           	opt stack 0
  2081  00003E                     ___ftsub@f1:
  2082                           	opt stack 0
  2083  00003E                     modf@value:
  2084                           	opt stack 0
  2085  00003E                     floor@x:
  2086                           	opt stack 0
  2087  00003E                     eval_poly@x:
  2088                           	opt stack 0
  2089                           
  2090                           ; 3 bytes @ 0x3D
  2091  00003E                     	ds	2
  2092  000040                     RTUInit@high:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0x3F
  2096  000040                     	ds	1
  2097  000041                     RTUInit@low:
  2098                           	opt stack 0
  2099  000041                     modf@iptr:
  2100                           	opt stack 0
  2101  000041                     eval_poly@d:
  2102                           	opt stack 0
  2103  000041                     ___ftsub@f2:
  2104                           	opt stack 0
  2105  000041                     floor@i:
  2106                           	opt stack 0
  2107                           
  2108                           ; 3 bytes @ 0x40
  2109  000041                     	ds	2
  2110  000043                     ??_modf:
  2111  000043                     eval_poly@n:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x42
  2115  000043                     	ds	1
  2116  000044                     floor@expon:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x43
  2120  000044                     	ds	1
  2121  000045                     ??_eval_poly:
  2122                           
  2123                           ; 0 bytes @ 0x44
  2124  000045                     	ds	2
  2125  000047                     ?_float_to_int:
  2126                           	opt stack 0
  2127  000047                     float_to_int@value:
  2128                           	opt stack 0
  2129  000047                     eval_poly@res:
  2130                           	opt stack 0
  2131                           
  2132                           ; 3 bytes @ 0x46
  2133  000047                     	ds	3
  2134  00004A                     ??_float_to_int:
  2135  00004A                     ?_log:
  2136                           	opt stack 0
  2137  00004A                     ?_ldexp:
  2138                           	opt stack 0
  2139  00004A                     ldexp@value:
  2140                           	opt stack 0
  2141  00004A                     log@x:
  2142                           	opt stack 0
  2143                           
  2144                           ; 3 bytes @ 0x49
  2145  00004A                     	ds	3
  2146  00004D                     ldexp@newexp:
  2147                           	opt stack 0
  2148  00004D                     log@exponent:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0x4C
  2152  00004D                     	ds	1
  2153  00004E                     float_to_int@decimals:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x4D
  2157  00004E                     	ds	1
  2158  00004F                     ??_ldexp:
  2159  00004F                     float_to_int@points:
  2160                           	opt stack 0
  2161                           
  2162                           ; 1 bytes @ 0x4E
  2163  00004F                     	ds	1
  2164  000050                     float_to_int@fractional:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x4F
  2168  000050                     	ds	1
  2169  000051                     ?_exp:
  2170                           	opt stack 0
  2171  000051                     exp@x:
  2172                           	opt stack 0
  2173                           
  2174                           ; 3 bytes @ 0x50
  2175  000051                     	ds	2
  2176  000053                     float_to_int@integral:
  2177                           	opt stack 0
  2178                           
  2179                           ; 3 bytes @ 0x52
  2180  000053                     	ds	1
  2181  000054                     ??_exp:
  2182                           
  2183                           ; 0 bytes @ 0x53
  2184  000054                     	ds	2
  2185  000056                     float_to_int@int_value:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x55
  2189  000056                     	ds	2
  2190  000058                     local_display@s:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x57
  2194  000058                     	ds	1
  2195  000059                     tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           tblptrl	equ	0xFF6
  2198                           tablat	equ	0xFF5
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           postdec1	equ	0xFE5
  2202                           fsr1h	equ	0xFE2
  2203                           fsr1l	equ	0xFE1
  2204                           
  2205                           ; 0 bytes @ 0x58
  2206 ;;
  2207 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2208 ;;
  2209 ;; *************** function _main *****************
  2210 ;; Defined at:
  2211 ;;		line 31 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  choice          1   59[BANK0 ] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;		None               void
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2225 ;;      Params:         0       0       0       0       0       0       0
  2226 ;;      Locals:         0       1       0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0
  2228 ;;      Totals:         0       1       0       0       0       0       0
  2229 ;;Total ram usage:        1 bytes
  2230 ;; Hardware stack levels required when called:   10
  2231 ;; This function calls:
  2232 ;;		_LCDByte
  2233 ;;		_LCDGotoXY
  2234 ;;		_LCDWriteInt
  2235 ;;		_LCDWriteString
  2236 ;;		_MyDelay
  2237 ;;		_RTUInit
  2238 ;;		_beep
  2239 ;;		_data_to_center
  2240 ;;		_ds1307_get_time
  2241 ;;		_getkey
  2242 ;;		_local_display
  2243 ;;		_per_minute_reading
  2244 ;;		_per_second_reading
  2245 ;;		_rtc_setting
  2246 ;; This function is called by:
  2247 ;;		Startup code after reset
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text0
  2252  0009C6                     __ptext0:
  2253                           	opt stack 0
  2254  0009C6                     _main:
  2255                           	opt stack 21
  2256                           
  2257                           ;incstack = 0
  2258  0009C6  FFFF               	dw	65535
  2259                           
  2260                           ;Test1.c: 33: unsigned char choice = 0;
  2261  0009C8  0E00               	movlw	0
  2262  0009CA  0100               	movlb	0	; () banked
  2263  0009CC  6FBB               	movwf	main@choice& (0+255),b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;Test1.c: 34: RTUInit();
  2267  0009CE  EC4D  F000         	call	_RTUInit	;wreg free
  2268                           
  2269                           ;Test1.c: 37: LCDWriteString("Welcome to RTU-1");
  2270  0009D2  0E7E               	movlw	high STR_17
  2271  0009D4  6E1E               	movwf	LCDWriteString@msg+1,c
  2272  0009D6  0E14               	movlw	low STR_17
  2273  0009D8  6E1D               	movwf	LCDWriteString@msg,c
  2274  0009DA  EC15  F019         	call	_LCDWriteString	;wreg free
  2275                           
  2276                           ;Test1.c: 38: MyDelay(1000);
  2277  0009DE  0E03               	movlw	3
  2278  0009E0  6E15               	movwf	MyDelay@ms+1,c
  2279  0009E2  0EE8               	movlw	232
  2280  0009E4  6E14               	movwf	MyDelay@ms,c
  2281  0009E6  EC8E  F03D         	call	_MyDelay	;wreg free
  2282  0009EA                     l11013:
  2283                           
  2284                           ;Test1.c: 40: {
  2285                           ;Test1.c: 41: choice = 0;
  2286  0009EA  0E00               	movlw	0
  2287  0009EC  0100               	movlb	0	; () banked
  2288  0009EE  6FBB               	movwf	main@choice& (0+255),b
  2289                           
  2290                           ;Test1.c: 42: while(choice == 0)
  2291  0009F0  D054               	goto	l11047
  2292  0009F2                     l11015:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;Test1.c: 43: {
  2296                           ;Test1.c: 44: choice = getkey(5);
  2297  0009F2  0E00               	movlw	0
  2298  0009F4  6E15               	movwf	getkey@msecs+1,c
  2299  0009F6  0E05               	movlw	5
  2300  0009F8  6E14               	movwf	getkey@msecs,c
  2301  0009FA  ECF2  F01D         	call	_getkey	;wreg free
  2302  0009FE  0100               	movlb	0	; () banked
  2303  000A00  6FBB               	movwf	main@choice& (0+255),b
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;Test1.c: 45: if(sec_flag == 1)
  2307  000A02  046A               	decf	_sec_flag,w,c
  2308  000A04  A4D8               	btfss	status,2,c
  2309  000A06  D049               	goto	l11047
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;Test1.c: 46: {
  2313                           ;Test1.c: 47: sec_flag = 0;
  2314  000A08  0E00               	movlw	0
  2315  000A0A  6E6A               	movwf	_sec_flag,c
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;Test1.c: 48: ds1307_get_time();
  2319  000A0C  EC30  F01C         	call	_ds1307_get_time	;wreg free
  2320                           
  2321                           ;Test1.c: 50: (LCDByte(0b00000001,0));
  2322  000A10  0E00               	movlw	0
  2323  000A12  6E17               	movwf	LCDByte@isdata,c
  2324  000A14  0E01               	movlw	1
  2325  000A16  EC54  F01E         	call	_LCDByte
  2326                           
  2327                           ;Test1.c: 52: LCDWriteString("Press a Switch...");
  2328  000A1A  0E7D               	movlw	high STR_18
  2329  000A1C  6E1E               	movwf	LCDWriteString@msg+1,c
  2330  000A1E  0EAB               	movlw	low STR_18
  2331  000A20  6E1D               	movwf	LCDWriteString@msg,c
  2332  000A22  EC15  F019         	call	_LCDWriteString	;wreg free
  2333                           
  2334                           ;Test1.c: 53: LCDGotoXY(4,1);
  2335  000A26  0E01               	movlw	1
  2336  000A28  6E1D               	movwf	LCDGotoXY@y,c
  2337  000A2A  0E04               	movlw	4
  2338  000A2C  EC72  F01F         	call	_LCDGotoXY
  2339                           
  2340                           ;Test1.c: 54: LCDWriteInt(hr,2);
  2341  000A30  C066  F01D         	movff	_hr,LCDWriteInt@val
  2342  000A34  6A1E               	clrf	LCDWriteInt@val+1,c
  2343  000A36  0E02               	movlw	2
  2344  000A38  6E1F               	movwf	LCDWriteInt@field_length,c
  2345  000A3A  EC74  F012         	call	_LCDWriteInt	;wreg free
  2346                           
  2347                           ;Test1.c: 55: LCDGotoXY(6,1);
  2348  000A3E  0E01               	movlw	1
  2349  000A40  6E1D               	movwf	LCDGotoXY@y,c
  2350  000A42  0E06               	movlw	6
  2351  000A44  EC72  F01F         	call	_LCDGotoXY
  2352                           
  2353                           ;Test1.c: 56: LCDWriteString(":");
  2354  000A48  0E7F               	movlw	high STR_19
  2355  000A4A  6E1E               	movwf	LCDWriteString@msg+1,c
  2356  000A4C  0EFC               	movlw	low STR_19
  2357  000A4E  6E1D               	movwf	LCDWriteString@msg,c
  2358  000A50  EC15  F019         	call	_LCDWriteString	;wreg free
  2359                           
  2360                           ;Test1.c: 57: LCDGotoXY(7,1);
  2361  000A54  0E01               	movlw	1
  2362  000A56  6E1D               	movwf	LCDGotoXY@y,c
  2363  000A58  0E07               	movlw	7
  2364  000A5A  EC72  F01F         	call	_LCDGotoXY
  2365                           
  2366                           ;Test1.c: 58: LCDWriteInt(min,2);
  2367  000A5E  C067  F01D         	movff	_min,LCDWriteInt@val
  2368  000A62  6A1E               	clrf	LCDWriteInt@val+1,c
  2369  000A64  0E02               	movlw	2
  2370  000A66  6E1F               	movwf	LCDWriteInt@field_length,c
  2371  000A68  EC74  F012         	call	_LCDWriteInt	;wreg free
  2372                           
  2373                           ;Test1.c: 59: LCDGotoXY(9,1);
  2374  000A6C  0E01               	movlw	1
  2375  000A6E  6E1D               	movwf	LCDGotoXY@y,c
  2376  000A70  0E09               	movlw	9
  2377  000A72  EC72  F01F         	call	_LCDGotoXY
  2378                           
  2379                           ;Test1.c: 60: LCDWriteString(":");
  2380  000A76  0E7F               	movlw	high STR_19
  2381  000A78  6E1E               	movwf	LCDWriteString@msg+1,c
  2382  000A7A  0EFC               	movlw	low STR_19
  2383  000A7C  6E1D               	movwf	LCDWriteString@msg,c
  2384  000A7E  EC15  F019         	call	_LCDWriteString	;wreg free
  2385                           
  2386                           ;Test1.c: 61: LCDGotoXY(10,1);
  2387  000A82  0E01               	movlw	1
  2388  000A84  6E1D               	movwf	LCDGotoXY@y,c
  2389  000A86  0E0A               	movlw	10
  2390  000A88  EC72  F01F         	call	_LCDGotoXY
  2391                           
  2392                           ;Test1.c: 62: LCDWriteInt(sec,2);
  2393  000A8C  C069  F01D         	movff	_sec,LCDWriteInt@val
  2394  000A90  6A1E               	clrf	LCDWriteInt@val+1,c
  2395  000A92  0E02               	movlw	2
  2396  000A94  6E1F               	movwf	LCDWriteInt@field_length,c
  2397  000A96  EC74  F012         	call	_LCDWriteInt	;wreg free
  2398  000A9A                     l11047:
  2399  000A9A  0100               	movlb	0	; () banked
  2400  000A9C  51BB               	movf	main@choice& (0+255),w,b
  2401  000A9E  B4D8               	btfsc	status,2,c
  2402  000AA0  D7A8               	goto	l11015
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;Test1.c: 63: }
  2406                           ;Test1.c: 64: }
  2407                           ;Test1.c: 65: (LCDByte(0b00000001,0));
  2408                           
  2409                           ; BSR set to: 0
  2410  000AA2  0E00               	movlw	0
  2411  000AA4  6E17               	movwf	LCDByte@isdata,c
  2412  000AA6  0E01               	movlw	1
  2413  000AA8  EC54  F01E         	call	_LCDByte
  2414                           
  2415                           ;Test1.c: 66: beep(50);
  2416  000AAC  0E00               	movlw	0
  2417  000AAE  6E18               	movwf	beep@del+1,c
  2418  000AB0  0E32               	movlw	50
  2419  000AB2  6E17               	movwf	beep@del,c
  2420  000AB4  EC4A  F03D         	call	_beep	;wreg free
  2421                           
  2422                           ;Test1.c: 68: switch(choice)
  2423  000AB8  D0A6               	goto	l11101
  2424  000ABA                     l11051:
  2425                           
  2426                           ;Test1.c: 71: LCDWriteString("MODE = SEND");
  2427  000ABA  0E7F               	movlw	high STR_21
  2428  000ABC  6E1E               	movwf	LCDWriteString@msg+1,c
  2429  000ABE  0E78               	movlw	low STR_21
  2430  000AC0  6E1D               	movwf	LCDWriteString@msg,c
  2431  000AC2  EC15  F019         	call	_LCDWriteString	;wreg free
  2432                           
  2433                           ;Test1.c: 72: LCDGotoXY(0,1);
  2434  000AC6  0E01               	movlw	1
  2435  000AC8  6E1D               	movwf	LCDGotoXY@y,c
  2436  000ACA  0E00               	movlw	0
  2437  000ACC  EC72  F01F         	call	_LCDGotoXY
  2438                           
  2439                           ;Test1.c: 73: LCDWriteString("DATA TO CENTER");
  2440  000AD0  0E7E               	movlw	high STR_22
  2441  000AD2  6E1E               	movwf	LCDWriteString@msg+1,c
  2442  000AD4  0EC6               	movlw	low STR_22
  2443  000AD6  6E1D               	movwf	LCDWriteString@msg,c
  2444  000AD8  EC15  F019         	call	_LCDWriteString	;wreg free
  2445                           
  2446                           ;Test1.c: 74: MyDelay(100);
  2447  000ADC  0E00               	movlw	0
  2448  000ADE  6E15               	movwf	MyDelay@ms+1,c
  2449  000AE0  0E64               	movlw	100
  2450  000AE2  6E14               	movwf	MyDelay@ms,c
  2451  000AE4  EC8E  F03D         	call	_MyDelay	;wreg free
  2452                           
  2453                           ;Test1.c: 75: (LCDByte(0b00000001,0));
  2454  000AE8  0E00               	movlw	0
  2455  000AEA  6E17               	movwf	LCDByte@isdata,c
  2456  000AEC  0E01               	movlw	1
  2457  000AEE  EC54  F01E         	call	_LCDByte
  2458                           
  2459                           ;Test1.c: 76: data_to_center();
  2460  000AF2  EC67  F00B         	call	_data_to_center	;wreg free
  2461                           
  2462                           ;Test1.c: 77: break;
  2463  000AF6  D779               	goto	l11013
  2464  000AF8                     l11059:
  2465                           
  2466                           ;Test1.c: 79: LCDWriteString("MODE = PARAM.");
  2467  000AF8  0E7E               	movlw	high STR_23
  2468  000AFA  6E1E               	movwf	LCDWriteString@msg+1,c
  2469  000AFC  0EF2               	movlw	low STR_23
  2470  000AFE  6E1D               	movwf	LCDWriteString@msg,c
  2471  000B00  EC15  F019         	call	_LCDWriteString	;wreg free
  2472                           
  2473                           ;Test1.c: 80: LCDGotoXY(0,1);
  2474  000B04  0E01               	movlw	1
  2475  000B06  6E1D               	movwf	LCDGotoXY@y,c
  2476  000B08  0E00               	movlw	0
  2477  000B0A  EC72  F01F         	call	_LCDGotoXY
  2478                           
  2479                           ;Test1.c: 81: LCDWriteString("LOCAL DISPLAY");
  2480  000B0E  0E7F               	movlw	high STR_24
  2481  000B10  6E1E               	movwf	LCDWriteString@msg+1,c
  2482  000B12  0E0E               	movlw	low STR_24
  2483  000B14  6E1D               	movwf	LCDWriteString@msg,c
  2484  000B16  EC15  F019         	call	_LCDWriteString	;wreg free
  2485                           
  2486                           ;Test1.c: 82: MyDelay(100);
  2487  000B1A  0E00               	movlw	0
  2488  000B1C  6E15               	movwf	MyDelay@ms+1,c
  2489  000B1E  0E64               	movlw	100
  2490  000B20  6E14               	movwf	MyDelay@ms,c
  2491  000B22  EC8E  F03D         	call	_MyDelay	;wreg free
  2492                           
  2493                           ;Test1.c: 83: local_display();
  2494  000B26  ECEB  F01F         	call	_local_display	;wreg free
  2495                           
  2496                           ;Test1.c: 84: break;
  2497  000B2A  D75F               	goto	l11013
  2498  000B2C                     l11067:
  2499                           
  2500                           ;Test1.c: 86: LCDWriteString("MODE = GET");
  2501  000B2C  0E7F               	movlw	high STR_25
  2502  000B2E  6E1E               	movwf	LCDWriteString@msg+1,c
  2503  000B30  0EB2               	movlw	low STR_25
  2504  000B32  6E1D               	movwf	LCDWriteString@msg,c
  2505  000B34  EC15  F019         	call	_LCDWriteString	;wreg free
  2506                           
  2507                           ;Test1.c: 87: LCDGotoXY(0,1);
  2508  000B38  0E01               	movlw	1
  2509  000B3A  6E1D               	movwf	LCDGotoXY@y,c
  2510  000B3C  0E00               	movlw	0
  2511  000B3E  EC72  F01F         	call	_LCDGotoXY
  2512                           
  2513                           ;Test1.c: 88: LCDWriteString("RTC SETTINGS");
  2514  000B42  0E7F               	movlw	high STR_26
  2515  000B44  6E1E               	movwf	LCDWriteString@msg+1,c
  2516  000B46  0E5E               	movlw	low STR_26
  2517  000B48  6E1D               	movwf	LCDWriteString@msg,c
  2518  000B4A  EC15  F019         	call	_LCDWriteString	;wreg free
  2519                           
  2520                           ;Test1.c: 89: MyDelay(100);
  2521  000B4E  0E00               	movlw	0
  2522  000B50  6E15               	movwf	MyDelay@ms+1,c
  2523  000B52  0E64               	movlw	100
  2524  000B54  6E14               	movwf	MyDelay@ms,c
  2525  000B56  EC8E  F03D         	call	_MyDelay	;wreg free
  2526                           
  2527                           ;Test1.c: 90: rtc_setting();
  2528  000B5A  EC15  F006         	call	_rtc_setting	;wreg free
  2529                           
  2530                           ;Test1.c: 91: break;
  2531  000B5E  D745               	goto	l11013
  2532  000B60                     l11075:
  2533                           
  2534                           ;Test1.c: 93: LCDWriteString("MODE = PER");
  2535  000B60  0E7F               	movlw	high STR_27
  2536  000B62  6E1E               	movwf	LCDWriteString@msg+1,c
  2537  000B64  0EA7               	movlw	low STR_27
  2538  000B66  6E1D               	movwf	LCDWriteString@msg,c
  2539  000B68  EC15  F019         	call	_LCDWriteString	;wreg free
  2540                           
  2541                           ;Test1.c: 94: LCDGotoXY(0,1);
  2542  000B6C  0E01               	movlw	1
  2543  000B6E  6E1D               	movwf	LCDGotoXY@y,c
  2544  000B70  0E00               	movlw	0
  2545  000B72  EC72  F01F         	call	_LCDGotoXY
  2546                           
  2547                           ;Test1.c: 95: LCDWriteString("SECOND READING");
  2548  000B76  0E7E               	movlw	high STR_28
  2549  000B78  6E1E               	movwf	LCDWriteString@msg+1,c
  2550  000B7A  0EA8               	movlw	low STR_28
  2551  000B7C  6E1D               	movwf	LCDWriteString@msg,c
  2552  000B7E  EC15  F019         	call	_LCDWriteString	;wreg free
  2553                           
  2554                           ;Test1.c: 96: MyDelay(100);
  2555  000B82  0E00               	movlw	0
  2556  000B84  6E15               	movwf	MyDelay@ms+1,c
  2557  000B86  0E64               	movlw	100
  2558  000B88  6E14               	movwf	MyDelay@ms,c
  2559  000B8A  EC8E  F03D         	call	_MyDelay	;wreg free
  2560                           
  2561                           ;Test1.c: 97: per_second_reading();
  2562  000B8E  EC5C  F008         	call	_per_second_reading	;wreg free
  2563                           
  2564                           ;Test1.c: 98: break;
  2565  000B92  D72B               	goto	l11013
  2566  000B94                     l11083:
  2567                           
  2568                           ;Test1.c: 100: LCDWriteString("MODE = PER");
  2569  000B94  0E7F               	movlw	high STR_27
  2570  000B96  6E1E               	movwf	LCDWriteString@msg+1,c
  2571  000B98  0EA7               	movlw	low STR_27
  2572  000B9A  6E1D               	movwf	LCDWriteString@msg,c
  2573  000B9C  EC15  F019         	call	_LCDWriteString	;wreg free
  2574                           
  2575                           ;Test1.c: 101: LCDGotoXY(0,1);
  2576  000BA0  0E01               	movlw	1
  2577  000BA2  6E1D               	movwf	LCDGotoXY@y,c
  2578  000BA4  0E00               	movlw	0
  2579  000BA6  EC72  F01F         	call	_LCDGotoXY
  2580                           
  2581                           ;Test1.c: 102: LCDWriteString("MINUTE READING");
  2582  000BAA  0E7E               	movlw	high STR_30
  2583  000BAC  6E1E               	movwf	LCDWriteString@msg+1,c
  2584  000BAE  0EB7               	movlw	low STR_30
  2585  000BB0  6E1D               	movwf	LCDWriteString@msg,c
  2586  000BB2  EC15  F019         	call	_LCDWriteString	;wreg free
  2587                           
  2588                           ;Test1.c: 103: MyDelay(100);
  2589  000BB6  0E00               	movlw	0
  2590  000BB8  6E15               	movwf	MyDelay@ms+1,c
  2591  000BBA  0E64               	movlw	100
  2592  000BBC  6E14               	movwf	MyDelay@ms,c
  2593  000BBE  EC8E  F03D         	call	_MyDelay	;wreg free
  2594                           
  2595                           ;Test1.c: 104: per_minute_reading();
  2596  000BC2  EC41  F007         	call	_per_minute_reading	;wreg free
  2597                           
  2598                           ;Test1.c: 105: break;
  2599  000BC6  D711               	goto	l11013
  2600  000BC8                     l11091:
  2601                           
  2602                           ;Test1.c: 107: LCDWriteString("MODE = PER");
  2603  000BC8  0E7F               	movlw	high STR_27
  2604  000BCA  6E1E               	movwf	LCDWriteString@msg+1,c
  2605  000BCC  0EA7               	movlw	low STR_27
  2606  000BCE  6E1D               	movwf	LCDWriteString@msg,c
  2607  000BD0  EC15  F019         	call	_LCDWriteString	;wreg free
  2608                           
  2609                           ;Test1.c: 108: LCDGotoXY(0,1);
  2610  000BD4  0E01               	movlw	1
  2611  000BD6  6E1D               	movwf	LCDGotoXY@y,c
  2612  000BD8  0E00               	movlw	0
  2613  000BDA  EC72  F01F         	call	_LCDGotoXY
  2614                           
  2615                           ;Test1.c: 109: LCDWriteString("SECOND READING");
  2616  000BDE  0E7E               	movlw	high STR_28
  2617  000BE0  6E1E               	movwf	LCDWriteString@msg+1,c
  2618  000BE2  0EA8               	movlw	low STR_28
  2619  000BE4  6E1D               	movwf	LCDWriteString@msg,c
  2620  000BE6  EC15  F019         	call	_LCDWriteString	;wreg free
  2621                           
  2622                           ;Test1.c: 110: MyDelay(100);
  2623  000BEA  0E00               	movlw	0
  2624  000BEC  6E15               	movwf	MyDelay@ms+1,c
  2625  000BEE  0E64               	movlw	100
  2626  000BF0  6E14               	movwf	MyDelay@ms,c
  2627  000BF2  EC8E  F03D         	call	_MyDelay	;wreg free
  2628                           
  2629                           ;Test1.c: 111: (LCDByte(0b00000001,0));
  2630  000BF6  0E00               	movlw	0
  2631  000BF8  6E17               	movwf	LCDByte@isdata,c
  2632  000BFA  0E01               	movlw	1
  2633  000BFC  EC54  F01E         	call	_LCDByte
  2634                           
  2635                           ;Test1.c: 112: per_second_reading();
  2636  000C00  EC5C  F008         	call	_per_second_reading	;wreg free
  2637                           
  2638                           ;Test1.c: 113: break;
  2639  000C04  D6F2               	goto	l11013
  2640  000C06                     l11101:
  2641  000C06  0100               	movlb	0	; () banked
  2642  000C08  51BB               	movf	main@choice& (0+255),w,b
  2643                           
  2644                           ; Switch size 1, requested type "space"
  2645                           ; Number of cases is 5, Range of values is 1 to 5
  2646                           ; switch strategies available:
  2647                           ; Name         Instructions Cycles
  2648                           ; simple_byte           16     9 (average)
  2649                           ;	Chosen strategy is simple_byte
  2650  000C0A  0A01               	xorlw	1	; case 1
  2651  000C0C  B4D8               	btfsc	status,2,c
  2652  000C0E  D755               	goto	l11051
  2653  000C10  0A03               	xorlw	3	; case 2
  2654  000C12  B4D8               	btfsc	status,2,c
  2655  000C14  D771               	goto	l11059
  2656  000C16  0A01               	xorlw	1	; case 3
  2657  000C18  B4D8               	btfsc	status,2,c
  2658  000C1A  D788               	goto	l11067
  2659  000C1C  0A07               	xorlw	7	; case 4
  2660  000C1E  B4D8               	btfsc	status,2,c
  2661  000C20  D79F               	goto	l11075
  2662  000C22  0A01               	xorlw	1	; case 5
  2663  000C24  B4D8               	btfsc	status,2,c
  2664  000C26  D7B6               	goto	l11083
  2665  000C28  D7CF               	goto	l11091
  2666  000C2A                     __end_of_main:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           postinc0	equ	0xFEE
  2673                           wreg	equ	0xFE8
  2674                           postdec1	equ	0xFE5
  2675                           fsr1h	equ	0xFE2
  2676                           fsr1l	equ	0xFE1
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _rtc_setting *****************
  2680 ;; Defined at:
  2681 ;;		line 279 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  i               1   51[COMRAM] unsigned char 
  2686 ;;  result          1   50[COMRAM] unsigned char 
  2687 ;;  s               1   49[COMRAM] unsigned char 
  2688 ;;  mem_loc         1   48[COMRAM] unsigned char 
  2689 ;;  atm             1   47[COMRAM] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;		None               void
  2692 ;; Registers used:
  2693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2699 ;;      Params:         0       0       0       0       0       0       0
  2700 ;;      Locals:         5       0       0       0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0
  2702 ;;      Totals:         5       0       0       0       0       0       0
  2703 ;;Total ram usage:        5 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    8
  2706 ;; This function calls:
  2707 ;;		_Creat_RTC_Packet
  2708 ;;		_LCDByte
  2709 ;;		_LCDGotoXY
  2710 ;;		_LCDWriteInt
  2711 ;;		_LCDWriteString
  2712 ;;		_MyDelay
  2713 ;;		_Receive_Packet
  2714 ;;		_Write_b_eep
  2715 ;;		_beep
  2716 ;;		_ds1307_get_time
  2717 ;;		_ds1307_set_date_time
  2718 ;;		_tx_packet
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text1
  2725  000C2A                     __ptext1:
  2726                           	opt stack 0
  2727  000C2A                     _rtc_setting:
  2728                           	opt stack 22
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;incstack = 0
  2732  000C2A  FFFF               	dw	65535
  2733                           
  2734                           ;Test1.c: 283: (LCDByte(0b00000001,0));
  2735  000C2C  0E00               	movlw	0
  2736  000C2E  6E17               	movwf	LCDByte@isdata,c
  2737  000C30  0E01               	movlw	1
  2738  000C32  EC54  F01E         	call	_LCDByte
  2739                           
  2740                           ;Test1.c: 284: LCDWriteString("REQUESTING RTC...");
  2741  000C36  0E7D               	movlw	high STR_47
  2742  000C38  6E1E               	movwf	LCDWriteString@msg+1,c
  2743  000C3A  0E75               	movlw	low STR_47
  2744  000C3C  6E1D               	movwf	LCDWriteString@msg,c
  2745  000C3E  EC15  F019         	call	_LCDWriteString	;wreg free
  2746                           
  2747                           ;Test1.c: 287: RC2 = 1;
  2748  000C42  8482               	bsf	3970,2,c	;volatile
  2749                           
  2750                           ;Test1.c: 288: beep(100);
  2751  000C44  0E00               	movlw	0
  2752  000C46  6E18               	movwf	beep@del+1,c
  2753  000C48  0E64               	movlw	100
  2754  000C4A  6E17               	movwf	beep@del,c
  2755  000C4C  EC4A  F03D         	call	_beep	;wreg free
  2756                           
  2757                           ;Test1.c: 289: MyDelay(500);
  2758  000C50  0E01               	movlw	1
  2759  000C52  6E15               	movwf	MyDelay@ms+1,c
  2760  000C54  0EF4               	movlw	244
  2761  000C56  6E14               	movwf	MyDelay@ms,c
  2762  000C58  EC8E  F03D         	call	_MyDelay	;wreg free
  2763                           
  2764                           ;Test1.c: 290: unsigned char result = 0x00;
  2765  000C5C  0E00               	movlw	0
  2766  000C5E  6E33               	movwf	rtc_setting@result,c
  2767                           
  2768                           ;Test1.c: 291: unsigned char atm = 0;
  2769  000C60  0E00               	movlw	0
  2770  000C62  6E30               	movwf	rtc_setting@atm,c
  2771                           
  2772                           ;Test1.c: 293: Creat_RTC_Packet();
  2773  000C64  ECDC  F01A         	call	_Creat_RTC_Packet	;wreg free
  2774                           
  2775                           ;Test1.c: 294: tx_packet();
  2776  000C68  ECDD  F014         	call	_tx_packet	;wreg free
  2777                           
  2778                           ;Test1.c: 295: (LCDByte(0b00000001,0));
  2779  000C6C  0E00               	movlw	0
  2780  000C6E  6E17               	movwf	LCDByte@isdata,c
  2781  000C70  0E01               	movlw	1
  2782  000C72  EC54  F01E         	call	_LCDByte
  2783                           
  2784                           ;Test1.c: 296: LCDWriteString("REQUEST SENT!");
  2785  000C76  0E7E               	movlw	high STR_48
  2786  000C78  6E1E               	movwf	LCDWriteString@msg+1,c
  2787  000C7A  0EE4               	movlw	low STR_48
  2788  000C7C  6E1D               	movwf	LCDWriteString@msg,c
  2789  000C7E  EC15  F019         	call	_LCDWriteString	;wreg free
  2790                           
  2791                           ;Test1.c: 298: while(result == 0x00 && atm < 10)
  2792  000C82  D004               	goto	l10565
  2793  000C84                     l10561:
  2794                           
  2795                           ;Test1.c: 299: {
  2796                           ;Test1.c: 300: result = Receive_Packet();
  2797  000C84  EC75  F00A         	call	_Receive_Packet	;wreg free
  2798  000C88  6E33               	movwf	rtc_setting@result,c
  2799                           
  2800                           ;Test1.c: 301: atm++;
  2801  000C8A  2A30               	incf	rtc_setting@atm,f,c
  2802  000C8C                     l10565:
  2803  000C8C  6633               	tstfsz	rtc_setting@result,c
  2804  000C8E  D003               	goto	l1082
  2805  000C90  0E09               	movlw	9
  2806  000C92  6430               	cpfsgt	rtc_setting@atm,c
  2807  000C94  D7F7               	goto	l10561
  2808  000C96                     l1082:
  2809                           
  2810                           ;Test1.c: 302: }
  2811                           ;Test1.c: 304: RC2 = 0;
  2812  000C96  9482               	bcf	3970,2,c	;volatile
  2813                           
  2814                           ;Test1.c: 305: beep(100);
  2815  000C98  0E00               	movlw	0
  2816  000C9A  6E18               	movwf	beep@del+1,c
  2817  000C9C  0E64               	movlw	100
  2818  000C9E  6E17               	movwf	beep@del,c
  2819  000CA0  EC4A  F03D         	call	_beep	;wreg free
  2820                           
  2821                           ;Test1.c: 306: MyDelay(500);
  2822  000CA4  0E01               	movlw	1
  2823  000CA6  6E15               	movwf	MyDelay@ms+1,c
  2824  000CA8  0EF4               	movlw	244
  2825  000CAA  6E14               	movwf	MyDelay@ms,c
  2826  000CAC  EC8E  F03D         	call	_MyDelay	;wreg free
  2827                           
  2828                           ;Test1.c: 308: if(result == 0x00)
  2829  000CB0  6633               	tstfsz	rtc_setting@result,c
  2830  000CB2  D023               	goto	l10581
  2831  000CB4                     l10573:
  2832                           
  2833                           ;Test1.c: 311: {
  2834                           ;Test1.c: 312: (LCDByte(0b00000001,0));
  2835  000CB4  0E00               	movlw	0
  2836  000CB6  6E17               	movwf	LCDByte@isdata,c
  2837  000CB8  0E01               	movlw	1
  2838  000CBA  EC54  F01E         	call	_LCDByte
  2839                           
  2840                           ;Test1.c: 313: MyDelay(100);
  2841  000CBE  0E00               	movlw	0
  2842  000CC0  6E15               	movwf	MyDelay@ms+1,c
  2843  000CC2  0E64               	movlw	100
  2844  000CC4  6E14               	movwf	MyDelay@ms,c
  2845  000CC6  EC8E  F03D         	call	_MyDelay	;wreg free
  2846                           
  2847                           ;Test1.c: 314: LCDWriteString("SETTINGS NOT");
  2848  000CCA  0E7F               	movlw	high STR_49
  2849  000CCC  6E1E               	movwf	LCDWriteString@msg+1,c
  2850  000CCE  0E6B               	movlw	low STR_49
  2851  000CD0  6E1D               	movwf	LCDWriteString@msg,c
  2852  000CD2  EC15  F019         	call	_LCDWriteString	;wreg free
  2853                           
  2854                           ;Test1.c: 315: LCDGotoXY(0,1);
  2855  000CD6  0E01               	movlw	1
  2856  000CD8  6E1D               	movwf	LCDGotoXY@y,c
  2857  000CDA  0E00               	movlw	0
  2858  000CDC  EC72  F01F         	call	_LCDGotoXY
  2859                           
  2860                           ;Test1.c: 316: LCDWriteString("RECEIVED...!");
  2861  000CE0  0E7F               	movlw	high STR_50
  2862  000CE2  6E1E               	movwf	LCDWriteString@msg+1,c
  2863  000CE4  0E2A               	movlw	low STR_50
  2864  000CE6  6E1D               	movwf	LCDWriteString@msg,c
  2865  000CE8  EC15  F019         	call	_LCDWriteString	;wreg free
  2866                           
  2867                           ;Test1.c: 317: MyDelay(100);
  2868  000CEC  0E00               	movlw	0
  2869  000CEE  6E15               	movwf	MyDelay@ms+1,c
  2870  000CF0  0E64               	movlw	100
  2871  000CF2  6E14               	movwf	MyDelay@ms,c
  2872  000CF4  EC8E  F03D         	call	_MyDelay	;wreg free
  2873  000CF8  D7DD               	goto	l10573
  2874  000CFA                     l10581:
  2875                           
  2876                           ;Test1.c: 318: }
  2877                           ;Test1.c: 319: }
  2878                           ;Test1.c: 320: (LCDByte(0b00000001,0));
  2879  000CFA  0E00               	movlw	0
  2880  000CFC  6E17               	movwf	LCDByte@isdata,c
  2881  000CFE  0E01               	movlw	1
  2882  000D00  EC54  F01E         	call	_LCDByte
  2883                           
  2884                           ;Test1.c: 321: LCDWriteString("UPDATING RTC");
  2885  000D04  0E7F               	movlw	high STR_51
  2886  000D06  6E1E               	movwf	LCDWriteString@msg+1,c
  2887  000D08  0E51               	movlw	low STR_51
  2888  000D0A  6E1D               	movwf	LCDWriteString@msg,c
  2889  000D0C  EC15  F019         	call	_LCDWriteString	;wreg free
  2890                           
  2891                           ;Test1.c: 323: day = PACKET[8];
  2892  000D10  C108  F063         	movff	_PACKET+8,_day	;volatile
  2893                           
  2894                           ;Test1.c: 324: month = PACKET[7];
  2895  000D14  C107  F068         	movff	_PACKET+7,_month	;volatile
  2896                           
  2897                           ;Test1.c: 325: year = PACKET[6];
  2898  000D18  C106  F06C         	movff	_PACKET+6,_year	;volatile
  2899                           
  2900                           ;Test1.c: 326: dow = PACKET[9];
  2901  000D1C  C109  F065         	movff	_PACKET+9,_dow	;volatile
  2902                           
  2903                           ;Test1.c: 327: hr = PACKET[10];
  2904  000D20  C10A  F066         	movff	_PACKET+10,_hr	;volatile
  2905                           
  2906                           ;Test1.c: 328: min = PACKET[11];
  2907  000D24  C10B  F067         	movff	_PACKET+11,_min	;volatile
  2908                           
  2909                           ;Test1.c: 329: sec = PACKET[12];
  2910  000D28  C10C  F069         	movff	_PACKET+12,_sec	;volatile
  2911                           
  2912                           ;Test1.c: 331: ds1307_set_date_time();
  2913  000D2C  EC61  F017         	call	_ds1307_set_date_time	;wreg free
  2914                           
  2915                           ;Test1.c: 332: MyDelay(100);
  2916  000D30  0E00               	movlw	0
  2917  000D32  6E15               	movwf	MyDelay@ms+1,c
  2918  000D34  0E64               	movlw	100
  2919  000D36  6E14               	movwf	MyDelay@ms,c
  2920  000D38  EC8E  F03D         	call	_MyDelay	;wreg free
  2921                           
  2922                           ;Test1.c: 333: Write_b_eep(0x04,0);
  2923  000D3C  0E00               	movlw	0
  2924  000D3E  6E15               	movwf	Write_b_eep@badd+1,c
  2925  000D40  0E04               	movlw	4
  2926  000D42  6E14               	movwf	Write_b_eep@badd,c
  2927  000D44  0E00               	movlw	0
  2928  000D46  6E16               	movwf	Write_b_eep@bdat,c
  2929  000D48  EC94  F01F         	call	_Write_b_eep	;wreg free
  2930                           
  2931                           ;Test1.c: 334: _delay(50);
  2932  000D4C  0E0A               	movlw	10
  2933  000D4E                     u8617:
  2934  000D4E  F000               	nop	
  2935  000D50  2EE8               	decfsz	wreg,f,c
  2936  000D52  D7FD               	goto	u8617
  2937                           
  2938                           ;Test1.c: 337: (LCDByte(0b00000001,0));
  2939  000D54  0E00               	movlw	0
  2940  000D56  6E17               	movwf	LCDByte@isdata,c
  2941  000D58  0E01               	movlw	1
  2942  000D5A  EC54  F01E         	call	_LCDByte
  2943                           
  2944                           ;Test1.c: 338: LCDWriteString("UPDATING THRESHOLDS");
  2945  000D5E  0E7D               	movlw	high STR_52
  2946  000D60  6E1E               	movwf	LCDWriteString@msg+1,c
  2947  000D62  0E3A               	movlw	low STR_52
  2948  000D64  6E1D               	movwf	LCDWriteString@msg,c
  2949  000D66  EC15  F019         	call	_LCDWriteString	;wreg free
  2950                           
  2951                           ;Test1.c: 339: LCDGotoXY(0,1);
  2952  000D6A  0E01               	movlw	1
  2953  000D6C  6E1D               	movwf	LCDGotoXY@y,c
  2954  000D6E  0E00               	movlw	0
  2955  000D70  EC72  F01F         	call	_LCDGotoXY
  2956                           
  2957                           ;Test1.c: 340: LCDWriteString("UPDATING TRIGERS");
  2958  000D74  0E7E               	movlw	high STR_53
  2959  000D76  6E1E               	movwf	LCDWriteString@msg+1,c
  2960  000D78  0E25               	movlw	low STR_53
  2961  000D7A  6E1D               	movwf	LCDWriteString@msg,c
  2962  000D7C  EC15  F019         	call	_LCDWriteString	;wreg free
  2963                           
  2964                           ;Test1.c: 341: char mem_loc = 5;
  2965  000D80  0E05               	movlw	5
  2966  000D82  6E31               	movwf	rtc_setting@mem_loc,c
  2967                           
  2968                           ;Test1.c: 342: char i = 13;
  2969  000D84  0E0D               	movlw	13
  2970  000D86  6E34               	movwf	rtc_setting@i,c
  2971                           
  2972                           ;Test1.c: 343: for(i = 13; i<(13+16);i++)
  2973  000D88  0E0D               	movlw	13
  2974  000D8A  6E34               	movwf	rtc_setting@i,c
  2975  000D8C  D017               	goto	L1
  2976  000D8E                     l10625:
  2977                           
  2978                           ;Test1.c: 344: {
  2979                           ;Test1.c: 345: Write_b_eep(mem_loc,PACKET[i]);
  2980  000D8E  C031  F014         	movff	rtc_setting@mem_loc,Write_b_eep@badd
  2981  000D92  6A15               	clrf	Write_b_eep@badd+1,c
  2982  000D94  5034               	movf	rtc_setting@i,w,c
  2983  000D96  0D01               	mullw	1
  2984  000D98  0101               	movlb	1	; () banked
  2985  000D9A  0E00               	movlw	low _PACKET	;volatile
  2986  000D9C  24F3               	addwf	prodl,w,c
  2987  000D9E  6ED9               	movwf	fsr2l,c
  2988  000DA0  0101               	movlb	1	; () banked
  2989  000DA2  0E01               	movlw	high _PACKET	;volatile
  2990  000DA4  20F4               	addwfc	prodh,w,c
  2991  000DA6  6EDA               	movwf	fsr2h,c
  2992  000DA8  50DF               	movf	indf2,w,c
  2993  000DAA  6E16               	movwf	Write_b_eep@bdat,c
  2994  000DAC  EC94  F01F         	call	_Write_b_eep	;wreg free
  2995                           
  2996                           ;Test1.c: 346: _delay(50);
  2997  000DB0  0E0A               	movlw	10
  2998  000DB2                     u8627:
  2999  000DB2  F000               	nop	
  3000  000DB4  2EE8               	decfsz	wreg,f,c
  3001  000DB6  D7FD               	goto	u8627
  3002                           
  3003                           ;Test1.c: 347: mem_loc++;
  3004  000DB8  2A31               	incf	rtc_setting@mem_loc,f,c
  3005  000DBA  2A34               	incf	rtc_setting@i,f,c
  3006  000DBC                     L1:
  3007  000DBC  0E1C               	movlw	28
  3008  000DBE  6434               	cpfsgt	rtc_setting@i,c
  3009  000DC0  D7E6               	goto	l10625
  3010                           
  3011                           ;Test1.c: 348: }
  3012                           ;Test1.c: 350: (LCDByte(0b00000001,0));
  3013  000DC2  0E00               	movlw	0
  3014  000DC4  6E17               	movwf	LCDByte@isdata,c
  3015  000DC6  0E01               	movlw	1
  3016  000DC8  EC54  F01E         	call	_LCDByte
  3017                           
  3018                           ;Test1.c: 351: LCDWriteString("UPDATE COMPLETED...!");
  3019  000DCC  0E7D               	movlw	high STR_54
  3020  000DCE  6E1E               	movwf	LCDWriteString@msg+1,c
  3021  000DD0  0E25               	movlw	low STR_54
  3022  000DD2  6E1D               	movwf	LCDWriteString@msg,c
  3023  000DD4  EC15  F019         	call	_LCDWriteString	;wreg free
  3024                           
  3025                           ;Test1.c: 353: unsigned char s = 0;
  3026  000DD8  0E00               	movlw	0
  3027  000DDA  6E32               	movwf	rtc_setting@s,c
  3028                           
  3029                           ;Test1.c: 354: while(s < 60)
  3030  000DDC  D04D               	goto	l10673
  3031  000DDE                     l10641:
  3032                           
  3033                           ;Test1.c: 355: {
  3034                           ;Test1.c: 356: if(sec_flag == 1)
  3035  000DDE  046A               	decf	_sec_flag,w,c
  3036  000DE0  A4D8               	btfss	status,2,c
  3037  000DE2  D04A               	goto	l10673
  3038                           
  3039                           ;Test1.c: 357: {
  3040                           ;Test1.c: 358: sec_flag = 0;
  3041  000DE4  0E00               	movlw	0
  3042  000DE6  6E6A               	movwf	_sec_flag,c
  3043                           
  3044                           ;Test1.c: 359: s++;
  3045  000DE8  2A32               	incf	rtc_setting@s,f,c
  3046                           
  3047                           ;Test1.c: 360: ds1307_get_time();
  3048  000DEA  EC30  F01C         	call	_ds1307_get_time	;wreg free
  3049                           
  3050                           ;Test1.c: 362: (LCDByte(0b00000001,0));
  3051  000DEE  0E00               	movlw	0
  3052  000DF0  6E17               	movwf	LCDByte@isdata,c
  3053  000DF2  0E01               	movlw	1
  3054  000DF4  EC54  F01E         	call	_LCDByte
  3055                           
  3056                           ;Test1.c: 364: LCDWriteString("UPDATE COMPLETED...!");
  3057  000DF8  0E7D               	movlw	high STR_54
  3058  000DFA  6E1E               	movwf	LCDWriteString@msg+1,c
  3059  000DFC  0E25               	movlw	low STR_54
  3060  000DFE  6E1D               	movwf	LCDWriteString@msg,c
  3061  000E00  EC15  F019         	call	_LCDWriteString	;wreg free
  3062                           
  3063                           ;Test1.c: 365: LCDGotoXY(4,1);
  3064  000E04  0E01               	movlw	1
  3065  000E06  6E1D               	movwf	LCDGotoXY@y,c
  3066  000E08  0E04               	movlw	4
  3067  000E0A  EC72  F01F         	call	_LCDGotoXY
  3068                           
  3069                           ;Test1.c: 366: LCDWriteInt(hr,2);
  3070  000E0E  C066  F01D         	movff	_hr,LCDWriteInt@val
  3071  000E12  6A1E               	clrf	LCDWriteInt@val+1,c
  3072  000E14  0E02               	movlw	2
  3073  000E16  6E1F               	movwf	LCDWriteInt@field_length,c
  3074  000E18  EC74  F012         	call	_LCDWriteInt	;wreg free
  3075                           
  3076                           ;Test1.c: 367: LCDGotoXY(6,1);
  3077  000E1C  0E01               	movlw	1
  3078  000E1E  6E1D               	movwf	LCDGotoXY@y,c
  3079  000E20  0E06               	movlw	6
  3080  000E22  EC72  F01F         	call	_LCDGotoXY
  3081                           
  3082                           ;Test1.c: 368: LCDWriteString(":");
  3083  000E26  0E7F               	movlw	high STR_19
  3084  000E28  6E1E               	movwf	LCDWriteString@msg+1,c
  3085  000E2A  0EFC               	movlw	low STR_19
  3086  000E2C  6E1D               	movwf	LCDWriteString@msg,c
  3087  000E2E  EC15  F019         	call	_LCDWriteString	;wreg free
  3088                           
  3089                           ;Test1.c: 369: LCDGotoXY(7,1);
  3090  000E32  0E01               	movlw	1
  3091  000E34  6E1D               	movwf	LCDGotoXY@y,c
  3092  000E36  0E07               	movlw	7
  3093  000E38  EC72  F01F         	call	_LCDGotoXY
  3094                           
  3095                           ;Test1.c: 370: LCDWriteInt(min,2);
  3096  000E3C  C067  F01D         	movff	_min,LCDWriteInt@val
  3097  000E40  6A1E               	clrf	LCDWriteInt@val+1,c
  3098  000E42  0E02               	movlw	2
  3099  000E44  6E1F               	movwf	LCDWriteInt@field_length,c
  3100  000E46  EC74  F012         	call	_LCDWriteInt	;wreg free
  3101                           
  3102                           ;Test1.c: 371: LCDGotoXY(9,1);
  3103  000E4A  0E01               	movlw	1
  3104  000E4C  6E1D               	movwf	LCDGotoXY@y,c
  3105  000E4E  0E09               	movlw	9
  3106  000E50  EC72  F01F         	call	_LCDGotoXY
  3107                           
  3108                           ;Test1.c: 372: LCDWriteString(":");
  3109  000E54  0E7F               	movlw	high STR_19
  3110  000E56  6E1E               	movwf	LCDWriteString@msg+1,c
  3111  000E58  0EFC               	movlw	low STR_19
  3112  000E5A  6E1D               	movwf	LCDWriteString@msg,c
  3113  000E5C  EC15  F019         	call	_LCDWriteString	;wreg free
  3114                           
  3115                           ;Test1.c: 373: LCDGotoXY(10,1);
  3116  000E60  0E01               	movlw	1
  3117  000E62  6E1D               	movwf	LCDGotoXY@y,c
  3118  000E64  0E0A               	movlw	10
  3119  000E66  EC72  F01F         	call	_LCDGotoXY
  3120                           
  3121                           ;Test1.c: 374: LCDWriteInt(sec,2);
  3122  000E6A  C069  F01D         	movff	_sec,LCDWriteInt@val
  3123  000E6E  6A1E               	clrf	LCDWriteInt@val+1,c
  3124  000E70  0E02               	movlw	2
  3125  000E72  6E1F               	movwf	LCDWriteInt@field_length,c
  3126  000E74  EC74  F012         	call	_LCDWriteInt	;wreg free
  3127  000E78                     l10673:
  3128  000E78  0E3B               	movlw	59
  3129  000E7A  6432               	cpfsgt	rtc_setting@s,c
  3130  000E7C  D7B0               	goto	l10641
  3131                           
  3132                           ;Test1.c: 375: }
  3133                           ;Test1.c: 376: }
  3134                           ;Test1.c: 377: return;
  3135  000E7E  0012               	return	
  3136  000E80  FFFF               	dw	65535	; errata NOP
  3137  000E82                     __end_of_rtc_setting:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1h	equ	0xFE2
  3149                           fsr1l	equ	0xFE1
  3150                           indf2	equ	0xFDF
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _Receive_Packet *****************
  3156 ;; Defined at:
  3157 ;;		line 201 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\communication.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  n               1   40[COMRAM] unsigned char 
  3162 ;;  msecs           2   37[COMRAM] int 
  3163 ;;  result          1   41[COMRAM] unsigned char 
  3164 ;;  count           1   39[COMRAM] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      unsigned char 
  3167 ;; Registers used:
  3168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3174 ;;      Params:         0       0       0       0       0       0       0
  3175 ;;      Locals:         5       0       0       0       0       0       0
  3176 ;;      Temps:          1       0       0       0       0       0       0
  3177 ;;      Totals:         6       0       0       0       0       0       0
  3178 ;;Total ram usage:        6 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    6
  3181 ;; This function calls:
  3182 ;;		_Check_CRC
  3183 ;;		_Eco_Replay
  3184 ;;		_LCDByte
  3185 ;;		_LCDWriteString
  3186 ;;		_USARTDataAvailable
  3187 ;;		_USARTFlushBuffer
  3188 ;;		_USARTReadData
  3189 ;;		_USARTWriteChar
  3190 ;; This function is called by:
  3191 ;;		_rtc_setting
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text2
  3196  0014EA                     __ptext2:
  3197                           	opt stack 0
  3198  0014EA                     _Receive_Packet:
  3199                           	opt stack 23
  3200                           
  3201                           ;incstack = 0
  3202  0014EA  FFFF               	dw	65535
  3203                           
  3204                           ;communication.c: 203: unsigned char count = 0, result = 0;
  3205  0014EC  0E00               	movlw	0
  3206  0014EE  6E28               	movwf	Receive_Packet@count,c
  3207  0014F0  0E00               	movlw	0
  3208  0014F2  6E2A               	movwf	Receive_Packet@result,c
  3209                           
  3210                           ;communication.c: 204: int msecs = 0;
  3211  0014F4  0E00               	movlw	0
  3212  0014F6  6E27               	movwf	Receive_Packet@msecs+1,c
  3213  0014F8  0E00               	movlw	0
  3214  0014FA  6E26               	movwf	Receive_Packet@msecs,c
  3215                           
  3216                           ;communication.c: 207: result = Eco_Replay();
  3217  0014FC  ECFE  F016         	call	_Eco_Replay	;wreg free
  3218  001500  6E2A               	movwf	Receive_Packet@result,c
  3219                           
  3220                           ;communication.c: 209: if(result == 0x01)
  3221  001502  042A               	decf	Receive_Packet@result,w,c
  3222  001504  A4D8               	btfss	status,2,c
  3223  001506  D0D5               	goto	l9921
  3224                           
  3225                           ;communication.c: 210: {
  3226                           ;communication.c: 211: (LCDByte(0b00000001,0));
  3227  001508  0E00               	movlw	0
  3228  00150A  6E17               	movwf	LCDByte@isdata,c
  3229  00150C  0E01               	movlw	1
  3230  00150E  EC54  F01E         	call	_LCDByte
  3231                           
  3232                           ;communication.c: 212: LCDWriteString("GOT AN ECO");
  3233  001512  0E7F               	movlw	high STR_11
  3234  001514  6E1E               	movwf	LCDWriteString@msg+1,c
  3235  001516  0EBD               	movlw	low STR_11
  3236  001518  6E1D               	movwf	LCDWriteString@msg,c
  3237  00151A  EC15  F019         	call	_LCDWriteString	;wreg free
  3238                           
  3239                           ;communication.c: 214: USARTFlushBuffer();
  3240  00151E  EC55  F03D         	call	_USARTFlushBuffer	;wreg free
  3241  001522                     l9835:
  3242                           
  3243                           ;communication.c: 217: {
  3244                           ;communication.c: 219: uint8_t n= USARTDataAvailable();
  3245  001522  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
  3246  001526  6E29               	movwf	Receive_Packet@n,c
  3247                           
  3248                           ;communication.c: 222: if(n!=0)
  3249  001528  5029               	movf	Receive_Packet@n,w,c
  3250  00152A  B4D8               	btfsc	status,2,c
  3251  00152C  D0A6               	goto	l9909
  3252                           
  3253                           ;communication.c: 223: {
  3254                           ;communication.c: 224: msecs = 0;
  3255  00152E  0E00               	movlw	0
  3256  001530  6E27               	movwf	Receive_Packet@msecs+1,c
  3257  001532  0E00               	movlw	0
  3258  001534  6E26               	movwf	Receive_Packet@msecs,c
  3259                           
  3260                           ;communication.c: 225: while(n > 0)
  3261  001536  D09E               	goto	l9907
  3262  001538                     l539:
  3263                           
  3264                           ;communication.c: 226: {
  3265                           ;communication.c: 227: RC0 = 1;
  3266  001538  8082               	bsf	3970,0,c	;volatile
  3267                           
  3268                           ;communication.c: 228: PACKET[count] = USARTReadData();
  3269  00153A  ECCF  F01F         	call	_USARTReadData	;wreg free
  3270  00153E  6E25               	movwf	??_Receive_Packet& (0+255),c
  3271  001540  5028               	movf	Receive_Packet@count,w,c
  3272  001542  0D01               	mullw	1
  3273  001544  0101               	movlb	1	; () banked
  3274  001546  0E00               	movlw	low _PACKET	;volatile
  3275  001548  24F3               	addwf	prodl,w,c
  3276  00154A  6ED9               	movwf	fsr2l,c
  3277  00154C  0101               	movlb	1	; () banked
  3278  00154E  0E01               	movlw	high _PACKET	;volatile
  3279  001550  20F4               	addwfc	prodh,w,c
  3280  001552  6EDA               	movwf	fsr2h,c
  3281  001554  C025  FFDF         	movff	??_Receive_Packet,indf2
  3282                           
  3283                           ; BSR set to: 1
  3284                           ;communication.c: 229: RC0 = 0;
  3285  001558  9082               	bcf	3970,0,c	;volatile
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;communication.c: 230: (LCDByte(0b00000001,0));
  3289  00155A  0E00               	movlw	0
  3290  00155C  6E17               	movwf	LCDByte@isdata,c
  3291  00155E  0E01               	movlw	1
  3292  001560  EC54  F01E         	call	_LCDByte
  3293                           
  3294                           ;communication.c: 231: LCDWriteString("CHARACTER RECEIVED ");
  3295  001564  0E7D               	movlw	high STR_12
  3296  001566  6E1E               	movwf	LCDWriteString@msg+1,c
  3297  001568  0E4E               	movlw	low STR_12
  3298  00156A  6E1D               	movwf	LCDWriteString@msg,c
  3299  00156C  EC15  F019         	call	_LCDWriteString	;wreg free
  3300                           
  3301                           ;communication.c: 232: if(PACKET[count] == 0xEA)
  3302  001570  5028               	movf	Receive_Packet@count,w,c
  3303  001572  0D01               	mullw	1
  3304  001574  0101               	movlb	1	; () banked
  3305  001576  0E00               	movlw	low _PACKET	;volatile
  3306  001578  24F3               	addwf	prodl,w,c
  3307  00157A  6ED9               	movwf	fsr2l,c
  3308  00157C  0101               	movlb	1	; () banked
  3309  00157E  0E01               	movlw	high _PACKET	;volatile
  3310  001580  20F4               	addwfc	prodh,w,c
  3311  001582  6EDA               	movwf	fsr2h,c
  3312  001584  0EEA               	movlw	234
  3313  001586  62DF               	cpfseq	indf2,c
  3314  001588  D073               	goto	l9905
  3315                           
  3316                           ; BSR set to: 1
  3317                           ;communication.c: 233: {
  3318                           ;communication.c: 235: result = Check_CRC();
  3319  00158A  ECE5  F011         	call	_Check_CRC	;wreg free
  3320  00158E  6E2A               	movwf	Receive_Packet@result,c
  3321                           
  3322                           ;communication.c: 236: if(result == 1)
  3323  001590  042A               	decf	Receive_Packet@result,w,c
  3324  001592  A4D8               	btfss	status,2,c
  3325  001594  D037               	goto	l541
  3326                           
  3327                           ;communication.c: 237: {
  3328                           ;communication.c: 238: RE2 = 1;
  3329  001596  8484               	bsf	3972,2,c	;volatile
  3330                           
  3331                           ;communication.c: 239: _delay((unsigned long)((5)*(100000000/4000.0)));
  3332  001598  0E7A               	movlw	122
  3333  00159A  6E25               	movwf	??_Receive_Packet& (0+255),c
  3334  00159C  0ED4               	movlw	212
  3335  00159E                     u8637:
  3336  00159E  2EE8               	decfsz	wreg,f,c
  3337  0015A0  D7FE               	goto	u8637
  3338  0015A2  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3339  0015A4  D7FC               	goto	u8637
  3340  0015A6  D000               	nop2	
  3341                           
  3342                           ;communication.c: 240: _delay((unsigned long)((5)*(100000000/4000.0)));
  3343  0015A8  0E7A               	movlw	122
  3344  0015AA  6E25               	movwf	??_Receive_Packet& (0+255),c
  3345  0015AC  0ED4               	movlw	212
  3346  0015AE                     u8647:
  3347  0015AE  2EE8               	decfsz	wreg,f,c
  3348  0015B0  D7FE               	goto	u8647
  3349  0015B2  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3350  0015B4  D7FC               	goto	u8647
  3351  0015B6  D000               	nop2	
  3352                           
  3353                           ;communication.c: 241: USARTWriteChar(49);
  3354  0015B8  0E31               	movlw	49
  3355  0015BA  EC25  F03D         	call	_USARTWriteChar
  3356                           
  3357                           ;communication.c: 242: RE2 = 0;
  3358  0015BE  9484               	bcf	3972,2,c	;volatile
  3359                           
  3360                           ;communication.c: 243: RE2 = 1;
  3361  0015C0  8484               	bsf	3972,2,c	;volatile
  3362                           
  3363                           ;communication.c: 244: _delay((unsigned long)((5)*(100000000/4000.0)));
  3364  0015C2  0E7A               	movlw	122
  3365  0015C4  6E25               	movwf	??_Receive_Packet& (0+255),c
  3366  0015C6  0ED4               	movlw	212
  3367  0015C8                     u8657:
  3368  0015C8  2EE8               	decfsz	wreg,f,c
  3369  0015CA  D7FE               	goto	u8657
  3370  0015CC  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3371  0015CE  D7FC               	goto	u8657
  3372  0015D0  D000               	nop2	
  3373                           
  3374                           ;communication.c: 245: _delay((unsigned long)((5)*(100000000/4000.0)));
  3375  0015D2  0E7A               	movlw	122
  3376  0015D4  6E25               	movwf	??_Receive_Packet& (0+255),c
  3377  0015D6  0ED4               	movlw	212
  3378  0015D8                     u8667:
  3379  0015D8  2EE8               	decfsz	wreg,f,c
  3380  0015DA  D7FE               	goto	u8667
  3381  0015DC  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3382  0015DE  D7FC               	goto	u8667
  3383  0015E0  D000               	nop2	
  3384                           
  3385                           ;communication.c: 246: USARTWriteChar(49);
  3386  0015E2  0E31               	movlw	49
  3387  0015E4  EC25  F03D         	call	_USARTWriteChar
  3388                           
  3389                           ;communication.c: 247: RE2 = 0;
  3390  0015E8  9484               	bcf	3972,2,c	;volatile
  3391                           
  3392                           ;communication.c: 248: (LCDByte(0b00000001,0));
  3393  0015EA  0E00               	movlw	0
  3394  0015EC  6E17               	movwf	LCDByte@isdata,c
  3395  0015EE  0E01               	movlw	1
  3396  0015F0  EC54  F01E         	call	_LCDByte
  3397                           
  3398                           ;communication.c: 249: LCDWriteString("PACKET RECEIVED ");
  3399  0015F4  0E7C               	movlw	high (STR_14+6)
  3400  0015F6  6E1E               	movwf	LCDWriteString@msg+1,c
  3401  0015F8  0EFE               	movlw	low (STR_14+6)
  3402  0015FA  6E1D               	movwf	LCDWriteString@msg,c
  3403  0015FC  EC15  F019         	call	_LCDWriteString	;wreg free
  3404                           
  3405                           ;communication.c: 250: return 0x01;
  3406  001600  0E01               	movlw	1
  3407  001602  D063               	goto	l542
  3408  001604                     l541:
  3409                           
  3410                           ;communication.c: 251: }
  3411                           ;communication.c: 252: RE2 = 1;
  3412  001604  8484               	bsf	3972,2,c	;volatile
  3413                           
  3414                           ;communication.c: 253: _delay((unsigned long)((5)*(100000000/4000.0)));
  3415  001606  0E7A               	movlw	122
  3416  001608  6E25               	movwf	??_Receive_Packet& (0+255),c
  3417  00160A  0ED4               	movlw	212
  3418  00160C                     u8677:
  3419  00160C  2EE8               	decfsz	wreg,f,c
  3420  00160E  D7FE               	goto	u8677
  3421  001610  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3422  001612  D7FC               	goto	u8677
  3423  001614  D000               	nop2	
  3424                           
  3425                           ;communication.c: 254: _delay((unsigned long)((5)*(100000000/4000.0)));
  3426  001616  0E7A               	movlw	122
  3427  001618  6E25               	movwf	??_Receive_Packet& (0+255),c
  3428  00161A  0ED4               	movlw	212
  3429  00161C                     u8687:
  3430  00161C  2EE8               	decfsz	wreg,f,c
  3431  00161E  D7FE               	goto	u8687
  3432  001620  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3433  001622  D7FC               	goto	u8687
  3434  001624  D000               	nop2	
  3435                           
  3436                           ;communication.c: 255: USARTWriteChar(48);
  3437  001626  0E30               	movlw	48
  3438  001628  EC25  F03D         	call	_USARTWriteChar
  3439                           
  3440                           ;communication.c: 256: RE2 = 0;
  3441  00162C  9484               	bcf	3972,2,c	;volatile
  3442                           
  3443                           ;communication.c: 257: RE2 = 1;
  3444  00162E  8484               	bsf	3972,2,c	;volatile
  3445                           
  3446                           ;communication.c: 258: _delay((unsigned long)((5)*(100000000/4000.0)));
  3447  001630  0E7A               	movlw	122
  3448  001632  6E25               	movwf	??_Receive_Packet& (0+255),c
  3449  001634  0ED4               	movlw	212
  3450  001636                     u8697:
  3451  001636  2EE8               	decfsz	wreg,f,c
  3452  001638  D7FE               	goto	u8697
  3453  00163A  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3454  00163C  D7FC               	goto	u8697
  3455  00163E  D000               	nop2	
  3456                           
  3457                           ;communication.c: 259: _delay((unsigned long)((5)*(100000000/4000.0)));
  3458  001640  0E7A               	movlw	122
  3459  001642  6E25               	movwf	??_Receive_Packet& (0+255),c
  3460  001644  0ED4               	movlw	212
  3461  001646                     u8707:
  3462  001646  2EE8               	decfsz	wreg,f,c
  3463  001648  D7FE               	goto	u8707
  3464  00164A  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3465  00164C  D7FC               	goto	u8707
  3466  00164E  D000               	nop2	
  3467                           
  3468                           ;communication.c: 260: USARTWriteChar(48);
  3469  001650  0E30               	movlw	48
  3470  001652  EC25  F03D         	call	_USARTWriteChar
  3471                           
  3472                           ;communication.c: 261: RE2 = 0;
  3473  001656  9484               	bcf	3972,2,c	;volatile
  3474                           
  3475                           ;communication.c: 262: (LCDByte(0b00000001,0));
  3476  001658  0E00               	movlw	0
  3477  00165A  6E17               	movwf	LCDByte@isdata,c
  3478  00165C  0E01               	movlw	1
  3479  00165E  EC54  F01E         	call	_LCDByte
  3480                           
  3481                           ;communication.c: 263: LCDWriteString("WRONG PACKET RECEIVED ");
  3482  001662  0E7C               	movlw	high STR_14
  3483  001664  6E1E               	movwf	LCDWriteString@msg+1,c
  3484  001666  0EF8               	movlw	low STR_14
  3485  001668  6E1D               	movwf	LCDWriteString@msg,c
  3486  00166A  EC15  F019         	call	_LCDWriteString	;wreg free
  3487  00166E  D02C               	goto	L3
  3488  001670                     l9905:
  3489                           
  3490                           ;communication.c: 265: }
  3491                           ;communication.c: 266: n--;
  3492  001670  0629               	decf	Receive_Packet@n,f,c
  3493                           
  3494                           ;communication.c: 267: count++;
  3495  001672  2A28               	incf	Receive_Packet@count,f,c
  3496  001674                     l9907:
  3497  001674  6629               	tstfsz	Receive_Packet@n,c
  3498  001676  D760               	goto	l539
  3499  001678  D754               	goto	l9835
  3500  00167A                     l9909:
  3501                           
  3502                           ;communication.c: 270: else
  3503                           ;communication.c: 271: {
  3504                           ;communication.c: 272: _delay((unsigned long)((1)*(100000000/4000.0)));
  3505  00167A  0E19               	movlw	25
  3506  00167C  6E25               	movwf	??_Receive_Packet& (0+255),c
  3507  00167E  0E5D               	movlw	93
  3508  001680                     u8717:
  3509  001680  2EE8               	decfsz	wreg,f,c
  3510  001682  D7FE               	goto	u8717
  3511  001684  2E25               	decfsz	??_Receive_Packet& (0+255),f,c
  3512  001686  D7FC               	goto	u8717
  3513                           
  3514                           ;communication.c: 273: msecs++;
  3515  001688  4A26               	infsnz	Receive_Packet@msecs,f,c
  3516  00168A  2A27               	incf	Receive_Packet@msecs+1,f,c
  3517                           
  3518                           ;communication.c: 274: if(msecs == 2000)
  3519  00168C  5027               	movf	Receive_Packet@msecs+1,w,c
  3520  00168E  0A07               	xorlw	7
  3521  001690  0ED0               	movlw	208
  3522  001692  B4D8               	btfsc	status,2,c
  3523  001694  1826               	xorwf	Receive_Packet@msecs,w,c
  3524  001696  A4D8               	btfss	status,2,c
  3525  001698  D744               	goto	l9835
  3526                           
  3527                           ;communication.c: 275: {
  3528                           ;communication.c: 277: (LCDByte(0b00000001,0));
  3529  00169A  0E00               	movlw	0
  3530  00169C  6E17               	movwf	LCDByte@isdata,c
  3531  00169E  0E01               	movlw	1
  3532  0016A0  EC54  F01E         	call	_LCDByte
  3533                           
  3534                           ;communication.c: 278: LCDWriteString("CHARACTER TIMEOUT");
  3535  0016A4  0E7D               	movlw	high STR_15
  3536  0016A6  6E1E               	movwf	LCDWriteString@msg+1,c
  3537  0016A8  0ECF               	movlw	low STR_15
  3538  0016AA  6E1D               	movwf	LCDWriteString@msg,c
  3539  0016AC  EC15  F019         	call	_LCDWriteString	;wreg free
  3540  0016B0  D00B               	goto	L3
  3541  0016B2                     l9921:
  3542                           
  3543                           ;communication.c: 280: }
  3544                           ;communication.c: 281: }
  3545                           ;communication.c: 282: }
  3546                           ;communication.c: 283: }
  3547                           ;communication.c: 284: (LCDByte(0b00000001,0));
  3548  0016B2  0E00               	movlw	0
  3549  0016B4  6E17               	movwf	LCDByte@isdata,c
  3550  0016B6  0E01               	movlw	1
  3551  0016B8  EC54  F01E         	call	_LCDByte
  3552                           
  3553                           ;communication.c: 285: LCDWriteString("PACKET TIMEOUT");
  3554  0016BC  0E7E               	movlw	high STR_16
  3555  0016BE  6E1E               	movwf	LCDWriteString@msg+1,c
  3556  0016C0  0ED5               	movlw	low STR_16
  3557  0016C2  6E1D               	movwf	LCDWriteString@msg,c
  3558  0016C4  EC15  F019         	call	_LCDWriteString	;wreg free
  3559  0016C8                     L3:
  3560                           
  3561                           ;communication.c: 286: return 0x00;
  3562  0016C8  0E00               	movlw	0
  3563  0016CA                     l542:
  3564  0016CA  0012               	return	
  3565  0016CC  FFFF               	dw	65535	; errata NOP
  3566  0016CE                     __end_of_Receive_Packet:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1h	equ	0xFE2
  3578                           fsr1l	equ	0xFE1
  3579                           indf2	equ	0xFDF
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           
  3584 ;; *************** function _Eco_Replay *****************
  3585 ;; Defined at:
  3586 ;;		line 84 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\communication.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  data            1   34[COMRAM] unsigned char 
  3591 ;;  n               1   35[COMRAM] unsigned char 
  3592 ;;  ts              1   33[COMRAM] unsigned char 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      unsigned char 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3602 ;;      Params:         0       0       0       0       0       0       0
  3603 ;;      Locals:         3       0       0       0       0       0       0
  3604 ;;      Temps:          1       0       0       0       0       0       0
  3605 ;;      Totals:         4       0       0       0       0       0       0
  3606 ;;Total ram usage:        4 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    5
  3609 ;; This function calls:
  3610 ;;		_LCDByte
  3611 ;;		_LCDWriteString
  3612 ;;		_USARTDataAvailable
  3613 ;;		_USARTFlushBuffer
  3614 ;;		_USARTReadData
  3615 ;;		_USARTWriteChar
  3616 ;; This function is called by:
  3617 ;;		_Receive_Packet
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text3
  3622  002DFC                     __ptext3:
  3623                           	opt stack 0
  3624  002DFC                     _Eco_Replay:
  3625                           	opt stack 23
  3626                           
  3627                           ;incstack = 0
  3628  002DFC  FFFF               	dw	65535
  3629                           
  3630                           ;communication.c: 86: uint8_t n = 0;
  3631  002DFE  0E00               	movlw	0
  3632  002E00  6E24               	movwf	Eco_Replay@n,c
  3633                           
  3634                           ;communication.c: 87: unsigned char ts = 0;
  3635  002E02  0E00               	movlw	0
  3636  002E04  6E22               	movwf	Eco_Replay@ts,c
  3637                           
  3638                           ;communication.c: 90: USARTFlushBuffer();
  3639  002E06  EC55  F03D         	call	_USARTFlushBuffer	;wreg free
  3640                           
  3641                           ;communication.c: 92: (LCDByte(0b00000001,0));
  3642  002E0A  0E00               	movlw	0
  3643  002E0C  6E17               	movwf	LCDByte@isdata,c
  3644  002E0E  0E01               	movlw	1
  3645  002E10  EC54  F01E         	call	_LCDByte
  3646                           
  3647                           ;communication.c: 93: LCDWriteString("WAITING FOR ECO ");
  3648  002E14  0E7E               	movlw	high STR_5
  3649  002E16  6E1E               	movwf	LCDWriteString@msg+1,c
  3650  002E18  0E47               	movlw	low STR_5
  3651  002E1A  6E1D               	movwf	LCDWriteString@msg,c
  3652  002E1C  EC15  F019         	call	_LCDWriteString	;wreg free
  3653                           
  3654                           ;communication.c: 96: while(n == 0 && ts < 10000)
  3655  002E20  D00B               	goto	l9325
  3656  002E22                     l9319:
  3657                           
  3658                           ;communication.c: 97: {
  3659                           ;communication.c: 99: n = USARTDataAvailable();
  3660  002E22  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
  3661  002E26  6E24               	movwf	Eco_Replay@n,c
  3662                           
  3663                           ;communication.c: 100: ts++;
  3664  002E28  2A22               	incf	Eco_Replay@ts,f,c
  3665                           
  3666                           ;communication.c: 101: _delay((unsigned long)((1)*(100000000/4000.0)));
  3667  002E2A  0E19               	movlw	25
  3668  002E2C  6E21               	movwf	??_Eco_Replay& (0+255),c
  3669  002E2E  0E5D               	movlw	93
  3670  002E30                     u8727:
  3671  002E30  2EE8               	decfsz	wreg,f,c
  3672  002E32  D7FE               	goto	u8727
  3673  002E34  2E21               	decfsz	??_Eco_Replay& (0+255),f,c
  3674  002E36  D7FC               	goto	u8727
  3675  002E38                     l9325:
  3676  002E38  5024               	movf	Eco_Replay@n,w,c
  3677  002E3A  B4D8               	btfsc	status,2,c
  3678  002E3C  D7F2               	goto	l9319
  3679                           
  3680                           ;communication.c: 102: }
  3681                           ;communication.c: 105: if(n!=0)
  3682  002E3E  5024               	movf	Eco_Replay@n,w,c
  3683  002E40  B4D8               	btfsc	status,2,c
  3684  002E42  D031               	goto	l9355
  3685                           
  3686                           ;communication.c: 106: {
  3687                           ;communication.c: 108: RC0 = 1;
  3688  002E44  8082               	bsf	3970,0,c	;volatile
  3689                           
  3690                           ;communication.c: 109: unsigned char data=USARTReadData();
  3691  002E46  ECCF  F01F         	call	_USARTReadData	;wreg free
  3692  002E4A  6E23               	movwf	Eco_Replay@data,c
  3693                           
  3694                           ;communication.c: 110: RC0 = 0;
  3695  002E4C  9082               	bcf	3970,0,c	;volatile
  3696                           
  3697                           ;communication.c: 111: if(data == Destination_ID)
  3698  002E4E  505E               	movf	_Destination_ID,w,c
  3699  002E50  6223               	cpfseq	Eco_Replay@data,c
  3700  002E52  D029               	goto	l9355
  3701                           
  3702                           ;communication.c: 112: {
  3703                           ;communication.c: 113: RE2 = 1;
  3704  002E54  8484               	bsf	3972,2,c	;volatile
  3705                           
  3706                           ;communication.c: 114: _delay((unsigned long)((5)*(100000000/4000.0)));
  3707  002E56  0E7A               	movlw	122
  3708  002E58  6E21               	movwf	??_Eco_Replay& (0+255),c
  3709  002E5A  0ED4               	movlw	212
  3710  002E5C                     u8737:
  3711  002E5C  2EE8               	decfsz	wreg,f,c
  3712  002E5E  D7FE               	goto	u8737
  3713  002E60  2E21               	decfsz	??_Eco_Replay& (0+255),f,c
  3714  002E62  D7FC               	goto	u8737
  3715  002E64  D000               	nop2	
  3716                           
  3717                           ;communication.c: 115: _delay((unsigned long)((5)*(100000000/4000.0)));
  3718  002E66  0E7A               	movlw	122
  3719  002E68  6E21               	movwf	??_Eco_Replay& (0+255),c
  3720  002E6A  0ED4               	movlw	212
  3721  002E6C                     u8747:
  3722  002E6C  2EE8               	decfsz	wreg,f,c
  3723  002E6E  D7FE               	goto	u8747
  3724  002E70  2E21               	decfsz	??_Eco_Replay& (0+255),f,c
  3725  002E72  D7FC               	goto	u8747
  3726  002E74  D000               	nop2	
  3727                           
  3728                           ;communication.c: 116: USARTWriteChar(data);
  3729  002E76  5023               	movf	Eco_Replay@data,w,c
  3730  002E78  EC25  F03D         	call	_USARTWriteChar
  3731                           
  3732                           ;communication.c: 117: RE2 = 0;
  3733  002E7C  9484               	bcf	3972,2,c	;volatile
  3734                           
  3735                           ;communication.c: 118: _delay((unsigned long)((1)*(100000000/4000.0)));
  3736  002E7E  0E19               	movlw	25
  3737  002E80  6E21               	movwf	??_Eco_Replay& (0+255),c
  3738  002E82  0E5D               	movlw	93
  3739  002E84                     u8757:
  3740  002E84  2EE8               	decfsz	wreg,f,c
  3741  002E86  D7FE               	goto	u8757
  3742  002E88  2E21               	decfsz	??_Eco_Replay& (0+255),f,c
  3743  002E8A  D7FC               	goto	u8757
  3744                           
  3745                           ;communication.c: 120: (LCDByte(0b00000001,0));
  3746  002E8C  0E00               	movlw	0
  3747  002E8E  6E17               	movwf	LCDByte@isdata,c
  3748  002E90  0E01               	movlw	1
  3749  002E92  EC54  F01E         	call	_LCDByte
  3750                           
  3751                           ;communication.c: 121: LCDWriteString("ECO RECEIVED ");
  3752  002E96  0E7F               	movlw	high STR_6
  3753  002E98  6E1E               	movwf	LCDWriteString@msg+1,c
  3754  002E9A  0E1C               	movlw	low STR_6
  3755  002E9C  6E1D               	movwf	LCDWriteString@msg,c
  3756  002E9E  EC15  F019         	call	_LCDWriteString	;wreg free
  3757                           
  3758                           ;communication.c: 122: return 0x01;
  3759  002EA2  0E01               	movlw	1
  3760  002EA4  D00C               	goto	l519
  3761  002EA6                     l9355:
  3762                           
  3763                           ;communication.c: 123: }
  3764                           ;communication.c: 124: }
  3765                           ;communication.c: 126: (LCDByte(0b00000001,0));
  3766  002EA6  0E00               	movlw	0
  3767  002EA8  6E17               	movwf	LCDByte@isdata,c
  3768  002EAA  0E01               	movlw	1
  3769  002EAC  EC54  F01E         	call	_LCDByte
  3770                           
  3771                           ;communication.c: 127: LCDWriteString("ECO NOT RECEIVED ");
  3772  002EB0  0E7D               	movlw	high STR_7
  3773  002EB2  6E1E               	movwf	LCDWriteString@msg+1,c
  3774  002EB4  0EBD               	movlw	low STR_7
  3775  002EB6  6E1D               	movwf	LCDWriteString@msg,c
  3776  002EB8  EC15  F019         	call	_LCDWriteString	;wreg free
  3777                           
  3778                           ;communication.c: 128: return 0x00;
  3779  002EBC  0E00               	movlw	0
  3780  002EBE                     l519:
  3781  002EBE  0012               	return	
  3782  002EC0  FFFF               	dw	65535	; errata NOP
  3783  002EC2                     __end_of_Eco_Replay:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1h	equ	0xFE2
  3795                           fsr1l	equ	0xFE1
  3796                           indf2	equ	0xFDF
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _Check_CRC *****************
  3802 ;; Defined at:
  3803 ;;		line 112 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  CRC             2   32[COMRAM] int 
  3808 ;;  sum             2   28[COMRAM] int 
  3809 ;;  length          1   31[COMRAM] unsigned char 
  3810 ;;  count           1   30[COMRAM] unsigned char 
  3811 ;;  CRC_LOW         1   27[COMRAM] unsigned char 
  3812 ;;  CRC_HI          1   26[COMRAM] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      unsigned char 
  3815 ;; Registers used:
  3816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3822 ;;      Params:         0       0       0       0       0       0       0
  3823 ;;      Locals:         8       0       0       0       0       0       0
  3824 ;;      Temps:          7       0       0       0       0       0       0
  3825 ;;      Totals:        15       0       0       0       0       0       0
  3826 ;;Total ram usage:       15 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    2
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_Receive_Packet
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text4
  3837  0023CA                     __ptext4:
  3838                           	opt stack 0
  3839  0023CA                     _Check_CRC:
  3840                           	opt stack 26
  3841                           
  3842                           ;incstack = 0
  3843  0023CA  FFFF               	dw	65535
  3844                           
  3845                           ;packet.c: 114: char count = 0, length = 0, CRC_HI, CRC_LOW;
  3846  0023CC  0E00               	movlw	0
  3847  0023CE  6E1F               	movwf	Check_CRC@count,c
  3848  0023D0  0E00               	movlw	0
  3849  0023D2  6E20               	movwf	Check_CRC@length,c
  3850                           
  3851                           ;packet.c: 115: int sum, CRC;
  3852                           ;packet.c: 118: while(PACKET[length] != 0xEA)
  3853  0023D4  D001               	goto	l9277
  3854  0023D6                     l9275:
  3855                           
  3856                           ;packet.c: 119: length++;
  3857  0023D6  2A20               	incf	Check_CRC@length,f,c
  3858  0023D8                     l9277:
  3859  0023D8  5020               	movf	Check_CRC@length,w,c
  3860  0023DA  0D01               	mullw	1
  3861  0023DC  0101               	movlb	1	; () banked
  3862  0023DE  0E00               	movlw	low _PACKET	;volatile
  3863  0023E0  24F3               	addwf	prodl,w,c
  3864  0023E2  6ED9               	movwf	fsr2l,c
  3865  0023E4  0101               	movlb	1	; () banked
  3866  0023E6  0E01               	movlw	high _PACKET	;volatile
  3867  0023E8  20F4               	addwfc	prodh,w,c
  3868  0023EA  6EDA               	movwf	fsr2h,c
  3869  0023EC  0EEA               	movlw	234
  3870  0023EE  62DF               	cpfseq	indf2,c
  3871  0023F0  D7F2               	goto	l9275
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;packet.c: 121: CRC_LOW = PACKET[length - 1];
  3875                           
  3876                           ; BSR set to: 1
  3877  0023F2  0EFF               	movlw	255
  3878  0023F4  6E14               	movwf	??_Check_CRC& (0+255),c
  3879  0023F6  0EFF               	movlw	255
  3880  0023F8  6E15               	movwf	(??_Check_CRC+1)& (0+255),c
  3881  0023FA  5020               	movf	Check_CRC@length,w,c
  3882  0023FC  6E16               	movwf	(??_Check_CRC+2)& (0+255),c
  3883  0023FE  6A17               	clrf	(??_Check_CRC+3)& (0+255),c
  3884  002400  5014               	movf	??_Check_CRC,w,c
  3885  002402  2616               	addwf	??_Check_CRC+2,f,c
  3886  002404  5015               	movf	??_Check_CRC+1,w,c
  3887  002406  2217               	addwfc	??_Check_CRC+3,f,c
  3888  002408  0101               	movlb	1	; () banked
  3889  00240A  0E00               	movlw	low _PACKET	;volatile
  3890  00240C  2416               	addwf	??_Check_CRC+2,w,c
  3891  00240E  6ED9               	movwf	fsr2l,c
  3892  002410  0101               	movlb	1	; () banked
  3893  002412  0E01               	movlw	high _PACKET	;volatile
  3894  002414  2017               	addwfc	??_Check_CRC+3,w,c
  3895  002416  6EDA               	movwf	fsr2h,c
  3896  002418  50DF               	movf	indf2,w,c
  3897  00241A  6E1C               	movwf	Check_CRC@CRC_LOW,c
  3898                           
  3899                           ;packet.c: 122: CRC_HI = PACKET[length - 2];
  3900  00241C  0EFE               	movlw	254
  3901  00241E  6E14               	movwf	??_Check_CRC& (0+255),c
  3902  002420  0EFF               	movlw	255
  3903  002422  6E15               	movwf	(??_Check_CRC+1)& (0+255),c
  3904  002424  5020               	movf	Check_CRC@length,w,c
  3905  002426  6E16               	movwf	(??_Check_CRC+2)& (0+255),c
  3906  002428  6A17               	clrf	(??_Check_CRC+3)& (0+255),c
  3907  00242A  5014               	movf	??_Check_CRC,w,c
  3908  00242C  2616               	addwf	??_Check_CRC+2,f,c
  3909  00242E  5015               	movf	??_Check_CRC+1,w,c
  3910  002430  2217               	addwfc	??_Check_CRC+3,f,c
  3911  002432  0101               	movlb	1	; () banked
  3912  002434  0E00               	movlw	low _PACKET	;volatile
  3913  002436  2416               	addwf	??_Check_CRC+2,w,c
  3914  002438  6ED9               	movwf	fsr2l,c
  3915  00243A  0101               	movlb	1	; () banked
  3916  00243C  0E01               	movlw	high _PACKET	;volatile
  3917  00243E  2017               	addwfc	??_Check_CRC+3,w,c
  3918  002440  6EDA               	movwf	fsr2h,c
  3919  002442  50DF               	movf	indf2,w,c
  3920  002444  6E1B               	movwf	Check_CRC@CRC_HI,c
  3921                           
  3922                           ; BSR set to: 1
  3923                           ;packet.c: 123: CRC = 0x0000;
  3924  002446  0E00               	movlw	0
  3925  002448  6E22               	movwf	Check_CRC@CRC+1,c
  3926  00244A  0E00               	movlw	0
  3927  00244C  6E21               	movwf	Check_CRC@CRC,c
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;packet.c: 124: CRC = CRC + CRC_HI;
  3931  00244E  501B               	movf	Check_CRC@CRC_HI,w,c
  3932  002450  2421               	addwf	Check_CRC@CRC,w,c
  3933  002452  6E21               	movwf	Check_CRC@CRC,c
  3934  002454  0E00               	movlw	0
  3935  002456  2022               	addwfc	Check_CRC@CRC+1,w,c
  3936  002458  6E22               	movwf	Check_CRC@CRC+1,c
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;packet.c: 125: CRC = CRC << 8;
  3940  00245A  5021               	movf	Check_CRC@CRC,w,c
  3941  00245C  6E22               	movwf	Check_CRC@CRC+1,c
  3942  00245E  6A21               	clrf	Check_CRC@CRC,c
  3943                           
  3944                           ; BSR set to: 1
  3945                           ;packet.c: 126: CRC = CRC + CRC_LOW;
  3946  002460  501C               	movf	Check_CRC@CRC_LOW,w,c
  3947  002462  2421               	addwf	Check_CRC@CRC,w,c
  3948  002464  6E21               	movwf	Check_CRC@CRC,c
  3949  002466  0E00               	movlw	0
  3950  002468  2022               	addwfc	Check_CRC@CRC+1,w,c
  3951  00246A  6E22               	movwf	Check_CRC@CRC+1,c
  3952                           
  3953                           ; BSR set to: 1
  3954                           ;packet.c: 128: sum = 0;
  3955  00246C  0E00               	movlw	0
  3956  00246E  6E1E               	movwf	Check_CRC@sum+1,c
  3957  002470  0E00               	movlw	0
  3958  002472  6E1D               	movwf	Check_CRC@sum,c
  3959                           
  3960                           ; BSR set to: 1
  3961                           ;packet.c: 130: for(count = 0; count < length - 2; count++)
  3962  002474  0E00               	movlw	0
  3963  002476  6E1F               	movwf	Check_CRC@count,c
  3964  002478  D013               	goto	l9297
  3965  00247A                     l9293:
  3966                           
  3967                           ; BSR set to: 1
  3968                           ;packet.c: 131: sum = sum + PACKET[count];
  3969  00247A  501F               	movf	Check_CRC@count,w,c
  3970  00247C  0D01               	mullw	1
  3971  00247E  0101               	movlb	1	; () banked
  3972  002480  0E00               	movlw	low _PACKET	;volatile
  3973  002482  24F3               	addwf	prodl,w,c
  3974  002484  6ED9               	movwf	fsr2l,c
  3975  002486  0101               	movlb	1	; () banked
  3976  002488  0E01               	movlw	high _PACKET	;volatile
  3977  00248A  20F4               	addwfc	prodh,w,c
  3978  00248C  6EDA               	movwf	fsr2h,c
  3979  00248E  50DF               	movf	indf2,w,c
  3980  002490  6E14               	movwf	??_Check_CRC& (0+255),c
  3981  002492  5014               	movf	??_Check_CRC,w,c
  3982  002494  241D               	addwf	Check_CRC@sum,w,c
  3983  002496  6E1D               	movwf	Check_CRC@sum,c
  3984  002498  0E00               	movlw	0
  3985  00249A  201E               	addwfc	Check_CRC@sum+1,w,c
  3986  00249C  6E1E               	movwf	Check_CRC@sum+1,c
  3987                           
  3988                           ; BSR set to: 1
  3989  00249E  2A1F               	incf	Check_CRC@count,f,c
  3990  0024A0                     l9297:
  3991                           
  3992                           ; BSR set to: 1
  3993  0024A0  0EFE               	movlw	254
  3994  0024A2  6E14               	movwf	??_Check_CRC& (0+255),c
  3995  0024A4  0EFF               	movlw	255
  3996  0024A6  6E15               	movwf	(??_Check_CRC+1)& (0+255),c
  3997  0024A8  5020               	movf	Check_CRC@length,w,c
  3998  0024AA  6E16               	movwf	(??_Check_CRC+2)& (0+255),c
  3999  0024AC  6A17               	clrf	(??_Check_CRC+3)& (0+255),c
  4000  0024AE  5014               	movf	??_Check_CRC,w,c
  4001  0024B0  2616               	addwf	??_Check_CRC+2,f,c
  4002  0024B2  5015               	movf	??_Check_CRC+1,w,c
  4003  0024B4  2217               	addwfc	??_Check_CRC+3,f,c
  4004  0024B6  501F               	movf	Check_CRC@count,w,c
  4005  0024B8  6E18               	movwf	(??_Check_CRC+4)& (0+255),c
  4006  0024BA  6A19               	clrf	(??_Check_CRC+5)& (0+255),c
  4007  0024BC  5019               	movf	??_Check_CRC+5,w,c
  4008  0024BE  0A80               	xorlw	128
  4009  0024C0  6E1A               	movwf	(??_Check_CRC+6)& (0+255),c
  4010  0024C2  5016               	movf	??_Check_CRC+2,w,c
  4011  0024C4  5C18               	subwf	??_Check_CRC+4,w,c
  4012  0024C6  5017               	movf	??_Check_CRC+3,w,c
  4013  0024C8  0A80               	xorlw	128
  4014  0024CA  581A               	subwfb	(??_Check_CRC+6)& (0+255),w,c
  4015  0024CC  A0D8               	btfss	status,0,c
  4016  0024CE  D7D5               	goto	l9293
  4017                           
  4018                           ; BSR set to: 1
  4019                           ;packet.c: 133: if(sum == CRC)
  4020                           
  4021                           ; BSR set to: 1
  4022  0024D0  5022               	movf	Check_CRC@CRC+1,w,c
  4023  0024D2  181E               	xorwf	Check_CRC@sum+1,w,c
  4024  0024D4  E102               	bnz	u7325
  4025  0024D6  5021               	movf	Check_CRC@CRC,w,c
  4026  0024D8  181D               	xorwf	Check_CRC@sum,w,c
  4027  0024DA                     u7325:
  4028  0024DA  A4D8               	btfss	status,2,c
  4029  0024DC  D002               	goto	l9307
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;packet.c: 134: return 1;
  4033  0024DE  0E01               	movlw	1
  4034  0024E0  D001               	goto	l421
  4035  0024E2                     l9307:
  4036                           
  4037                           ; BSR set to: 1
  4038                           ;packet.c: 135: else
  4039                           ;packet.c: 136: return 0;
  4040  0024E2  0E00               	movlw	0
  4041  0024E4                     l421:
  4042                           
  4043                           ; BSR set to: 1
  4044  0024E4  0012               	return	
  4045  0024E6  FFFF               	dw	65535	; errata NOP
  4046  0024E8                     __end_of_Check_CRC:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _Creat_RTC_Packet *****************
  4065 ;; Defined at:
  4066 ;;		line 31 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  packet_crc      2   36[COMRAM] unsigned int 
  4071 ;;  crc_l           1   35[COMRAM] unsigned char 
  4072 ;;  crc_h           1   34[COMRAM] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;		None               void
  4075 ;; Registers used:
  4076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4082 ;;      Params:         0       0       0       0       0       0       0
  4083 ;;      Locals:         4       0       0       0       0       0       0
  4084 ;;      Temps:          3       0       0       0       0       0       0
  4085 ;;      Totals:         7       0       0       0       0       0       0
  4086 ;;Total ram usage:        7 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    6
  4089 ;; This function calls:
  4090 ;;		_Calculate_CRC
  4091 ;;		_Clear_Packet
  4092 ;;		_Creat_Packet
  4093 ;; This function is called by:
  4094 ;;		_rtc_setting
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text5
  4099  0035B8                     __ptext5:
  4100                           	opt stack 0
  4101  0035B8                     _Creat_RTC_Packet:
  4102                           	opt stack 23
  4103                           
  4104                           ; BSR set to: 1
  4105                           ;incstack = 0
  4106  0035B8  FFFF               	dw	65535
  4107                           
  4108                           ;packet.c: 33: Clear_Packet();
  4109  0035BA  EC2F  F03E         	call	_Clear_Packet	;wreg free
  4110                           
  4111                           ;packet.c: 34: Creat_Packet(3, 0);
  4112  0035BE  0E00               	movlw	0
  4113  0035C0  6E17               	movwf	Creat_Packet@Readings,c
  4114  0035C2  0E03               	movlw	3
  4115  0035C4  ECC0  F01D         	call	_Creat_Packet
  4116                           
  4117                           ;packet.c: 36: unsigned int packet_crc = 0;
  4118  0035C8  0E00               	movlw	0
  4119  0035CA  6E26               	movwf	Creat_RTC_Packet@packet_crc+1,c
  4120  0035CC  0E00               	movlw	0
  4121  0035CE  6E25               	movwf	Creat_RTC_Packet@packet_crc,c
  4122                           
  4123                           ;packet.c: 37: unsigned char crc_h = 0, crc_l = 0;
  4124  0035D0  0E00               	movlw	0
  4125  0035D2  6E23               	movwf	Creat_RTC_Packet@crc_h,c
  4126  0035D4  0E00               	movlw	0
  4127  0035D6  6E24               	movwf	Creat_RTC_Packet@crc_l,c
  4128                           
  4129                           ;packet.c: 39: packet_crc = Calculate_CRC();
  4130  0035D8  ECE7  F01C         	call	_Calculate_CRC	;wreg free
  4131  0035DC  C014  F025         	movff	?_Calculate_CRC,Creat_RTC_Packet@packet_crc
  4132  0035E0  C015  F026         	movff	?_Calculate_CRC+1,Creat_RTC_Packet@packet_crc+1
  4133                           
  4134                           ;packet.c: 40: crc_h = packet_crc >> 8;
  4135  0035E4  C026  F020         	movff	Creat_RTC_Packet@packet_crc+1,??_Creat_RTC_Packet
  4136  0035E8  C020  F021         	movff	??_Creat_RTC_Packet,??_Creat_RTC_Packet+1
  4137  0035EC  6A22               	clrf	(??_Creat_RTC_Packet+2)& (0+255),c
  4138  0035EE  5021               	movf	??_Creat_RTC_Packet+1,w,c
  4139  0035F0  6E23               	movwf	Creat_RTC_Packet@crc_h,c
  4140                           
  4141                           ;packet.c: 41: crc_l = packet_crc & 0x00FF;
  4142  0035F2  C025  F024         	movff	Creat_RTC_Packet@packet_crc,Creat_RTC_Packet@crc_l
  4143                           
  4144                           ;packet.c: 43: PACKET[Current_Pos] = crc_h;
  4145  0035F6  505C               	movf	_Current_Pos,w,c	;volatile
  4146  0035F8  0D01               	mullw	1
  4147  0035FA  0101               	movlb	1	; () banked
  4148  0035FC  0E00               	movlw	low _PACKET	;volatile
  4149  0035FE  24F3               	addwf	prodl,w,c
  4150  003600  6ED9               	movwf	fsr2l,c
  4151  003602  0101               	movlb	1	; () banked
  4152  003604  0E01               	movlw	high _PACKET	;volatile
  4153  003606  20F4               	addwfc	prodh,w,c
  4154  003608  6EDA               	movwf	fsr2h,c
  4155  00360A  C023  FFDF         	movff	Creat_RTC_Packet@crc_h,indf2
  4156                           
  4157                           ; BSR set to: 1
  4158                           ;packet.c: 44: Current_Pos++;
  4159  00360E  2A5C               	incf	_Current_Pos,f,c	;volatile
  4160                           
  4161                           ; BSR set to: 1
  4162                           ;packet.c: 45: PACKET[Current_Pos] = crc_l;
  4163  003610  505C               	movf	_Current_Pos,w,c	;volatile
  4164  003612  0D01               	mullw	1
  4165  003614  0101               	movlb	1	; () banked
  4166  003616  0E00               	movlw	low _PACKET	;volatile
  4167  003618  24F3               	addwf	prodl,w,c
  4168  00361A  6ED9               	movwf	fsr2l,c
  4169  00361C  0101               	movlb	1	; () banked
  4170  00361E  0E01               	movlw	high _PACKET	;volatile
  4171  003620  20F4               	addwfc	prodh,w,c
  4172  003622  6EDA               	movwf	fsr2h,c
  4173  003624  C024  FFDF         	movff	Creat_RTC_Packet@crc_l,indf2
  4174                           
  4175                           ; BSR set to: 1
  4176                           ;packet.c: 46: Current_Pos++;
  4177  003628  2A5C               	incf	_Current_Pos,f,c	;volatile
  4178                           
  4179                           ; BSR set to: 1
  4180                           ;packet.c: 47: PACKET[Current_Pos] = 0xEA;
  4181  00362A  505C               	movf	_Current_Pos,w,c	;volatile
  4182  00362C  0D01               	mullw	1
  4183  00362E  0101               	movlb	1	; () banked
  4184  003630  0E00               	movlw	low _PACKET	;volatile
  4185  003632  24F3               	addwf	prodl,w,c
  4186  003634  6ED9               	movwf	fsr2l,c
  4187  003636  0101               	movlb	1	; () banked
  4188  003638  0E01               	movlw	high _PACKET	;volatile
  4189  00363A  20F4               	addwfc	prodh,w,c
  4190  00363C  6EDA               	movwf	fsr2h,c
  4191  00363E  0EEA               	movlw	234
  4192  003640  6EDF               	movwf	indf2,c
  4193                           
  4194                           ; BSR set to: 1
  4195  003642  0012               	return	
  4196  003644  FFFF               	dw	65535	; errata NOP
  4197  003646                     __end_of_Creat_RTC_Packet:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function _per_second_reading *****************
  4216 ;; Defined at:
  4217 ;;		line 200 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;		None
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;  reading_coun    1    3[BANK2 ] unsigned char 
  4222 ;;  lsb             1    2[BANK2 ] unsigned char 
  4223 ;;  msb             1    1[BANK2 ] unsigned char 
  4224 ;;  result          1    0[BANK2 ] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4234 ;;      Params:         0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       4       0       0       0
  4236 ;;      Temps:          0       3       0       0       0       0       0
  4237 ;;      Totals:         0       3       0       4       0       0       0
  4238 ;;Total ram usage:        7 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    9
  4241 ;; This function calls:
  4242 ;;		_Add_Reading_To_Packet
  4243 ;;		_Clear_Packet
  4244 ;;		_Creat_Packet
  4245 ;;		_DisplayReadings
  4246 ;;		_LCDByte
  4247 ;;		_LCDGotoXY
  4248 ;;		_LCDWriteString
  4249 ;;		_MyDelay
  4250 ;;		_Write_b_eep
  4251 ;;		_beep
  4252 ;;		_get_current_readings
  4253 ;;		_read_packet_from_page
  4254 ;;		_tx_packet
  4255 ;;		_write_packet_to_page
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text6
  4262  0010B8                     __ptext6:
  4263                           	opt stack 0
  4264  0010B8                     _per_second_reading:
  4265                           	opt stack 21
  4266                           
  4267                           ; BSR set to: 1
  4268                           ;incstack = 0
  4269  0010B8  FFFF               	dw	65535
  4270                           
  4271                           ;Test1.c: 202: unsigned char reading_count = 0, result = 0, msb = 0, lsb = 0;
  4272  0010BA  0E00               	movlw	0
  4273  0010BC  0102               	movlb	2	; () banked
  4274  0010BE  6F03               	movwf	per_second_reading@reading_count& (0+255),b
  4275  0010C0  0E00               	movlw	0
  4276  0010C2  0102               	movlb	2	; () banked
  4277  0010C4  6F00               	movwf	per_second_reading@result& (0+255),b
  4278  0010C6  0E00               	movlw	0
  4279  0010C8  0102               	movlb	2	; () banked
  4280  0010CA  6F01               	movwf	per_second_reading@msb& (0+255),b
  4281  0010CC  0E00               	movlw	0
  4282  0010CE  0102               	movlb	2	; () banked
  4283  0010D0  6F02               	movwf	per_second_reading@lsb& (0+255),b
  4284  0010D2                     l10677:
  4285                           
  4286                           ;Test1.c: 204: {
  4287                           ;Test1.c: 205: Clear_Packet();
  4288  0010D2  EC2F  F03E         	call	_Clear_Packet	;wreg free
  4289                           
  4290                           ;Test1.c: 206: reading_count = 14;
  4291  0010D6  0E0E               	movlw	14
  4292  0010D8  0102               	movlb	2	; () banked
  4293  0010DA  6F03               	movwf	per_second_reading@reading_count& (0+255),b
  4294                           
  4295                           ; BSR set to: 2
  4296                           ;Test1.c: 207: Creat_Packet(2,reading_count);
  4297  0010DC  C203  F017         	movff	per_second_reading@reading_count,Creat_Packet@Readings
  4298  0010E0  0E02               	movlw	2
  4299  0010E2  ECC0  F01D         	call	_Creat_Packet
  4300                           
  4301                           ;Test1.c: 209: while(reading_count > 0)
  4302  0010E6  D01F               	goto	l10695
  4303  0010E8                     l10683:
  4304                           
  4305                           ;Test1.c: 210: {
  4306                           ;Test1.c: 211: if(sec_flag == 1)
  4307  0010E8  046A               	decf	_sec_flag,w,c
  4308  0010EA  A4D8               	btfss	status,2,c
  4309  0010EC  D01C               	goto	l10695
  4310                           
  4311                           ;Test1.c: 212: {
  4312                           ;Test1.c: 213: sec_flag = 0;
  4313  0010EE  0E00               	movlw	0
  4314  0010F0  6E6A               	movwf	_sec_flag,c
  4315                           
  4316                           ;Test1.c: 215: get_current_readings();
  4317  0010F2  EC0D  F003         	call	_get_current_readings	;wreg free
  4318                           
  4319                           ;Test1.c: 217: result = Add_Reading_To_Packet(Temp1, Hum1, Temp2, Hum2);
  4320  0010F6  C0EF  F020         	movff	_Temp1,Add_Reading_To_Packet@t1
  4321  0010FA  C0F0  F021         	movff	_Temp1+1,Add_Reading_To_Packet@t1+1
  4322  0010FE  C0EB  F022         	movff	_Hum1,Add_Reading_To_Packet@h1
  4323  001102  C0EC  F023         	movff	_Hum1+1,Add_Reading_To_Packet@h1+1
  4324  001106  C0F1  F024         	movff	_Temp2,Add_Reading_To_Packet@t2
  4325  00110A  C0F2  F025         	movff	_Temp2+1,Add_Reading_To_Packet@t2+1
  4326  00110E  C0ED  F026         	movff	_Hum2,Add_Reading_To_Packet@h2
  4327  001112  C0EE  F027         	movff	_Hum2+1,Add_Reading_To_Packet@h2+1
  4328  001116  ECEE  F00D         	call	_Add_Reading_To_Packet	;wreg free
  4329  00111A  0102               	movlb	2	; () banked
  4330  00111C  6F00               	movwf	per_second_reading@result& (0+255),b
  4331                           
  4332                           ; BSR set to: 2
  4333                           ;Test1.c: 219: DisplayReadings();
  4334  00111E  ECB8  F00E         	call	_DisplayReadings	;wreg free
  4335                           
  4336                           ;Test1.c: 220: reading_count--;
  4337  001122  0102               	movlb	2	; () banked
  4338  001124  0703               	decf	per_second_reading@reading_count& (0+255),f,b
  4339  001126                     l10695:
  4340  001126  0102               	movlb	2	; () banked
  4341  001128  6703               	tstfsz	per_second_reading@reading_count& (0+255),b
  4342  00112A  D7DE               	goto	l10683
  4343                           
  4344                           ; BSR set to: 2
  4345                           ;Test1.c: 221: }
  4346                           ;Test1.c: 222: }
  4347                           ;Test1.c: 223: (LCDByte(0b00000001,0));
  4348                           
  4349                           ; BSR set to: 2
  4350  00112C  0E00               	movlw	0
  4351  00112E  6E17               	movwf	LCDByte@isdata,c
  4352  001130  0E01               	movlw	1
  4353  001132  EC54  F01E         	call	_LCDByte
  4354                           
  4355                           ;Test1.c: 224: LCDWriteString("WRITTING PACKET");
  4356  001136  0E7E               	movlw	high STR_33
  4357  001138  6E1E               	movwf	LCDWriteString@msg+1,c
  4358  00113A  0E69               	movlw	low STR_33
  4359  00113C  6E1D               	movwf	LCDWriteString@msg,c
  4360  00113E  EC15  F019         	call	_LCDWriteString	;wreg free
  4361                           
  4362                           ;Test1.c: 225: LCDGotoXY(0,1);
  4363  001142  0E01               	movlw	1
  4364  001144  6E1D               	movwf	LCDGotoXY@y,c
  4365  001146  0E00               	movlw	0
  4366  001148  EC72  F01F         	call	_LCDGotoXY
  4367                           
  4368                           ;Test1.c: 226: LCDWriteString("TO EEPROM...");
  4369  00114C  0E7F               	movlw	high STR_34
  4370  00114E  6E1E               	movwf	LCDWriteString@msg+1,c
  4371  001150  0E44               	movlw	low STR_34
  4372  001152  6E1D               	movwf	LCDWriteString@msg,c
  4373  001154  EC15  F019         	call	_LCDWriteString	;wreg free
  4374                           
  4375                           ;Test1.c: 227: MyDelay(100);
  4376  001158  0E00               	movlw	0
  4377  00115A  6E15               	movwf	MyDelay@ms+1,c
  4378  00115C  0E64               	movlw	100
  4379  00115E  6E14               	movwf	MyDelay@ms,c
  4380  001160  EC8E  F03D         	call	_MyDelay	;wreg free
  4381                           
  4382                           ;Test1.c: 228: write_packet_to_page(Current_Write_Page);
  4383  001164  C0E9  F01F         	movff	_Current_Write_Page,write_packet_to_page@page_no	;volatile
  4384  001168  C0EA  F020         	movff	_Current_Write_Page+1,write_packet_to_page@page_no+1	;volatile
  4385  00116C  ECC3  F018         	call	_write_packet_to_page	;wreg free
  4386                           
  4387                           ;Test1.c: 229: Current_Write_Page++;
  4388  001170  0100               	movlb	0	; () banked
  4389  001172  4BE9               	infsnz	_Current_Write_Page& (0+255),f,b	;volatile
  4390  001174  2BEA               	incf	(_Current_Write_Page+1)& (0+255),f,b	;volatile
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;Test1.c: 231: msb = Current_Write_Page >> 8;
  4394  001176  0100               	movlb	0	; () banked
  4395  001178  C0EA  F0B8         	movff	_Current_Write_Page+1,??_per_second_reading	;volatile
  4396  00117C  C0B8  F0B9         	movff	??_per_second_reading,??_per_second_reading+1
  4397  001180  0100               	movlb	0	; () banked
  4398  001182  6BBA               	clrf	(??_per_second_reading+2)& (0+255),b
  4399  001184  0100               	movlb	0	; () banked
  4400  001186  51B9               	movf	(??_per_second_reading+1)& (0+255),w,b
  4401  001188  0102               	movlb	2	; () banked
  4402  00118A  6F01               	movwf	per_second_reading@msb& (0+255),b
  4403                           
  4404                           ; BSR set to: 2
  4405                           ;Test1.c: 232: lsb = Current_Write_Page & 0x00FF;
  4406  00118C  C0E9  F202         	movff	_Current_Write_Page,per_second_reading@lsb	;volatile
  4407                           
  4408                           ; BSR set to: 2
  4409                           ;Test1.c: 235: Write_b_eep(0x00, msb);
  4410  001190  0E00               	movlw	0
  4411  001192  6E15               	movwf	Write_b_eep@badd+1,c
  4412  001194  0E00               	movlw	0
  4413  001196  6E14               	movwf	Write_b_eep@badd,c
  4414  001198  C201  F016         	movff	per_second_reading@msb,Write_b_eep@bdat
  4415  00119C  EC94  F01F         	call	_Write_b_eep	;wreg free
  4416                           
  4417                           ;Test1.c: 236: _delay(50);
  4418  0011A0  0E0A               	movlw	10
  4419  0011A2                     u8767:
  4420  0011A2  F000               	nop	
  4421  0011A4  2EE8               	decfsz	wreg,f,c
  4422  0011A6  D7FD               	goto	u8767
  4423                           
  4424                           ;Test1.c: 237: Write_b_eep(0x01, lsb);
  4425  0011A8  0E00               	movlw	0
  4426  0011AA  6E15               	movwf	Write_b_eep@badd+1,c
  4427  0011AC  0E01               	movlw	1
  4428  0011AE  6E14               	movwf	Write_b_eep@badd,c
  4429  0011B0  C202  F016         	movff	per_second_reading@lsb,Write_b_eep@bdat
  4430  0011B4  EC94  F01F         	call	_Write_b_eep	;wreg free
  4431                           
  4432                           ;Test1.c: 238: _delay(50);
  4433  0011B8  0E0A               	movlw	10
  4434  0011BA                     u8777:
  4435  0011BA  F000               	nop	
  4436  0011BC  2EE8               	decfsz	wreg,f,c
  4437  0011BE  D7FD               	goto	u8777
  4438                           
  4439                           ;Test1.c: 240: if(Current_Write_Page >= 2)
  4440  0011C0  0E02               	movlw	2
  4441  0011C2  0100               	movlb	0	; () banked
  4442  0011C4  5DE9               	subwf	_Current_Write_Page& (0+255),w,b	;volatile
  4443  0011C6  0E00               	movlw	0
  4444  0011C8  0100               	movlb	0	; () banked
  4445  0011CA  59EA               	subwfb	(_Current_Write_Page+1)& (0+255),w,b	;volatile
  4446  0011CC  A0D8               	btfss	status,0,c
  4447  0011CE  D781               	goto	l10677
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;Test1.c: 241: {
  4451                           ;Test1.c: 242: Current_Write_Page = 0;
  4452  0011D0  0E00               	movlw	0
  4453  0011D2  0100               	movlb	0	; () banked
  4454  0011D4  6FEA               	movwf	(_Current_Write_Page+1)& (0+255),b	;volatile
  4455  0011D6  0E00               	movlw	0
  4456  0011D8  0100               	movlb	0	; () banked
  4457  0011DA  6FE9               	movwf	_Current_Write_Page& (0+255),b	;volatile
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;Test1.c: 244: (LCDByte(0b00000001,0));
  4461  0011DC  0E00               	movlw	0
  4462  0011DE  6E17               	movwf	LCDByte@isdata,c
  4463  0011E0  0E01               	movlw	1
  4464  0011E2  EC54  F01E         	call	_LCDByte
  4465                           
  4466                           ;Test1.c: 245: LCDWriteString("MEMORY FULL...");
  4467  0011E6  0E7E               	movlw	high STR_35
  4468  0011E8  6E1E               	movwf	LCDWriteString@msg+1,c
  4469  0011EA  0E99               	movlw	low STR_35
  4470  0011EC  6E1D               	movwf	LCDWriteString@msg,c
  4471  0011EE  EC15  F019         	call	_LCDWriteString	;wreg free
  4472                           
  4473                           ;Test1.c: 246: LCDGotoXY(0,1);
  4474  0011F2  0E01               	movlw	1
  4475  0011F4  6E1D               	movwf	LCDGotoXY@y,c
  4476  0011F6  0E00               	movlw	0
  4477  0011F8  EC72  F01F         	call	_LCDGotoXY
  4478                           
  4479                           ;Test1.c: 247: LCDWriteString("SENDING TO CNTR.");
  4480  0011FC  0E7E               	movlw	high STR_36
  4481  0011FE  6E1E               	movwf	LCDWriteString@msg+1,c
  4482  001200  0E03               	movlw	low STR_36
  4483  001202  6E1D               	movwf	LCDWriteString@msg,c
  4484  001204  EC15  F019         	call	_LCDWriteString	;wreg free
  4485                           
  4486                           ;Test1.c: 249: RC2 = 1;
  4487  001208  8482               	bsf	3970,2,c	;volatile
  4488                           
  4489                           ;Test1.c: 250: beep(100);
  4490  00120A  0E00               	movlw	0
  4491  00120C  6E18               	movwf	beep@del+1,c
  4492  00120E  0E64               	movlw	100
  4493  001210  6E17               	movwf	beep@del,c
  4494  001212  EC4A  F03D         	call	_beep	;wreg free
  4495                           
  4496                           ;Test1.c: 251: MyDelay(500);
  4497  001216  0E01               	movlw	1
  4498  001218  6E15               	movwf	MyDelay@ms+1,c
  4499  00121A  0EF4               	movlw	244
  4500  00121C  6E14               	movwf	MyDelay@ms,c
  4501  00121E  EC8E  F03D         	call	_MyDelay	;wreg free
  4502                           
  4503                           ;Test1.c: 252: Current_Read_Page = 0;
  4504  001222  0E00               	movlw	0
  4505  001224  0100               	movlb	0	; () banked
  4506  001226  6FE8               	movwf	(_Current_Read_Page+1)& (0+255),b	;volatile
  4507  001228  0E00               	movlw	0
  4508  00122A  0100               	movlb	0	; () banked
  4509  00122C  6FE7               	movwf	_Current_Read_Page& (0+255),b	;volatile
  4510                           
  4511                           ;Test1.c: 253: while(Current_Read_Page < 2)
  4512  00122E  D03F               	goto	l10765
  4513  001230                     l10739:
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;Test1.c: 254: {
  4517                           ;Test1.c: 255: Clear_Packet();
  4518  001230  EC2F  F03E         	call	_Clear_Packet	;wreg free
  4519                           
  4520                           ;Test1.c: 257: (LCDByte(0b00000001,0));
  4521  001234  0E00               	movlw	0
  4522  001236  6E17               	movwf	LCDByte@isdata,c
  4523  001238  0E01               	movlw	1
  4524  00123A  EC54  F01E         	call	_LCDByte
  4525                           
  4526                           ;Test1.c: 258: LCDWriteString("READING EEPROM...");
  4527  00123E  0E7D               	movlw	high STR_37
  4528  001240  6E1E               	movwf	LCDWriteString@msg+1,c
  4529  001242  0E87               	movlw	low STR_37
  4530  001244  6E1D               	movwf	LCDWriteString@msg,c
  4531  001246  EC15  F019         	call	_LCDWriteString	;wreg free
  4532                           
  4533                           ;Test1.c: 259: read_packet_from_page(Current_Read_Page);
  4534  00124A  C0E7  F01F         	movff	_Current_Read_Page,read_packet_from_page@page_no	;volatile
  4535  00124E  C0E8  F020         	movff	_Current_Read_Page+1,read_packet_from_page@page_no+1	;volatile
  4536  001252  ECAD  F01B         	call	_read_packet_from_page	;wreg free
  4537                           
  4538                           ;Test1.c: 260: MyDelay(10);
  4539  001256  0E00               	movlw	0
  4540  001258  6E15               	movwf	MyDelay@ms+1,c
  4541  00125A  0E0A               	movlw	10
  4542  00125C  6E14               	movwf	MyDelay@ms,c
  4543  00125E  EC8E  F03D         	call	_MyDelay	;wreg free
  4544                           
  4545                           ;Test1.c: 261: (LCDByte(0b00000001,0));
  4546  001262  0E00               	movlw	0
  4547  001264  6E17               	movwf	LCDByte@isdata,c
  4548  001266  0E01               	movlw	1
  4549  001268  EC54  F01E         	call	_LCDByte
  4550                           
  4551                           ;Test1.c: 262: LCDWriteString("SENDING PACKET...");
  4552  00126C  0E7D               	movlw	high STR_38
  4553  00126E  6E1E               	movwf	LCDWriteString@msg+1,c
  4554  001270  0E99               	movlw	low STR_38
  4555  001272  6E1D               	movwf	LCDWriteString@msg,c
  4556  001274  EC15  F019         	call	_LCDWriteString	;wreg free
  4557                           
  4558                           ;Test1.c: 264: tx_packet();
  4559  001278  ECDD  F014         	call	_tx_packet	;wreg free
  4560                           
  4561                           ;Test1.c: 265: (LCDByte(0b00000001,0));
  4562  00127C  0E00               	movlw	0
  4563  00127E  6E17               	movwf	LCDByte@isdata,c
  4564  001280  0E01               	movlw	1
  4565  001282  EC54  F01E         	call	_LCDByte
  4566                           
  4567                           ;Test1.c: 266: LCDWriteString("PACKET SENT!");
  4568  001286  0E7F               	movlw	high STR_39
  4569  001288  6E1E               	movwf	LCDWriteString@msg+1,c
  4570  00128A  0E37               	movlw	low STR_39
  4571  00128C  6E1D               	movwf	LCDWriteString@msg,c
  4572  00128E  EC15  F019         	call	_LCDWriteString	;wreg free
  4573                           
  4574                           ;Test1.c: 267: MyDelay(100);
  4575  001292  0E00               	movlw	0
  4576  001294  6E15               	movwf	MyDelay@ms+1,c
  4577  001296  0E64               	movlw	100
  4578  001298  6E14               	movwf	MyDelay@ms,c
  4579  00129A  EC8E  F03D         	call	_MyDelay	;wreg free
  4580                           
  4581                           ;Test1.c: 268: (LCDByte(0b00000001,0));
  4582  00129E  0E00               	movlw	0
  4583  0012A0  6E17               	movwf	LCDByte@isdata,c
  4584  0012A2  0E01               	movlw	1
  4585  0012A4  EC54  F01E         	call	_LCDByte
  4586                           
  4587                           ;Test1.c: 269: Current_Read_Page++;
  4588  0012A8  0100               	movlb	0	; () banked
  4589  0012AA  4BE7               	infsnz	_Current_Read_Page& (0+255),f,b	;volatile
  4590  0012AC  2BE8               	incf	(_Current_Read_Page+1)& (0+255),f,b	;volatile
  4591  0012AE                     l10765:
  4592                           
  4593                           ; BSR set to: 0
  4594  0012AE  0E02               	movlw	2
  4595  0012B0  0100               	movlb	0	; () banked
  4596  0012B2  5DE7               	subwf	_Current_Read_Page& (0+255),w,b	;volatile
  4597  0012B4  0E00               	movlw	0
  4598  0012B6  0100               	movlb	0	; () banked
  4599  0012B8  59E8               	subwfb	(_Current_Read_Page+1)& (0+255),w,b	;volatile
  4600  0012BA  A0D8               	btfss	status,0,c
  4601  0012BC  D7B9               	goto	l10739
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;Test1.c: 270: }
  4605                           ;Test1.c: 272: RC2 = 0;
  4606  0012BE  9482               	bcf	3970,2,c	;volatile
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;Test1.c: 273: beep(100);
  4610  0012C0  0E00               	movlw	0
  4611  0012C2  6E18               	movwf	beep@del+1,c
  4612  0012C4  0E64               	movlw	100
  4613  0012C6  6E17               	movwf	beep@del,c
  4614  0012C8  EC4A  F03D         	call	_beep	;wreg free
  4615                           
  4616                           ;Test1.c: 274: MyDelay(500);
  4617  0012CC  0E01               	movlw	1
  4618  0012CE  6E15               	movwf	MyDelay@ms+1,c
  4619  0012D0  0EF4               	movlw	244
  4620  0012D2  6E14               	movwf	MyDelay@ms,c
  4621  0012D4  EC8E  F03D         	call	_MyDelay	;wreg free
  4622  0012D8  D6FC               	goto	l10677
  4623  0012DA  FFFF               	dw	65535	; errata NOP
  4624  0012DC                     __end_of_per_second_reading:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           postdec1	equ	0xFE5
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function _per_minute_reading *****************
  4643 ;; Defined at:
  4644 ;;		line 118 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;		None
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  reading_coun    1    3[BANK2 ] unsigned char 
  4649 ;;  lsb             1    2[BANK2 ] unsigned char 
  4650 ;;  msb             1    1[BANK2 ] unsigned char 
  4651 ;;  result          1    0[BANK2 ] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;		None               void
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4661 ;;      Params:         0       0       0       0       0       0       0
  4662 ;;      Locals:         0       0       0       4       0       0       0
  4663 ;;      Temps:          0       3       0       0       0       0       0
  4664 ;;      Totals:         0       3       0       4       0       0       0
  4665 ;;Total ram usage:        7 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:    9
  4668 ;; This function calls:
  4669 ;;		_Add_Reading_To_Packet
  4670 ;;		_Clear_Packet
  4671 ;;		_Creat_Packet
  4672 ;;		_DisplayReadings
  4673 ;;		_LCDByte
  4674 ;;		_LCDGotoXY
  4675 ;;		_LCDWriteString
  4676 ;;		_MyDelay
  4677 ;;		_Write_b_eep
  4678 ;;		_beep
  4679 ;;		_get_current_readings
  4680 ;;		_read_packet_from_page
  4681 ;;		_tx_packet
  4682 ;;		_write_packet_to_page
  4683 ;; This function is called by:
  4684 ;;		_main
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text7
  4689  000E82                     __ptext7:
  4690                           	opt stack 0
  4691  000E82                     _per_minute_reading:
  4692                           	opt stack 21
  4693                           
  4694                           ;incstack = 0
  4695  000E82  FFFF               	dw	65535
  4696                           
  4697                           ;Test1.c: 120: unsigned char reading_count = 0, result = 0, msb = 0, lsb = 0;
  4698  000E84  0E00               	movlw	0
  4699  000E86  0102               	movlb	2	; () banked
  4700  000E88  6F03               	movwf	per_minute_reading@reading_count& (0+255),b
  4701  000E8A  0E00               	movlw	0
  4702  000E8C  0102               	movlb	2	; () banked
  4703  000E8E  6F00               	movwf	per_minute_reading@result& (0+255),b
  4704  000E90  0E00               	movlw	0
  4705  000E92  0102               	movlb	2	; () banked
  4706  000E94  6F01               	movwf	per_minute_reading@msb& (0+255),b
  4707  000E96  0E00               	movlw	0
  4708  000E98  0102               	movlb	2	; () banked
  4709  000E9A  6F02               	movwf	per_minute_reading@lsb& (0+255),b
  4710  000E9C                     l10771:
  4711                           
  4712                           ;Test1.c: 122: {
  4713                           ;Test1.c: 123: Clear_Packet();
  4714  000E9C  EC2F  F03E         	call	_Clear_Packet	;wreg free
  4715                           
  4716                           ;Test1.c: 124: reading_count = 14;
  4717  000EA0  0E0E               	movlw	14
  4718  000EA2  0102               	movlb	2	; () banked
  4719  000EA4  6F03               	movwf	per_minute_reading@reading_count& (0+255),b
  4720                           
  4721                           ; BSR set to: 2
  4722                           ;Test1.c: 125: Creat_Packet(1,reading_count);
  4723  000EA6  C203  F017         	movff	per_minute_reading@reading_count,Creat_Packet@Readings
  4724  000EAA  0E01               	movlw	1
  4725  000EAC  ECC0  F01D         	call	_Creat_Packet
  4726                           
  4727                           ;Test1.c: 126: seconds = 0;
  4728  000EB0  0E00               	movlw	0
  4729  000EB2  6E6B               	movwf	_seconds,c
  4730                           
  4731                           ;Test1.c: 127: min_flag = 1;
  4732  000EB4  0E01               	movlw	1
  4733  000EB6  0100               	movlb	0	; () banked
  4734  000EB8  6FF5               	movwf	_min_flag& (0+255),b
  4735                           
  4736                           ;Test1.c: 129: while(reading_count > 0)
  4737  000EBA  D023               	goto	l10793
  4738  000EBC                     l10781:
  4739                           
  4740                           ;Test1.c: 130: {
  4741                           ;Test1.c: 131: if(min_flag == 1)
  4742  000EBC  0100               	movlb	0	; () banked
  4743  000EBE  05F5               	decf	_min_flag& (0+255),w,b
  4744  000EC0  A4D8               	btfss	status,2,c
  4745  000EC2  D01F               	goto	l10793
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;Test1.c: 132: {
  4749                           ;Test1.c: 133: min_flag = 0;
  4750  000EC4  0E00               	movlw	0
  4751  000EC6  0100               	movlb	0	; () banked
  4752  000EC8  6FF5               	movwf	_min_flag& (0+255),b
  4753                           
  4754                           ;Test1.c: 134: seconds = 0;
  4755  000ECA  0E00               	movlw	0
  4756  000ECC  6E6B               	movwf	_seconds,c
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;Test1.c: 136: get_current_readings();
  4760  000ECE  EC0D  F003         	call	_get_current_readings	;wreg free
  4761                           
  4762                           ;Test1.c: 138: result = Add_Reading_To_Packet(Temp1, Hum1, Temp2, Hum2);
  4763  000ED2  C0EF  F020         	movff	_Temp1,Add_Reading_To_Packet@t1
  4764  000ED6  C0F0  F021         	movff	_Temp1+1,Add_Reading_To_Packet@t1+1
  4765  000EDA  C0EB  F022         	movff	_Hum1,Add_Reading_To_Packet@h1
  4766  000EDE  C0EC  F023         	movff	_Hum1+1,Add_Reading_To_Packet@h1+1
  4767  000EE2  C0F1  F024         	movff	_Temp2,Add_Reading_To_Packet@t2
  4768  000EE6  C0F2  F025         	movff	_Temp2+1,Add_Reading_To_Packet@t2+1
  4769  000EEA  C0ED  F026         	movff	_Hum2,Add_Reading_To_Packet@h2
  4770  000EEE  C0EE  F027         	movff	_Hum2+1,Add_Reading_To_Packet@h2+1
  4771  000EF2  ECEE  F00D         	call	_Add_Reading_To_Packet	;wreg free
  4772  000EF6  0102               	movlb	2	; () banked
  4773  000EF8  6F00               	movwf	per_minute_reading@result& (0+255),b
  4774                           
  4775                           ; BSR set to: 2
  4776                           ;Test1.c: 140: DisplayReadings();
  4777  000EFA  ECB8  F00E         	call	_DisplayReadings	;wreg free
  4778                           
  4779                           ;Test1.c: 141: reading_count--;
  4780  000EFE  0102               	movlb	2	; () banked
  4781  000F00  0703               	decf	per_minute_reading@reading_count& (0+255),f,b
  4782  000F02                     l10793:
  4783  000F02  0102               	movlb	2	; () banked
  4784  000F04  6703               	tstfsz	per_minute_reading@reading_count& (0+255),b
  4785  000F06  D7DA               	goto	l10781
  4786                           
  4787                           ; BSR set to: 2
  4788                           ;Test1.c: 142: }
  4789                           ;Test1.c: 143: }
  4790                           ;Test1.c: 144: (LCDByte(0b00000001,0));
  4791                           
  4792                           ; BSR set to: 2
  4793  000F08  0E00               	movlw	0
  4794  000F0A  6E17               	movwf	LCDByte@isdata,c
  4795  000F0C  0E01               	movlw	1
  4796  000F0E  EC54  F01E         	call	_LCDByte
  4797                           
  4798                           ;Test1.c: 145: LCDWriteString("WRITTING PACKET");
  4799  000F12  0E7E               	movlw	high STR_33
  4800  000F14  6E1E               	movwf	LCDWriteString@msg+1,c
  4801  000F16  0E69               	movlw	low STR_33
  4802  000F18  6E1D               	movwf	LCDWriteString@msg,c
  4803  000F1A  EC15  F019         	call	_LCDWriteString	;wreg free
  4804                           
  4805                           ;Test1.c: 146: LCDGotoXY(0,1);
  4806  000F1E  0E01               	movlw	1
  4807  000F20  6E1D               	movwf	LCDGotoXY@y,c
  4808  000F22  0E00               	movlw	0
  4809  000F24  EC72  F01F         	call	_LCDGotoXY
  4810                           
  4811                           ;Test1.c: 147: LCDWriteString("TO EEPROM...");
  4812  000F28  0E7F               	movlw	high STR_34
  4813  000F2A  6E1E               	movwf	LCDWriteString@msg+1,c
  4814  000F2C  0E44               	movlw	low STR_34
  4815  000F2E  6E1D               	movwf	LCDWriteString@msg,c
  4816  000F30  EC15  F019         	call	_LCDWriteString	;wreg free
  4817                           
  4818                           ;Test1.c: 148: MyDelay(100);
  4819  000F34  0E00               	movlw	0
  4820  000F36  6E15               	movwf	MyDelay@ms+1,c
  4821  000F38  0E64               	movlw	100
  4822  000F3A  6E14               	movwf	MyDelay@ms,c
  4823  000F3C  EC8E  F03D         	call	_MyDelay	;wreg free
  4824                           
  4825                           ;Test1.c: 149: write_packet_to_page(Current_Write_Page);
  4826  000F40  C0E9  F01F         	movff	_Current_Write_Page,write_packet_to_page@page_no	;volatile
  4827  000F44  C0EA  F020         	movff	_Current_Write_Page+1,write_packet_to_page@page_no+1	;volatile
  4828  000F48  ECC3  F018         	call	_write_packet_to_page	;wreg free
  4829                           
  4830                           ;Test1.c: 150: Current_Write_Page++;
  4831  000F4C  0100               	movlb	0	; () banked
  4832  000F4E  4BE9               	infsnz	_Current_Write_Page& (0+255),f,b	;volatile
  4833  000F50  2BEA               	incf	(_Current_Write_Page+1)& (0+255),f,b	;volatile
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;Test1.c: 152: msb = Current_Write_Page >> 8;
  4837  000F52  0100               	movlb	0	; () banked
  4838  000F54  C0EA  F0B8         	movff	_Current_Write_Page+1,??_per_minute_reading	;volatile
  4839  000F58  C0B8  F0B9         	movff	??_per_minute_reading,??_per_minute_reading+1
  4840  000F5C  0100               	movlb	0	; () banked
  4841  000F5E  6BBA               	clrf	(??_per_minute_reading+2)& (0+255),b
  4842  000F60  0100               	movlb	0	; () banked
  4843  000F62  51B9               	movf	(??_per_minute_reading+1)& (0+255),w,b
  4844  000F64  0102               	movlb	2	; () banked
  4845  000F66  6F01               	movwf	per_minute_reading@msb& (0+255),b
  4846                           
  4847                           ; BSR set to: 2
  4848                           ;Test1.c: 153: lsb = Current_Write_Page & 0x00FF;
  4849  000F68  C0E9  F202         	movff	_Current_Write_Page,per_minute_reading@lsb	;volatile
  4850                           
  4851                           ; BSR set to: 2
  4852                           ;Test1.c: 156: Write_b_eep(0x00, msb);
  4853  000F6C  0E00               	movlw	0
  4854  000F6E  6E15               	movwf	Write_b_eep@badd+1,c
  4855  000F70  0E00               	movlw	0
  4856  000F72  6E14               	movwf	Write_b_eep@badd,c
  4857  000F74  C201  F016         	movff	per_minute_reading@msb,Write_b_eep@bdat
  4858  000F78  EC94  F01F         	call	_Write_b_eep	;wreg free
  4859                           
  4860                           ;Test1.c: 157: _delay(50);
  4861  000F7C  0E0A               	movlw	10
  4862  000F7E                     u8787:
  4863  000F7E  F000               	nop	
  4864  000F80  2EE8               	decfsz	wreg,f,c
  4865  000F82  D7FD               	goto	u8787
  4866                           
  4867                           ;Test1.c: 158: Write_b_eep(0x01, lsb);
  4868  000F84  0E00               	movlw	0
  4869  000F86  6E15               	movwf	Write_b_eep@badd+1,c
  4870  000F88  0E01               	movlw	1
  4871  000F8A  6E14               	movwf	Write_b_eep@badd,c
  4872  000F8C  C202  F016         	movff	per_minute_reading@lsb,Write_b_eep@bdat
  4873  000F90  EC94  F01F         	call	_Write_b_eep	;wreg free
  4874                           
  4875                           ;Test1.c: 159: _delay(50);
  4876  000F94  0E0A               	movlw	10
  4877  000F96                     u8797:
  4878  000F96  F000               	nop	
  4879  000F98  2EE8               	decfsz	wreg,f,c
  4880  000F9A  D7FD               	goto	u8797
  4881                           
  4882                           ;Test1.c: 161: if(Current_Write_Page >= 2)
  4883  000F9C  0E02               	movlw	2
  4884  000F9E  0100               	movlb	0	; () banked
  4885  000FA0  5DE9               	subwf	_Current_Write_Page& (0+255),w,b	;volatile
  4886  000FA2  0E00               	movlw	0
  4887  000FA4  0100               	movlb	0	; () banked
  4888  000FA6  59EA               	subwfb	(_Current_Write_Page+1)& (0+255),w,b	;volatile
  4889  000FA8  A0D8               	btfss	status,0,c
  4890  000FAA  D778               	goto	l10771
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;Test1.c: 162: {
  4894                           ;Test1.c: 163: Current_Write_Page = 0;
  4895  000FAC  0E00               	movlw	0
  4896  000FAE  0100               	movlb	0	; () banked
  4897  000FB0  6FEA               	movwf	(_Current_Write_Page+1)& (0+255),b	;volatile
  4898  000FB2  0E00               	movlw	0
  4899  000FB4  0100               	movlb	0	; () banked
  4900  000FB6  6FE9               	movwf	_Current_Write_Page& (0+255),b	;volatile
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;Test1.c: 165: (LCDByte(0b00000001,0));
  4904  000FB8  0E00               	movlw	0
  4905  000FBA  6E17               	movwf	LCDByte@isdata,c
  4906  000FBC  0E01               	movlw	1
  4907  000FBE  EC54  F01E         	call	_LCDByte
  4908                           
  4909                           ;Test1.c: 166: LCDWriteString("MEMORY FULL...");
  4910  000FC2  0E7E               	movlw	high STR_35
  4911  000FC4  6E1E               	movwf	LCDWriteString@msg+1,c
  4912  000FC6  0E99               	movlw	low STR_35
  4913  000FC8  6E1D               	movwf	LCDWriteString@msg,c
  4914  000FCA  EC15  F019         	call	_LCDWriteString	;wreg free
  4915                           
  4916                           ;Test1.c: 167: LCDGotoXY(0,1);
  4917  000FCE  0E01               	movlw	1
  4918  000FD0  6E1D               	movwf	LCDGotoXY@y,c
  4919  000FD2  0E00               	movlw	0
  4920  000FD4  EC72  F01F         	call	_LCDGotoXY
  4921                           
  4922                           ;Test1.c: 168: LCDWriteString("SENDING TO CNTR.");
  4923  000FD8  0E7E               	movlw	high STR_36
  4924  000FDA  6E1E               	movwf	LCDWriteString@msg+1,c
  4925  000FDC  0E03               	movlw	low STR_36
  4926  000FDE  6E1D               	movwf	LCDWriteString@msg,c
  4927  000FE0  EC15  F019         	call	_LCDWriteString	;wreg free
  4928                           
  4929                           ;Test1.c: 170: RC2 = 1;
  4930  000FE4  8482               	bsf	3970,2,c	;volatile
  4931                           
  4932                           ;Test1.c: 171: beep(100);
  4933  000FE6  0E00               	movlw	0
  4934  000FE8  6E18               	movwf	beep@del+1,c
  4935  000FEA  0E64               	movlw	100
  4936  000FEC  6E17               	movwf	beep@del,c
  4937  000FEE  EC4A  F03D         	call	_beep	;wreg free
  4938                           
  4939                           ;Test1.c: 172: MyDelay(500);
  4940  000FF2  0E01               	movlw	1
  4941  000FF4  6E15               	movwf	MyDelay@ms+1,c
  4942  000FF6  0EF4               	movlw	244
  4943  000FF8  6E14               	movwf	MyDelay@ms,c
  4944  000FFA  EC8E  F03D         	call	_MyDelay	;wreg free
  4945                           
  4946                           ;Test1.c: 173: Current_Read_Page = 0;
  4947  000FFE  0E00               	movlw	0
  4948  001000  0100               	movlb	0	; () banked
  4949  001002  6FE8               	movwf	(_Current_Read_Page+1)& (0+255),b	;volatile
  4950  001004  0E00               	movlw	0
  4951  001006  0100               	movlb	0	; () banked
  4952  001008  6FE7               	movwf	_Current_Read_Page& (0+255),b	;volatile
  4953                           
  4954                           ;Test1.c: 174: while(Current_Read_Page < 2)
  4955  00100A  D03F               	goto	l10863
  4956  00100C                     l10837:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;Test1.c: 175: {
  4960                           ;Test1.c: 176: Clear_Packet();
  4961  00100C  EC2F  F03E         	call	_Clear_Packet	;wreg free
  4962                           
  4963                           ;Test1.c: 178: (LCDByte(0b00000001,0));
  4964  001010  0E00               	movlw	0
  4965  001012  6E17               	movwf	LCDByte@isdata,c
  4966  001014  0E01               	movlw	1
  4967  001016  EC54  F01E         	call	_LCDByte
  4968                           
  4969                           ;Test1.c: 179: LCDWriteString("READING EEPROM...");
  4970  00101A  0E7D               	movlw	high STR_37
  4971  00101C  6E1E               	movwf	LCDWriteString@msg+1,c
  4972  00101E  0E87               	movlw	low STR_37
  4973  001020  6E1D               	movwf	LCDWriteString@msg,c
  4974  001022  EC15  F019         	call	_LCDWriteString	;wreg free
  4975                           
  4976                           ;Test1.c: 180: read_packet_from_page(Current_Read_Page);
  4977  001026  C0E7  F01F         	movff	_Current_Read_Page,read_packet_from_page@page_no	;volatile
  4978  00102A  C0E8  F020         	movff	_Current_Read_Page+1,read_packet_from_page@page_no+1	;volatile
  4979  00102E  ECAD  F01B         	call	_read_packet_from_page	;wreg free
  4980                           
  4981                           ;Test1.c: 181: MyDelay(10);
  4982  001032  0E00               	movlw	0
  4983  001034  6E15               	movwf	MyDelay@ms+1,c
  4984  001036  0E0A               	movlw	10
  4985  001038  6E14               	movwf	MyDelay@ms,c
  4986  00103A  EC8E  F03D         	call	_MyDelay	;wreg free
  4987                           
  4988                           ;Test1.c: 182: (LCDByte(0b00000001,0));
  4989  00103E  0E00               	movlw	0
  4990  001040  6E17               	movwf	LCDByte@isdata,c
  4991  001042  0E01               	movlw	1
  4992  001044  EC54  F01E         	call	_LCDByte
  4993                           
  4994                           ;Test1.c: 183: LCDWriteString("SENDING PACKET...");
  4995  001048  0E7D               	movlw	high STR_38
  4996  00104A  6E1E               	movwf	LCDWriteString@msg+1,c
  4997  00104C  0E99               	movlw	low STR_38
  4998  00104E  6E1D               	movwf	LCDWriteString@msg,c
  4999  001050  EC15  F019         	call	_LCDWriteString	;wreg free
  5000                           
  5001                           ;Test1.c: 185: tx_packet();
  5002  001054  ECDD  F014         	call	_tx_packet	;wreg free
  5003                           
  5004                           ;Test1.c: 186: (LCDByte(0b00000001,0));
  5005  001058  0E00               	movlw	0
  5006  00105A  6E17               	movwf	LCDByte@isdata,c
  5007  00105C  0E01               	movlw	1
  5008  00105E  EC54  F01E         	call	_LCDByte
  5009                           
  5010                           ;Test1.c: 187: LCDWriteString("PACKET SENT!");
  5011  001062  0E7F               	movlw	high STR_39
  5012  001064  6E1E               	movwf	LCDWriteString@msg+1,c
  5013  001066  0E37               	movlw	low STR_39
  5014  001068  6E1D               	movwf	LCDWriteString@msg,c
  5015  00106A  EC15  F019         	call	_LCDWriteString	;wreg free
  5016                           
  5017                           ;Test1.c: 188: MyDelay(100);
  5018  00106E  0E00               	movlw	0
  5019  001070  6E15               	movwf	MyDelay@ms+1,c
  5020  001072  0E64               	movlw	100
  5021  001074  6E14               	movwf	MyDelay@ms,c
  5022  001076  EC8E  F03D         	call	_MyDelay	;wreg free
  5023                           
  5024                           ;Test1.c: 189: (LCDByte(0b00000001,0));
  5025  00107A  0E00               	movlw	0
  5026  00107C  6E17               	movwf	LCDByte@isdata,c
  5027  00107E  0E01               	movlw	1
  5028  001080  EC54  F01E         	call	_LCDByte
  5029                           
  5030                           ;Test1.c: 190: Current_Read_Page++;
  5031  001084  0100               	movlb	0	; () banked
  5032  001086  4BE7               	infsnz	_Current_Read_Page& (0+255),f,b	;volatile
  5033  001088  2BE8               	incf	(_Current_Read_Page+1)& (0+255),f,b	;volatile
  5034  00108A                     l10863:
  5035                           
  5036                           ; BSR set to: 0
  5037  00108A  0E02               	movlw	2
  5038  00108C  0100               	movlb	0	; () banked
  5039  00108E  5DE7               	subwf	_Current_Read_Page& (0+255),w,b	;volatile
  5040  001090  0E00               	movlw	0
  5041  001092  0100               	movlb	0	; () banked
  5042  001094  59E8               	subwfb	(_Current_Read_Page+1)& (0+255),w,b	;volatile
  5043  001096  A0D8               	btfss	status,0,c
  5044  001098  D7B9               	goto	l10837
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;Test1.c: 191: }
  5048                           ;Test1.c: 193: RC2 = 0;
  5049  00109A  9482               	bcf	3970,2,c	;volatile
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;Test1.c: 194: beep(100);
  5053  00109C  0E00               	movlw	0
  5054  00109E  6E18               	movwf	beep@del+1,c
  5055  0010A0  0E64               	movlw	100
  5056  0010A2  6E17               	movwf	beep@del,c
  5057  0010A4  EC4A  F03D         	call	_beep	;wreg free
  5058                           
  5059                           ;Test1.c: 195: MyDelay(500);
  5060  0010A8  0E01               	movlw	1
  5061  0010AA  6E15               	movwf	MyDelay@ms+1,c
  5062  0010AC  0EF4               	movlw	244
  5063  0010AE  6E14               	movwf	MyDelay@ms,c
  5064  0010B0  EC8E  F03D         	call	_MyDelay	;wreg free
  5065  0010B4  D6F3               	goto	l10771
  5066  0010B6  FFFF               	dw	65535	; errata NOP
  5067  0010B8                     __end_of_per_minute_reading:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           postinc0	equ	0xFEE
  5076                           wreg	equ	0xFE8
  5077                           postdec1	equ	0xFE5
  5078                           fsr1h	equ	0xFE2
  5079                           fsr1l	equ	0xFE1
  5080                           indf2	equ	0xFDF
  5081                           fsr2h	equ	0xFDA
  5082                           fsr2l	equ	0xFD9
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function _write_packet_to_page *****************
  5086 ;; Defined at:
  5087 ;;		line 125 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myeeprom.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  page_no         2   30[COMRAM] unsigned int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  address         2   36[COMRAM] unsigned int 
  5092 ;;  count           1   38[COMRAM] unsigned char 
  5093 ;;  lsb             1   35[COMRAM] unsigned char 
  5094 ;;  msb             1   34[COMRAM] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         2       0       0       0       0       0       0
  5105 ;;      Locals:         5       0       0       0       0       0       0
  5106 ;;      Temps:          2       0       0       0       0       0       0
  5107 ;;      Totals:         9       0       0       0       0       0       0
  5108 ;;Total ram usage:        9 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    5
  5111 ;; This function calls:
  5112 ;;		_rom_byte_write
  5113 ;; This function is called by:
  5114 ;;		_per_minute_reading
  5115 ;;		_per_second_reading
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text8
  5120  003186                     __ptext8:
  5121                           	opt stack 0
  5122  003186                     _write_packet_to_page:
  5123                           	opt stack 24
  5124                           
  5125                           ;incstack = 0
  5126  003186  FFFF               	dw	65535
  5127                           
  5128                           ;myeeprom.c: 127: unsigned char count = 0;
  5129  003188  0E00               	movlw	0
  5130  00318A  6E27               	movwf	write_packet_to_page@count,c
  5131                           
  5132                           ;myeeprom.c: 128: unsigned char msb = 0, lsb = 0;
  5133  00318C  0E00               	movlw	0
  5134  00318E  6E23               	movwf	write_packet_to_page@msb,c
  5135  003190  0E00               	movlw	0
  5136  003192  6E24               	movwf	write_packet_to_page@lsb,c
  5137                           
  5138                           ;myeeprom.c: 129: unsigned int address = 0;
  5139  003194  0E00               	movlw	0
  5140  003196  6E26               	movwf	write_packet_to_page@address+1,c
  5141  003198  0E00               	movlw	0
  5142  00319A  6E25               	movwf	write_packet_to_page@address,c
  5143                           
  5144                           ;myeeprom.c: 131: address = page_no * 128;
  5145  00319C  C01F  F021         	movff	write_packet_to_page@page_no,??_write_packet_to_page
  5146  0031A0  C020  F022         	movff	write_packet_to_page@page_no+1,??_write_packet_to_page+1
  5147  0031A4  0E07               	movlw	7
  5148  0031A6                     u7455:
  5149  0031A6  90D8               	bcf	status,0,c
  5150  0031A8  3621               	rlcf	??_write_packet_to_page,f,c
  5151  0031AA  3622               	rlcf	??_write_packet_to_page+1,f,c
  5152  0031AC  2EE8               	decfsz	wreg,f,c
  5153  0031AE  D7FB               	goto	u7455
  5154  0031B0  C021  F025         	movff	??_write_packet_to_page,write_packet_to_page@address
  5155  0031B4  C022  F026         	movff	??_write_packet_to_page+1,write_packet_to_page@address+1
  5156                           
  5157                           ;myeeprom.c: 133: count = 0;
  5158  0031B8  0E00               	movlw	0
  5159  0031BA  6E27               	movwf	write_packet_to_page@count,c
  5160                           
  5161                           ;myeeprom.c: 134: while(PACKET[count] != 0xEA)
  5162  0031BC  D015               	goto	l9581
  5163  0031BE                     l9575:
  5164                           
  5165                           ;myeeprom.c: 135: {
  5166                           ;myeeprom.c: 136: rom_byte_write(address,PACKET[count]);
  5167  0031BE  C025  F017         	movff	write_packet_to_page@address,rom_byte_write@address
  5168  0031C2  C026  F018         	movff	write_packet_to_page@address+1,rom_byte_write@address+1
  5169  0031C6  5027               	movf	write_packet_to_page@count,w,c
  5170  0031C8  0D01               	mullw	1
  5171  0031CA  0101               	movlb	1	; () banked
  5172  0031CC  0E00               	movlw	low _PACKET	;volatile
  5173  0031CE  24F3               	addwf	prodl,w,c
  5174  0031D0  6ED9               	movwf	fsr2l,c
  5175  0031D2  0101               	movlb	1	; () banked
  5176  0031D4  0E01               	movlw	high _PACKET	;volatile
  5177  0031D6  20F4               	addwfc	prodh,w,c
  5178  0031D8  6EDA               	movwf	fsr2h,c
  5179  0031DA  50DF               	movf	indf2,w,c
  5180  0031DC  6E19               	movwf	rom_byte_write@byte,c
  5181  0031DE  EC8D  F01D         	call	_rom_byte_write	;wreg free
  5182                           
  5183                           ;myeeprom.c: 137: count++;
  5184  0031E2  2A27               	incf	write_packet_to_page@count,f,c
  5185                           
  5186                           ;myeeprom.c: 138: address++;
  5187  0031E4  4A25               	infsnz	write_packet_to_page@address,f,c
  5188  0031E6  2A26               	incf	write_packet_to_page@address+1,f,c
  5189  0031E8                     l9581:
  5190  0031E8  5027               	movf	write_packet_to_page@count,w,c
  5191  0031EA  0D01               	mullw	1
  5192  0031EC  0101               	movlb	1	; () banked
  5193  0031EE  0E00               	movlw	low _PACKET	;volatile
  5194  0031F0  24F3               	addwf	prodl,w,c
  5195  0031F2  6ED9               	movwf	fsr2l,c
  5196  0031F4  0101               	movlb	1	; () banked
  5197  0031F6  0E01               	movlw	high _PACKET	;volatile
  5198  0031F8  20F4               	addwfc	prodh,w,c
  5199  0031FA  6EDA               	movwf	fsr2h,c
  5200  0031FC  0EEA               	movlw	234
  5201  0031FE  62DF               	cpfseq	indf2,c
  5202  003200  D7DE               	goto	l9575
  5203                           
  5204                           ; BSR set to: 1
  5205                           ;myeeprom.c: 139: }
  5206                           ;myeeprom.c: 140: rom_byte_write(address,PACKET[count]);
  5207                           
  5208                           ; BSR set to: 1
  5209  003202  C025  F017         	movff	write_packet_to_page@address,rom_byte_write@address
  5210  003206  C026  F018         	movff	write_packet_to_page@address+1,rom_byte_write@address+1
  5211  00320A  5027               	movf	write_packet_to_page@count,w,c
  5212  00320C  0D01               	mullw	1
  5213  00320E  0101               	movlb	1	; () banked
  5214  003210  0E00               	movlw	low _PACKET	;volatile
  5215  003212  24F3               	addwf	prodl,w,c
  5216  003214  6ED9               	movwf	fsr2l,c
  5217  003216  0101               	movlb	1	; () banked
  5218  003218  0E01               	movlw	high _PACKET	;volatile
  5219  00321A  20F4               	addwfc	prodh,w,c
  5220  00321C  6EDA               	movwf	fsr2h,c
  5221  00321E  50DF               	movf	indf2,w,c
  5222  003220  6E19               	movwf	rom_byte_write@byte,c
  5223  003222  EC8D  F01D         	call	_rom_byte_write	;wreg free
  5224                           
  5225                           ;myeeprom.c: 142: return;
  5226  003226  0012               	return	
  5227  003228  FFFF               	dw	65535	; errata NOP
  5228  00322A                     __end_of_write_packet_to_page:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _rom_byte_write *****************
  5247 ;; Defined at:
  5248 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myeeprom.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  address         2   22[COMRAM] unsigned int 
  5251 ;;  byte            1   24[COMRAM] unsigned char 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  lsb             1   29[COMRAM] unsigned char 
  5254 ;;  msb             1   28[COMRAM] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5264 ;;      Params:         3       0       0       0       0       0       0
  5265 ;;      Locals:         2       0       0       0       0       0       0
  5266 ;;      Temps:          3       0       0       0       0       0       0
  5267 ;;      Totals:         8       0       0       0       0       0       0
  5268 ;;Total ram usage:        8 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    4
  5271 ;; This function calls:
  5272 ;;		_IdleI2C
  5273 ;;		_WriteI2C
  5274 ;; This function is called by:
  5275 ;;		_write_packet_to_page
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text9
  5280  003B1A                     __ptext9:
  5281                           	opt stack 0
  5282  003B1A                     _rom_byte_write:
  5283                           	opt stack 24
  5284                           
  5285                           ;incstack = 0
  5286  003B1A  FFFF               	dw	65535
  5287                           
  5288                           ;myeeprom.c: 9: unsigned char msb, lsb;
  5289                           ;myeeprom.c: 10: msb = address >> 8;
  5290  003B1C  C018  F01A         	movff	rom_byte_write@address+1,??_rom_byte_write
  5291  003B20  C01A  F01B         	movff	??_rom_byte_write,??_rom_byte_write+1
  5292  003B24  6A1C               	clrf	(??_rom_byte_write+2)& (0+255),c
  5293  003B26  501B               	movf	??_rom_byte_write+1,w,c
  5294  003B28  6E1D               	movwf	rom_byte_write@msb,c
  5295                           
  5296                           ;myeeprom.c: 11: lsb = address & 0x00FF;
  5297  003B2A  C017  F01E         	movff	rom_byte_write@address,rom_byte_write@lsb
  5298                           
  5299                           ;myeeprom.c: 13: RE1 = 1;
  5300  003B2E  8284               	bsf	3972,1,c	;volatile
  5301                           
  5302                           ;myeeprom.c: 14: IdleI2C();
  5303  003B30  EC35  F03D         	call	_IdleI2C	;wreg free
  5304                           
  5305                           ;myeeprom.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5306  003B34  80C5               	bsf	4037,0,c	;volatile
  5307  003B36                     l96:
  5308  003B36  B0C5               	btfsc	4037,0,c	;volatile
  5309  003B38  D7FE               	goto	l96
  5310                           
  5311                           ;myeeprom.c: 16: WriteI2C(device & 0xFE);
  5312  003B3A  5064               	movf	_device,w,c
  5313  003B3C  0BFE               	andlw	254
  5314  003B3E  EC59  F01D         	call	_WriteI2C
  5315                           
  5316                           ;myeeprom.c: 17: IdleI2C();
  5317  003B42  EC35  F03D         	call	_IdleI2C	;wreg free
  5318                           
  5319                           ;myeeprom.c: 18: WriteI2C(msb);
  5320  003B46  501D               	movf	rom_byte_write@msb,w,c
  5321  003B48  EC59  F01D         	call	_WriteI2C
  5322                           
  5323                           ;myeeprom.c: 19: IdleI2C();
  5324  003B4C  EC35  F03D         	call	_IdleI2C	;wreg free
  5325                           
  5326                           ;myeeprom.c: 20: WriteI2C(lsb);
  5327  003B50  501E               	movf	rom_byte_write@lsb,w,c
  5328  003B52  EC59  F01D         	call	_WriteI2C
  5329                           
  5330                           ;myeeprom.c: 21: IdleI2C();
  5331  003B56  EC35  F03D         	call	_IdleI2C	;wreg free
  5332                           
  5333                           ;myeeprom.c: 22: WriteI2C(byte);
  5334  003B5A  5019               	movf	rom_byte_write@byte,w,c
  5335  003B5C  EC59  F01D         	call	_WriteI2C
  5336                           
  5337                           ;myeeprom.c: 23: IdleI2C();
  5338  003B60  EC35  F03D         	call	_IdleI2C	;wreg free
  5339                           
  5340                           ;myeeprom.c: 24: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5341  003B64  84C5               	bsf	4037,2,c	;volatile
  5342  003B66                     l99:
  5343  003B66  B4C5               	btfsc	4037,2,c	;volatile
  5344  003B68  D7FE               	goto	l99
  5345                           
  5346                           ;myeeprom.c: 25: _delay(100000);
  5347  003B6A  0E62               	movlw	98
  5348  003B6C  6E1A               	movwf	??_rom_byte_write& (0+255),c
  5349  003B6E  0E76               	movlw	118
  5350  003B70                     u8807:
  5351  003B70  2EE8               	decfsz	wreg,f,c
  5352  003B72  D7FE               	goto	u8807
  5353  003B74  2E1A               	decfsz	??_rom_byte_write& (0+255),f,c
  5354  003B76  D7FC               	goto	u8807
  5355  003B78  D000               	nop2	
  5356                           
  5357                           ;myeeprom.c: 26: RE1 = 0;
  5358  003B7A  9284               	bcf	3972,1,c	;volatile
  5359  003B7C  0012               	return	
  5360  003B7E  FFFF               	dw	65535	; errata NOP
  5361  003B80                     __end_of_rom_byte_write:
  5362                           	opt stack 0
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           postinc0	equ	0xFEE
  5370                           wreg	equ	0xFE8
  5371                           postdec1	equ	0xFE5
  5372                           fsr1h	equ	0xFE2
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _Creat_Packet *****************
  5380 ;; Defined at:
  5381 ;;		line 6 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  F_Code          1    wreg     unsigned char 
  5384 ;;  Readings        1   22[COMRAM] unsigned char 
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  F_Code          1   23[COMRAM] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;		None               void
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5396 ;;      Params:         1       0       0       0       0       0       0
  5397 ;;      Locals:         1       0       0       0       0       0       0
  5398 ;;      Temps:          0       0       0       0       0       0       0
  5399 ;;      Totals:         2       0       0       0       0       0       0
  5400 ;;Total ram usage:        2 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    5
  5403 ;; This function calls:
  5404 ;;		_MyDelay
  5405 ;;		_ds1307_get_time
  5406 ;; This function is called by:
  5407 ;;		_Creat_RTC_Packet
  5408 ;;		_per_minute_reading
  5409 ;;		_per_second_reading
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text10
  5414  003B80                     __ptext10:
  5415                           	opt stack 0
  5416  003B80                     _Creat_Packet:
  5417                           	opt stack 23
  5418                           
  5419                           ;incstack = 0
  5420  003B80  FFFF               	dw	65535
  5421                           
  5422                           ;Creat_Packet@F_Code stored from wreg
  5423  003B82  6E18               	movwf	Creat_Packet@F_Code,c
  5424                           
  5425                           ;packet.c: 8: PACKET[0] = 0xFA;
  5426  003B84  0EFA               	movlw	250
  5427  003B86  0101               	movlb	1	; () banked
  5428  003B88  6F00               	movwf	_PACKET& (0+255),b	;volatile
  5429                           
  5430                           ; BSR set to: 1
  5431                           ;packet.c: 9: PACKET[1] = (Readings * 8) + 16;
  5432  003B8A  5017               	movf	Creat_Packet@Readings,w,c
  5433  003B8C  0D08               	mullw	8
  5434  003B8E  50F3               	movf	prodl,w,c
  5435  003B90  0F10               	addlw	16
  5436  003B92  0101               	movlb	1	; () banked
  5437  003B94  6F01               	movwf	(_PACKET+1)& (0+255),b	;volatile
  5438                           
  5439                           ; BSR set to: 1
  5440                           ;packet.c: 10: PACKET[2] = Source_ID;
  5441  003B96  C05F  F102         	movff	_Source_ID,_PACKET+2	;volatile
  5442                           
  5443                           ; BSR set to: 1
  5444                           ;packet.c: 11: PACKET[3] = Destination_ID;
  5445  003B9A  C05E  F103         	movff	_Destination_ID,_PACKET+3	;volatile
  5446                           
  5447                           ; BSR set to: 1
  5448                           ;packet.c: 12: PACKET[4] = F_Code;
  5449  003B9E  C018  F104         	movff	Creat_Packet@F_Code,_PACKET+4	;volatile
  5450                           
  5451                           ; BSR set to: 1
  5452                           ;packet.c: 13: PACKET[5] = Readings;
  5453  003BA2  C017  F105         	movff	Creat_Packet@Readings,_PACKET+5	;volatile
  5454                           
  5455                           ; BSR set to: 1
  5456                           ;packet.c: 16: ds1307_get_time();
  5457  003BA6  EC30  F01C         	call	_ds1307_get_time	;wreg free
  5458                           
  5459                           ;packet.c: 17: MyDelay(100);
  5460  003BAA  0E00               	movlw	0
  5461  003BAC  6E15               	movwf	MyDelay@ms+1,c
  5462  003BAE  0E64               	movlw	100
  5463  003BB0  6E14               	movwf	MyDelay@ms,c
  5464  003BB2  EC8E  F03D         	call	_MyDelay	;wreg free
  5465                           
  5466                           ;packet.c: 19: PACKET[6] = year;
  5467  003BB6  C06C  F106         	movff	_year,_PACKET+6	;volatile
  5468                           
  5469                           ;packet.c: 20: PACKET[7] = month;
  5470  003BBA  C068  F107         	movff	_month,_PACKET+7	;volatile
  5471                           
  5472                           ;packet.c: 21: PACKET[8] = day;
  5473  003BBE  C063  F108         	movff	_day,_PACKET+8	;volatile
  5474                           
  5475                           ;packet.c: 22: PACKET[9] = dow;
  5476  003BC2  C065  F109         	movff	_dow,_PACKET+9	;volatile
  5477                           
  5478                           ;packet.c: 23: PACKET[10] = hr;
  5479  003BC6  C066  F10A         	movff	_hr,_PACKET+10	;volatile
  5480                           
  5481                           ;packet.c: 24: PACKET[11] = min;
  5482  003BCA  C067  F10B         	movff	_min,_PACKET+11	;volatile
  5483                           
  5484                           ;packet.c: 25: PACKET[12] = sec;
  5485  003BCE  C069  F10C         	movff	_sec,_PACKET+12	;volatile
  5486                           
  5487                           ;packet.c: 27: Current_Pos = 13;
  5488  003BD2  0E0D               	movlw	13
  5489  003BD4  6E5C               	movwf	_Current_Pos,c	;volatile
  5490                           
  5491                           ;packet.c: 28: Data_End = Readings * 8 + 13;
  5492  003BD6  5017               	movf	Creat_Packet@Readings,w,c
  5493  003BD8  0D08               	mullw	8
  5494  003BDA  50F3               	movf	prodl,w,c
  5495  003BDC  0F0D               	addlw	13
  5496  003BDE  6E5D               	movwf	_Data_End,c	;volatile
  5497  003BE0  0012               	return	
  5498  003BE2  FFFF               	dw	65535	; errata NOP
  5499  003BE4                     __end_of_Creat_Packet:
  5500                           	opt stack 0
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1h	equ	0xFE2
  5511                           fsr1l	equ	0xFE1
  5512                           indf2	equ	0xFDF
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _Add_Reading_To_Packet *****************
  5518 ;; Defined at:
  5519 ;;		line 50 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  t1              2   31[COMRAM] int 
  5522 ;;  h1              2   33[COMRAM] int 
  5523 ;;  t2              2   35[COMRAM] int 
  5524 ;;  h2              2   37[COMRAM] int 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;  CRC             2   51[COMRAM] int 
  5527 ;;  CRC_LOW         1   50[COMRAM] unsigned char 
  5528 ;;  CRC_HI          1   49[COMRAM] unsigned char 
  5529 ;;  h2_l            1   48[COMRAM] unsigned char 
  5530 ;;  h2_h            1   47[COMRAM] unsigned char 
  5531 ;;  t2_l            1   46[COMRAM] unsigned char 
  5532 ;;  t2_h            1   45[COMRAM] unsigned char 
  5533 ;;  h1_l            1   44[COMRAM] unsigned char 
  5534 ;;  h1_h            1   43[COMRAM] unsigned char 
  5535 ;;  t1_l            1   42[COMRAM] unsigned char 
  5536 ;;  t1_h            1   41[COMRAM] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      unsigned char 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5546 ;;      Params:         8       0       0       0       0       0       0
  5547 ;;      Locals:        12       0       0       0       0       0       0
  5548 ;;      Temps:          2       0       0       0       0       0       0
  5549 ;;      Totals:        22       0       0       0       0       0       0
  5550 ;;Total ram usage:       22 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    3
  5553 ;; This function calls:
  5554 ;;		_Calculate_CRC
  5555 ;; This function is called by:
  5556 ;;		_per_minute_reading
  5557 ;;		_per_second_reading
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text11
  5562  001BDC                     __ptext11:
  5563                           	opt stack 0
  5564  001BDC                     _Add_Reading_To_Packet:
  5565                           	opt stack 26
  5566                           
  5567                           ;incstack = 0
  5568  001BDC  FFFF               	dw	65535
  5569                           
  5570                           ;packet.c: 52: char t1_h, t1_l, h1_h, h1_l;
  5571                           ;packet.c: 53: char t2_h, t2_l, h2_h, h2_l;
  5572                           ;packet.c: 54: int CRC;
  5573                           ;packet.c: 55: char CRC_HI, CRC_LOW;
  5574                           ;packet.c: 57: t1_h = t1 >> 8;
  5575  001BDE  C021  F028         	movff	Add_Reading_To_Packet@t1+1,??_Add_Reading_To_Packet
  5576  001BE2  6A29               	clrf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5577  001BE4  BE28               	btfsc	??_Add_Reading_To_Packet& (0+255),7,c
  5578  001BE6  6829               	setf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5579  001BE8  5028               	movf	??_Add_Reading_To_Packet,w,c
  5580  001BEA  6E2A               	movwf	Add_Reading_To_Packet@t1_h,c
  5581                           
  5582                           ;packet.c: 58: t1_l = t1 & 0x00FF;
  5583  001BEC  C020  F02B         	movff	Add_Reading_To_Packet@t1,Add_Reading_To_Packet@t1_l
  5584                           
  5585                           ;packet.c: 60: h1_h = h1 >> 8;
  5586  001BF0  C023  F028         	movff	Add_Reading_To_Packet@h1+1,??_Add_Reading_To_Packet
  5587  001BF4  6A29               	clrf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5588  001BF6  BE28               	btfsc	??_Add_Reading_To_Packet& (0+255),7,c
  5589  001BF8  6829               	setf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5590  001BFA  5028               	movf	??_Add_Reading_To_Packet,w,c
  5591  001BFC  6E2C               	movwf	Add_Reading_To_Packet@h1_h,c
  5592                           
  5593                           ;packet.c: 61: h1_l = h1 & 0x00FF;
  5594  001BFE  C022  F02D         	movff	Add_Reading_To_Packet@h1,Add_Reading_To_Packet@h1_l
  5595                           
  5596                           ;packet.c: 63: t2_h = t2 >> 8;
  5597  001C02  C025  F028         	movff	Add_Reading_To_Packet@t2+1,??_Add_Reading_To_Packet
  5598  001C06  6A29               	clrf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5599  001C08  BE28               	btfsc	??_Add_Reading_To_Packet& (0+255),7,c
  5600  001C0A  6829               	setf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5601  001C0C  5028               	movf	??_Add_Reading_To_Packet,w,c
  5602  001C0E  6E2E               	movwf	Add_Reading_To_Packet@t2_h,c
  5603                           
  5604                           ;packet.c: 64: t2_l = t2 & 0x00FF;
  5605  001C10  C024  F02F         	movff	Add_Reading_To_Packet@t2,Add_Reading_To_Packet@t2_l
  5606                           
  5607                           ;packet.c: 66: h2_h = h2 >> 8;
  5608  001C14  C027  F028         	movff	Add_Reading_To_Packet@h2+1,??_Add_Reading_To_Packet
  5609  001C18  6A29               	clrf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5610  001C1A  BE28               	btfsc	??_Add_Reading_To_Packet& (0+255),7,c
  5611  001C1C  6829               	setf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5612  001C1E  5028               	movf	??_Add_Reading_To_Packet,w,c
  5613  001C20  6E30               	movwf	Add_Reading_To_Packet@h2_h,c
  5614                           
  5615                           ;packet.c: 67: h2_l = h2 & 0x00FF;
  5616  001C22  C026  F031         	movff	Add_Reading_To_Packet@h2,Add_Reading_To_Packet@h2_l
  5617                           
  5618                           ;packet.c: 69: PACKET[Current_Pos] = t1_h;
  5619  001C26  505C               	movf	_Current_Pos,w,c	;volatile
  5620  001C28  0D01               	mullw	1
  5621  001C2A  0101               	movlb	1	; () banked
  5622  001C2C  0E00               	movlw	low _PACKET	;volatile
  5623  001C2E  24F3               	addwf	prodl,w,c
  5624  001C30  6ED9               	movwf	fsr2l,c
  5625  001C32  0101               	movlb	1	; () banked
  5626  001C34  0E01               	movlw	high _PACKET	;volatile
  5627  001C36  20F4               	addwfc	prodh,w,c
  5628  001C38  6EDA               	movwf	fsr2h,c
  5629  001C3A  C02A  FFDF         	movff	Add_Reading_To_Packet@t1_h,indf2
  5630                           
  5631                           ; BSR set to: 1
  5632                           ;packet.c: 70: Current_Pos++;
  5633  001C3E  2A5C               	incf	_Current_Pos,f,c	;volatile
  5634                           
  5635                           ; BSR set to: 1
  5636                           ;packet.c: 71: PACKET[Current_Pos] = t1_l;
  5637  001C40  505C               	movf	_Current_Pos,w,c	;volatile
  5638  001C42  0D01               	mullw	1
  5639  001C44  0101               	movlb	1	; () banked
  5640  001C46  0E00               	movlw	low _PACKET	;volatile
  5641  001C48  24F3               	addwf	prodl,w,c
  5642  001C4A  6ED9               	movwf	fsr2l,c
  5643  001C4C  0101               	movlb	1	; () banked
  5644  001C4E  0E01               	movlw	high _PACKET	;volatile
  5645  001C50  20F4               	addwfc	prodh,w,c
  5646  001C52  6EDA               	movwf	fsr2h,c
  5647  001C54  C02B  FFDF         	movff	Add_Reading_To_Packet@t1_l,indf2
  5648                           
  5649                           ; BSR set to: 1
  5650                           ;packet.c: 72: Current_Pos++;
  5651  001C58  2A5C               	incf	_Current_Pos,f,c	;volatile
  5652                           
  5653                           ; BSR set to: 1
  5654                           ;packet.c: 73: PACKET[Current_Pos] = h1_h;
  5655  001C5A  505C               	movf	_Current_Pos,w,c	;volatile
  5656  001C5C  0D01               	mullw	1
  5657  001C5E  0101               	movlb	1	; () banked
  5658  001C60  0E00               	movlw	low _PACKET	;volatile
  5659  001C62  24F3               	addwf	prodl,w,c
  5660  001C64  6ED9               	movwf	fsr2l,c
  5661  001C66  0101               	movlb	1	; () banked
  5662  001C68  0E01               	movlw	high _PACKET	;volatile
  5663  001C6A  20F4               	addwfc	prodh,w,c
  5664  001C6C  6EDA               	movwf	fsr2h,c
  5665  001C6E  C02C  FFDF         	movff	Add_Reading_To_Packet@h1_h,indf2
  5666                           
  5667                           ; BSR set to: 1
  5668                           ;packet.c: 74: Current_Pos++;
  5669  001C72  2A5C               	incf	_Current_Pos,f,c	;volatile
  5670                           
  5671                           ; BSR set to: 1
  5672                           ;packet.c: 75: PACKET[Current_Pos] = h1_l;
  5673  001C74  505C               	movf	_Current_Pos,w,c	;volatile
  5674  001C76  0D01               	mullw	1
  5675  001C78  0101               	movlb	1	; () banked
  5676  001C7A  0E00               	movlw	low _PACKET	;volatile
  5677  001C7C  24F3               	addwf	prodl,w,c
  5678  001C7E  6ED9               	movwf	fsr2l,c
  5679  001C80  0101               	movlb	1	; () banked
  5680  001C82  0E01               	movlw	high _PACKET	;volatile
  5681  001C84  20F4               	addwfc	prodh,w,c
  5682  001C86  6EDA               	movwf	fsr2h,c
  5683  001C88  C02D  FFDF         	movff	Add_Reading_To_Packet@h1_l,indf2
  5684                           
  5685                           ; BSR set to: 1
  5686                           ;packet.c: 76: Current_Pos++;
  5687  001C8C  2A5C               	incf	_Current_Pos,f,c	;volatile
  5688                           
  5689                           ; BSR set to: 1
  5690                           ;packet.c: 77: PACKET[Current_Pos] = t2_h;
  5691  001C8E  505C               	movf	_Current_Pos,w,c	;volatile
  5692  001C90  0D01               	mullw	1
  5693  001C92  0101               	movlb	1	; () banked
  5694  001C94  0E00               	movlw	low _PACKET	;volatile
  5695  001C96  24F3               	addwf	prodl,w,c
  5696  001C98  6ED9               	movwf	fsr2l,c
  5697  001C9A  0101               	movlb	1	; () banked
  5698  001C9C  0E01               	movlw	high _PACKET	;volatile
  5699  001C9E  20F4               	addwfc	prodh,w,c
  5700  001CA0  6EDA               	movwf	fsr2h,c
  5701  001CA2  C02E  FFDF         	movff	Add_Reading_To_Packet@t2_h,indf2
  5702                           
  5703                           ; BSR set to: 1
  5704                           ;packet.c: 78: Current_Pos++;
  5705  001CA6  2A5C               	incf	_Current_Pos,f,c	;volatile
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;packet.c: 79: PACKET[Current_Pos] = t2_l;
  5709  001CA8  505C               	movf	_Current_Pos,w,c	;volatile
  5710  001CAA  0D01               	mullw	1
  5711  001CAC  0101               	movlb	1	; () banked
  5712  001CAE  0E00               	movlw	low _PACKET	;volatile
  5713  001CB0  24F3               	addwf	prodl,w,c
  5714  001CB2  6ED9               	movwf	fsr2l,c
  5715  001CB4  0101               	movlb	1	; () banked
  5716  001CB6  0E01               	movlw	high _PACKET	;volatile
  5717  001CB8  20F4               	addwfc	prodh,w,c
  5718  001CBA  6EDA               	movwf	fsr2h,c
  5719  001CBC  C02F  FFDF         	movff	Add_Reading_To_Packet@t2_l,indf2
  5720                           
  5721                           ; BSR set to: 1
  5722                           ;packet.c: 80: Current_Pos++;
  5723  001CC0  2A5C               	incf	_Current_Pos,f,c	;volatile
  5724                           
  5725                           ; BSR set to: 1
  5726                           ;packet.c: 81: PACKET[Current_Pos] = h2_h;
  5727  001CC2  505C               	movf	_Current_Pos,w,c	;volatile
  5728  001CC4  0D01               	mullw	1
  5729  001CC6  0101               	movlb	1	; () banked
  5730  001CC8  0E00               	movlw	low _PACKET	;volatile
  5731  001CCA  24F3               	addwf	prodl,w,c
  5732  001CCC  6ED9               	movwf	fsr2l,c
  5733  001CCE  0101               	movlb	1	; () banked
  5734  001CD0  0E01               	movlw	high _PACKET	;volatile
  5735  001CD2  20F4               	addwfc	prodh,w,c
  5736  001CD4  6EDA               	movwf	fsr2h,c
  5737  001CD6  C030  FFDF         	movff	Add_Reading_To_Packet@h2_h,indf2
  5738                           
  5739                           ; BSR set to: 1
  5740                           ;packet.c: 82: Current_Pos++;
  5741  001CDA  2A5C               	incf	_Current_Pos,f,c	;volatile
  5742                           
  5743                           ; BSR set to: 1
  5744                           ;packet.c: 83: PACKET[Current_Pos] = h2_l;
  5745  001CDC  505C               	movf	_Current_Pos,w,c	;volatile
  5746  001CDE  0D01               	mullw	1
  5747  001CE0  0101               	movlb	1	; () banked
  5748  001CE2  0E00               	movlw	low _PACKET	;volatile
  5749  001CE4  24F3               	addwf	prodl,w,c
  5750  001CE6  6ED9               	movwf	fsr2l,c
  5751  001CE8  0101               	movlb	1	; () banked
  5752  001CEA  0E01               	movlw	high _PACKET	;volatile
  5753  001CEC  20F4               	addwfc	prodh,w,c
  5754  001CEE  6EDA               	movwf	fsr2h,c
  5755  001CF0  C031  FFDF         	movff	Add_Reading_To_Packet@h2_l,indf2
  5756                           
  5757                           ; BSR set to: 1
  5758                           ;packet.c: 84: Current_Pos++;
  5759  001CF4  2A5C               	incf	_Current_Pos,f,c	;volatile
  5760                           
  5761                           ;packet.c: 86: if(Current_Pos == Data_End)
  5762  001CF6  505D               	movf	_Data_End,w,c	;volatile
  5763  001CF8  625C               	cpfseq	_Current_Pos,c	;volatile
  5764  001CFA  D037               	goto	l9819
  5765                           
  5766                           ; BSR set to: 1
  5767                           ;packet.c: 87: {
  5768                           ;packet.c: 89: CRC = Calculate_CRC();
  5769  001CFC  ECE7  F01C         	call	_Calculate_CRC	;wreg free
  5770  001D00  C014  F034         	movff	?_Calculate_CRC,Add_Reading_To_Packet@CRC
  5771  001D04  C015  F035         	movff	?_Calculate_CRC+1,Add_Reading_To_Packet@CRC+1
  5772                           
  5773                           ;packet.c: 90: CRC_HI = CRC >> 8;
  5774  001D08  C035  F028         	movff	Add_Reading_To_Packet@CRC+1,??_Add_Reading_To_Packet
  5775  001D0C  6A29               	clrf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5776  001D0E  BE28               	btfsc	??_Add_Reading_To_Packet& (0+255),7,c
  5777  001D10  6829               	setf	(??_Add_Reading_To_Packet+1)& (0+255),c
  5778  001D12  5028               	movf	??_Add_Reading_To_Packet,w,c
  5779  001D14  6E32               	movwf	Add_Reading_To_Packet@CRC_HI,c
  5780                           
  5781                           ;packet.c: 91: CRC_LOW = CRC & 0x00FF;
  5782  001D16  C034  F033         	movff	Add_Reading_To_Packet@CRC,Add_Reading_To_Packet@CRC_LOW
  5783                           
  5784                           ;packet.c: 92: PACKET[Current_Pos] = CRC_HI;
  5785  001D1A  505C               	movf	_Current_Pos,w,c	;volatile
  5786  001D1C  0D01               	mullw	1
  5787  001D1E  0101               	movlb	1	; () banked
  5788  001D20  0E00               	movlw	low _PACKET	;volatile
  5789  001D22  24F3               	addwf	prodl,w,c
  5790  001D24  6ED9               	movwf	fsr2l,c
  5791  001D26  0101               	movlb	1	; () banked
  5792  001D28  0E01               	movlw	high _PACKET	;volatile
  5793  001D2A  20F4               	addwfc	prodh,w,c
  5794  001D2C  6EDA               	movwf	fsr2h,c
  5795  001D2E  C032  FFDF         	movff	Add_Reading_To_Packet@CRC_HI,indf2
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;packet.c: 93: Current_Pos++;
  5799  001D32  2A5C               	incf	_Current_Pos,f,c	;volatile
  5800                           
  5801                           ; BSR set to: 1
  5802                           ;packet.c: 94: PACKET[Current_Pos] = CRC_LOW;
  5803  001D34  505C               	movf	_Current_Pos,w,c	;volatile
  5804  001D36  0D01               	mullw	1
  5805  001D38  0101               	movlb	1	; () banked
  5806  001D3A  0E00               	movlw	low _PACKET	;volatile
  5807  001D3C  24F3               	addwf	prodl,w,c
  5808  001D3E  6ED9               	movwf	fsr2l,c
  5809  001D40  0101               	movlb	1	; () banked
  5810  001D42  0E01               	movlw	high _PACKET	;volatile
  5811  001D44  20F4               	addwfc	prodh,w,c
  5812  001D46  6EDA               	movwf	fsr2h,c
  5813  001D48  C033  FFDF         	movff	Add_Reading_To_Packet@CRC_LOW,indf2
  5814                           
  5815                           ; BSR set to: 1
  5816                           ;packet.c: 95: Current_Pos++;
  5817  001D4C  2A5C               	incf	_Current_Pos,f,c	;volatile
  5818                           
  5819                           ; BSR set to: 1
  5820                           ;packet.c: 96: PACKET[Current_Pos] = 0xEA;
  5821  001D4E  505C               	movf	_Current_Pos,w,c	;volatile
  5822  001D50  0D01               	mullw	1
  5823  001D52  0101               	movlb	1	; () banked
  5824  001D54  0E00               	movlw	low _PACKET	;volatile
  5825  001D56  24F3               	addwf	prodl,w,c
  5826  001D58  6ED9               	movwf	fsr2l,c
  5827  001D5A  0101               	movlb	1	; () banked
  5828  001D5C  0E01               	movlw	high _PACKET	;volatile
  5829  001D5E  20F4               	addwfc	prodh,w,c
  5830  001D60  6EDA               	movwf	fsr2h,c
  5831  001D62  0EEA               	movlw	234
  5832  001D64  6EDF               	movwf	indf2,c
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;packet.c: 97: return 0;
  5836  001D66  0E00               	movlw	0
  5837  001D68  D001               	goto	l405
  5838  001D6A                     l9819:
  5839                           
  5840                           ; BSR set to: 1
  5841                           ;packet.c: 98: }
  5842                           ;packet.c: 99: return 1;
  5843  001D6A  0E01               	movlw	1
  5844  001D6C                     l405:
  5845                           
  5846                           ; BSR set to: 1
  5847  001D6C  0012               	return	
  5848  001D6E  FFFF               	dw	65535	; errata NOP
  5849  001D70                     __end_of_Add_Reading_To_Packet:
  5850                           	opt stack 0
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           postdec1	equ	0xFE5
  5860                           fsr1h	equ	0xFE2
  5861                           fsr1l	equ	0xFE1
  5862                           indf2	equ	0xFDF
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _Calculate_CRC *****************
  5868 ;; Defined at:
  5869 ;;		line 102 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;		None
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;  sum             2   28[COMRAM] int 
  5874 ;;  count           1   30[COMRAM] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  2   19[COMRAM] int 
  5877 ;; Registers used:
  5878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5884 ;;      Params:         2       0       0       0       0       0       0
  5885 ;;      Locals:         3       0       0       0       0       0       0
  5886 ;;      Temps:          7       0       0       0       0       0       0
  5887 ;;      Totals:        12       0       0       0       0       0       0
  5888 ;;Total ram usage:       12 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    2
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		_Creat_RTC_Packet
  5895 ;;		_Add_Reading_To_Packet
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text12
  5900  0039CE                     __ptext12:
  5901                           	opt stack 0
  5902  0039CE                     _Calculate_CRC:
  5903                           	opt stack 26
  5904                           
  5905                           ; BSR set to: 1
  5906                           ;incstack = 0
  5907  0039CE  FFFF               	dw	65535
  5908                           
  5909                           ;packet.c: 104: char count;
  5910                           ;packet.c: 105: int sum = 0;
  5911  0039D0  0E00               	movlw	0
  5912  0039D2  6E1E               	movwf	Calculate_CRC@sum+1,c
  5913  0039D4  0E00               	movlw	0
  5914  0039D6  6E1D               	movwf	Calculate_CRC@sum,c
  5915                           
  5916                           ;packet.c: 107: for(count = 0; count <= Data_End - 1; count++)
  5917  0039D8  0E00               	movlw	0
  5918  0039DA  6E1F               	movwf	Calculate_CRC@count,c
  5919  0039DC  D013               	goto	l9271
  5920  0039DE                     l9267:
  5921                           
  5922                           ;packet.c: 108: sum = sum + PACKET[count];
  5923  0039DE  501F               	movf	Calculate_CRC@count,w,c
  5924  0039E0  0D01               	mullw	1
  5925  0039E2  0101               	movlb	1	; () banked
  5926  0039E4  0E00               	movlw	low _PACKET	;volatile
  5927  0039E6  24F3               	addwf	prodl,w,c
  5928  0039E8  6ED9               	movwf	fsr2l,c
  5929  0039EA  0101               	movlb	1	; () banked
  5930  0039EC  0E01               	movlw	high _PACKET	;volatile
  5931  0039EE  20F4               	addwfc	prodh,w,c
  5932  0039F0  6EDA               	movwf	fsr2h,c
  5933  0039F2  50DF               	movf	indf2,w,c
  5934  0039F4  6E16               	movwf	??_Calculate_CRC& (0+255),c
  5935  0039F6  5016               	movf	??_Calculate_CRC,w,c
  5936  0039F8  241D               	addwf	Calculate_CRC@sum,w,c
  5937  0039FA  6E1D               	movwf	Calculate_CRC@sum,c
  5938  0039FC  0E00               	movlw	0
  5939  0039FE  201E               	addwfc	Calculate_CRC@sum+1,w,c
  5940  003A00  6E1E               	movwf	Calculate_CRC@sum+1,c
  5941                           
  5942                           ; BSR set to: 1
  5943  003A02  2A1F               	incf	Calculate_CRC@count,f,c
  5944  003A04                     l9271:
  5945  003A04  501F               	movf	Calculate_CRC@count,w,c
  5946  003A06  6E16               	movwf	??_Calculate_CRC& (0+255),c
  5947  003A08  6A17               	clrf	(??_Calculate_CRC+1)& (0+255),c
  5948  003A0A  0EFF               	movlw	255
  5949  003A0C  6E18               	movwf	(??_Calculate_CRC+2)& (0+255),c
  5950  003A0E  0EFF               	movlw	255
  5951  003A10  6E19               	movwf	(??_Calculate_CRC+3)& (0+255),c
  5952  003A12  505D               	movf	_Data_End,w,c	;volatile
  5953  003A14  6E1A               	movwf	(??_Calculate_CRC+4)& (0+255),c
  5954  003A16  6A1B               	clrf	(??_Calculate_CRC+5)& (0+255),c
  5955  003A18  5018               	movf	??_Calculate_CRC+2,w,c
  5956  003A1A  261A               	addwf	??_Calculate_CRC+4,f,c
  5957  003A1C  5019               	movf	??_Calculate_CRC+3,w,c
  5958  003A1E  221B               	addwfc	??_Calculate_CRC+5,f,c
  5959  003A20  501B               	movf	??_Calculate_CRC+5,w,c
  5960  003A22  0A80               	xorlw	128
  5961  003A24  6E1C               	movwf	(??_Calculate_CRC+6)& (0+255),c
  5962  003A26  5016               	movf	??_Calculate_CRC,w,c
  5963  003A28  5C1A               	subwf	??_Calculate_CRC+4,w,c
  5964  003A2A  5017               	movf	??_Calculate_CRC+1,w,c
  5965  003A2C  0A80               	xorlw	128
  5966  003A2E  581C               	subwfb	(??_Calculate_CRC+6)& (0+255),w,c
  5967  003A30  B0D8               	btfsc	status,0,c
  5968  003A32  D7D5               	goto	l9267
  5969                           
  5970                           ;packet.c: 109: return sum;
  5971  003A34  C01D  F014         	movff	Calculate_CRC@sum,?_Calculate_CRC
  5972  003A38  C01E  F015         	movff	Calculate_CRC@sum+1,?_Calculate_CRC+1
  5973  003A3C  0012               	return	
  5974  003A3E  FFFF               	dw	65535	; errata NOP
  5975  003A40                     __end_of_Calculate_CRC:
  5976                           	opt stack 0
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           postinc0	equ	0xFEE
  5984                           wreg	equ	0xFE8
  5985                           postdec1	equ	0xFE5
  5986                           fsr1h	equ	0xFE2
  5987                           fsr1l	equ	0xFE1
  5988                           indf2	equ	0xFDF
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _local_display *****************
  5994 ;; Defined at:
  5995 ;;		line 466 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;		None
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  s               1   87[COMRAM] unsigned char 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;		None               void
  6002 ;; Registers used:
  6003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6009 ;;      Params:         0       0       0       0       0       0       0
  6010 ;;      Locals:         1       0       0       0       0       0       0
  6011 ;;      Temps:          0       0       0       0       0       0       0
  6012 ;;      Totals:         1       0       0       0       0       0       0
  6013 ;;Total ram usage:        1 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    9
  6016 ;; This function calls:
  6017 ;;		_DisplayReadings
  6018 ;;		_get_current_readings
  6019 ;; This function is called by:
  6020 ;;		_main
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text13
  6025  003FD6                     __ptext13:
  6026                           	opt stack 0
  6027  003FD6                     _local_display:
  6028                           	opt stack 21
  6029                           
  6030                           ;incstack = 0
  6031  003FD6  FFFF               	dw	65535
  6032                           
  6033                           ;Test1.c: 468: unsigned char s = 0;
  6034  003FD8  0E00               	movlw	0
  6035  003FDA  6E58               	movwf	local_display@s,c
  6036                           
  6037                           ;Test1.c: 470: s = 0;
  6038  003FDC  0E00               	movlw	0
  6039  003FDE  6E58               	movwf	local_display@s,c
  6040                           
  6041                           ;Test1.c: 471: while(s < 60)
  6042  003FE0  D00A               	goto	l10539
  6043  003FE2                     l10529:
  6044                           
  6045                           ;Test1.c: 472: {
  6046                           ;Test1.c: 474: if(sec_flag == 1)
  6047  003FE2  046A               	decf	_sec_flag,w,c
  6048  003FE4  A4D8               	btfss	status,2,c
  6049  003FE6  D007               	goto	l10539
  6050                           
  6051                           ;Test1.c: 475: {
  6052                           ;Test1.c: 476: s++;
  6053  003FE8  2A58               	incf	local_display@s,f,c
  6054                           
  6055                           ;Test1.c: 477: sec_flag = 0;
  6056  003FEA  0E00               	movlw	0
  6057  003FEC  6E6A               	movwf	_sec_flag,c
  6058                           
  6059                           ;Test1.c: 479: get_current_readings();
  6060  003FEE  EC0D  F003         	call	_get_current_readings	;wreg free
  6061                           
  6062                           ;Test1.c: 481: DisplayReadings();
  6063  003FF2  ECB8  F00E         	call	_DisplayReadings	;wreg free
  6064  003FF6                     l10539:
  6065  003FF6  0E3B               	movlw	59
  6066  003FF8  6458               	cpfsgt	local_display@s,c
  6067  003FFA  D7F3               	goto	l10529
  6068                           
  6069                           ;Test1.c: 482: }
  6070                           ;Test1.c: 483: }
  6071                           ;Test1.c: 484: return;
  6072  003FFC  0012               	return	
  6073  003FFE  FFFF               	dw	65535	; errata NOP
  6074  004000                     __end_of_local_display:
  6075                           	opt stack 0
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1h	equ	0xFE2
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _get_current_readings *****************
  6093 ;; Defined at:
  6094 ;;		line 5 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\hsm20g.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  voltage4        3   50[BANK0 ] float 
  6099 ;;  voltage3        3   47[BANK0 ] float 
  6100 ;;  voltage2        3   44[BANK0 ] float 
  6101 ;;  voltage1        3   41[BANK0 ] float 
  6102 ;;  ADCResult       2   53[BANK0 ] unsigned int 
  6103 ;;  points          2    0        unsigned int 
  6104 ;;  dec             2    0        unsigned int 
  6105 ;;  i               1   55[BANK0 ] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;		None               void
  6108 ;; Registers used:
  6109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6115 ;;      Params:         0       0       0       0       0       0       0
  6116 ;;      Locals:         0      15       0       0       0       0       0
  6117 ;;      Temps:          0       0       0       0       0       0       0
  6118 ;;      Totals:         0      15       0       0       0       0       0
  6119 ;;Total ram usage:       15 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    8
  6122 ;; This function calls:
  6123 ;;		_BusyADC
  6124 ;;		_CloseADC
  6125 ;;		_ConvertADC
  6126 ;;		_OpenADC
  6127 ;;		_ReadADC
  6128 ;;		_SetChanADC
  6129 ;;		___ftdiv
  6130 ;;		___ftmul
  6131 ;;		___lwtoft
  6132 ;;		_float_to_int
  6133 ;;		_voltage_to_hum
  6134 ;;		_voltage_to_temp
  6135 ;; This function is called by:
  6136 ;;		_per_minute_reading
  6137 ;;		_per_second_reading
  6138 ;;		_local_display
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text14
  6143  00061A                     __ptext14:
  6144                           	opt stack 0
  6145  00061A                     _get_current_readings:
  6146                           	opt stack 21
  6147                           
  6148                           ;incstack = 0
  6149  00061A  FFFF               	dw	65535
  6150                           
  6151                           ;hsm20g.c: 7: char i;
  6152                           ;hsm20g.c: 8: unsigned int ADCResult = 0, dec, points;
  6153  00061C  0E00               	movlw	0
  6154  00061E  0100               	movlb	0	; () banked
  6155  000620  6FB6               	movwf	(get_current_readings@ADCResult+1)& (0+255),b
  6156  000622  0E00               	movlw	0
  6157  000624  0100               	movlb	0	; () banked
  6158  000626  6FB5               	movwf	get_current_readings@ADCResult& (0+255),b
  6159                           
  6160                           ;hsm20g.c: 9: float voltage1, voltage2, voltage3, voltage4;
  6161                           ;hsm20g.c: 11: TRISA = 0x1F;
  6162  000628  0E1F               	movlw	31
  6163  00062A  6E92               	movwf	3986,c	;volatile
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;hsm20g.c: 13: OpenADC( 0b11011111 & 0b11111111 & 0b11110010, 0b10000111 & 0b01111111 );
  6167  00062C  0E07               	movlw	7
  6168  00062E  6E14               	movwf	OpenADC@config2,c
  6169  000630  0ED2               	movlw	210
  6170  000632  EC47  F03E         	call	_OpenADC
  6171                           
  6172                           ;hsm20g.c: 16: _delay( 50 );
  6173  000636  0E0A               	movlw	10
  6174  000638                     u8817:
  6175  000638  F000               	nop	
  6176  00063A  2EE8               	decfsz	wreg,f,c
  6177  00063C  D7FD               	goto	u8817
  6178                           
  6179                           ;hsm20g.c: 17: SetChanADC( 0b10000111 );
  6180  00063E  0E87               	movlw	135
  6181  000640  EC61  F03D         	call	_SetChanADC
  6182                           
  6183                           ;hsm20g.c: 19: for(i=0;i<16;i++)
  6184  000644  0E00               	movlw	0
  6185  000646  0100               	movlb	0	; () banked
  6186  000648  6FB7               	movwf	get_current_readings@i& (0+255),b
  6187  00064A  D011               	goto	L4
  6188  00064C                     l9941:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;hsm20g.c: 20: {
  6192                           ;hsm20g.c: 21: ConvertADC();
  6193  00064C  EC11  F03D         	call	_ConvertADC	;wreg free
  6194  000650                     l9943:
  6195  000650  EC2D  F03D         	call	_BusyADC	;wreg free
  6196  000654  0900               	iorlw	0
  6197  000656  A4D8               	btfss	status,2,c
  6198  000658  D7FB               	goto	l9943
  6199                           
  6200                           ;hsm20g.c: 23: ADCResult += (unsigned int) ReadADC();
  6201  00065A  EC1E  F03D         	call	_ReadADC	;wreg free
  6202  00065E  5014               	movf	?_ReadADC,w,c
  6203  000660  0100               	movlb	0	; () banked
  6204  000662  27B5               	addwf	get_current_readings@ADCResult& (0+255),f,b
  6205  000664  5015               	movf	?_ReadADC+1,w,c
  6206  000666  0100               	movlb	0	; () banked
  6207  000668  23B6               	addwfc	(get_current_readings@ADCResult+1)& (0+255),f,b
  6208                           
  6209                           ; BSR set to: 0
  6210  00066A  0100               	movlb	0	; () banked
  6211  00066C  2BB7               	incf	get_current_readings@i& (0+255),f,b
  6212  00066E                     L4:
  6213                           
  6214                           ; BSR set to: 0
  6215  00066E  0E0F               	movlw	15
  6216  000670  0100               	movlb	0	; () banked
  6217  000672  65B7               	cpfsgt	get_current_readings@i& (0+255),b
  6218  000674  D7EB               	goto	l9941
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;hsm20g.c: 24: }
  6222                           ;hsm20g.c: 25: ADCResult /= 16;
  6223                           
  6224                           ; BSR set to: 0
  6225  000676  0100               	movlb	0	; () banked
  6226  000678  3BB5               	swapf	get_current_readings@ADCResult& (0+255),f,b
  6227  00067A  0100               	movlb	0	; () banked
  6228  00067C  3BB6               	swapf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6229  00067E  0E0F               	movlw	15
  6230  000680  0100               	movlb	0	; () banked
  6231  000682  17B5               	andwf	get_current_readings@ADCResult& (0+255),f,b
  6232  000684  0100               	movlb	0	; () banked
  6233  000686  51B6               	movf	(get_current_readings@ADCResult+1)& (0+255),w,b
  6234  000688  0BF0               	andlw	240
  6235  00068A  0100               	movlb	0	; () banked
  6236  00068C  13B5               	iorwf	get_current_readings@ADCResult& (0+255),f,b
  6237  00068E  0E0F               	movlw	15
  6238  000690  0100               	movlb	0	; () banked
  6239  000692  17B6               	andwf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;hsm20g.c: 26: voltage1 = (ADCResult*5.0)/1024;
  6243  000694  0E00               	movlw	0
  6244  000696  6E23               	movwf	___ftmul@f2,c
  6245  000698  0EA0               	movlw	160
  6246  00069A  6E24               	movwf	___ftmul@f2+1,c
  6247  00069C  0E40               	movlw	64
  6248  00069E  6E25               	movwf	___ftmul@f2+2,c
  6249  0006A0  C0B5  F01C         	movff	get_current_readings@ADCResult,___lwtoft@c
  6250  0006A4  C0B6  F01D         	movff	get_current_readings@ADCResult+1,___lwtoft@c+1
  6251  0006A8  ECDB  F03D         	call	___lwtoft	;wreg free
  6252  0006AC  C01C  F020         	movff	?___lwtoft,___ftmul@f1
  6253  0006B0  C01D  F021         	movff	?___lwtoft+1,___ftmul@f1+1
  6254  0006B4  C01E  F022         	movff	?___lwtoft+2,___ftmul@f1+2
  6255  0006B8  EC69  F014         	call	___ftmul	;wreg free
  6256  0006BC  C020  F02F         	movff	?___ftmul,___ftdiv@f1
  6257  0006C0  C021  F030         	movff	?___ftmul+1,___ftdiv@f1+1
  6258  0006C4  C022  F031         	movff	?___ftmul+2,___ftdiv@f1+2
  6259  0006C8  0E00               	movlw	0
  6260  0006CA  6E32               	movwf	___ftdiv@f2,c
  6261  0006CC  0E80               	movlw	128
  6262  0006CE  6E33               	movwf	___ftdiv@f2+1,c
  6263  0006D0  0E44               	movlw	68
  6264  0006D2  6E34               	movwf	___ftdiv@f2+2,c
  6265  0006D4  ECC1  F015         	call	___ftdiv	;wreg free
  6266  0006D8  C02F  F0A9         	movff	?___ftdiv,get_current_readings@voltage1
  6267  0006DC  C030  F0AA         	movff	?___ftdiv+1,get_current_readings@voltage1+1
  6268  0006E0  C031  F0AB         	movff	?___ftdiv+2,get_current_readings@voltage1+2
  6269                           
  6270                           ;hsm20g.c: 27: t1 = voltage_to_temp(voltage1);
  6271  0006E4  C0A9  F097         	movff	get_current_readings@voltage1,voltage_to_temp@voltage
  6272  0006E8  C0AA  F098         	movff	get_current_readings@voltage1+1,voltage_to_temp@voltage+1
  6273  0006EC  C0AB  F099         	movff	get_current_readings@voltage1+2,voltage_to_temp@voltage+2
  6274  0006F0  EC61  F00F         	call	_voltage_to_temp	;wreg free
  6275  0006F4  C097  F0CC         	movff	?_voltage_to_temp,_t1
  6276  0006F8  C098  F0CD         	movff	?_voltage_to_temp+1,_t1+1
  6277  0006FC  C099  F0CE         	movff	?_voltage_to_temp+2,_t1+2
  6278                           
  6279                           ;hsm20g.c: 28: Temp1 = float_to_int(t1);
  6280  000700  C0CC  F047         	movff	_t1,float_to_int@value
  6281  000704  C0CD  F048         	movff	_t1+1,float_to_int@value+1
  6282  000708  C0CE  F049         	movff	_t1+2,float_to_int@value+2
  6283  00070C  EC9A  F016         	call	_float_to_int	;wreg free
  6284  000710  C047  F0EF         	movff	?_float_to_int,_Temp1
  6285  000714  C048  F0F0         	movff	?_float_to_int+1,_Temp1+1
  6286                           
  6287                           ;hsm20g.c: 31: _delay( 50 );
  6288  000718  0E0A               	movlw	10
  6289  00071A                     u8827:
  6290  00071A  F000               	nop	
  6291  00071C  2EE8               	decfsz	wreg,f,c
  6292  00071E  D7FD               	goto	u8827
  6293                           
  6294                           ;hsm20g.c: 32: SetChanADC( 0b10001111 );
  6295  000720  0E8F               	movlw	143
  6296  000722  EC61  F03D         	call	_SetChanADC
  6297                           
  6298                           ;hsm20g.c: 34: for(i=0;i<16;i++)
  6299  000726  0E00               	movlw	0
  6300  000728  0100               	movlb	0	; () banked
  6301  00072A  6FB7               	movwf	get_current_readings@i& (0+255),b
  6302  00072C  D011               	goto	L5
  6303  00072E                     l9969:
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;hsm20g.c: 35: {
  6307                           ;hsm20g.c: 36: ConvertADC();
  6308  00072E  EC11  F03D         	call	_ConvertADC	;wreg free
  6309  000732                     l9971:
  6310  000732  EC2D  F03D         	call	_BusyADC	;wreg free
  6311  000736  0900               	iorlw	0
  6312  000738  A4D8               	btfss	status,2,c
  6313  00073A  D7FB               	goto	l9971
  6314                           
  6315                           ;hsm20g.c: 38: ADCResult += (unsigned int) ReadADC();
  6316  00073C  EC1E  F03D         	call	_ReadADC	;wreg free
  6317  000740  5014               	movf	?_ReadADC,w,c
  6318  000742  0100               	movlb	0	; () banked
  6319  000744  27B5               	addwf	get_current_readings@ADCResult& (0+255),f,b
  6320  000746  5015               	movf	?_ReadADC+1,w,c
  6321  000748  0100               	movlb	0	; () banked
  6322  00074A  23B6               	addwfc	(get_current_readings@ADCResult+1)& (0+255),f,b
  6323                           
  6324                           ; BSR set to: 0
  6325  00074C  0100               	movlb	0	; () banked
  6326  00074E  2BB7               	incf	get_current_readings@i& (0+255),f,b
  6327  000750                     L5:
  6328                           
  6329                           ; BSR set to: 0
  6330  000750  0E0F               	movlw	15
  6331  000752  0100               	movlb	0	; () banked
  6332  000754  65B7               	cpfsgt	get_current_readings@i& (0+255),b
  6333  000756  D7EB               	goto	l9969
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;hsm20g.c: 39: }
  6337                           ;hsm20g.c: 40: ADCResult /= 16;
  6338                           
  6339                           ; BSR set to: 0
  6340  000758  0100               	movlb	0	; () banked
  6341  00075A  3BB5               	swapf	get_current_readings@ADCResult& (0+255),f,b
  6342  00075C  0100               	movlb	0	; () banked
  6343  00075E  3BB6               	swapf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6344  000760  0E0F               	movlw	15
  6345  000762  0100               	movlb	0	; () banked
  6346  000764  17B5               	andwf	get_current_readings@ADCResult& (0+255),f,b
  6347  000766  0100               	movlb	0	; () banked
  6348  000768  51B6               	movf	(get_current_readings@ADCResult+1)& (0+255),w,b
  6349  00076A  0BF0               	andlw	240
  6350  00076C  0100               	movlb	0	; () banked
  6351  00076E  13B5               	iorwf	get_current_readings@ADCResult& (0+255),f,b
  6352  000770  0E0F               	movlw	15
  6353  000772  0100               	movlb	0	; () banked
  6354  000774  17B6               	andwf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;hsm20g.c: 41: voltage2 = (ADCResult*5.0)/1024;
  6358  000776  0E00               	movlw	0
  6359  000778  6E23               	movwf	___ftmul@f2,c
  6360  00077A  0EA0               	movlw	160
  6361  00077C  6E24               	movwf	___ftmul@f2+1,c
  6362  00077E  0E40               	movlw	64
  6363  000780  6E25               	movwf	___ftmul@f2+2,c
  6364  000782  C0B5  F01C         	movff	get_current_readings@ADCResult,___lwtoft@c
  6365  000786  C0B6  F01D         	movff	get_current_readings@ADCResult+1,___lwtoft@c+1
  6366  00078A  ECDB  F03D         	call	___lwtoft	;wreg free
  6367  00078E  C01C  F020         	movff	?___lwtoft,___ftmul@f1
  6368  000792  C01D  F021         	movff	?___lwtoft+1,___ftmul@f1+1
  6369  000796  C01E  F022         	movff	?___lwtoft+2,___ftmul@f1+2
  6370  00079A  EC69  F014         	call	___ftmul	;wreg free
  6371  00079E  C020  F02F         	movff	?___ftmul,___ftdiv@f1
  6372  0007A2  C021  F030         	movff	?___ftmul+1,___ftdiv@f1+1
  6373  0007A6  C022  F031         	movff	?___ftmul+2,___ftdiv@f1+2
  6374  0007AA  0E00               	movlw	0
  6375  0007AC  6E32               	movwf	___ftdiv@f2,c
  6376  0007AE  0E80               	movlw	128
  6377  0007B0  6E33               	movwf	___ftdiv@f2+1,c
  6378  0007B2  0E44               	movlw	68
  6379  0007B4  6E34               	movwf	___ftdiv@f2+2,c
  6380  0007B6  ECC1  F015         	call	___ftdiv	;wreg free
  6381  0007BA  C02F  F0AC         	movff	?___ftdiv,get_current_readings@voltage2
  6382  0007BE  C030  F0AD         	movff	?___ftdiv+1,get_current_readings@voltage2+1
  6383  0007C2  C031  F0AE         	movff	?___ftdiv+2,get_current_readings@voltage2+2
  6384                           
  6385                           ;hsm20g.c: 42: h1 = voltage_to_hum(voltage2);
  6386  0007C6  C0AC  F097         	movff	get_current_readings@voltage2,voltage_to_hum@voltage
  6387  0007CA  C0AD  F098         	movff	get_current_readings@voltage2+1,voltage_to_hum@voltage+1
  6388  0007CE  C0AE  F099         	movff	get_current_readings@voltage2+2,voltage_to_hum@voltage+2
  6389  0007D2  EC06  F010         	call	_voltage_to_hum	;wreg free
  6390  0007D6  C097  F0C6         	movff	?_voltage_to_hum,_h1
  6391  0007DA  C098  F0C7         	movff	?_voltage_to_hum+1,_h1+1
  6392  0007DE  C099  F0C8         	movff	?_voltage_to_hum+2,_h1+2
  6393                           
  6394                           ;hsm20g.c: 43: Hum1 = float_to_int(h1);
  6395  0007E2  C0C6  F047         	movff	_h1,float_to_int@value
  6396  0007E6  C0C7  F048         	movff	_h1+1,float_to_int@value+1
  6397  0007EA  C0C8  F049         	movff	_h1+2,float_to_int@value+2
  6398  0007EE  EC9A  F016         	call	_float_to_int	;wreg free
  6399  0007F2  C047  F0EB         	movff	?_float_to_int,_Hum1
  6400  0007F6  C048  F0EC         	movff	?_float_to_int+1,_Hum1+1
  6401                           
  6402                           ;hsm20g.c: 46: _delay( 50 );
  6403  0007FA  0E0A               	movlw	10
  6404  0007FC                     u8837:
  6405  0007FC  F000               	nop	
  6406  0007FE  2EE8               	decfsz	wreg,f,c
  6407  000800  D7FD               	goto	u8837
  6408                           
  6409                           ;hsm20g.c: 47: SetChanADC( 0b10010111 );
  6410  000802  0E97               	movlw	151
  6411  000804  EC61  F03D         	call	_SetChanADC
  6412                           
  6413                           ;hsm20g.c: 49: for(i=0;i<16;i++)
  6414  000808  0E00               	movlw	0
  6415  00080A  0100               	movlb	0	; () banked
  6416  00080C  6FB7               	movwf	get_current_readings@i& (0+255),b
  6417  00080E  D011               	goto	L6
  6418  000810                     l9997:
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;hsm20g.c: 50: {
  6422                           ;hsm20g.c: 51: ConvertADC();
  6423  000810  EC11  F03D         	call	_ConvertADC	;wreg free
  6424  000814                     l9999:
  6425  000814  EC2D  F03D         	call	_BusyADC	;wreg free
  6426  000818  0900               	iorlw	0
  6427  00081A  A4D8               	btfss	status,2,c
  6428  00081C  D7FB               	goto	l9999
  6429                           
  6430                           ;hsm20g.c: 53: ADCResult += (unsigned int) ReadADC();
  6431  00081E  EC1E  F03D         	call	_ReadADC	;wreg free
  6432  000822  5014               	movf	?_ReadADC,w,c
  6433  000824  0100               	movlb	0	; () banked
  6434  000826  27B5               	addwf	get_current_readings@ADCResult& (0+255),f,b
  6435  000828  5015               	movf	?_ReadADC+1,w,c
  6436  00082A  0100               	movlb	0	; () banked
  6437  00082C  23B6               	addwfc	(get_current_readings@ADCResult+1)& (0+255),f,b
  6438                           
  6439                           ; BSR set to: 0
  6440  00082E  0100               	movlb	0	; () banked
  6441  000830  2BB7               	incf	get_current_readings@i& (0+255),f,b
  6442  000832                     L6:
  6443                           
  6444                           ; BSR set to: 0
  6445  000832  0E0F               	movlw	15
  6446  000834  0100               	movlb	0	; () banked
  6447  000836  65B7               	cpfsgt	get_current_readings@i& (0+255),b
  6448  000838  D7EB               	goto	l9997
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;hsm20g.c: 54: }
  6452                           ;hsm20g.c: 55: ADCResult /= 16;
  6453                           
  6454                           ; BSR set to: 0
  6455  00083A  0100               	movlb	0	; () banked
  6456  00083C  3BB5               	swapf	get_current_readings@ADCResult& (0+255),f,b
  6457  00083E  0100               	movlb	0	; () banked
  6458  000840  3BB6               	swapf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6459  000842  0E0F               	movlw	15
  6460  000844  0100               	movlb	0	; () banked
  6461  000846  17B5               	andwf	get_current_readings@ADCResult& (0+255),f,b
  6462  000848  0100               	movlb	0	; () banked
  6463  00084A  51B6               	movf	(get_current_readings@ADCResult+1)& (0+255),w,b
  6464  00084C  0BF0               	andlw	240
  6465  00084E  0100               	movlb	0	; () banked
  6466  000850  13B5               	iorwf	get_current_readings@ADCResult& (0+255),f,b
  6467  000852  0E0F               	movlw	15
  6468  000854  0100               	movlb	0	; () banked
  6469  000856  17B6               	andwf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;hsm20g.c: 56: voltage3 = (ADCResult*5.0)/1024;
  6473  000858  0E00               	movlw	0
  6474  00085A  6E23               	movwf	___ftmul@f2,c
  6475  00085C  0EA0               	movlw	160
  6476  00085E  6E24               	movwf	___ftmul@f2+1,c
  6477  000860  0E40               	movlw	64
  6478  000862  6E25               	movwf	___ftmul@f2+2,c
  6479  000864  C0B5  F01C         	movff	get_current_readings@ADCResult,___lwtoft@c
  6480  000868  C0B6  F01D         	movff	get_current_readings@ADCResult+1,___lwtoft@c+1
  6481  00086C  ECDB  F03D         	call	___lwtoft	;wreg free
  6482  000870  C01C  F020         	movff	?___lwtoft,___ftmul@f1
  6483  000874  C01D  F021         	movff	?___lwtoft+1,___ftmul@f1+1
  6484  000878  C01E  F022         	movff	?___lwtoft+2,___ftmul@f1+2
  6485  00087C  EC69  F014         	call	___ftmul	;wreg free
  6486  000880  C020  F02F         	movff	?___ftmul,___ftdiv@f1
  6487  000884  C021  F030         	movff	?___ftmul+1,___ftdiv@f1+1
  6488  000888  C022  F031         	movff	?___ftmul+2,___ftdiv@f1+2
  6489  00088C  0E00               	movlw	0
  6490  00088E  6E32               	movwf	___ftdiv@f2,c
  6491  000890  0E80               	movlw	128
  6492  000892  6E33               	movwf	___ftdiv@f2+1,c
  6493  000894  0E44               	movlw	68
  6494  000896  6E34               	movwf	___ftdiv@f2+2,c
  6495  000898  ECC1  F015         	call	___ftdiv	;wreg free
  6496  00089C  C02F  F0AF         	movff	?___ftdiv,get_current_readings@voltage3
  6497  0008A0  C030  F0B0         	movff	?___ftdiv+1,get_current_readings@voltage3+1
  6498  0008A4  C031  F0B1         	movff	?___ftdiv+2,get_current_readings@voltage3+2
  6499                           
  6500                           ;hsm20g.c: 57: t2 = voltage_to_temp(voltage3);
  6501  0008A8  C0AF  F097         	movff	get_current_readings@voltage3,voltage_to_temp@voltage
  6502  0008AC  C0B0  F098         	movff	get_current_readings@voltage3+1,voltage_to_temp@voltage+1
  6503  0008B0  C0B1  F099         	movff	get_current_readings@voltage3+2,voltage_to_temp@voltage+2
  6504  0008B4  EC61  F00F         	call	_voltage_to_temp	;wreg free
  6505  0008B8  C097  F0CF         	movff	?_voltage_to_temp,_t2
  6506  0008BC  C098  F0D0         	movff	?_voltage_to_temp+1,_t2+1
  6507  0008C0  C099  F0D1         	movff	?_voltage_to_temp+2,_t2+2
  6508                           
  6509                           ;hsm20g.c: 58: Temp2 = float_to_int(t2);
  6510  0008C4  C0CF  F047         	movff	_t2,float_to_int@value
  6511  0008C8  C0D0  F048         	movff	_t2+1,float_to_int@value+1
  6512  0008CC  C0D1  F049         	movff	_t2+2,float_to_int@value+2
  6513  0008D0  EC9A  F016         	call	_float_to_int	;wreg free
  6514  0008D4  C047  F0F1         	movff	?_float_to_int,_Temp2
  6515  0008D8  C048  F0F2         	movff	?_float_to_int+1,_Temp2+1
  6516                           
  6517                           ;hsm20g.c: 61: _delay( 50 );
  6518  0008DC  0E0A               	movlw	10
  6519  0008DE                     u8847:
  6520  0008DE  F000               	nop	
  6521  0008E0  2EE8               	decfsz	wreg,f,c
  6522  0008E2  D7FD               	goto	u8847
  6523                           
  6524                           ;hsm20g.c: 62: SetChanADC( 0b10011111 );
  6525  0008E4  0E9F               	movlw	159
  6526  0008E6  EC61  F03D         	call	_SetChanADC
  6527                           
  6528                           ;hsm20g.c: 64: for(i=0;i<16;i++)
  6529  0008EA  0E00               	movlw	0
  6530  0008EC  0100               	movlb	0	; () banked
  6531  0008EE  6FB7               	movwf	get_current_readings@i& (0+255),b
  6532  0008F0  D011               	goto	L7
  6533  0008F2                     l10025:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;hsm20g.c: 65: {
  6537                           ;hsm20g.c: 66: ConvertADC();
  6538  0008F2  EC11  F03D         	call	_ConvertADC	;wreg free
  6539  0008F6                     l10027:
  6540  0008F6  EC2D  F03D         	call	_BusyADC	;wreg free
  6541  0008FA  0900               	iorlw	0
  6542  0008FC  A4D8               	btfss	status,2,c
  6543  0008FE  D7FB               	goto	l10027
  6544                           
  6545                           ;hsm20g.c: 68: ADCResult += (unsigned int) ReadADC();
  6546  000900  EC1E  F03D         	call	_ReadADC	;wreg free
  6547  000904  5014               	movf	?_ReadADC,w,c
  6548  000906  0100               	movlb	0	; () banked
  6549  000908  27B5               	addwf	get_current_readings@ADCResult& (0+255),f,b
  6550  00090A  5015               	movf	?_ReadADC+1,w,c
  6551  00090C  0100               	movlb	0	; () banked
  6552  00090E  23B6               	addwfc	(get_current_readings@ADCResult+1)& (0+255),f,b
  6553                           
  6554                           ; BSR set to: 0
  6555  000910  0100               	movlb	0	; () banked
  6556  000912  2BB7               	incf	get_current_readings@i& (0+255),f,b
  6557  000914                     L7:
  6558                           
  6559                           ; BSR set to: 0
  6560  000914  0E0F               	movlw	15
  6561  000916  0100               	movlb	0	; () banked
  6562  000918  65B7               	cpfsgt	get_current_readings@i& (0+255),b
  6563  00091A  D7EB               	goto	l10025
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;hsm20g.c: 69: }
  6567                           ;hsm20g.c: 70: ADCResult /= 16;
  6568                           
  6569                           ; BSR set to: 0
  6570  00091C  0100               	movlb	0	; () banked
  6571  00091E  3BB5               	swapf	get_current_readings@ADCResult& (0+255),f,b
  6572  000920  0100               	movlb	0	; () banked
  6573  000922  3BB6               	swapf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6574  000924  0E0F               	movlw	15
  6575  000926  0100               	movlb	0	; () banked
  6576  000928  17B5               	andwf	get_current_readings@ADCResult& (0+255),f,b
  6577  00092A  0100               	movlb	0	; () banked
  6578  00092C  51B6               	movf	(get_current_readings@ADCResult+1)& (0+255),w,b
  6579  00092E  0BF0               	andlw	240
  6580  000930  0100               	movlb	0	; () banked
  6581  000932  13B5               	iorwf	get_current_readings@ADCResult& (0+255),f,b
  6582  000934  0E0F               	movlw	15
  6583  000936  0100               	movlb	0	; () banked
  6584  000938  17B6               	andwf	(get_current_readings@ADCResult+1)& (0+255),f,b
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;hsm20g.c: 71: voltage4 = (ADCResult*5.0)/1024;
  6588  00093A  0E00               	movlw	0
  6589  00093C  6E23               	movwf	___ftmul@f2,c
  6590  00093E  0EA0               	movlw	160
  6591  000940  6E24               	movwf	___ftmul@f2+1,c
  6592  000942  0E40               	movlw	64
  6593  000944  6E25               	movwf	___ftmul@f2+2,c
  6594  000946  C0B5  F01C         	movff	get_current_readings@ADCResult,___lwtoft@c
  6595  00094A  C0B6  F01D         	movff	get_current_readings@ADCResult+1,___lwtoft@c+1
  6596  00094E  ECDB  F03D         	call	___lwtoft	;wreg free
  6597  000952  C01C  F020         	movff	?___lwtoft,___ftmul@f1
  6598  000956  C01D  F021         	movff	?___lwtoft+1,___ftmul@f1+1
  6599  00095A  C01E  F022         	movff	?___lwtoft+2,___ftmul@f1+2
  6600  00095E  EC69  F014         	call	___ftmul	;wreg free
  6601  000962  C020  F02F         	movff	?___ftmul,___ftdiv@f1
  6602  000966  C021  F030         	movff	?___ftmul+1,___ftdiv@f1+1
  6603  00096A  C022  F031         	movff	?___ftmul+2,___ftdiv@f1+2
  6604  00096E  0E00               	movlw	0
  6605  000970  6E32               	movwf	___ftdiv@f2,c
  6606  000972  0E80               	movlw	128
  6607  000974  6E33               	movwf	___ftdiv@f2+1,c
  6608  000976  0E44               	movlw	68
  6609  000978  6E34               	movwf	___ftdiv@f2+2,c
  6610  00097A  ECC1  F015         	call	___ftdiv	;wreg free
  6611  00097E  C02F  F0B2         	movff	?___ftdiv,get_current_readings@voltage4
  6612  000982  C030  F0B3         	movff	?___ftdiv+1,get_current_readings@voltage4+1
  6613  000986  C031  F0B4         	movff	?___ftdiv+2,get_current_readings@voltage4+2
  6614                           
  6615                           ;hsm20g.c: 72: h2 = voltage_to_hum(voltage4);
  6616  00098A  C0B2  F097         	movff	get_current_readings@voltage4,voltage_to_hum@voltage
  6617  00098E  C0B3  F098         	movff	get_current_readings@voltage4+1,voltage_to_hum@voltage+1
  6618  000992  C0B4  F099         	movff	get_current_readings@voltage4+2,voltage_to_hum@voltage+2
  6619  000996  EC06  F010         	call	_voltage_to_hum	;wreg free
  6620  00099A  C097  F0C9         	movff	?_voltage_to_hum,_h2
  6621  00099E  C098  F0CA         	movff	?_voltage_to_hum+1,_h2+1
  6622  0009A2  C099  F0CB         	movff	?_voltage_to_hum+2,_h2+2
  6623                           
  6624                           ;hsm20g.c: 73: Hum2 = float_to_int(h2);
  6625  0009A6  C0C9  F047         	movff	_h2,float_to_int@value
  6626  0009AA  C0CA  F048         	movff	_h2+1,float_to_int@value+1
  6627  0009AE  C0CB  F049         	movff	_h2+2,float_to_int@value+2
  6628  0009B2  EC9A  F016         	call	_float_to_int	;wreg free
  6629  0009B6  C047  F0ED         	movff	?_float_to_int,_Hum2
  6630  0009BA  C048  F0EE         	movff	?_float_to_int+1,_Hum2+1
  6631                           
  6632                           ;hsm20g.c: 75: CloseADC();
  6633  0009BE  EC19  F03D         	call	_CloseADC	;wreg free
  6634  0009C2  0012               	return	
  6635  0009C4  FFFF               	dw	65535	; errata NOP
  6636  0009C6                     __end_of_get_current_readings:
  6637                           	opt stack 0
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           prodh	equ	0xFF4
  6643                           prodl	equ	0xFF3
  6644                           postinc0	equ	0xFEE
  6645                           wreg	equ	0xFE8
  6646                           postdec1	equ	0xFE5
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _voltage_to_temp *****************
  6655 ;; Defined at:
  6656 ;;		line 97 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\hsm20g.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  voltage         3   23[BANK0 ] float 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  temp            3   26[BANK0 ] float 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  3   23[BANK0 ] float 
  6663 ;; Registers used:
  6664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       3       0       0       0       0       0
  6671 ;;      Locals:         0      15       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         0      18       0       0       0       0       0
  6674 ;;Total ram usage:       18 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    7
  6677 ;; This function calls:
  6678 ;;		___ftadd
  6679 ;;		___ftmul
  6680 ;;		___ftneg
  6681 ;;		_pow
  6682 ;; This function is called by:
  6683 ;;		_get_current_readings
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text15
  6688  001EC2                     __ptext15:
  6689                           	opt stack 0
  6690  001EC2                     _voltage_to_temp:
  6691                           	opt stack 21
  6692                           
  6693                           ;incstack = 0
  6694  001EC2  FFFF               	dw	65535
  6695                           
  6696                           ;hsm20g.c: 99: double temp;
  6697                           ;hsm20g.c: 101: temp = (5.26*pow(voltage,3))-(27.34*pow(voltage,2))+(68.87*voltage)-17.8
      +                          1;
  6698  001EC4  0E00               	movlw	0
  6699  001EC6  0100               	movlb	0	; () banked
  6700  001EC8  6F89               	movwf	pow@y& (0+255),b
  6701  001ECA  0E00               	movlw	0
  6702  001ECC  0100               	movlb	0	; () banked
  6703  001ECE  6F8A               	movwf	(pow@y+1)& (0+255),b
  6704  001ED0  0E40               	movlw	64
  6705  001ED2  0100               	movlb	0	; () banked
  6706  001ED4  6F8B               	movwf	(pow@y+2)& (0+255),b
  6707  001ED6  C097  F086         	movff	voltage_to_temp@voltage,pow@x
  6708  001EDA  C098  F087         	movff	voltage_to_temp@voltage+1,pow@x+1
  6709  001EDE  C099  F088         	movff	voltage_to_temp@voltage+2,pow@x+2
  6710  001EE2  EC1C  F00D         	call	_pow	;wreg free
  6711  001EE6  C086  F09D         	movff	?_pow,_voltage_to_temp$2963
  6712  001EEA  C087  F09E         	movff	?_pow+1,_voltage_to_temp$2963+1
  6713  001EEE  C088  F09F         	movff	?_pow+2,_voltage_to_temp$2963+2
  6714                           
  6715                           ;hsm20g.c: 99: double temp;
  6716                           ;hsm20g.c: 101: temp = (5.26*pow(voltage,3))-(27.34*pow(voltage,2))+(68.87*voltage)-17.8
      +                          1;
  6717  001EF2  0E00               	movlw	0
  6718  001EF4  0100               	movlb	0	; () banked
  6719  001EF6  6F89               	movwf	pow@y& (0+255),b
  6720  001EF8  0E40               	movlw	64
  6721  001EFA  0100               	movlb	0	; () banked
  6722  001EFC  6F8A               	movwf	(pow@y+1)& (0+255),b
  6723  001EFE  0E40               	movlw	64
  6724  001F00  0100               	movlb	0	; () banked
  6725  001F02  6F8B               	movwf	(pow@y+2)& (0+255),b
  6726  001F04  C097  F086         	movff	voltage_to_temp@voltage,pow@x
  6727  001F08  C098  F087         	movff	voltage_to_temp@voltage+1,pow@x+1
  6728  001F0C  C099  F088         	movff	voltage_to_temp@voltage+2,pow@x+2
  6729  001F10  EC1C  F00D         	call	_pow	;wreg free
  6730  001F14  C086  F0A0         	movff	?_pow,_voltage_to_temp$2964
  6731  001F18  C087  F0A1         	movff	?_pow+1,_voltage_to_temp$2964+1
  6732  001F1C  C088  F0A2         	movff	?_pow+2,_voltage_to_temp$2964+2
  6733                           
  6734                           ;hsm20g.c: 99: double temp;
  6735                           ;hsm20g.c: 101: temp = (5.26*pow(voltage,3))-(27.34*pow(voltage,2))+(68.87*voltage)-17.8
      +                          1;
  6736  001F20  0EBD               	movlw	189
  6737  001F22  6E23               	movwf	___ftmul@f2,c
  6738  001F24  0E89               	movlw	137
  6739  001F26  6E24               	movwf	___ftmul@f2+1,c
  6740  001F28  0E42               	movlw	66
  6741  001F2A  6E25               	movwf	___ftmul@f2+2,c
  6742  001F2C  C097  F020         	movff	voltage_to_temp@voltage,___ftmul@f1
  6743  001F30  C098  F021         	movff	voltage_to_temp@voltage+1,___ftmul@f1+1
  6744  001F34  C099  F022         	movff	voltage_to_temp@voltage+2,___ftmul@f1+2
  6745  001F38  EC69  F014         	call	___ftmul	;wreg free
  6746  001F3C  C020  F035         	movff	?___ftmul,___ftadd@f2
  6747  001F40  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
  6748  001F44  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
  6749  001F48  0E52               	movlw	82
  6750  001F4A  6E23               	movwf	___ftmul@f2,c
  6751  001F4C  0EA8               	movlw	168
  6752  001F4E  6E24               	movwf	___ftmul@f2+1,c
  6753  001F50  0E40               	movlw	64
  6754  001F52  6E25               	movwf	___ftmul@f2+2,c
  6755  001F54  C0A0  F020         	movff	_voltage_to_temp$2964,___ftmul@f1
  6756  001F58  C0A1  F021         	movff	_voltage_to_temp$2964+1,___ftmul@f1+1
  6757  001F5C  C0A2  F022         	movff	_voltage_to_temp$2964+2,___ftmul@f1+2
  6758  001F60  EC69  F014         	call	___ftmul	;wreg free
  6759  001F64  C020  F032         	movff	?___ftmul,___ftadd@f1
  6760  001F68  C021  F033         	movff	?___ftmul+1,___ftadd@f1+1
  6761  001F6C  C022  F034         	movff	?___ftmul+2,___ftadd@f1+2
  6762  001F70  EC44  F00C         	call	___ftadd	;wreg free
  6763  001F74  C032  F0A3         	movff	?___ftadd,_voltage_to_temp$2965
  6764  001F78  C033  F0A4         	movff	?___ftadd+1,_voltage_to_temp$2965+1
  6765  001F7C  C034  F0A5         	movff	?___ftadd+2,_voltage_to_temp$2965+2
  6766                           
  6767                           ;hsm20g.c: 99: double temp;
  6768                           ;hsm20g.c: 101: temp = (5.26*pow(voltage,3))-(27.34*pow(voltage,2))+(68.87*voltage)-17.8
      +                          1;
  6769  001F80  0EB8               	movlw	184
  6770  001F82  6E23               	movwf	___ftmul@f2,c
  6771  001F84  0EDA               	movlw	218
  6772  001F86  6E24               	movwf	___ftmul@f2+1,c
  6773  001F88  0E41               	movlw	65
  6774  001F8A  6E25               	movwf	___ftmul@f2+2,c
  6775  001F8C  C09D  F020         	movff	_voltage_to_temp$2963,___ftmul@f1
  6776  001F90  C09E  F021         	movff	_voltage_to_temp$2963+1,___ftmul@f1+1
  6777  001F94  C09F  F022         	movff	_voltage_to_temp$2963+2,___ftmul@f1+2
  6778  001F98  EC69  F014         	call	___ftmul	;wreg free
  6779  001F9C  C020  F02F         	movff	?___ftmul,___ftneg@f1
  6780  001FA0  C021  F030         	movff	?___ftmul+1,___ftneg@f1+1
  6781  001FA4  C022  F031         	movff	?___ftmul+2,___ftneg@f1+2
  6782  001FA8  ECEF  F03D         	call	___ftneg	;wreg free
  6783  001FAC  C02F  F035         	movff	?___ftneg,___ftadd@f2
  6784  001FB0  C030  F036         	movff	?___ftneg+1,___ftadd@f2+1
  6785  001FB4  C031  F037         	movff	?___ftneg+2,___ftadd@f2+2
  6786  001FB8  C0A3  F032         	movff	_voltage_to_temp$2965,___ftadd@f1
  6787  001FBC  C0A4  F033         	movff	_voltage_to_temp$2965+1,___ftadd@f1+1
  6788  001FC0  C0A5  F034         	movff	_voltage_to_temp$2965+2,___ftadd@f1+2
  6789  001FC4  EC44  F00C         	call	___ftadd	;wreg free
  6790  001FC8  C032  F0A6         	movff	?___ftadd,_voltage_to_temp$2966
  6791  001FCC  C033  F0A7         	movff	?___ftadd+1,_voltage_to_temp$2966+1
  6792  001FD0  C034  F0A8         	movff	?___ftadd+2,_voltage_to_temp$2966+2
  6793                           
  6794                           ;hsm20g.c: 99: double temp;
  6795                           ;hsm20g.c: 101: temp = (5.26*pow(voltage,3))-(27.34*pow(voltage,2))+(68.87*voltage)-17.8
      +                          1;
  6796  001FD4  C0A6  F032         	movff	_voltage_to_temp$2966,___ftadd@f1
  6797  001FD8  C0A7  F033         	movff	_voltage_to_temp$2966+1,___ftadd@f1+1
  6798  001FDC  C0A8  F034         	movff	_voltage_to_temp$2966+2,___ftadd@f1+2
  6799  001FE0  0E7B               	movlw	123
  6800  001FE2  6E35               	movwf	___ftadd@f2,c
  6801  001FE4  0E8E               	movlw	142
  6802  001FE6  6E36               	movwf	___ftadd@f2+1,c
  6803  001FE8  0EC1               	movlw	193
  6804  001FEA  6E37               	movwf	___ftadd@f2+2,c
  6805  001FEC  EC44  F00C         	call	___ftadd	;wreg free
  6806  001FF0  C032  F09A         	movff	?___ftadd,voltage_to_temp@temp
  6807  001FF4  C033  F09B         	movff	?___ftadd+1,voltage_to_temp@temp+1
  6808  001FF8  C034  F09C         	movff	?___ftadd+2,voltage_to_temp@temp+2
  6809                           
  6810                           ;hsm20g.c: 102: return temp;
  6811  001FFC  C09A  F097         	movff	voltage_to_temp@temp,?_voltage_to_temp
  6812  002000  C09B  F098         	movff	voltage_to_temp@temp+1,?_voltage_to_temp+1
  6813  002004  C09C  F099         	movff	voltage_to_temp@temp+2,?_voltage_to_temp+2
  6814  002008  0012               	return	
  6815  00200A  FFFF               	dw	65535	; errata NOP
  6816  00200C                     __end_of_voltage_to_temp:
  6817                           	opt stack 0
  6818                           tblptru	equ	0xFF8
  6819                           tblptrh	equ	0xFF7
  6820                           tblptrl	equ	0xFF6
  6821                           tablat	equ	0xFF5
  6822                           prodh	equ	0xFF4
  6823                           prodl	equ	0xFF3
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           fsr1h	equ	0xFE2
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           fsr2h	equ	0xFDA
  6831                           fsr2l	equ	0xFD9
  6832                           status	equ	0xFD8
  6833                           
  6834 ;; *************** function _voltage_to_hum *****************
  6835 ;; Defined at:
  6836 ;;		line 105 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\hsm20g.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;  voltage         3   23[BANK0 ] float 
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  temp            3   26[BANK0 ] float 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  3   23[BANK0 ] float 
  6843 ;; Registers used:
  6844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6850 ;;      Params:         0       3       0       0       0       0       0
  6851 ;;      Locals:         0      15       0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0
  6853 ;;      Totals:         0      18       0       0       0       0       0
  6854 ;;Total ram usage:       18 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    7
  6857 ;; This function calls:
  6858 ;;		___ftadd
  6859 ;;		___ftmul
  6860 ;;		___ftneg
  6861 ;;		_pow
  6862 ;; This function is called by:
  6863 ;;		_get_current_readings
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text16
  6868  00200C                     __ptext16:
  6869                           	opt stack 0
  6870  00200C                     _voltage_to_hum:
  6871                           	opt stack 21
  6872                           
  6873                           ;incstack = 0
  6874  00200C  FFFF               	dw	65535
  6875                           
  6876                           ;hsm20g.c: 107: double temp;
  6877                           ;hsm20g.c: 109: temp = (3.71*pow(voltage,3))-(20.65*pow(voltage,2))+(64.81*voltage)-27.4
      +                          4;
  6878  00200E  0E00               	movlw	0
  6879  002010  0100               	movlb	0	; () banked
  6880  002012  6F89               	movwf	pow@y& (0+255),b
  6881  002014  0E00               	movlw	0
  6882  002016  0100               	movlb	0	; () banked
  6883  002018  6F8A               	movwf	(pow@y+1)& (0+255),b
  6884  00201A  0E40               	movlw	64
  6885  00201C  0100               	movlb	0	; () banked
  6886  00201E  6F8B               	movwf	(pow@y+2)& (0+255),b
  6887  002020  C097  F086         	movff	voltage_to_hum@voltage,pow@x
  6888  002024  C098  F087         	movff	voltage_to_hum@voltage+1,pow@x+1
  6889  002028  C099  F088         	movff	voltage_to_hum@voltage+2,pow@x+2
  6890  00202C  EC1C  F00D         	call	_pow	;wreg free
  6891  002030  C086  F09D         	movff	?_pow,_voltage_to_hum$2967
  6892  002034  C087  F09E         	movff	?_pow+1,_voltage_to_hum$2967+1
  6893  002038  C088  F09F         	movff	?_pow+2,_voltage_to_hum$2967+2
  6894                           
  6895                           ;hsm20g.c: 107: double temp;
  6896                           ;hsm20g.c: 109: temp = (3.71*pow(voltage,3))-(20.65*pow(voltage,2))+(64.81*voltage)-27.4
      +                          4;
  6897  00203C  0E00               	movlw	0
  6898  00203E  0100               	movlb	0	; () banked
  6899  002040  6F89               	movwf	pow@y& (0+255),b
  6900  002042  0E40               	movlw	64
  6901  002044  0100               	movlb	0	; () banked
  6902  002046  6F8A               	movwf	(pow@y+1)& (0+255),b
  6903  002048  0E40               	movlw	64
  6904  00204A  0100               	movlb	0	; () banked
  6905  00204C  6F8B               	movwf	(pow@y+2)& (0+255),b
  6906  00204E  C097  F086         	movff	voltage_to_hum@voltage,pow@x
  6907  002052  C098  F087         	movff	voltage_to_hum@voltage+1,pow@x+1
  6908  002056  C099  F088         	movff	voltage_to_hum@voltage+2,pow@x+2
  6909  00205A  EC1C  F00D         	call	_pow	;wreg free
  6910  00205E  C086  F0A0         	movff	?_pow,_voltage_to_hum$2968
  6911  002062  C087  F0A1         	movff	?_pow+1,_voltage_to_hum$2968+1
  6912  002066  C088  F0A2         	movff	?_pow+2,_voltage_to_hum$2968+2
  6913                           
  6914                           ;hsm20g.c: 107: double temp;
  6915                           ;hsm20g.c: 109: temp = (3.71*pow(voltage,3))-(20.65*pow(voltage,2))+(64.81*voltage)-27.4
      +                          4;
  6916  00206A  0E9F               	movlw	159
  6917  00206C  6E23               	movwf	___ftmul@f2,c
  6918  00206E  0E81               	movlw	129
  6919  002070  6E24               	movwf	___ftmul@f2+1,c
  6920  002072  0E42               	movlw	66
  6921  002074  6E25               	movwf	___ftmul@f2+2,c
  6922  002076  C097  F020         	movff	voltage_to_hum@voltage,___ftmul@f1
  6923  00207A  C098  F021         	movff	voltage_to_hum@voltage+1,___ftmul@f1+1
  6924  00207E  C099  F022         	movff	voltage_to_hum@voltage+2,___ftmul@f1+2
  6925  002082  EC69  F014         	call	___ftmul	;wreg free
  6926  002086  C020  F035         	movff	?___ftmul,___ftadd@f2
  6927  00208A  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
  6928  00208E  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
  6929  002092  0E71               	movlw	113
  6930  002094  6E23               	movwf	___ftmul@f2,c
  6931  002096  0E6D               	movlw	109
  6932  002098  6E24               	movwf	___ftmul@f2+1,c
  6933  00209A  0E40               	movlw	64
  6934  00209C  6E25               	movwf	___ftmul@f2+2,c
  6935  00209E  C0A0  F020         	movff	_voltage_to_hum$2968,___ftmul@f1
  6936  0020A2  C0A1  F021         	movff	_voltage_to_hum$2968+1,___ftmul@f1+1
  6937  0020A6  C0A2  F022         	movff	_voltage_to_hum$2968+2,___ftmul@f1+2
  6938  0020AA  EC69  F014         	call	___ftmul	;wreg free
  6939  0020AE  C020  F032         	movff	?___ftmul,___ftadd@f1
  6940  0020B2  C021  F033         	movff	?___ftmul+1,___ftadd@f1+1
  6941  0020B6  C022  F034         	movff	?___ftmul+2,___ftadd@f1+2
  6942  0020BA  EC44  F00C         	call	___ftadd	;wreg free
  6943  0020BE  C032  F0A3         	movff	?___ftadd,_voltage_to_hum$2969
  6944  0020C2  C033  F0A4         	movff	?___ftadd+1,_voltage_to_hum$2969+1
  6945  0020C6  C034  F0A5         	movff	?___ftadd+2,_voltage_to_hum$2969+2
  6946                           
  6947                           ;hsm20g.c: 107: double temp;
  6948                           ;hsm20g.c: 109: temp = (3.71*pow(voltage,3))-(20.65*pow(voltage,2))+(64.81*voltage)-27.4
      +                          4;
  6949  0020CA  0E33               	movlw	51
  6950  0020CC  6E23               	movwf	___ftmul@f2,c
  6951  0020CE  0EA5               	movlw	165
  6952  0020D0  6E24               	movwf	___ftmul@f2+1,c
  6953  0020D2  0E41               	movlw	65
  6954  0020D4  6E25               	movwf	___ftmul@f2+2,c
  6955  0020D6  C09D  F020         	movff	_voltage_to_hum$2967,___ftmul@f1
  6956  0020DA  C09E  F021         	movff	_voltage_to_hum$2967+1,___ftmul@f1+1
  6957  0020DE  C09F  F022         	movff	_voltage_to_hum$2967+2,___ftmul@f1+2
  6958  0020E2  EC69  F014         	call	___ftmul	;wreg free
  6959  0020E6  C020  F02F         	movff	?___ftmul,___ftneg@f1
  6960  0020EA  C021  F030         	movff	?___ftmul+1,___ftneg@f1+1
  6961  0020EE  C022  F031         	movff	?___ftmul+2,___ftneg@f1+2
  6962  0020F2  ECEF  F03D         	call	___ftneg	;wreg free
  6963  0020F6  C02F  F035         	movff	?___ftneg,___ftadd@f2
  6964  0020FA  C030  F036         	movff	?___ftneg+1,___ftadd@f2+1
  6965  0020FE  C031  F037         	movff	?___ftneg+2,___ftadd@f2+2
  6966  002102  C0A3  F032         	movff	_voltage_to_hum$2969,___ftadd@f1
  6967  002106  C0A4  F033         	movff	_voltage_to_hum$2969+1,___ftadd@f1+1
  6968  00210A  C0A5  F034         	movff	_voltage_to_hum$2969+2,___ftadd@f1+2
  6969  00210E  EC44  F00C         	call	___ftadd	;wreg free
  6970  002112  C032  F0A6         	movff	?___ftadd,_voltage_to_hum$2970
  6971  002116  C033  F0A7         	movff	?___ftadd+1,_voltage_to_hum$2970+1
  6972  00211A  C034  F0A8         	movff	?___ftadd+2,_voltage_to_hum$2970+2
  6973                           
  6974                           ;hsm20g.c: 107: double temp;
  6975                           ;hsm20g.c: 109: temp = (3.71*pow(voltage,3))-(20.65*pow(voltage,2))+(64.81*voltage)-27.4
      +                          4;
  6976  00211E  C0A6  F032         	movff	_voltage_to_hum$2970,___ftadd@f1
  6977  002122  C0A7  F033         	movff	_voltage_to_hum$2970+1,___ftadd@f1+1
  6978  002126  C0A8  F034         	movff	_voltage_to_hum$2970+2,___ftadd@f1+2
  6979  00212A  0E85               	movlw	133
  6980  00212C  6E35               	movwf	___ftadd@f2,c
  6981  00212E  0EDB               	movlw	219
  6982  002130  6E36               	movwf	___ftadd@f2+1,c
  6983  002132  0EC1               	movlw	193
  6984  002134  6E37               	movwf	___ftadd@f2+2,c
  6985  002136  EC44  F00C         	call	___ftadd	;wreg free
  6986  00213A  C032  F09A         	movff	?___ftadd,voltage_to_hum@temp
  6987  00213E  C033  F09B         	movff	?___ftadd+1,voltage_to_hum@temp+1
  6988  002142  C034  F09C         	movff	?___ftadd+2,voltage_to_hum@temp+2
  6989                           
  6990                           ;hsm20g.c: 110: return temp;
  6991  002146  C09A  F097         	movff	voltage_to_hum@temp,?_voltage_to_hum
  6992  00214A  C09B  F098         	movff	voltage_to_hum@temp+1,?_voltage_to_hum+1
  6993  00214E  C09C  F099         	movff	voltage_to_hum@temp+2,?_voltage_to_hum+2
  6994  002152  0012               	return	
  6995  002154  FFFF               	dw	65535	; errata NOP
  6996  002156                     __end_of_voltage_to_hum:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           fsr2h	equ	0xFDA
  7011                           fsr2l	equ	0xFD9
  7012                           status	equ	0xFD8
  7013                           
  7014 ;; *************** function _pow *****************
  7015 ;; Defined at:
  7016 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\pow.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  x               3    6[BANK0 ] float 
  7019 ;;  y               3    9[BANK0 ] float 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  yi              4   19[BANK0 ] unsigned long 
  7022 ;;  sign            1   18[BANK0 ] unsigned char 
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  3    6[BANK0 ] unsigned char 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7032 ;;      Params:         0       6       0       0       0       0       0
  7033 ;;      Locals:         0      11       0       0       0       0       0
  7034 ;;      Temps:          0       0       0       0       0       0       0
  7035 ;;      Totals:         0      17       0       0       0       0       0
  7036 ;;Total ram usage:       17 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    6
  7039 ;; This function calls:
  7040 ;;		___ftge
  7041 ;;		___ftmul
  7042 ;;		___ftneg
  7043 ;;		___fttol
  7044 ;;		___lltoft
  7045 ;;		_exp
  7046 ;;		_log
  7047 ;; This function is called by:
  7048 ;;		_voltage_to_temp
  7049 ;;		_voltage_to_hum
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text17
  7054  001A38                     __ptext17:
  7055                           	opt stack 0
  7056  001A38                     _pow:
  7057                           	opt stack 21
  7058                           
  7059                           ;incstack = 0
  7060  001A38  FFFF               	dw	65535
  7061  001A3A  0E00               	movlw	0
  7062  001A3C  0100               	movlb	0	; () banked
  7063  001A3E  6F92               	movwf	pow@sign& (0+255),b
  7064                           
  7065                           ; BSR set to: 0
  7066  001A40  0E7F               	movlw	127
  7067  001A42  0100               	movlb	0	; () banked
  7068  001A44  1588               	andwf	(pow@x+2)& (0+255),w,b
  7069  001A46  0100               	movlb	0	; () banked
  7070  001A48  1187               	iorwf	(pow@x+1)& (0+255),w,b
  7071  001A4A  0100               	movlb	0	; () banked
  7072  001A4C  1186               	iorwf	pow@x& (0+255),w,b
  7073  001A4E  A4D8               	btfss	status,2,c
  7074  001A50  D011               	goto	l8995
  7075                           
  7076                           ; BSR set to: 0
  7077  001A52  0E00               	movlw	0
  7078  001A54  6E14               	movwf	___ftge@ff1,c
  7079  001A56  0E00               	movlw	0
  7080  001A58  6E15               	movwf	___ftge@ff1+1,c
  7081  001A5A  0E00               	movlw	0
  7082  001A5C  6E16               	movwf	___ftge@ff1+2,c
  7083  001A5E  C089  F017         	movff	pow@y,___ftge@ff2
  7084  001A62  C08A  F018         	movff	pow@y+1,___ftge@ff2+1
  7085  001A66  C08B  F019         	movff	pow@y+2,___ftge@ff2+2
  7086  001A6A  ECFE  F019         	call	___ftge	;wreg free
  7087  001A6E  A0D8               	btfss	status,0,c
  7088  001A70  D04D               	goto	L10
  7089  001A72  D046               	goto	L11
  7090  001A74                     l8995:
  7091                           
  7092                           ; BSR set to: 0
  7093  001A74  0E7F               	movlw	127
  7094  001A76  0100               	movlb	0	; () banked
  7095  001A78  158B               	andwf	(pow@y+2)& (0+255),w,b
  7096  001A7A  0100               	movlb	0	; () banked
  7097  001A7C  118A               	iorwf	(pow@y+1)& (0+255),w,b
  7098  001A7E  0100               	movlb	0	; () banked
  7099  001A80  1189               	iorwf	pow@y& (0+255),w,b
  7100  001A82  A4D8               	btfss	status,2,c
  7101  001A84  D008               	goto	l9001
  7102                           
  7103                           ; BSR set to: 0
  7104  001A86  0E00               	movlw	0
  7105  001A88  0100               	movlb	0	; () banked
  7106  001A8A  6F86               	movwf	?_pow& (0+255),b
  7107  001A8C  0E80               	movlw	128
  7108  001A8E  0100               	movlb	0	; () banked
  7109  001A90  6F87               	movwf	(?_pow+1)& (0+255),b
  7110  001A92  0E3F               	movlw	63
  7111  001A94  D042               	goto	L9
  7112  001A96                     l9001:
  7113                           
  7114                           ; BSR set to: 0
  7115  001A96  0100               	movlb	0	; () banked
  7116  001A98  5188               	movf	(pow@x+2)& (0+255),w,b
  7117  001A9A  0A80               	xorlw	128
  7118  001A9C  0F80               	addlw	128
  7119  001A9E  E107               	bnz	u6975
  7120  001AA0  0E00               	movlw	0
  7121  001AA2  0100               	movlb	0	; () banked
  7122  001AA4  5D87               	subwf	(pow@x+1)& (0+255),w,b
  7123  001AA6  E103               	bnz	u6975
  7124  001AA8  0E00               	movlw	0
  7125  001AAA  0100               	movlb	0	; () banked
  7126  001AAC  5D86               	subwf	pow@x& (0+255),w,b
  7127  001AAE                     u6975:
  7128  001AAE  B0D8               	btfsc	status,0,c
  7129  001AB0  D04A               	goto	l9013
  7130                           
  7131                           ; BSR set to: 0
  7132  001AB2  C089  F014         	movff	pow@y,___fttol@f1
  7133  001AB6  C08A  F015         	movff	pow@y+1,___fttol@f1+1
  7134  001ABA  C08B  F016         	movff	pow@y+2,___fttol@f1+2
  7135  001ABE  EC2E  F016         	call	___fttol	;wreg free
  7136  001AC2  C014  F093         	movff	?___fttol,pow@yi
  7137  001AC6  C015  F094         	movff	?___fttol+1,pow@yi+1
  7138  001ACA  C016  F095         	movff	?___fttol+2,pow@yi+2
  7139  001ACE  C017  F096         	movff	?___fttol+3,pow@yi+3
  7140  001AD2  C093  F01C         	movff	pow@yi,___lltoft@c
  7141  001AD6  C094  F01D         	movff	pow@yi+1,___lltoft@c+1
  7142  001ADA  C095  F01E         	movff	pow@yi+2,___lltoft@c+2
  7143  001ADE  C096  F01F         	movff	pow@yi+3,___lltoft@c+3
  7144  001AE2  EC24  F01E         	call	___lltoft	;wreg free
  7145  001AE6  0100               	movlb	0	; () banked
  7146  001AE8  518B               	movf	(pow@y+2)& (0+255),w,b
  7147  001AEA  181E               	xorwf	?___lltoft+2,w,c
  7148  001AEC  E107               	bnz	u6985
  7149  001AEE  0100               	movlb	0	; () banked
  7150  001AF0  518A               	movf	(pow@y+1)& (0+255),w,b
  7151  001AF2  181D               	xorwf	?___lltoft+1,w,c
  7152  001AF4  E103               	bnz	u6985
  7153  001AF6  0100               	movlb	0	; () banked
  7154  001AF8  5189               	movf	pow@y& (0+255),w,b
  7155  001AFA  181C               	xorwf	?___lltoft,w,c
  7156  001AFC                     u6985:
  7157  001AFC  B4D8               	btfsc	status,2,c
  7158  001AFE  D010               	goto	l9009
  7159  001B00                     L11:
  7160                           
  7161                           ; BSR set to: 0
  7162  001B00  0E00               	movlw	0
  7163  001B02  0100               	movlb	0	; () banked
  7164  001B04  6FF4               	movwf	(_errno+1)& (0+255),b
  7165  001B06  0E21               	movlw	33
  7166  001B08  0100               	movlb	0	; () banked
  7167  001B0A  6FF3               	movwf	_errno& (0+255),b
  7168  001B0C                     L10:
  7169  001B0C  0E00               	movlw	0
  7170  001B0E  0100               	movlb	0	; () banked
  7171  001B10  6F86               	movwf	?_pow& (0+255),b
  7172  001B12  0E00               	movlw	0
  7173  001B14  0100               	movlb	0	; () banked
  7174  001B16  6F87               	movwf	(?_pow+1)& (0+255),b
  7175  001B18  0E00               	movlw	0
  7176  001B1A                     L9:
  7177  001B1A  0100               	movlb	0	; () banked
  7178  001B1C  6F88               	movwf	(?_pow+2)& (0+255),b
  7179  001B1E  D05C               	goto	l1845
  7180  001B20                     l9009:
  7181                           
  7182                           ; BSR set to: 0
  7183  001B20  0100               	movlb	0	; () banked
  7184  001B22  5193               	movf	pow@yi& (0+255),w,b
  7185  001B24  0B01               	andlw	1
  7186  001B26  0100               	movlb	0	; () banked
  7187  001B28  6F92               	movwf	pow@sign& (0+255),b
  7188                           
  7189                           ; BSR set to: 0
  7190  001B2A  C086  F02F         	movff	pow@x,___ftneg@f1
  7191  001B2E  C087  F030         	movff	pow@x+1,___ftneg@f1+1
  7192  001B32  C088  F031         	movff	pow@x+2,___ftneg@f1+2
  7193  001B36  ECEF  F03D         	call	___ftneg	;wreg free
  7194  001B3A  C02F  F086         	movff	?___ftneg,pow@x
  7195  001B3E  C030  F087         	movff	?___ftneg+1,pow@x+1
  7196  001B42  C031  F088         	movff	?___ftneg+2,pow@x+2
  7197  001B46                     l9013:
  7198  001B46  C086  F04A         	movff	pow@x,log@x
  7199  001B4A  C087  F04B         	movff	pow@x+1,log@x+1
  7200  001B4E  C088  F04C         	movff	pow@x+2,log@x+2
  7201  001B52  EC50  F011         	call	_log	;wreg free
  7202  001B56  C04A  F08C         	movff	?_log,_pow$2971
  7203  001B5A  C04B  F08D         	movff	?_log+1,_pow$2971+1
  7204  001B5E  C04C  F08E         	movff	?_log+2,_pow$2971+2
  7205  001B62  C08C  F020         	movff	_pow$2971,___ftmul@f1
  7206  001B66  C08D  F021         	movff	_pow$2971+1,___ftmul@f1+1
  7207  001B6A  C08E  F022         	movff	_pow$2971+2,___ftmul@f1+2
  7208  001B6E  C089  F023         	movff	pow@y,___ftmul@f2
  7209  001B72  C08A  F024         	movff	pow@y+1,___ftmul@f2+1
  7210  001B76  C08B  F025         	movff	pow@y+2,___ftmul@f2+2
  7211  001B7A  EC69  F014         	call	___ftmul	;wreg free
  7212  001B7E  C020  F08F         	movff	?___ftmul,_pow$2972
  7213  001B82  C021  F090         	movff	?___ftmul+1,_pow$2972+1
  7214  001B86  C022  F091         	movff	?___ftmul+2,_pow$2972+2
  7215  001B8A  C08F  F051         	movff	_pow$2972,exp@x
  7216  001B8E  C090  F052         	movff	_pow$2972+1,exp@x+1
  7217  001B92  C091  F053         	movff	_pow$2972+2,exp@x+2
  7218  001B96  EC6E  F009         	call	_exp	;wreg free
  7219  001B9A  C051  F086         	movff	?_exp,pow@x
  7220  001B9E  C052  F087         	movff	?_exp+1,pow@x+1
  7221  001BA2  C053  F088         	movff	?_exp+2,pow@x+2
  7222  001BA6  0100               	movlb	0	; () banked
  7223  001BA8  5192               	movf	pow@sign& (0+255),w,b
  7224  001BAA  B4D8               	btfsc	status,2,c
  7225  001BAC  D00F               	goto	l1849
  7226                           
  7227                           ; BSR set to: 0
  7228  001BAE  C086  F02F         	movff	pow@x,___ftneg@f1
  7229  001BB2  C087  F030         	movff	pow@x+1,___ftneg@f1+1
  7230  001BB6  C088  F031         	movff	pow@x+2,___ftneg@f1+2
  7231  001BBA  ECEF  F03D         	call	___ftneg	;wreg free
  7232  001BBE  C02F  F086         	movff	?___ftneg,?_pow
  7233  001BC2  C030  F087         	movff	?___ftneg+1,?_pow+1
  7234  001BC6  C031  F088         	movff	?___ftneg+2,?_pow+2
  7235  001BCA  D006               	goto	l1845
  7236  001BCC                     l1849:
  7237                           
  7238                           ; BSR set to: 0
  7239  001BCC  C086  F086         	movff	pow@x,?_pow
  7240  001BD0  C087  F087         	movff	pow@x+1,?_pow+1
  7241  001BD4  C088  F088         	movff	pow@x+2,?_pow+2
  7242  001BD8                     l1845:
  7243  001BD8  0012               	return	
  7244  001BDA  FFFF               	dw	65535	; errata NOP
  7245  001BDC                     __end_of_pow:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1h	equ	0xFE2
  7257                           fsr1l	equ	0xFE1
  7258                           indf2	equ	0xFDF
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _log *****************
  7264 ;; Defined at:
  7265 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  x               3   73[COMRAM] unsigned char 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  exponent        2   76[COMRAM] int 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  3   73[COMRAM] int 
  7272 ;; Registers used:
  7273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7279 ;;      Params:         3       0       0       0       0       0       0
  7280 ;;      Locals:         2       0       0       0       0       0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0
  7282 ;;      Totals:         5       0       0       0       0       0       0
  7283 ;;Total ram usage:        5 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    5
  7286 ;; This function calls:
  7287 ;;		___awtoft
  7288 ;;		___ftadd
  7289 ;;		___ftmul
  7290 ;;		_eval_poly
  7291 ;;		_frexp
  7292 ;; This function is called by:
  7293 ;;		_pow
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text18
  7298  0022A0                     __ptext18:
  7299                           	opt stack 0
  7300  0022A0                     _log:
  7301                           	opt stack 21
  7302                           
  7303                           ;incstack = 0
  7304  0022A0  FFFF               	dw	65535
  7305  0022A2  504C               	movf	log@x+2,w,c
  7306  0022A4  0A80               	xorlw	128
  7307  0022A6  0F80               	addlw	128
  7308  0022A8  E105               	bnz	u6745
  7309  0022AA  0E00               	movlw	0
  7310  0022AC  5C4B               	subwf	log@x+1,w,c
  7311  0022AE  E102               	bnz	u6745
  7312  0022B0  0E00               	movlw	0
  7313  0022B2  5C4A               	subwf	log@x,w,c
  7314  0022B4                     u6745:
  7315  0022B4  B0D8               	btfsc	status,0,c
  7316  0022B6  D005               	goto	l8825
  7317  0022B8  0E00               	movlw	0
  7318  0022BA  0100               	movlb	0	; () banked
  7319  0022BC  6FF4               	movwf	(_errno+1)& (0+255),b
  7320  0022BE  0E21               	movlw	33
  7321  0022C0  D00A               	goto	L12
  7322  0022C2                     l8825:
  7323  0022C2  0E7F               	movlw	127
  7324  0022C4  144C               	andwf	log@x+2,w,c
  7325  0022C6  104B               	iorwf	log@x+1,w,c
  7326  0022C8  104A               	iorwf	log@x,w,c
  7327  0022CA  A4D8               	btfss	status,2,c
  7328  0022CC  D00D               	goto	l8831
  7329  0022CE  0E00               	movlw	0
  7330  0022D0  0100               	movlb	0	; () banked
  7331  0022D2  6FF4               	movwf	(_errno+1)& (0+255),b
  7332  0022D4  0E22               	movlw	34
  7333  0022D6                     L12:
  7334  0022D6  0100               	movlb	0	; () banked
  7335  0022D8  6FF3               	movwf	_errno& (0+255),b
  7336  0022DA  0E00               	movlw	0
  7337  0022DC  6E4A               	movwf	?_log,c
  7338  0022DE  0E00               	movlw	0
  7339  0022E0  6E4B               	movwf	?_log+1,c
  7340  0022E2  0E00               	movlw	0
  7341  0022E4  6E4C               	movwf	?_log+2,c
  7342  0022E6  D06F               	goto	l1907
  7343  0022E8                     l8831:
  7344  0022E8  0E00               	movlw	0
  7345  0022EA  6E23               	movwf	___ftmul@f2,c
  7346  0022EC  0E00               	movlw	0
  7347  0022EE  6E24               	movwf	___ftmul@f2+1,c
  7348  0022F0  0E40               	movlw	64
  7349  0022F2  6E25               	movwf	___ftmul@f2+2,c
  7350  0022F4  0E00               	movlw	high log@exponent
  7351  0022F6  6E18               	movwf	frexp@eptr+1,c
  7352  0022F8  0E4D               	movlw	low log@exponent
  7353  0022FA  6E17               	movwf	frexp@eptr,c
  7354  0022FC  C04A  F014         	movff	log@x,frexp@value
  7355  002300  C04B  F015         	movff	log@x+1,frexp@value+1
  7356  002304  C04C  F016         	movff	log@x+2,frexp@value+2
  7357  002308  ECB3  F019         	call	_frexp	;wreg free
  7358  00230C  C014  F020         	movff	?_frexp,___ftmul@f1
  7359  002310  C015  F021         	movff	?_frexp+1,___ftmul@f1+1
  7360  002314  C016  F022         	movff	?_frexp+2,___ftmul@f1+2
  7361  002318  EC69  F014         	call	___ftmul	;wreg free
  7362  00231C  C020  F032         	movff	?___ftmul,___ftadd@f1
  7363  002320  C021  F033         	movff	?___ftmul+1,___ftadd@f1+1
  7364  002324  C022  F034         	movff	?___ftmul+2,___ftadd@f1+2
  7365  002328  0E00               	movlw	0
  7366  00232A  6E35               	movwf	___ftadd@f2,c
  7367  00232C  0E80               	movlw	128
  7368  00232E  6E36               	movwf	___ftadd@f2+1,c
  7369  002330  0EBF               	movlw	191
  7370  002332  6E37               	movwf	___ftadd@f2+2,c
  7371  002334  EC44  F00C         	call	___ftadd	;wreg free
  7372  002338  C032  F04A         	movff	?___ftadd,log@x
  7373  00233C  C033  F04B         	movff	?___ftadd+1,log@x+1
  7374  002340  C034  F04C         	movff	?___ftadd+2,log@x+2
  7375  002344  064D               	decf	log@exponent,f,c
  7376  002346  A0D8               	btfss	status,0,c
  7377  002348  064E               	decf	log@exponent+1,f,c
  7378  00234A  C04A  F03E         	movff	log@x,eval_poly@x
  7379  00234E  C04B  F03F         	movff	log@x+1,eval_poly@x+1
  7380  002352  C04C  F040         	movff	log@x+2,eval_poly@x+2
  7381  002356  0E7C               	movlw	high log@coeff
  7382  002358  6E42               	movwf	eval_poly@d+1,c
  7383  00235A  0EDD               	movlw	low log@coeff
  7384  00235C  6E41               	movwf	eval_poly@d,c
  7385  00235E  0E00               	movlw	0
  7386  002360  6E44               	movwf	eval_poly@n+1,c
  7387  002362  0E08               	movlw	8
  7388  002364  6E43               	movwf	eval_poly@n,c
  7389  002366  EC50  F015         	call	_eval_poly	;wreg free
  7390  00236A  C03E  F04A         	movff	?_eval_poly,log@x
  7391  00236E  C03F  F04B         	movff	?_eval_poly+1,log@x+1
  7392  002372  C040  F04C         	movff	?_eval_poly+2,log@x+2
  7393  002376  0E72               	movlw	114
  7394  002378  6E23               	movwf	___ftmul@f2,c
  7395  00237A  0E31               	movlw	49
  7396  00237C  6E24               	movwf	___ftmul@f2+1,c
  7397  00237E  0E3F               	movlw	63
  7398  002380  6E25               	movwf	___ftmul@f2+2,c
  7399  002382  C04D  F01C         	movff	log@exponent,___awtoft@c
  7400  002386  C04E  F01D         	movff	log@exponent+1,___awtoft@c+1
  7401  00238A  EC03  F01F         	call	___awtoft	;wreg free
  7402  00238E  C01C  F020         	movff	?___awtoft,___ftmul@f1
  7403  002392  C01D  F021         	movff	?___awtoft+1,___ftmul@f1+1
  7404  002396  C01E  F022         	movff	?___awtoft+2,___ftmul@f1+2
  7405  00239A  EC69  F014         	call	___ftmul	;wreg free
  7406  00239E  C020  F032         	movff	?___ftmul,___ftadd@f1
  7407  0023A2  C021  F033         	movff	?___ftmul+1,___ftadd@f1+1
  7408  0023A6  C022  F034         	movff	?___ftmul+2,___ftadd@f1+2
  7409  0023AA  C04A  F035         	movff	log@x,___ftadd@f2
  7410  0023AE  C04B  F036         	movff	log@x+1,___ftadd@f2+1
  7411  0023B2  C04C  F037         	movff	log@x+2,___ftadd@f2+2
  7412  0023B6  EC44  F00C         	call	___ftadd	;wreg free
  7413  0023BA  C032  F04A         	movff	?___ftadd,?_log
  7414  0023BE  C033  F04B         	movff	?___ftadd+1,?_log+1
  7415  0023C2  C034  F04C         	movff	?___ftadd+2,?_log+2
  7416  0023C6                     l1907:
  7417  0023C6  0012               	return	
  7418  0023C8  FFFF               	dw	65535	; errata NOP
  7419  0023CA                     __end_of_log:
  7420                           	opt stack 0
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           postdec1	equ	0xFE5
  7430                           fsr1h	equ	0xFE2
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           fsr2h	equ	0xFDA
  7434                           fsr2l	equ	0xFD9
  7435                           status	equ	0xFD8
  7436                           
  7437 ;; *************** function _exp *****************
  7438 ;; Defined at:
  7439 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\exp.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  x               3   80[COMRAM] int 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  exponent        2    3[BANK0 ] int 
  7444 ;;  sign            1    5[BANK0 ] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  3   80[COMRAM] unsigned char 
  7447 ;; Registers used:
  7448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7454 ;;      Params:         3       0       0       0       0       0       0
  7455 ;;      Locals:         0       6       0       0       0       0       0
  7456 ;;      Temps:          4       0       0       0       0       0       0
  7457 ;;      Totals:         7       6       0       0       0       0       0
  7458 ;;Total ram usage:       13 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    5
  7461 ;; This function calls:
  7462 ;;		___awtoft
  7463 ;;		___ftdiv
  7464 ;;		___ftge
  7465 ;;		___ftmul
  7466 ;;		___ftneg
  7467 ;;		___ftsub
  7468 ;;		___fttol
  7469 ;;		_eval_poly
  7470 ;;		_floor
  7471 ;;		_ldexp
  7472 ;; This function is called by:
  7473 ;;		_pow
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text19
  7478  0012DC                     __ptext19:
  7479                           	opt stack 0
  7480  0012DC                     _exp:
  7481                           	opt stack 21
  7482                           
  7483                           ;incstack = 0
  7484  0012DC  FFFF               	dw	65535
  7485  0012DE  0E7F               	movlw	127
  7486  0012E0  1453               	andwf	exp@x+2,w,c
  7487  0012E2  1052               	iorwf	exp@x+1,w,c
  7488  0012E4  1051               	iorwf	exp@x,w,c
  7489  0012E6  A4D8               	btfss	status,2,c
  7490  0012E8  D006               	goto	l8847
  7491  0012EA  0E00               	movlw	0
  7492  0012EC  6E51               	movwf	?_exp,c
  7493  0012EE  0E80               	movlw	128
  7494  0012F0  6E52               	movwf	?_exp+1,c
  7495  0012F2  0E3F               	movlw	63
  7496  0012F4  D033               	goto	L14
  7497  0012F6                     l8847:
  7498  0012F6  0E72               	movlw	114
  7499  0012F8  6E14               	movwf	___ftge@ff1,c
  7500  0012FA  0E31               	movlw	49
  7501  0012FC  6E15               	movwf	___ftge@ff1+1,c
  7502  0012FE  0E44               	movlw	68
  7503  001300  6E16               	movwf	___ftge@ff1+2,c
  7504  001302  C051  F017         	movff	exp@x,___ftge@ff2
  7505  001306  C052  F018         	movff	exp@x+1,___ftge@ff2+1
  7506  00130A  C053  F019         	movff	exp@x+2,___ftge@ff2+2
  7507  00130E  ECFE  F019         	call	___ftge	;wreg free
  7508  001312  B0D8               	btfsc	status,0,c
  7509  001314  D00C               	goto	l8853
  7510  001316  0E00               	movlw	0
  7511  001318  0100               	movlb	0	; () banked
  7512  00131A  6FF4               	movwf	(_errno+1)& (0+255),b
  7513  00131C  0E22               	movlw	34
  7514  00131E  0100               	movlb	0	; () banked
  7515  001320  6FF3               	movwf	_errno& (0+255),b
  7516  001322  0EFF               	movlw	255
  7517  001324  6E51               	movwf	?_exp,c
  7518  001326  0E7F               	movlw	127
  7519  001328  6E52               	movwf	?_exp+1,c
  7520  00132A  0E7F               	movlw	127
  7521  00132C  D017               	goto	L14
  7522  00132E                     l8853:
  7523  00132E  C051  F014         	movff	exp@x,___ftge@ff1
  7524  001332  C052  F015         	movff	exp@x+1,___ftge@ff1+1
  7525  001336  C053  F016         	movff	exp@x+2,___ftge@ff1+2
  7526  00133A  0E49               	movlw	73
  7527  00133C  6E17               	movwf	___ftge@ff2,c
  7528  00133E  0E3A               	movlw	58
  7529  001340  6E18               	movwf	___ftge@ff2+1,c
  7530  001342  0EC4               	movlw	196
  7531  001344  6E19               	movwf	___ftge@ff2+2,c
  7532  001346  ECFE  F019         	call	___ftge	;wreg free
  7533  00134A  B0D8               	btfsc	status,0,c
  7534  00134C  D009               	goto	l8859
  7535  00134E  0E00               	movlw	0
  7536  001350  0100               	movlb	0	; () banked
  7537  001352  6FF4               	movwf	(_errno+1)& (0+255),b
  7538  001354  0E22               	movlw	34
  7539  001356  0100               	movlb	0	; () banked
  7540  001358  6FF3               	movwf	_errno& (0+255),b
  7541  00135A  D0A4               	goto	u6820
  7542  00135C                     L14:
  7543  00135C  6E53               	movwf	?_exp+2,c
  7544  00135E  D0C3               	goto	l1865
  7545  001360                     l8859:
  7546  001360  5053               	movf	exp@x+2,w,c
  7547  001362  0A80               	xorlw	128
  7548  001364  0F80               	addlw	128
  7549  001366  E105               	bnz	u6795
  7550  001368  0E00               	movlw	0
  7551  00136A  5C52               	subwf	exp@x+1,w,c
  7552  00136C  E102               	bnz	u6795
  7553  00136E  0E00               	movlw	0
  7554  001370  5C51               	subwf	exp@x,w,c
  7555  001372                     u6795:
  7556  001372  B0D8               	btfsc	status,0,c
  7557  001374  D002               	goto	u6790
  7558  001376  0E01               	movlw	1
  7559  001378  D001               	goto	u6796
  7560  00137A                     u6790:
  7561  00137A  0E00               	movlw	0
  7562  00137C                     u6796:
  7563  00137C  0100               	movlb	0	; () banked
  7564  00137E  6F85               	movwf	exp@sign& (0+255),b
  7565                           
  7566                           ; BSR set to: 0
  7567  001380  0100               	movlb	0	; () banked
  7568  001382  5185               	movf	exp@sign& (0+255),w,b
  7569  001384  B4D8               	btfsc	status,2,c
  7570  001386  D00E               	goto	l1868
  7571                           
  7572                           ; BSR set to: 0
  7573  001388  C051  F02F         	movff	exp@x,___ftneg@f1
  7574  00138C  C052  F030         	movff	exp@x+1,___ftneg@f1+1
  7575  001390  C053  F031         	movff	exp@x+2,___ftneg@f1+2
  7576  001394  ECEF  F03D         	call	___ftneg	;wreg free
  7577  001398  C02F  F051         	movff	?___ftneg,exp@x
  7578  00139C  C030  F052         	movff	?___ftneg+1,exp@x+1
  7579  0013A0  C031  F053         	movff	?___ftneg+2,exp@x+2
  7580  0013A4                     l1868:
  7581  0013A4  C051  F020         	movff	exp@x,___ftmul@f1
  7582  0013A8  C052  F021         	movff	exp@x+1,___ftmul@f1+1
  7583  0013AC  C053  F022         	movff	exp@x+2,___ftmul@f1+2
  7584  0013B0  0EAA               	movlw	170
  7585  0013B2  6E23               	movwf	___ftmul@f2,c
  7586  0013B4  0EB8               	movlw	184
  7587  0013B6  6E24               	movwf	___ftmul@f2+1,c
  7588  0013B8  0E3F               	movlw	63
  7589  0013BA  6E25               	movwf	___ftmul@f2+2,c
  7590  0013BC  EC69  F014         	call	___ftmul	;wreg free
  7591  0013C0  C020  F051         	movff	?___ftmul,exp@x
  7592  0013C4  C021  F052         	movff	?___ftmul+1,exp@x+1
  7593  0013C8  C022  F053         	movff	?___ftmul+2,exp@x+2
  7594  0013CC  C051  F03E         	movff	exp@x,floor@x
  7595  0013D0  C052  F03F         	movff	exp@x+1,floor@x+1
  7596  0013D4  C053  F040         	movff	exp@x+2,floor@x+2
  7597  0013D8  ECFD  F012         	call	_floor	;wreg free
  7598  0013DC  C03E  F080         	movff	?_floor,_exp$2973
  7599  0013E0  C03F  F081         	movff	?_floor+1,_exp$2973+1
  7600  0013E4  C040  F082         	movff	?_floor+2,_exp$2973+2
  7601  0013E8  C080  F014         	movff	_exp$2973,___fttol@f1
  7602  0013EC  C081  F015         	movff	_exp$2973+1,___fttol@f1+1
  7603  0013F0  C082  F016         	movff	_exp$2973+2,___fttol@f1+2
  7604  0013F4  EC2E  F016         	call	___fttol	;wreg free
  7605  0013F8  C014  F054         	movff	?___fttol,??_exp
  7606  0013FC  C015  F055         	movff	?___fttol+1,??_exp+1
  7607  001400  C016  F056         	movff	?___fttol+2,??_exp+2
  7608  001404  C017  F057         	movff	?___fttol+3,??_exp+3
  7609  001408  C054  F083         	movff	??_exp,exp@exponent
  7610  00140C  C055  F084         	movff	??_exp+1,exp@exponent+1
  7611  001410  C051  F03E         	movff	exp@x,___ftsub@f1
  7612  001414  C052  F03F         	movff	exp@x+1,___ftsub@f1+1
  7613  001418  C053  F040         	movff	exp@x+2,___ftsub@f1+2
  7614  00141C  C083  F01C         	movff	exp@exponent,___awtoft@c
  7615  001420  C084  F01D         	movff	exp@exponent+1,___awtoft@c+1
  7616  001424  EC03  F01F         	call	___awtoft	;wreg free
  7617  001428  C01C  F041         	movff	?___awtoft,___ftsub@f2
  7618  00142C  C01D  F042         	movff	?___awtoft+1,___ftsub@f2+1
  7619  001430  C01E  F043         	movff	?___awtoft+2,___ftsub@f2+2
  7620  001434  ECB2  F01F         	call	___ftsub	;wreg free
  7621  001438  C03E  F051         	movff	?___ftsub,exp@x
  7622  00143C  C03F  F052         	movff	?___ftsub+1,exp@x+1
  7623  001440  C040  F053         	movff	?___ftsub+2,exp@x+2
  7624  001444  C051  F03E         	movff	exp@x,eval_poly@x
  7625  001448  C052  F03F         	movff	exp@x+1,eval_poly@x+1
  7626  00144C  C053  F040         	movff	exp@x+2,eval_poly@x+2
  7627  001450  0E7C               	movlw	high exp@coeff
  7628  001452  6E42               	movwf	eval_poly@d+1,c
  7629  001454  0EBF               	movlw	low exp@coeff
  7630  001456  6E41               	movwf	eval_poly@d,c
  7631  001458  0E00               	movlw	0
  7632  00145A  6E44               	movwf	eval_poly@n+1,c
  7633  00145C  0E09               	movlw	9
  7634  00145E  6E43               	movwf	eval_poly@n,c
  7635  001460  EC50  F015         	call	_eval_poly	;wreg free
  7636  001464  C03E  F04A         	movff	?_eval_poly,ldexp@value
  7637  001468  C03F  F04B         	movff	?_eval_poly+1,ldexp@value+1
  7638  00146C  C040  F04C         	movff	?_eval_poly+2,ldexp@value+2
  7639  001470  C083  F04D         	movff	exp@exponent,ldexp@newexp
  7640  001474  C084  F04E         	movff	exp@exponent+1,ldexp@newexp+1
  7641  001478  ECF4  F013         	call	_ldexp	;wreg free
  7642  00147C  C04A  F051         	movff	?_ldexp,exp@x
  7643  001480  C04B  F052         	movff	?_ldexp+1,exp@x+1
  7644  001484  C04C  F053         	movff	?_ldexp+2,exp@x+2
  7645  001488  0100               	movlb	0	; () banked
  7646  00148A  5185               	movf	exp@sign& (0+255),w,b
  7647  00148C  B4D8               	btfsc	status,2,c
  7648  00148E  D025               	goto	l1869
  7649                           
  7650                           ; BSR set to: 0
  7651  001490  0EFF               	movlw	255
  7652  001492  1851               	xorwf	exp@x,w,c
  7653  001494  0E7F               	movlw	127
  7654  001496  B4D8               	btfsc	status,2,c
  7655  001498  1852               	xorwf	exp@x+1,w,c
  7656  00149A  0E7F               	movlw	127
  7657  00149C  B4D8               	btfsc	status,2,c
  7658  00149E  1853               	xorwf	exp@x+2,w,c
  7659  0014A0  A4D8               	btfss	status,2,c
  7660  0014A2  D006               	goto	l8881
  7661  0014A4                     u6820:
  7662                           
  7663                           ; BSR set to: 0
  7664  0014A4  0E00               	movlw	0
  7665  0014A6  6E51               	movwf	?_exp,c
  7666  0014A8  0E00               	movlw	0
  7667  0014AA  6E52               	movwf	?_exp+1,c
  7668  0014AC  0E00               	movlw	0
  7669  0014AE  D756               	goto	L14
  7670  0014B0                     l8881:
  7671                           
  7672                           ; BSR set to: 0
  7673  0014B0  0E00               	movlw	0
  7674  0014B2  6E2F               	movwf	___ftdiv@f1,c
  7675  0014B4  0E80               	movlw	128
  7676  0014B6  6E30               	movwf	___ftdiv@f1+1,c
  7677  0014B8  0E3F               	movlw	63
  7678  0014BA  6E31               	movwf	___ftdiv@f1+2,c
  7679  0014BC  C051  F032         	movff	exp@x,___ftdiv@f2
  7680  0014C0  C052  F033         	movff	exp@x+1,___ftdiv@f2+1
  7681  0014C4  C053  F034         	movff	exp@x+2,___ftdiv@f2+2
  7682  0014C8  ECC1  F015         	call	___ftdiv	;wreg free
  7683  0014CC  C02F  F051         	movff	?___ftdiv,?_exp
  7684  0014D0  C030  F052         	movff	?___ftdiv+1,?_exp+1
  7685  0014D4  C031  F053         	movff	?___ftdiv+2,?_exp+2
  7686  0014D8  D006               	goto	l1865
  7687  0014DA                     l1869:
  7688                           
  7689                           ; BSR set to: 0
  7690  0014DA  C051  F051         	movff	exp@x,?_exp
  7691  0014DE  C052  F052         	movff	exp@x+1,?_exp+1
  7692  0014E2  C053  F053         	movff	exp@x+2,?_exp+2
  7693  0014E6                     l1865:
  7694  0014E6  0012               	return	
  7695  0014E8  FFFF               	dw	65535	; errata NOP
  7696  0014EA                     __end_of_exp:
  7697                           	opt stack 0
  7698                           tblptru	equ	0xFF8
  7699                           tblptrh	equ	0xFF7
  7700                           tblptrl	equ	0xFF6
  7701                           tablat	equ	0xFF5
  7702                           prodh	equ	0xFF4
  7703                           prodl	equ	0xFF3
  7704                           postinc0	equ	0xFEE
  7705                           wreg	equ	0xFE8
  7706                           postdec1	equ	0xFE5
  7707                           fsr1h	equ	0xFE2
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           fsr2h	equ	0xFDA
  7711                           fsr2l	equ	0xFD9
  7712                           status	equ	0xFD8
  7713                           
  7714 ;; *************** function _ldexp *****************
  7715 ;; Defined at:
  7716 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  value           3   73[COMRAM] unsigned char 
  7719 ;;  newexp          2   76[COMRAM] int 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;		None
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  3   73[COMRAM] int 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0, prodl
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7731 ;;      Params:         5       0       0       0       0       0       0
  7732 ;;      Locals:         0       0       0       0       0       0       0
  7733 ;;      Temps:          2       0       0       0       0       0       0
  7734 ;;      Totals:         7       0       0       0       0       0       0
  7735 ;;Total ram usage:        7 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    2
  7738 ;; This function calls:
  7739 ;;		Nothing
  7740 ;; This function is called by:
  7741 ;;		_exp
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text20
  7746  0027E8                     __ptext20:
  7747                           	opt stack 0
  7748  0027E8                     _ldexp:
  7749                           	opt stack 23
  7750                           
  7751                           ;incstack = 0
  7752  0027E8  FFFF               	dw	65535
  7753  0027EA  0E7F               	movlw	127
  7754  0027EC  144C               	andwf	ldexp@value+2,w,c
  7755  0027EE  104B               	iorwf	ldexp@value+1,w,c
  7756  0027F0  104A               	iorwf	ldexp@value,w,c
  7757  0027F2  B4D8               	btfsc	status,2,c
  7758  0027F4  D025               	goto	L15
  7759  0027F6  504C               	movf	ldexp@value+2,w,c
  7760  0027F8  0B7F               	andlw	127
  7761  0027FA  6E4F               	movwf	??_ldexp& (0+255),c
  7762  0027FC  6A50               	clrf	(??_ldexp+1)& (0+255),c
  7763  0027FE  90D8               	bcf	status,0,c
  7764  002800  364F               	rlcf	??_ldexp,f,c
  7765  002802  3650               	rlcf	??_ldexp+1,f,c
  7766  002804  504F               	movf	??_ldexp,w,c
  7767  002806  264D               	addwf	ldexp@newexp,f,c
  7768  002808  5050               	movf	??_ldexp+1,w,c
  7769  00280A  224E               	addwfc	ldexp@newexp+1,f,c
  7770  00280C  AE4B               	btfss	ldexp@value+1,7,c
  7771  00280E  D003               	goto	u6490
  7772  002810  6A4F               	clrf	??_ldexp& (0+255),c
  7773  002812  2A4F               	incf	??_ldexp& (0+255),f,c
  7774  002814  D001               	goto	u6498
  7775  002816                     u6490:
  7776  002816  6A4F               	clrf	??_ldexp& (0+255),c
  7777  002818                     u6498:
  7778  002818  504F               	movf	??_ldexp,w,c
  7779  00281A  264D               	addwf	ldexp@newexp,f,c
  7780  00281C  0E00               	movlw	0
  7781  00281E  224E               	addwfc	ldexp@newexp+1,f,c
  7782  002820  504E               	movf	ldexp@newexp+1,w,c
  7783  002822  0A80               	xorlw	128
  7784  002824  6EF3               	movwf	prodl,c
  7785  002826  0E80               	movlw	128
  7786  002828  5CF3               	subwf	prodl,w,c
  7787  00282A  0E00               	movlw	0
  7788  00282C  B4D8               	btfsc	status,2,c
  7789  00282E  5C4D               	subwf	ldexp@newexp,w,c
  7790  002830  B0D8               	btfsc	status,0,c
  7791  002832  D00C               	goto	l8673
  7792  002834  0E00               	movlw	0
  7793  002836  0100               	movlb	0	; () banked
  7794  002838  6FF4               	movwf	(_errno+1)& (0+255),b
  7795  00283A  0E22               	movlw	34
  7796  00283C  0100               	movlb	0	; () banked
  7797  00283E  6FF3               	movwf	_errno& (0+255),b
  7798  002840                     L15:
  7799  002840  0E00               	movlw	0
  7800  002842  6E4A               	movwf	?_ldexp,c
  7801  002844  0E00               	movlw	0
  7802  002846  6E4B               	movwf	?_ldexp+1,c
  7803  002848  0E00               	movlw	0
  7804  00284A  D024               	goto	L17
  7805  00284C                     l8673:
  7806  00284C  504E               	movf	ldexp@newexp+1,w,c
  7807  00284E  0A80               	xorlw	128
  7808  002850  0F7F               	addlw	-129
  7809  002852  0E00               	movlw	0
  7810  002854  B4D8               	btfsc	status,2,c
  7811  002856  5C4D               	subwf	ldexp@newexp,w,c
  7812  002858  A0D8               	btfss	status,0,c
  7813  00285A  D01E               	goto	l8689
  7814  00285C  0E00               	movlw	0
  7815  00285E  0100               	movlb	0	; () banked
  7816  002860  6FF4               	movwf	(_errno+1)& (0+255),b
  7817  002862  0E22               	movlw	34
  7818  002864  0100               	movlb	0	; () banked
  7819  002866  6FF3               	movwf	_errno& (0+255),b
  7820                           
  7821                           ; BSR set to: 0
  7822  002868  504C               	movf	ldexp@value+2,w,c
  7823  00286A  0A80               	xorlw	128
  7824  00286C  0F80               	addlw	128
  7825  00286E  E105               	bnz	u6525
  7826  002870  0E00               	movlw	0
  7827  002872  5C4B               	subwf	ldexp@value+1,w,c
  7828  002874  E102               	bnz	u6525
  7829  002876  0E00               	movlw	0
  7830  002878  5C4A               	subwf	ldexp@value,w,c
  7831  00287A                     u6525:
  7832  00287A  B0D8               	btfsc	status,0,c
  7833  00287C  D006               	goto	l8685
  7834                           
  7835                           ; BSR set to: 0
  7836  00287E  0EFF               	movlw	255
  7837  002880  6E4A               	movwf	?_ldexp,c
  7838  002882  0E7F               	movlw	127
  7839  002884  6E4B               	movwf	?_ldexp+1,c
  7840  002886  0EFF               	movlw	255
  7841  002888  D005               	goto	L17
  7842  00288A                     l8685:
  7843                           
  7844                           ; BSR set to: 0
  7845  00288A  0EFF               	movlw	255
  7846  00288C  6E4A               	movwf	?_ldexp,c
  7847  00288E  0E7F               	movlw	127
  7848  002890  6E4B               	movwf	?_ldexp+1,c
  7849  002892  0E7F               	movlw	127
  7850  002894                     L17:
  7851  002894  6E4C               	movwf	?_ldexp+2,c
  7852  002896  D01B               	goto	l1889
  7853  002898                     l8689:
  7854  002898  344E               	rlcf	ldexp@newexp+1,w,c
  7855  00289A  304E               	rrcf	ldexp@newexp+1,w,c
  7856  00289C  6E50               	movwf	(??_ldexp+1)& (0+255),c
  7857  00289E  304D               	rrcf	ldexp@newexp,w,c
  7858  0028A0  6E4F               	movwf	??_ldexp& (0+255),c
  7859  0028A2  504C               	movf	ldexp@value+2,w,c
  7860  0028A4  184F               	xorwf	??_ldexp,w,c
  7861  0028A6  0B80               	andlw	-128
  7862  0028A8  184F               	xorwf	??_ldexp,w,c
  7863  0028AA  6E4C               	movwf	ldexp@value+2,c
  7864  0028AC  C04D  F04F         	movff	ldexp@newexp,??_ldexp
  7865  0028B0  0E01               	movlw	1
  7866  0028B2  164F               	andwf	??_ldexp,f,c
  7867  0028B4  324F               	rrcf	??_ldexp,f,c
  7868  0028B6  324F               	rrcf	??_ldexp,f,c
  7869  0028B8  504B               	movf	ldexp@value+1,w,c
  7870  0028BA  184F               	xorwf	??_ldexp,w,c
  7871  0028BC  0B7F               	andlw	-129
  7872  0028BE  184F               	xorwf	??_ldexp,w,c
  7873  0028C0  6E4B               	movwf	ldexp@value+1,c
  7874  0028C2  C04A  F04A         	movff	ldexp@value,?_ldexp
  7875  0028C6  C04B  F04B         	movff	ldexp@value+1,?_ldexp+1
  7876  0028CA  C04C  F04C         	movff	ldexp@value+2,?_ldexp+2
  7877  0028CE                     l1889:
  7878  0028CE  0012               	return	
  7879  0028D0  FFFF               	dw	65535	; errata NOP
  7880  0028D2                     __end_of_ldexp:
  7881                           	opt stack 0
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           postinc0	equ	0xFEE
  7889                           wreg	equ	0xFE8
  7890                           postdec1	equ	0xFE5
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           fsr2h	equ	0xFDA
  7895                           fsr2l	equ	0xFD9
  7896                           status	equ	0xFD8
  7897                           
  7898 ;; *************** function _floor *****************
  7899 ;; Defined at:
  7900 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\floor.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  x               3   61[COMRAM] int 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  i               3   64[COMRAM] int 
  7905 ;;  expon           2   67[COMRAM] int 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  3   61[COMRAM] int 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7915 ;;      Params:         3       0       0       0       0       0       0
  7916 ;;      Locals:         5       0       0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0
  7918 ;;      Totals:         8       0       0       0       0       0       0
  7919 ;;Total ram usage:        8 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    4
  7922 ;; This function calls:
  7923 ;;		___altoft
  7924 ;;		___ftadd
  7925 ;;		___ftge
  7926 ;;		___fttol
  7927 ;;		_frexp
  7928 ;; This function is called by:
  7929 ;;		_exp
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           	psect	text21
  7934  0025FA                     __ptext21:
  7935                           	opt stack 0
  7936  0025FA                     _floor:
  7937                           	opt stack 21
  7938                           
  7939                           ;incstack = 0
  7940  0025FA  FFFF               	dw	65535
  7941  0025FC  C03E  F014         	movff	floor@x,frexp@value
  7942  002600  C03F  F015         	movff	floor@x+1,frexp@value+1
  7943  002604  C040  F016         	movff	floor@x+2,frexp@value+2
  7944  002608  0E00               	movlw	high floor@expon
  7945  00260A  6E18               	movwf	frexp@eptr+1,c
  7946  00260C  0E44               	movlw	low floor@expon
  7947  00260E  6E17               	movwf	frexp@eptr,c
  7948  002610  ECB3  F019         	call	_frexp	;wreg free
  7949  002614  5045               	movf	floor@expon+1,w,c
  7950  002616  0A80               	xorlw	128
  7951  002618  6EF3               	movwf	prodl,c
  7952  00261A  0E80               	movlw	128
  7953  00261C  5CF3               	subwf	prodl,w,c
  7954  00261E  0E00               	movlw	0
  7955  002620  B4D8               	btfsc	status,2,c
  7956  002622  5C44               	subwf	floor@expon,w,c
  7957  002624  B0D8               	btfsc	status,0,c
  7958  002626  D018               	goto	l8641
  7959  002628  5040               	movf	floor@x+2,w,c
  7960  00262A  0A80               	xorlw	128
  7961  00262C  0F80               	addlw	128
  7962  00262E  E105               	bnz	u6445
  7963  002630  0E00               	movlw	0
  7964  002632  5C3F               	subwf	floor@x+1,w,c
  7965  002634  E102               	bnz	u6445
  7966  002636  0E00               	movlw	0
  7967  002638  5C3E               	subwf	floor@x,w,c
  7968  00263A                     u6445:
  7969  00263A  B0D8               	btfsc	status,0,c
  7970  00263C  D006               	goto	l8637
  7971  00263E  0E00               	movlw	0
  7972  002640  6E3E               	movwf	?_floor,c
  7973  002642  0E80               	movlw	128
  7974  002644  6E3F               	movwf	?_floor+1,c
  7975  002646  0EBF               	movlw	191
  7976  002648  D005               	goto	L18
  7977  00264A                     l8637:
  7978  00264A  0E00               	movlw	0
  7979  00264C  6E3E               	movwf	?_floor,c
  7980  00264E  0E00               	movlw	0
  7981  002650  6E3F               	movwf	?_floor+1,c
  7982  002652  0E00               	movlw	0
  7983  002654                     L18:
  7984  002654  6E40               	movwf	?_floor+2,c
  7985  002656  D050               	goto	l1877
  7986  002658                     l8641:
  7987  002658  0E15               	movlw	21
  7988  00265A  5C44               	subwf	floor@expon,w,c
  7989  00265C  0E00               	movlw	0
  7990  00265E  5845               	subwfb	floor@expon+1,w,c
  7991  002660  A0D8               	btfss	status,0,c
  7992  002662  D007               	goto	l8645
  7993  002664  C03E  F03E         	movff	floor@x,?_floor
  7994  002668  C03F  F03F         	movff	floor@x+1,?_floor+1
  7995  00266C  C040  F040         	movff	floor@x+2,?_floor+2
  7996  002670  D043               	goto	l1877
  7997  002672                     l8645:
  7998  002672  C03E  F014         	movff	floor@x,___fttol@f1
  7999  002676  C03F  F015         	movff	floor@x+1,___fttol@f1+1
  8000  00267A  C040  F016         	movff	floor@x+2,___fttol@f1+2
  8001  00267E  EC2E  F016         	call	___fttol	;wreg free
  8002  002682  C014  F023         	movff	?___fttol,___altoft@c
  8003  002686  C015  F024         	movff	?___fttol+1,___altoft@c+1
  8004  00268A  C016  F025         	movff	?___fttol+2,___altoft@c+2
  8005  00268E  C017  F026         	movff	?___fttol+3,___altoft@c+3
  8006  002692  EC48  F01A         	call	___altoft	;wreg free
  8007  002696  C023  F041         	movff	?___altoft,floor@i
  8008  00269A  C024  F042         	movff	?___altoft+1,floor@i+1
  8009  00269E  C025  F043         	movff	?___altoft+2,floor@i+2
  8010  0026A2  C03E  F014         	movff	floor@x,___ftge@ff1
  8011  0026A6  C03F  F015         	movff	floor@x+1,___ftge@ff1+1
  8012  0026AA  C040  F016         	movff	floor@x+2,___ftge@ff1+2
  8013  0026AE  C041  F017         	movff	floor@i,___ftge@ff2
  8014  0026B2  C042  F018         	movff	floor@i+1,___ftge@ff2+1
  8015  0026B6  C043  F019         	movff	floor@i+2,___ftge@ff2+2
  8016  0026BA  ECFE  F019         	call	___ftge	;wreg free
  8017  0026BE  B0D8               	btfsc	status,0,c
  8018  0026C0  D015               	goto	l1879
  8019  0026C2  C041  F032         	movff	floor@i,___ftadd@f1
  8020  0026C6  C042  F033         	movff	floor@i+1,___ftadd@f1+1
  8021  0026CA  C043  F034         	movff	floor@i+2,___ftadd@f1+2
  8022  0026CE  0E00               	movlw	0
  8023  0026D0  6E35               	movwf	___ftadd@f2,c
  8024  0026D2  0E80               	movlw	128
  8025  0026D4  6E36               	movwf	___ftadd@f2+1,c
  8026  0026D6  0EBF               	movlw	191
  8027  0026D8  6E37               	movwf	___ftadd@f2+2,c
  8028  0026DA  EC44  F00C         	call	___ftadd	;wreg free
  8029  0026DE  C032  F03E         	movff	?___ftadd,?_floor
  8030  0026E2  C033  F03F         	movff	?___ftadd+1,?_floor+1
  8031  0026E6  C034  F040         	movff	?___ftadd+2,?_floor+2
  8032  0026EA  D006               	goto	l1877
  8033  0026EC                     l1879:
  8034  0026EC  C041  F03E         	movff	floor@i,?_floor
  8035  0026F0  C042  F03F         	movff	floor@i+1,?_floor+1
  8036  0026F4  C043  F040         	movff	floor@i+2,?_floor+2
  8037  0026F8                     l1877:
  8038  0026F8  0012               	return	
  8039  0026FA  FFFF               	dw	65535	; errata NOP
  8040  0026FC                     __end_of_floor:
  8041                           	opt stack 0
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           postinc0	equ	0xFEE
  8049                           wreg	equ	0xFE8
  8050                           postdec1	equ	0xFE5
  8051                           fsr1h	equ	0xFE2
  8052                           fsr1l	equ	0xFE1
  8053                           indf2	equ	0xFDF
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _frexp *****************
  8059 ;; Defined at:
  8060 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  value           3   19[COMRAM] int 
  8063 ;;  eptr            2   22[COMRAM] PTR int 
  8064 ;;		 -> log@exponent(2), floor@expon(2), 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;		None
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  3   19[COMRAM] PTR int 
  8069 ;; Registers used:
  8070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8076 ;;      Params:         5       0       0       0       0       0       0
  8077 ;;      Locals:         0       0       0       0       0       0       0
  8078 ;;      Temps:          2       0       0       0       0       0       0
  8079 ;;      Totals:         7       0       0       0       0       0       0
  8080 ;;Total ram usage:        7 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    2
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_floor
  8087 ;;		_log
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text22
  8092  003366                     __ptext22:
  8093                           	opt stack 0
  8094  003366                     _frexp:
  8095                           	opt stack 23
  8096                           
  8097                           ;incstack = 0
  8098  003366  FFFF               	dw	65535
  8099  003368  0E7F               	movlw	127
  8100  00336A  1416               	andwf	frexp@value+2,w,c
  8101  00336C  1015               	iorwf	frexp@value+1,w,c
  8102  00336E  1014               	iorwf	frexp@value,w,c
  8103  003370  A4D8               	btfss	status,2,c
  8104  003372  D00F               	goto	l8507
  8105  003374  C017  FFD9         	movff	frexp@eptr,fsr2l
  8106  003378  C018  FFDA         	movff	frexp@eptr+1,fsr2h
  8107  00337C  0E00               	movlw	0
  8108  00337E  6EDE               	movwf	postinc2,c
  8109  003380  0E00               	movlw	0
  8110  003382  6EDD               	movwf	postdec2,c
  8111  003384  0E00               	movlw	0
  8112  003386  6E14               	movwf	?_frexp,c
  8113  003388  0E00               	movlw	0
  8114  00338A  6E15               	movwf	?_frexp+1,c
  8115  00338C  0E00               	movlw	0
  8116  00338E  6E16               	movwf	?_frexp+2,c
  8117  003390  D033               	goto	l1885
  8118  003392                     l8507:
  8119  003392  5016               	movf	frexp@value+2,w,c
  8120  003394  0B7F               	andlw	127
  8121  003396  6E19               	movwf	??_frexp& (0+255),c
  8122  003398  6A1A               	clrf	(??_frexp+1)& (0+255),c
  8123  00339A  90D8               	bcf	status,0,c
  8124  00339C  3619               	rlcf	??_frexp,f,c
  8125  00339E  361A               	rlcf	??_frexp+1,f,c
  8126  0033A0  C017  FFD9         	movff	frexp@eptr,fsr2l
  8127  0033A4  C018  FFDA         	movff	frexp@eptr+1,fsr2h
  8128  0033A8  C019  FFDE         	movff	??_frexp,postinc2
  8129  0033AC  C01A  FFDD         	movff	??_frexp+1,postdec2
  8130  0033B0  AE15               	btfss	frexp@value+1,7,c
  8131  0033B2  D003               	goto	u6310
  8132  0033B4  6A19               	clrf	??_frexp& (0+255),c
  8133  0033B6  2A19               	incf	??_frexp& (0+255),f,c
  8134  0033B8  D001               	goto	u6318
  8135  0033BA                     u6310:
  8136  0033BA  6A19               	clrf	??_frexp& (0+255),c
  8137  0033BC                     u6318:
  8138  0033BC  5019               	movf	??_frexp,w,c
  8139  0033BE  C017  FFD9         	movff	frexp@eptr,fsr2l
  8140  0033C2  C018  FFDA         	movff	frexp@eptr+1,fsr2h
  8141  0033C6  12DE               	iorwf	postinc2,f,c
  8142  0033C8  0E00               	movlw	0
  8143  0033CA  12DD               	iorwf	postdec2,f,c
  8144  0033CC  C017  FFD9         	movff	frexp@eptr,fsr2l
  8145  0033D0  C018  FFDA         	movff	frexp@eptr+1,fsr2h
  8146  0033D4  0E82               	movlw	130
  8147  0033D6  26DE               	addwf	postinc2,f,c
  8148  0033D8  0EFF               	movlw	255
  8149  0033DA  22DD               	addwfc	postdec2,f,c
  8150  0033DC  8016               	bsf	frexp@value+2,0,c
  8151  0033DE  8216               	bsf	frexp@value+2,1,c
  8152  0033E0  8416               	bsf	frexp@value+2,2,c
  8153  0033E2  8616               	bsf	frexp@value+2,3,c
  8154  0033E4  8816               	bsf	frexp@value+2,4,c
  8155  0033E6  8A16               	bsf	frexp@value+2,5,c
  8156  0033E8  9C16               	bcf	frexp@value+2,6,c
  8157  0033EA  9E15               	bcf	frexp@value+1,7,c
  8158  0033EC  C014  F014         	movff	frexp@value,?_frexp
  8159  0033F0  C015  F015         	movff	frexp@value+1,?_frexp+1
  8160  0033F4  C016  F016         	movff	frexp@value+2,?_frexp+2
  8161  0033F8                     l1885:
  8162  0033F8  0012               	return	
  8163  0033FA  FFFF               	dw	65535	; errata NOP
  8164  0033FC                     __end_of_frexp:
  8165                           	opt stack 0
  8166                           tblptru	equ	0xFF8
  8167                           tblptrh	equ	0xFF7
  8168                           tblptrl	equ	0xFF6
  8169                           tablat	equ	0xFF5
  8170                           prodh	equ	0xFF4
  8171                           prodl	equ	0xFF3
  8172                           postinc0	equ	0xFEE
  8173                           wreg	equ	0xFE8
  8174                           postdec1	equ	0xFE5
  8175                           fsr1h	equ	0xFE2
  8176                           fsr1l	equ	0xFE1
  8177                           indf2	equ	0xFDF
  8178                           postinc2	equ	0xFDE
  8179                           postdec2	equ	0xFDD
  8180                           fsr2h	equ	0xFDA
  8181                           fsr2l	equ	0xFD9
  8182                           status	equ	0xFD8
  8183                           
  8184 ;; *************** function ___ftge *****************
  8185 ;; Defined at:
  8186 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  ff1             3   19[COMRAM] float 
  8189 ;;  ff2             3   22[COMRAM] float 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;		None
  8192 ;; Return value:  Size  Location     Type
  8193 ;;		None               void
  8194 ;; Registers used:
  8195 ;;		wreg, status,2, status,0
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8201 ;;      Params:         6       0       0       0       0       0       0
  8202 ;;      Locals:         0       0       0       0       0       0       0
  8203 ;;      Temps:          3       0       0       0       0       0       0
  8204 ;;      Totals:         9       0       0       0       0       0       0
  8205 ;;Total ram usage:        9 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    2
  8208 ;; This function calls:
  8209 ;;		Nothing
  8210 ;; This function is called by:
  8211 ;;		_pow
  8212 ;;		_exp
  8213 ;;		_floor
  8214 ;;		_check_thresh_trig
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           	psect	text23
  8219  0033FC                     __ptext23:
  8220                           	opt stack 0
  8221  0033FC                     ___ftge:
  8222                           	opt stack 22
  8223                           
  8224                           ;incstack = 0
  8225  0033FC  FFFF               	dw	65535
  8226  0033FE  AE16               	btfss	___ftge@ff1+2,7,c
  8227  003400  D016               	goto	l8439
  8228  003402  C014  F01A         	movff	___ftge@ff1,??___ftge
  8229  003406  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  8230  00340A  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  8231  00340E  1E1A               	comf	??___ftge,f,c
  8232  003410  1E1B               	comf	??___ftge+1,f,c
  8233  003412  1E1C               	comf	??___ftge+2,f,c
  8234  003414  2A1A               	incf	??___ftge,f,c
  8235  003416  0E00               	movlw	0
  8236  003418  221B               	addwfc	??___ftge+1,f,c
  8237  00341A  221C               	addwfc	??___ftge+2,f,c
  8238  00341C  0E00               	movlw	0
  8239  00341E  241A               	addwf	??___ftge,w,c
  8240  003420  6E14               	movwf	___ftge@ff1,c
  8241  003422  0E00               	movlw	0
  8242  003424  201B               	addwfc	??___ftge+1,w,c
  8243  003426  6E15               	movwf	___ftge@ff1+1,c
  8244  003428  0E80               	movlw	128
  8245  00342A  201C               	addwfc	??___ftge+2,w,c
  8246  00342C  6E16               	movwf	___ftge@ff1+2,c
  8247  00342E                     l8439:
  8248  00342E  AE19               	btfss	___ftge@ff2+2,7,c
  8249  003430  D016               	goto	l8443
  8250  003432  C017  F01A         	movff	___ftge@ff2,??___ftge
  8251  003436  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  8252  00343A  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  8253  00343E  1E1A               	comf	??___ftge,f,c
  8254  003440  1E1B               	comf	??___ftge+1,f,c
  8255  003442  1E1C               	comf	??___ftge+2,f,c
  8256  003444  2A1A               	incf	??___ftge,f,c
  8257  003446  0E00               	movlw	0
  8258  003448  221B               	addwfc	??___ftge+1,f,c
  8259  00344A  221C               	addwfc	??___ftge+2,f,c
  8260  00344C  0E00               	movlw	0
  8261  00344E  241A               	addwf	??___ftge,w,c
  8262  003450  6E17               	movwf	___ftge@ff2,c
  8263  003452  0E00               	movlw	0
  8264  003454  201B               	addwfc	??___ftge+1,w,c
  8265  003456  6E18               	movwf	___ftge@ff2+1,c
  8266  003458  0E80               	movlw	128
  8267  00345A  201C               	addwfc	??___ftge+2,w,c
  8268  00345C  6E19               	movwf	___ftge@ff2+2,c
  8269  00345E                     l8443:
  8270  00345E  0E00               	movlw	0
  8271  003460  1A14               	xorwf	___ftge@ff1,f,c
  8272  003462  0E00               	movlw	0
  8273  003464  1A15               	xorwf	___ftge@ff1+1,f,c
  8274  003466  0E80               	movlw	128
  8275  003468  1A16               	xorwf	___ftge@ff1+2,f,c
  8276  00346A  0E00               	movlw	0
  8277  00346C  1A17               	xorwf	___ftge@ff2,f,c
  8278  00346E  0E00               	movlw	0
  8279  003470  1A18               	xorwf	___ftge@ff2+1,f,c
  8280  003472  0E80               	movlw	128
  8281  003474  1A19               	xorwf	___ftge@ff2+2,f,c
  8282  003476  5017               	movf	___ftge@ff2,w,c
  8283  003478  5C14               	subwf	___ftge@ff1,w,c
  8284  00347A  5018               	movf	___ftge@ff2+1,w,c
  8285  00347C  5815               	subwfb	___ftge@ff1+1,w,c
  8286  00347E  5019               	movf	___ftge@ff2+2,w,c
  8287  003480  5816               	subwfb	___ftge@ff1+2,w,c
  8288  003482  B0D8               	btfsc	status,0,c
  8289  003484  D002               	goto	l8449
  8290  003486  90D8               	bcf	status,0,c
  8291  003488  D001               	goto	l1676
  8292  00348A                     l8449:
  8293  00348A  80D8               	bsf	status,0,c
  8294  00348C                     l1676:
  8295  00348C  0012               	return	
  8296  00348E  FFFF               	dw	65535	; errata NOP
  8297  003490                     __end_of___ftge:
  8298                           	opt stack 0
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           prodh	equ	0xFF4
  8304                           prodl	equ	0xFF3
  8305                           postinc0	equ	0xFEE
  8306                           wreg	equ	0xFE8
  8307                           postdec1	equ	0xFE5
  8308                           fsr1h	equ	0xFE2
  8309                           fsr1l	equ	0xFE1
  8310                           indf2	equ	0xFDF
  8311                           postinc2	equ	0xFDE
  8312                           postdec2	equ	0xFDD
  8313                           fsr2h	equ	0xFDA
  8314                           fsr2l	equ	0xFD9
  8315                           status	equ	0xFD8
  8316                           
  8317 ;; *************** function ___altoft *****************
  8318 ;; Defined at:
  8319 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\altoft.c"
  8320 ;; Parameters:    Size  Location     Type
  8321 ;;  c               4   34[COMRAM] long 
  8322 ;; Auto vars:     Size  Location     Type
  8323 ;;  sign            1   43[COMRAM] unsigned char 
  8324 ;;  exp             1   42[COMRAM] unsigned char 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  3   34[COMRAM] float 
  8327 ;; Registers used:
  8328 ;;		wreg, status,2, status,0, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8334 ;;      Params:         4       0       0       0       0       0       0
  8335 ;;      Locals:         2       0       0       0       0       0       0
  8336 ;;      Temps:          4       0       0       0       0       0       0
  8337 ;;      Totals:        10       0       0       0       0       0       0
  8338 ;;Total ram usage:       10 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    3
  8341 ;; This function calls:
  8342 ;;		___ftpack
  8343 ;; This function is called by:
  8344 ;;		_floor
  8345 ;; This function uses a non-reentrant model
  8346 ;;
  8347                           
  8348                           	psect	text24
  8349  003490                     __ptext24:
  8350                           	opt stack 0
  8351  003490                     ___altoft:
  8352                           	opt stack 21
  8353                           
  8354                           ;incstack = 0
  8355  003490  FFFF               	dw	65535
  8356  003492  0E00               	movlw	0
  8357  003494  6E2C               	movwf	___altoft@sign,c
  8358  003496  0E8E               	movlw	142
  8359  003498  6E2B               	movwf	___altoft@exp,c
  8360  00349A  5026               	movf	___altoft@c+3,w,c
  8361  00349C  0A80               	xorlw	128
  8362  00349E  0F80               	addlw	128
  8363  0034A0  E108               	bnz	u5905
  8364  0034A2  0E00               	movlw	0
  8365  0034A4  5C25               	subwf	___altoft@c+2,w,c
  8366  0034A6  E105               	bnz	u5905
  8367  0034A8  0E00               	movlw	0
  8368  0034AA  5C24               	subwf	___altoft@c+1,w,c
  8369  0034AC  E102               	bnz	u5905
  8370  0034AE  0E00               	movlw	0
  8371  0034B0  5C23               	subwf	___altoft@c,w,c
  8372  0034B2                     u5905:
  8373  0034B2  B0D8               	btfsc	status,0,c
  8374  0034B4  D011               	goto	l8311
  8375  0034B6  1E26               	comf	___altoft@c+3,f,c
  8376  0034B8  1E25               	comf	___altoft@c+2,f,c
  8377  0034BA  1E24               	comf	___altoft@c+1,f,c
  8378  0034BC  6C23               	negf	___altoft@c,c
  8379  0034BE  0E00               	movlw	0
  8380  0034C0  2224               	addwfc	___altoft@c+1,f,c
  8381  0034C2  2225               	addwfc	___altoft@c+2,f,c
  8382  0034C4  2226               	addwfc	___altoft@c+3,f,c
  8383  0034C6  0E01               	movlw	1
  8384  0034C8  6E2C               	movwf	___altoft@sign,c
  8385  0034CA  D006               	goto	l8311
  8386  0034CC                     l8309:
  8387  0034CC  90D8               	bcf	status,0,c
  8388  0034CE  3226               	rrcf	___altoft@c+3,f,c
  8389  0034D0  3225               	rrcf	___altoft@c+2,f,c
  8390  0034D2  3224               	rrcf	___altoft@c+1,f,c
  8391  0034D4  3223               	rrcf	___altoft@c,f,c
  8392  0034D6  2A2B               	incf	___altoft@exp,f,c
  8393  0034D8                     l8311:
  8394  0034D8  0E00               	movlw	0
  8395  0034DA  1423               	andwf	___altoft@c,w,c
  8396  0034DC  6E27               	movwf	??___altoft& (0+255),c
  8397  0034DE  0E00               	movlw	0
  8398  0034E0  1424               	andwf	___altoft@c+1,w,c
  8399  0034E2  6E28               	movwf	(??___altoft+1)& (0+255),c
  8400  0034E4  0E00               	movlw	0
  8401  0034E6  1425               	andwf	___altoft@c+2,w,c
  8402  0034E8  6E29               	movwf	(??___altoft+2)& (0+255),c
  8403  0034EA  0EFF               	movlw	255
  8404  0034EC  1426               	andwf	___altoft@c+3,w,c
  8405  0034EE  6E2A               	movwf	(??___altoft+3)& (0+255),c
  8406  0034F0  502A               	movf	??___altoft+3,w,c
  8407  0034F2  1027               	iorwf	??___altoft,w,c
  8408  0034F4  1028               	iorwf	??___altoft+1,w,c
  8409  0034F6  1029               	iorwf	??___altoft+2,w,c
  8410  0034F8  A4D8               	btfss	status,2,c
  8411  0034FA  D7E8               	goto	l8309
  8412  0034FC  C023  F014         	movff	___altoft@c,___ftpack@arg
  8413  003500  C024  F015         	movff	___altoft@c+1,___ftpack@arg+1
  8414  003504  C025  F016         	movff	___altoft@c+2,___ftpack@arg+2
  8415  003508  C02B  F017         	movff	___altoft@exp,___ftpack@exp
  8416  00350C  C02C  F018         	movff	___altoft@sign,___ftpack@sign
  8417  003510  EC19  F018         	call	___ftpack	;wreg free
  8418  003514  C014  F023         	movff	?___ftpack,?___altoft
  8419  003518  C015  F024         	movff	?___ftpack+1,?___altoft+1
  8420  00351C  C016  F025         	movff	?___ftpack+2,?___altoft+2
  8421  003520  0012               	return	
  8422  003522  FFFF               	dw	65535	; errata NOP
  8423  003524                     __end_of___altoft:
  8424                           	opt stack 0
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postdec1	equ	0xFE5
  8434                           fsr1h	equ	0xFE2
  8435                           fsr1l	equ	0xFE1
  8436                           indf2	equ	0xFDF
  8437                           postinc2	equ	0xFDE
  8438                           postdec2	equ	0xFDD
  8439                           fsr2h	equ	0xFDA
  8440                           fsr2l	equ	0xFD9
  8441                           status	equ	0xFD8
  8442                           
  8443 ;; *************** function _eval_poly *****************
  8444 ;; Defined at:
  8445 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;  x               3   61[COMRAM] float 
  8448 ;;  d               2   64[COMRAM] PTR const 
  8449 ;;		 -> log@coeff(27), exp@coeff(30), 
  8450 ;;  n               2   66[COMRAM] int 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  res             3   70[COMRAM] int 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  3   61[COMRAM] int 
  8455 ;; Registers used:
  8456 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8462 ;;      Params:         7       0       0       0       0       0       0
  8463 ;;      Locals:         3       0       0       0       0       0       0
  8464 ;;      Temps:          2       0       0       0       0       0       0
  8465 ;;      Totals:        12       0       0       0       0       0       0
  8466 ;;Total ram usage:       12 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    4
  8469 ;; This function calls:
  8470 ;;		___ftadd
  8471 ;;		___ftmul
  8472 ;;		___wmul
  8473 ;; This function is called by:
  8474 ;;		_exp
  8475 ;;		_log
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           	psect	text25
  8480  002AA0                     __ptext25:
  8481                           	opt stack 0
  8482  002AA0                     _eval_poly:
  8483                           	opt stack 21
  8484                           
  8485                           ;incstack = 0
  8486  002AA0  FFFF               	dw	65535
  8487  002AA2  C043  F014         	movff	eval_poly@n,___wmul@multiplier
  8488  002AA6  C044  F015         	movff	eval_poly@n+1,___wmul@multiplier+1
  8489  002AAA  0E00               	movlw	0
  8490  002AAC  6E17               	movwf	___wmul@multiplicand+1,c
  8491  002AAE  0E03               	movlw	3
  8492  002AB0  6E16               	movwf	___wmul@multiplicand,c
  8493  002AB2  EC04  F03E         	call	___wmul	;wreg free
  8494  002AB6  C041  F045         	movff	eval_poly@d,??_eval_poly
  8495  002ABA  C042  F046         	movff	eval_poly@d+1,??_eval_poly+1
  8496  002ABE  5014               	movf	?___wmul,w,c
  8497  002AC0  2645               	addwf	??_eval_poly,f,c
  8498  002AC2  5015               	movf	?___wmul+1,w,c
  8499  002AC4  2246               	addwfc	??_eval_poly+1,f,c
  8500  002AC6  C045  FFF6         	movff	??_eval_poly,tblptrl
  8501  002ACA  C046  FFF7         	movff	??_eval_poly+1,tblptrh
  8502  002ACE                     	if	0	;tblptru may be non-zero
  8503  002ACE                     	endif
  8504  002ACE                     	if	0	;tblptru may be non-zero
  8505  002ACE                     	endif
  8506  002ACE  0009               	tblrd		*+
  8507  002AD0  FFFF               	dw	65535	; errata NOP
  8508  002AD2  CFF5 F047          	movff	tablat,eval_poly@res
  8509  002AD6  0009               	tblrd		*+
  8510  002AD8  FFFF               	dw	65535	; errata NOP
  8511  002ADA  CFF5 F048          	movff	tablat,eval_poly@res+1
  8512  002ADE  000A               	tblrd		*-
  8513  002AE0  FFFF               	dw	65535	; errata NOP
  8514  002AE2  CFF5 F049          	movff	tablat,eval_poly@res+2
  8515  002AE6  D041               	goto	l8655
  8516  002AE8                     l8653:
  8517  002AE8  C047  F023         	movff	eval_poly@res,___ftmul@f2
  8518  002AEC  C048  F024         	movff	eval_poly@res+1,___ftmul@f2+1
  8519  002AF0  C049  F025         	movff	eval_poly@res+2,___ftmul@f2+2
  8520  002AF4  C03E  F020         	movff	eval_poly@x,___ftmul@f1
  8521  002AF8  C03F  F021         	movff	eval_poly@x+1,___ftmul@f1+1
  8522  002AFC  C040  F022         	movff	eval_poly@x+2,___ftmul@f1+2
  8523  002B00  EC69  F014         	call	___ftmul	;wreg free
  8524  002B04  C020  F032         	movff	?___ftmul,___ftadd@f1
  8525  002B08  C021  F033         	movff	?___ftmul+1,___ftadd@f1+1
  8526  002B0C  C022  F034         	movff	?___ftmul+2,___ftadd@f1+2
  8527  002B10  0E00               	movlw	0
  8528  002B12  6E17               	movwf	___wmul@multiplicand+1,c
  8529  002B14  0E03               	movlw	3
  8530  002B16  6E16               	movwf	___wmul@multiplicand,c
  8531  002B18  0643               	decf	eval_poly@n,f,c
  8532  002B1A  A0D8               	btfss	status,0,c
  8533  002B1C  0644               	decf	eval_poly@n+1,f,c
  8534  002B1E  C043  F014         	movff	eval_poly@n,___wmul@multiplier
  8535  002B22  C044  F015         	movff	eval_poly@n+1,___wmul@multiplier+1
  8536  002B26  EC04  F03E         	call	___wmul	;wreg free
  8537  002B2A  C041  F045         	movff	eval_poly@d,??_eval_poly
  8538  002B2E  C042  F046         	movff	eval_poly@d+1,??_eval_poly+1
  8539  002B32  5014               	movf	?___wmul,w,c
  8540  002B34  2645               	addwf	??_eval_poly,f,c
  8541  002B36  5015               	movf	?___wmul+1,w,c
  8542  002B38  2246               	addwfc	??_eval_poly+1,f,c
  8543  002B3A  C045  FFF6         	movff	??_eval_poly,tblptrl
  8544  002B3E  C046  FFF7         	movff	??_eval_poly+1,tblptrh
  8545  002B42                     	if	0	;tblptru may be non-zero
  8546  002B42                     	endif
  8547  002B42                     	if	0	;tblptru may be non-zero
  8548  002B42                     	endif
  8549  002B42  0009               	tblrd		*+
  8550  002B44  FFFF               	dw	65535	; errata NOP
  8551  002B46  CFF5 F035          	movff	tablat,___ftadd@f2
  8552  002B4A  0009               	tblrd		*+
  8553  002B4C  FFFF               	dw	65535	; errata NOP
  8554  002B4E  CFF5 F036          	movff	tablat,___ftadd@f2+1
  8555  002B52  000A               	tblrd		*-
  8556  002B54  FFFF               	dw	65535	; errata NOP
  8557  002B56  CFF5 F037          	movff	tablat,___ftadd@f2+2
  8558  002B5A  EC44  F00C         	call	___ftadd	;wreg free
  8559  002B5E  C032  F047         	movff	?___ftadd,eval_poly@res
  8560  002B62  C033  F048         	movff	?___ftadd+1,eval_poly@res+1
  8561  002B66  C034  F049         	movff	?___ftadd+2,eval_poly@res+2
  8562  002B6A                     l8655:
  8563  002B6A  5044               	movf	eval_poly@n+1,w,c
  8564  002B6C  1043               	iorwf	eval_poly@n,w,c
  8565  002B6E  A4D8               	btfss	status,2,c
  8566  002B70  D7BB               	goto	l8653
  8567  002B72  C047  F03E         	movff	eval_poly@res,?_eval_poly
  8568  002B76  C048  F03F         	movff	eval_poly@res+1,?_eval_poly+1
  8569  002B7A  C049  F040         	movff	eval_poly@res+2,?_eval_poly+2
  8570  002B7E  0012               	return	
  8571  002B80  FFFF               	dw	65535	; errata NOP
  8572  002B82                     __end_of_eval_poly:
  8573                           	opt stack 0
  8574                           tblptru	equ	0xFF8
  8575                           tblptrh	equ	0xFF7
  8576                           tblptrl	equ	0xFF6
  8577                           tablat	equ	0xFF5
  8578                           prodh	equ	0xFF4
  8579                           prodl	equ	0xFF3
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1h	equ	0xFE2
  8584                           fsr1l	equ	0xFE1
  8585                           indf2	equ	0xFDF
  8586                           postinc2	equ	0xFDE
  8587                           postdec2	equ	0xFDD
  8588                           fsr2h	equ	0xFDA
  8589                           fsr2l	equ	0xFD9
  8590                           status	equ	0xFD8
  8591                           
  8592 ;; *************** function ___wmul *****************
  8593 ;; Defined at:
  8594 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  multiplier      2   19[COMRAM] unsigned int 
  8597 ;;  multiplicand    2   21[COMRAM] unsigned int 
  8598 ;; Auto vars:     Size  Location     Type
  8599 ;;  product         2   23[COMRAM] unsigned int 
  8600 ;; Return value:  Size  Location     Type
  8601 ;;                  2   19[COMRAM] unsigned int 
  8602 ;; Registers used:
  8603 ;;		wreg, status,2, status,0, prodl, prodh
  8604 ;; Tracked objects:
  8605 ;;		On entry : 0/0
  8606 ;;		On exit  : 0/0
  8607 ;;		Unchanged: 0/0
  8608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8609 ;;      Params:         4       0       0       0       0       0       0
  8610 ;;      Locals:         2       0       0       0       0       0       0
  8611 ;;      Temps:          0       0       0       0       0       0       0
  8612 ;;      Totals:         6       0       0       0       0       0       0
  8613 ;;Total ram usage:        6 bytes
  8614 ;; Hardware stack levels used:    1
  8615 ;; Hardware stack levels required when called:    2
  8616 ;; This function calls:
  8617 ;;		Nothing
  8618 ;; This function is called by:
  8619 ;;		_eval_poly
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           	psect	text26
  8624  007C08                     __ptext26:
  8625                           	opt stack 0
  8626  007C08                     ___wmul:
  8627                           	opt stack 22
  8628                           
  8629                           ;incstack = 0
  8630  007C08  FFFF               	dw	65535
  8631  007C0A  5014               	movf	___wmul@multiplier,w,c
  8632  007C0C  0216               	mulwf	___wmul@multiplicand,c
  8633  007C0E  CFF3 F018          	movff	prodl,___wmul@product
  8634  007C12  CFF4 F019          	movff	prodh,___wmul@product+1
  8635  007C16  5014               	movf	___wmul@multiplier,w,c
  8636  007C18  0217               	mulwf	___wmul@multiplicand+1,c
  8637  007C1A  50F3               	movf	prodl,w,c
  8638  007C1C  2619               	addwf	___wmul@product+1,f,c
  8639  007C1E  5015               	movf	___wmul@multiplier+1,w,c
  8640  007C20  0216               	mulwf	___wmul@multiplicand,c
  8641  007C22  50F3               	movf	prodl,w,c
  8642  007C24  2619               	addwf	___wmul@product+1,f,c
  8643  007C26  C018  F014         	movff	___wmul@product,?___wmul
  8644  007C2A  C019  F015         	movff	___wmul@product+1,?___wmul+1
  8645  007C2E  0012               	return	
  8646  007C30  FFFF               	dw	65535	; errata NOP
  8647  007C32                     __end_of___wmul:
  8648                           	opt stack 0
  8649                           tblptru	equ	0xFF8
  8650                           tblptrh	equ	0xFF7
  8651                           tblptrl	equ	0xFF6
  8652                           tablat	equ	0xFF5
  8653                           prodh	equ	0xFF4
  8654                           prodl	equ	0xFF3
  8655                           postinc0	equ	0xFEE
  8656                           wreg	equ	0xFE8
  8657                           postdec1	equ	0xFE5
  8658                           fsr1h	equ	0xFE2
  8659                           fsr1l	equ	0xFE1
  8660                           indf2	equ	0xFDF
  8661                           postinc2	equ	0xFDE
  8662                           postdec2	equ	0xFDD
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function ___ftsub *****************
  8668 ;; Defined at:
  8669 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  f1              3   61[COMRAM] float 
  8672 ;;  f2              3   64[COMRAM] float 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;		None
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  3   61[COMRAM] float 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0, cstack
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8684 ;;      Params:         6       0       0       0       0       0       0
  8685 ;;      Locals:         0       0       0       0       0       0       0
  8686 ;;      Temps:          0       0       0       0       0       0       0
  8687 ;;      Totals:         6       0       0       0       0       0       0
  8688 ;;Total ram usage:        6 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    4
  8691 ;; This function calls:
  8692 ;;		___ftadd
  8693 ;; This function is called by:
  8694 ;;		_exp
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text27
  8699  003F64                     __ptext27:
  8700                           	opt stack 0
  8701  003F64                     ___ftsub:
  8702                           	opt stack 21
  8703                           
  8704                           ;incstack = 0
  8705  003F64  FFFF               	dw	65535
  8706  003F66  0E00               	movlw	0
  8707  003F68  1A41               	xorwf	___ftsub@f2,f,c
  8708  003F6A  0E00               	movlw	0
  8709  003F6C  1A42               	xorwf	___ftsub@f2+1,f,c
  8710  003F6E  0E80               	movlw	128
  8711  003F70  1A43               	xorwf	___ftsub@f2+2,f,c
  8712  003F72  C03E  F032         	movff	___ftsub@f1,___ftadd@f1
  8713  003F76  C03F  F033         	movff	___ftsub@f1+1,___ftadd@f1+1
  8714  003F7A  C040  F034         	movff	___ftsub@f1+2,___ftadd@f1+2
  8715  003F7E  C041  F035         	movff	___ftsub@f2,___ftadd@f2
  8716  003F82  C042  F036         	movff	___ftsub@f2+1,___ftadd@f2+1
  8717  003F86  C043  F037         	movff	___ftsub@f2+2,___ftadd@f2+2
  8718  003F8A  EC44  F00C         	call	___ftadd	;wreg free
  8719  003F8E  C032  F03E         	movff	?___ftadd,?___ftsub
  8720  003F92  C033  F03F         	movff	?___ftadd+1,?___ftsub+1
  8721  003F96  C034  F040         	movff	?___ftadd+2,?___ftsub+2
  8722  003F9A  0012               	return	
  8723  003F9C  FFFF               	dw	65535	; errata NOP
  8724  003F9E                     __end_of___ftsub:
  8725                           	opt stack 0
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           postinc0	equ	0xFEE
  8733                           wreg	equ	0xFE8
  8734                           postdec1	equ	0xFE5
  8735                           fsr1h	equ	0xFE2
  8736                           fsr1l	equ	0xFE1
  8737                           indf2	equ	0xFDF
  8738                           postinc2	equ	0xFDE
  8739                           postdec2	equ	0xFDD
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8
  8743                           
  8744 ;; *************** function ___ftdiv *****************
  8745 ;; Defined at:
  8746 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  f1              3   46[COMRAM] float 
  8749 ;;  f2              3   49[COMRAM] float 
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  f3              3   56[COMRAM] float 
  8752 ;;  sign            1   60[COMRAM] unsigned char 
  8753 ;;  exp             1   59[COMRAM] unsigned char 
  8754 ;;  cntr            1   55[COMRAM] unsigned char 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  3   46[COMRAM] float 
  8757 ;; Registers used:
  8758 ;;		wreg, status,2, status,0, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8764 ;;      Params:         6       0       0       0       0       0       0
  8765 ;;      Locals:         6       0       0       0       0       0       0
  8766 ;;      Temps:          3       0       0       0       0       0       0
  8767 ;;      Totals:        15       0       0       0       0       0       0
  8768 ;;Total ram usage:       15 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    3
  8771 ;; This function calls:
  8772 ;;		___ftpack
  8773 ;; This function is called by:
  8774 ;;		_get_current_readings
  8775 ;;		_exp
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           	psect	text28
  8780  002B82                     __ptext28:
  8781                           	opt stack 0
  8782  002B82                     ___ftdiv:
  8783                           	opt stack 22
  8784                           
  8785                           ;incstack = 0
  8786  002B82  FFFF               	dw	65535
  8787  002B84  C031  F035         	movff	___ftdiv@f1+2,??___ftdiv
  8788  002B88  6A36               	clrf	(??___ftdiv+1)& (0+255),c
  8789  002B8A  6A37               	clrf	(??___ftdiv+2)& (0+255),c
  8790  002B8C  3430               	rlcf	___ftdiv@f1+1,w,c
  8791  002B8E  3635               	rlcf	??___ftdiv& (0+255),f,c
  8792  002B90  E301               	bnc	u6361
  8793  002B92  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
  8794  002B94                     u6361:
  8795  002B94  5035               	movf	??___ftdiv,w,c
  8796  002B96  6E3C               	movwf	___ftdiv@exp,c
  8797  002B98  663C               	tstfsz	___ftdiv@exp& (0+255),c
  8798  002B9A  D001               	goto	l8565
  8799  002B9C  D00C               	goto	u6390
  8800  002B9E                     l8565:
  8801  002B9E  C034  F035         	movff	___ftdiv@f2+2,??___ftdiv
  8802  002BA2  6A36               	clrf	(??___ftdiv+1)& (0+255),c
  8803  002BA4  6A37               	clrf	(??___ftdiv+2)& (0+255),c
  8804  002BA6  3433               	rlcf	___ftdiv@f2+1,w,c
  8805  002BA8  3635               	rlcf	??___ftdiv& (0+255),f,c
  8806  002BAA  E301               	bnc	u6381
  8807  002BAC  8036               	bsf	(??___ftdiv+1)& (0+255),0,c
  8808  002BAE                     u6381:
  8809  002BAE  5035               	movf	??___ftdiv,w,c
  8810  002BB0  6E3D               	movwf	___ftdiv@sign,c
  8811  002BB2  663D               	tstfsz	___ftdiv@sign& (0+255),c
  8812  002BB4  D007               	goto	l8571
  8813  002BB6                     u6390:
  8814  002BB6  0E00               	movlw	0
  8815  002BB8  6E2F               	movwf	?___ftdiv,c
  8816  002BBA  0E00               	movlw	0
  8817  002BBC  6E30               	movwf	?___ftdiv+1,c
  8818  002BBE  0E00               	movlw	0
  8819  002BC0  6E31               	movwf	?___ftdiv+2,c
  8820  002BC2  D04A               	goto	l1667
  8821  002BC4                     l8571:
  8822  002BC4  0E00               	movlw	0
  8823  002BC6  6E39               	movwf	___ftdiv@f3,c
  8824  002BC8  0E00               	movlw	0
  8825  002BCA  6E3A               	movwf	___ftdiv@f3+1,c
  8826  002BCC  0E00               	movlw	0
  8827  002BCE  6E3B               	movwf	___ftdiv@f3+2,c
  8828  002BD0  503D               	movf	___ftdiv@sign,w,c
  8829  002BD2  0F89               	addlw	137
  8830  002BD4  5E3C               	subwf	___ftdiv@exp,f,c
  8831  002BD6  C031  F03D         	movff	___ftdiv@f1+2,___ftdiv@sign
  8832  002BDA  5034               	movf	___ftdiv@f2+2,w,c
  8833  002BDC  1A3D               	xorwf	___ftdiv@sign,f,c
  8834  002BDE  0E80               	movlw	128
  8835  002BE0  163D               	andwf	___ftdiv@sign,f,c
  8836  002BE2  8E30               	bsf	___ftdiv@f1+1,7,c
  8837  002BE4  0EFF               	movlw	255
  8838  002BE6  162F               	andwf	___ftdiv@f1,f,c
  8839  002BE8  0EFF               	movlw	255
  8840  002BEA  1630               	andwf	___ftdiv@f1+1,f,c
  8841  002BEC  0E00               	movlw	0
  8842  002BEE  1631               	andwf	___ftdiv@f1+2,f,c
  8843  002BF0  8E33               	bsf	___ftdiv@f2+1,7,c
  8844  002BF2  0EFF               	movlw	255
  8845  002BF4  1632               	andwf	___ftdiv@f2,f,c
  8846  002BF6  0EFF               	movlw	255
  8847  002BF8  1633               	andwf	___ftdiv@f2+1,f,c
  8848  002BFA  0E00               	movlw	0
  8849  002BFC  1634               	andwf	___ftdiv@f2+2,f,c
  8850  002BFE  0E18               	movlw	24
  8851  002C00  6E38               	movwf	___ftdiv@cntr,c
  8852  002C02                     l8591:
  8853  002C02  90D8               	bcf	status,0,c
  8854  002C04  3639               	rlcf	___ftdiv@f3,f,c
  8855  002C06  363A               	rlcf	___ftdiv@f3+1,f,c
  8856  002C08  363B               	rlcf	___ftdiv@f3+2,f,c
  8857  002C0A  5032               	movf	___ftdiv@f2,w,c
  8858  002C0C  5C2F               	subwf	___ftdiv@f1,w,c
  8859  002C0E  5033               	movf	___ftdiv@f2+1,w,c
  8860  002C10  5830               	subwfb	___ftdiv@f1+1,w,c
  8861  002C12  5034               	movf	___ftdiv@f2+2,w,c
  8862  002C14  5831               	subwfb	___ftdiv@f1+2,w,c
  8863  002C16  A0D8               	btfss	status,0,c
  8864  002C18  D007               	goto	l1670
  8865  002C1A  5032               	movf	___ftdiv@f2,w,c
  8866  002C1C  5E2F               	subwf	___ftdiv@f1,f,c
  8867  002C1E  5033               	movf	___ftdiv@f2+1,w,c
  8868  002C20  5A30               	subwfb	___ftdiv@f1+1,f,c
  8869  002C22  5034               	movf	___ftdiv@f2+2,w,c
  8870  002C24  5A31               	subwfb	___ftdiv@f1+2,f,c
  8871  002C26  8039               	bsf	___ftdiv@f3,0,c
  8872  002C28                     l1670:
  8873  002C28  90D8               	bcf	status,0,c
  8874  002C2A  362F               	rlcf	___ftdiv@f1,f,c
  8875  002C2C  3630               	rlcf	___ftdiv@f1+1,f,c
  8876  002C2E  3631               	rlcf	___ftdiv@f1+2,f,c
  8877  002C30  2E38               	decfsz	___ftdiv@cntr,f,c
  8878  002C32  D7E7               	goto	l8591
  8879  002C34  C039  F014         	movff	___ftdiv@f3,___ftpack@arg
  8880  002C38  C03A  F015         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8881  002C3C  C03B  F016         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8882  002C40  C03C  F017         	movff	___ftdiv@exp,___ftpack@exp
  8883  002C44  C03D  F018         	movff	___ftdiv@sign,___ftpack@sign
  8884  002C48  EC19  F018         	call	___ftpack	;wreg free
  8885  002C4C  C014  F02F         	movff	?___ftpack,?___ftdiv
  8886  002C50  C015  F030         	movff	?___ftpack+1,?___ftdiv+1
  8887  002C54  C016  F031         	movff	?___ftpack+2,?___ftdiv+2
  8888  002C58                     l1667:
  8889  002C58  0012               	return	
  8890  002C5A  FFFF               	dw	65535	; errata NOP
  8891  002C5C                     __end_of___ftdiv:
  8892                           	opt stack 0
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           postinc0	equ	0xFEE
  8900                           wreg	equ	0xFE8
  8901                           postdec1	equ	0xFE5
  8902                           fsr1h	equ	0xFE2
  8903                           fsr1l	equ	0xFE1
  8904                           indf2	equ	0xFDF
  8905                           postinc2	equ	0xFDE
  8906                           postdec2	equ	0xFDD
  8907                           fsr2h	equ	0xFDA
  8908                           fsr2l	equ	0xFD9
  8909                           status	equ	0xFD8
  8910                           
  8911 ;; *************** function ___awtoft *****************
  8912 ;; Defined at:
  8913 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;  c               2   27[COMRAM] int 
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  sign            1   30[COMRAM] unsigned char 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  3   27[COMRAM] float 
  8920 ;; Registers used:
  8921 ;;		wreg, status,2, status,0, prodl, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8927 ;;      Params:         3       0       0       0       0       0       0
  8928 ;;      Locals:         1       0       0       0       0       0       0
  8929 ;;      Temps:          0       0       0       0       0       0       0
  8930 ;;      Totals:         4       0       0       0       0       0       0
  8931 ;;Total ram usage:        4 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    3
  8934 ;; This function calls:
  8935 ;;		___ftpack
  8936 ;; This function is called by:
  8937 ;;		_exp
  8938 ;;		_log
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           	psect	text29
  8943  003E06                     __ptext29:
  8944                           	opt stack 0
  8945  003E06                     ___awtoft:
  8946                           	opt stack 22
  8947                           
  8948                           ;incstack = 0
  8949  003E06  FFFF               	dw	65535
  8950  003E08  0E00               	movlw	0
  8951  003E0A  6E1F               	movwf	___awtoft@sign,c
  8952  003E0C  501D               	movf	___awtoft@c+1,w,c
  8953  003E0E  0A80               	xorlw	128
  8954  003E10  6EF3               	movwf	prodl,c
  8955  003E12  0E80               	movlw	128
  8956  003E14  5CF3               	subwf	prodl,w,c
  8957  003E16  0E00               	movlw	0
  8958  003E18  B4D8               	btfsc	status,2,c
  8959  003E1A  5C1C               	subwf	___awtoft@c,w,c
  8960  003E1C  B0D8               	btfsc	status,0,c
  8961  003E1E  D006               	goto	l8619
  8962  003E20  6C1C               	negf	___awtoft@c,c
  8963  003E22  1E1D               	comf	___awtoft@c+1,f,c
  8964  003E24  B0D8               	btfsc	status,0,c
  8965  003E26  2A1D               	incf	___awtoft@c+1,f,c
  8966  003E28  0E01               	movlw	1
  8967  003E2A  6E1F               	movwf	___awtoft@sign,c
  8968  003E2C                     l8619:
  8969  003E2C  C01C  F014         	movff	___awtoft@c,___ftpack@arg
  8970  003E30  C01D  F015         	movff	___awtoft@c+1,___ftpack@arg+1
  8971  003E34  6A16               	clrf	___ftpack@arg+2,c
  8972  003E36  0E8E               	movlw	142
  8973  003E38  6E17               	movwf	___ftpack@exp,c
  8974  003E3A  C01F  F018         	movff	___awtoft@sign,___ftpack@sign
  8975  003E3E  EC19  F018         	call	___ftpack	;wreg free
  8976  003E42  C014  F01C         	movff	?___ftpack,?___awtoft
  8977  003E46  C015  F01D         	movff	?___ftpack+1,?___awtoft+1
  8978  003E4A  C016  F01E         	movff	?___ftpack+2,?___awtoft+2
  8979  003E4E  0012               	return	
  8980  003E50  FFFF               	dw	65535	; errata NOP
  8981  003E52                     __end_of___awtoft:
  8982                           	opt stack 0
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postdec1	equ	0xFE5
  8992                           fsr1h	equ	0xFE2
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function ___lltoft *****************
  9002 ;; Defined at:
  9003 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  c               4   27[COMRAM] unsigned long 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  exp             1   35[COMRAM] unsigned char 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  3   27[COMRAM] float 
  9010 ;; Registers used:
  9011 ;;		wreg, status,2, status,0, cstack
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9017 ;;      Params:         4       0       0       0       0       0       0
  9018 ;;      Locals:         1       0       0       0       0       0       0
  9019 ;;      Temps:          4       0       0       0       0       0       0
  9020 ;;      Totals:         9       0       0       0       0       0       0
  9021 ;;Total ram usage:        9 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:    3
  9024 ;; This function calls:
  9025 ;;		___ftpack
  9026 ;; This function is called by:
  9027 ;;		_pow
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text30
  9032  003C48                     __ptext30:
  9033                           	opt stack 0
  9034  003C48                     ___lltoft:
  9035                           	opt stack 23
  9036                           
  9037                           ;incstack = 0
  9038  003C48  FFFF               	dw	65535
  9039  003C4A  0E8E               	movlw	142
  9040  003C4C  6E24               	movwf	___lltoft@exp,c
  9041  003C4E  D006               	goto	l8813
  9042  003C50                     l8811:
  9043  003C50  90D8               	bcf	status,0,c
  9044  003C52  321F               	rrcf	___lltoft@c+3,f,c
  9045  003C54  321E               	rrcf	___lltoft@c+2,f,c
  9046  003C56  321D               	rrcf	___lltoft@c+1,f,c
  9047  003C58  321C               	rrcf	___lltoft@c,f,c
  9048  003C5A  2A24               	incf	___lltoft@exp,f,c
  9049  003C5C                     l8813:
  9050  003C5C  0E00               	movlw	0
  9051  003C5E  141C               	andwf	___lltoft@c,w,c
  9052  003C60  6E20               	movwf	??___lltoft& (0+255),c
  9053  003C62  0E00               	movlw	0
  9054  003C64  141D               	andwf	___lltoft@c+1,w,c
  9055  003C66  6E21               	movwf	(??___lltoft+1)& (0+255),c
  9056  003C68  0E00               	movlw	0
  9057  003C6A  141E               	andwf	___lltoft@c+2,w,c
  9058  003C6C  6E22               	movwf	(??___lltoft+2)& (0+255),c
  9059  003C6E  0EFF               	movlw	255
  9060  003C70  141F               	andwf	___lltoft@c+3,w,c
  9061  003C72  6E23               	movwf	(??___lltoft+3)& (0+255),c
  9062  003C74  5023               	movf	??___lltoft+3,w,c
  9063  003C76  1020               	iorwf	??___lltoft,w,c
  9064  003C78  1021               	iorwf	??___lltoft+1,w,c
  9065  003C7A  1022               	iorwf	??___lltoft+2,w,c
  9066  003C7C  A4D8               	btfss	status,2,c
  9067  003C7E  D7E8               	goto	l8811
  9068  003C80  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  9069  003C84  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  9070  003C88  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  9071  003C8C  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  9072  003C90  0E00               	movlw	0
  9073  003C92  6E18               	movwf	___ftpack@sign,c
  9074  003C94  EC19  F018         	call	___ftpack	;wreg free
  9075  003C98  C014  F01C         	movff	?___ftpack,?___lltoft
  9076  003C9C  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  9077  003CA0  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  9078  003CA4  0012               	return	
  9079  003CA6  FFFF               	dw	65535	; errata NOP
  9080  003CA8                     __end_of___lltoft:
  9081                           	opt stack 0
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           postinc0	equ	0xFEE
  9089                           wreg	equ	0xFE8
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _float_to_int *****************
  9101 ;; Defined at:
  9102 ;;		line 77 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\hsm20g.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  value           3   70[COMRAM] float 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;  integral        3   82[COMRAM] float 
  9107 ;;  fractional      3   79[COMRAM] float 
  9108 ;;  int_value       2   85[COMRAM] unsigned int 
  9109 ;;  points          1   78[COMRAM] unsigned char 
  9110 ;;  decimals        1   77[COMRAM] unsigned char 
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  2   70[COMRAM] int 
  9113 ;; Registers used:
  9114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9120 ;;      Params:         3       0       0       0       0       0       0
  9121 ;;      Locals:        10       0       0       0       0       0       0
  9122 ;;      Temps:          4       0       0       0       0       0       0
  9123 ;;      Totals:        17       0       0       0       0       0       0
  9124 ;;Total ram usage:       17 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    5
  9127 ;; This function calls:
  9128 ;;		___ftmul
  9129 ;;		___fttol
  9130 ;;		_modf
  9131 ;; This function is called by:
  9132 ;;		_get_current_readings
  9133 ;; This function uses a non-reentrant model
  9134 ;;
  9135                           
  9136                           	psect	text31
  9137  002D34                     __ptext31:
  9138                           	opt stack 0
  9139  002D34                     _float_to_int:
  9140                           	opt stack 23
  9141                           
  9142                           ;incstack = 0
  9143  002D34  FFFF               	dw	65535
  9144                           
  9145                           ;hsm20g.c: 79: unsigned char decimals, points;
  9146                           ;hsm20g.c: 80: unsigned int int_value;
  9147                           ;hsm20g.c: 81: double integral;
  9148                           ;hsm20g.c: 82: double fractional;
  9149                           ;hsm20g.c: 85: fractional = modf(value, &integral);
  9150  002D36  C047  F03E         	movff	float_to_int@value,modf@value
  9151  002D3A  C048  F03F         	movff	float_to_int@value+1,modf@value+1
  9152  002D3E  C049  F040         	movff	float_to_int@value+2,modf@value+2
  9153  002D42  0E00               	movlw	high float_to_int@integral
  9154  002D44  6E42               	movwf	modf@iptr+1,c
  9155  002D46  0E53               	movlw	low float_to_int@integral
  9156  002D48  6E41               	movwf	modf@iptr,c
  9157  002D4A  EC23  F01B         	call	_modf	;wreg free
  9158  002D4E  C03E  F050         	movff	?_modf,float_to_int@fractional
  9159  002D52  C03F  F051         	movff	?_modf+1,float_to_int@fractional+1
  9160  002D56  C040  F052         	movff	?_modf+2,float_to_int@fractional+2
  9161                           
  9162                           ;hsm20g.c: 86: fractional = fractional * 100;
  9163  002D5A  C050  F020         	movff	float_to_int@fractional,___ftmul@f1
  9164  002D5E  C051  F021         	movff	float_to_int@fractional+1,___ftmul@f1+1
  9165  002D62  C052  F022         	movff	float_to_int@fractional+2,___ftmul@f1+2
  9166  002D66  0E00               	movlw	0
  9167  002D68  6E23               	movwf	___ftmul@f2,c
  9168  002D6A  0EC8               	movlw	200
  9169  002D6C  6E24               	movwf	___ftmul@f2+1,c
  9170  002D6E  0E42               	movlw	66
  9171  002D70  6E25               	movwf	___ftmul@f2+2,c
  9172  002D72  EC69  F014         	call	___ftmul	;wreg free
  9173  002D76  C020  F050         	movff	?___ftmul,float_to_int@fractional
  9174  002D7A  C021  F051         	movff	?___ftmul+1,float_to_int@fractional+1
  9175  002D7E  C022  F052         	movff	?___ftmul+2,float_to_int@fractional+2
  9176                           
  9177                           ;hsm20g.c: 87: decimals = integral;
  9178  002D82  C053  F014         	movff	float_to_int@integral,___fttol@f1
  9179  002D86  C054  F015         	movff	float_to_int@integral+1,___fttol@f1+1
  9180  002D8A  C055  F016         	movff	float_to_int@integral+2,___fttol@f1+2
  9181  002D8E  EC2E  F016         	call	___fttol	;wreg free
  9182  002D92  C014  F04A         	movff	?___fttol,??_float_to_int
  9183  002D96  C015  F04B         	movff	?___fttol+1,??_float_to_int+1
  9184  002D9A  C016  F04C         	movff	?___fttol+2,??_float_to_int+2
  9185  002D9E  C017  F04D         	movff	?___fttol+3,??_float_to_int+3
  9186  002DA2  504A               	movf	??_float_to_int,w,c
  9187  002DA4  6E4E               	movwf	float_to_int@decimals,c
  9188                           
  9189                           ;hsm20g.c: 88: points = fractional;
  9190  002DA6  C050  F014         	movff	float_to_int@fractional,___fttol@f1
  9191  002DAA  C051  F015         	movff	float_to_int@fractional+1,___fttol@f1+1
  9192  002DAE  C052  F016         	movff	float_to_int@fractional+2,___fttol@f1+2
  9193  002DB2  EC2E  F016         	call	___fttol	;wreg free
  9194  002DB6  C014  F04A         	movff	?___fttol,??_float_to_int
  9195  002DBA  C015  F04B         	movff	?___fttol+1,??_float_to_int+1
  9196  002DBE  C016  F04C         	movff	?___fttol+2,??_float_to_int+2
  9197  002DC2  C017  F04D         	movff	?___fttol+3,??_float_to_int+3
  9198  002DC6  504A               	movf	??_float_to_int,w,c
  9199  002DC8  6E4F               	movwf	float_to_int@points,c
  9200                           
  9201                           ;hsm20g.c: 90: int_value = 0x0000;
  9202  002DCA  0E00               	movlw	0
  9203  002DCC  6E57               	movwf	float_to_int@int_value+1,c
  9204  002DCE  0E00               	movlw	0
  9205  002DD0  6E56               	movwf	float_to_int@int_value,c
  9206                           
  9207                           ;hsm20g.c: 91: int_value = int_value + decimals;
  9208  002DD2  504E               	movf	float_to_int@decimals,w,c
  9209  002DD4  2456               	addwf	float_to_int@int_value,w,c
  9210  002DD6  6E56               	movwf	float_to_int@int_value,c
  9211  002DD8  0E00               	movlw	0
  9212  002DDA  2057               	addwfc	float_to_int@int_value+1,w,c
  9213  002DDC  6E57               	movwf	float_to_int@int_value+1,c
  9214                           
  9215                           ;hsm20g.c: 92: int_value = int_value << 8;
  9216  002DDE  5056               	movf	float_to_int@int_value,w,c
  9217  002DE0  6E57               	movwf	float_to_int@int_value+1,c
  9218  002DE2  6A56               	clrf	float_to_int@int_value,c
  9219                           
  9220                           ;hsm20g.c: 93: int_value = int_value + points;
  9221  002DE4  504F               	movf	float_to_int@points,w,c
  9222  002DE6  2456               	addwf	float_to_int@int_value,w,c
  9223  002DE8  6E56               	movwf	float_to_int@int_value,c
  9224  002DEA  0E00               	movlw	0
  9225  002DEC  2057               	addwfc	float_to_int@int_value+1,w,c
  9226  002DEE  6E57               	movwf	float_to_int@int_value+1,c
  9227                           
  9228                           ;hsm20g.c: 95: return int_value;
  9229  002DF0  C056  F047         	movff	float_to_int@int_value,?_float_to_int
  9230  002DF4  C057  F048         	movff	float_to_int@int_value+1,?_float_to_int+1
  9231  002DF8  0012               	return	
  9232  002DFA  FFFF               	dw	65535	; errata NOP
  9233  002DFC                     __end_of_float_to_int:
  9234                           	opt stack 0
  9235                           tblptru	equ	0xFF8
  9236                           tblptrh	equ	0xFF7
  9237                           tblptrl	equ	0xFF6
  9238                           tablat	equ	0xFF5
  9239                           prodh	equ	0xFF4
  9240                           prodl	equ	0xFF3
  9241                           postinc0	equ	0xFEE
  9242                           wreg	equ	0xFE8
  9243                           postdec1	equ	0xFE5
  9244                           fsr1h	equ	0xFE2
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           fsr2h	equ	0xFDA
  9250                           fsr2l	equ	0xFD9
  9251                           status	equ	0xFD8
  9252                           
  9253 ;; *************** function _modf *****************
  9254 ;; Defined at:
  9255 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\modf.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  value           3   61[COMRAM] int 
  9258 ;;  iptr            2   64[COMRAM] PTR 
  9259 ;;		 -> float_to_int@integral(3), 
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  3   61[COMRAM] PTR 
  9264 ;; Registers used:
  9265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9271 ;;      Params:         5       0       0       0       0       0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0
  9273 ;;      Temps:          4       0       0       0       0       0       0
  9274 ;;      Totals:         9       0       0       0       0       0       0
  9275 ;;Total ram usage:        9 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    4
  9278 ;; This function calls:
  9279 ;;		___attoft
  9280 ;;		___ftadd
  9281 ;;		___ftneg
  9282 ;;		___fttol
  9283 ;; This function is called by:
  9284 ;;		_float_to_int
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text32
  9289  003646                     __ptext32:
  9290                           	opt stack 0
  9291  003646                     _modf:
  9292                           	opt stack 23
  9293                           
  9294                           ;incstack = 0
  9295  003646  FFFF               	dw	65535
  9296  003648  C03E  F014         	movff	modf@value,___fttol@f1
  9297  00364C  C03F  F015         	movff	modf@value+1,___fttol@f1+1
  9298  003650  C040  F016         	movff	modf@value+2,___fttol@f1+2
  9299  003654  EC2E  F016         	call	___fttol	;wreg free
  9300  003658  C014  F043         	movff	?___fttol,??_modf
  9301  00365C  C015  F044         	movff	?___fttol+1,??_modf+1
  9302  003660  C016  F045         	movff	?___fttol+2,??_modf+2
  9303  003664  C017  F046         	movff	?___fttol+3,??_modf+3
  9304  003668  C043  F023         	movff	??_modf,___attoft@c
  9305  00366C  C044  F024         	movff	??_modf+1,___attoft@c+1
  9306  003670  C045  F025         	movff	??_modf+2,___attoft@c+2
  9307  003674  ECAF  F01E         	call	___attoft	;wreg free
  9308  003678  C041  FFD9         	movff	modf@iptr,fsr2l
  9309  00367C  C042  FFDA         	movff	modf@iptr+1,fsr2h
  9310  003680  C023  FFDE         	movff	?___attoft,postinc2
  9311  003684  C024  FFDE         	movff	?___attoft+1,postinc2
  9312  003688  C025  FFDD         	movff	?___attoft+2,postdec2
  9313  00368C  52DD               	movf	postdec2,f,c
  9314  00368E  C041  FFD9         	movff	modf@iptr,fsr2l
  9315  003692  C042  FFDA         	movff	modf@iptr+1,fsr2h
  9316  003696  CFDE F02F          	movff	postinc2,___ftneg@f1
  9317  00369A  CFDE F030          	movff	postinc2,___ftneg@f1+1
  9318  00369E  CFDD F031          	movff	postdec2,___ftneg@f1+2
  9319  0036A2  ECEF  F03D         	call	___ftneg	;wreg free
  9320  0036A6  C02F  F032         	movff	?___ftneg,___ftadd@f1
  9321  0036AA  C030  F033         	movff	?___ftneg+1,___ftadd@f1+1
  9322  0036AE  C031  F034         	movff	?___ftneg+2,___ftadd@f1+2
  9323  0036B2  C03E  F035         	movff	modf@value,___ftadd@f2
  9324  0036B6  C03F  F036         	movff	modf@value+1,___ftadd@f2+1
  9325  0036BA  C040  F037         	movff	modf@value+2,___ftadd@f2+2
  9326  0036BE  EC44  F00C         	call	___ftadd	;wreg free
  9327  0036C2  C032  F03E         	movff	?___ftadd,?_modf
  9328  0036C6  C033  F03F         	movff	?___ftadd+1,?_modf+1
  9329  0036CA  C034  F040         	movff	?___ftadd+2,?_modf+2
  9330  0036CE  0012               	return	
  9331  0036D0  FFFF               	dw	65535	; errata NOP
  9332  0036D2                     __end_of_modf:
  9333                           	opt stack 0
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           postinc0	equ	0xFEE
  9341                           wreg	equ	0xFE8
  9342                           postdec1	equ	0xFE5
  9343                           fsr1h	equ	0xFE2
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           fsr2h	equ	0xFDA
  9349                           fsr2l	equ	0xFD9
  9350                           status	equ	0xFD8
  9351                           
  9352 ;; *************** function ___fttol *****************
  9353 ;; Defined at:
  9354 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  9355 ;; Parameters:    Size  Location     Type
  9356 ;;  f1              3   19[COMRAM] float 
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;  lval            4   29[COMRAM] unsigned long 
  9359 ;;  exp1            1   33[COMRAM] unsigned char 
  9360 ;;  sign1           1   28[COMRAM] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  4   19[COMRAM] long 
  9363 ;; Registers used:
  9364 ;;		wreg, status,2, status,0
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9370 ;;      Params:         4       0       0       0       0       0       0
  9371 ;;      Locals:         6       0       0       0       0       0       0
  9372 ;;      Temps:          5       0       0       0       0       0       0
  9373 ;;      Totals:        15       0       0       0       0       0       0
  9374 ;;Total ram usage:       15 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    2
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_float_to_int
  9381 ;;		_modf
  9382 ;;		_pow
  9383 ;;		_exp
  9384 ;;		_floor
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           	psect	text33
  9389  002C5C                     __ptext33:
  9390                           	opt stack 0
  9391  002C5C                     ___fttol:
  9392                           	opt stack 22
  9393                           
  9394                           ;incstack = 0
  9395  002C5C  FFFF               	dw	65535
  9396  002C5E  C016  F018         	movff	___fttol@f1+2,??___fttol
  9397  002C62  6A19               	clrf	(??___fttol+1)& (0+255),c
  9398  002C64  6A1A               	clrf	(??___fttol+2)& (0+255),c
  9399  002C66  3415               	rlcf	___fttol@f1+1,w,c
  9400  002C68  3618               	rlcf	??___fttol& (0+255),f,c
  9401  002C6A  E301               	bnc	u6221
  9402  002C6C  8019               	bsf	(??___fttol+1)& (0+255),0,c
  9403  002C6E                     u6221:
  9404  002C6E  5018               	movf	??___fttol,w,c
  9405  002C70  6E22               	movwf	___fttol@exp1,c
  9406  002C72  6622               	tstfsz	___fttol@exp1& (0+255),c
  9407  002C74  D001               	goto	l8459
  9408  002C76  D038               	goto	u6270
  9409  002C78                     l8459:
  9410  002C78  0E17               	movlw	23
  9411  002C7A  6E18               	movwf	??___fttol& (0+255),c
  9412  002C7C  C014  F019         	movff	___fttol@f1,??___fttol+1
  9413  002C80  C015  F01A         	movff	___fttol@f1+1,??___fttol+2
  9414  002C84  C016  F01B         	movff	___fttol@f1+2,??___fttol+3
  9415  002C88  2818               	incf	??___fttol,w,c
  9416  002C8A  6E1C               	movwf	(??___fttol+4)& (0+255),c
  9417  002C8C  D004               	goto	u6240
  9418  002C8E                     u6245:
  9419  002C8E  90D8               	bcf	status,0,c
  9420  002C90  321B               	rrcf	??___fttol+3,f,c
  9421  002C92  321A               	rrcf	??___fttol+2,f,c
  9422  002C94  3219               	rrcf	??___fttol+1,f,c
  9423  002C96                     u6240:
  9424  002C96  2E1C               	decfsz	(??___fttol+4)& (0+255),f,c
  9425  002C98  D7FA               	goto	u6245
  9426  002C9A  5019               	movf	??___fttol+1,w,c
  9427  002C9C  6E1D               	movwf	___fttol@sign1,c
  9428  002C9E  8E15               	bsf	___fttol@f1+1,7,c
  9429  002CA0  0EFF               	movlw	255
  9430  002CA2  1614               	andwf	___fttol@f1,f,c
  9431  002CA4  0EFF               	movlw	255
  9432  002CA6  1615               	andwf	___fttol@f1+1,f,c
  9433  002CA8  0E00               	movlw	0
  9434  002CAA  1616               	andwf	___fttol@f1+2,f,c
  9435  002CAC  5014               	movf	___fttol@f1,w,c
  9436  002CAE  6E1E               	movwf	___fttol@lval,c
  9437  002CB0  5015               	movf	___fttol@f1+1,w,c
  9438  002CB2  6E1F               	movwf	___fttol@lval+1,c
  9439  002CB4  5016               	movf	___fttol@f1+2,w,c
  9440  002CB6  6E20               	movwf	___fttol@lval+2,c
  9441  002CB8  6A21               	clrf	___fttol@lval+3,c
  9442  002CBA  0E8E               	movlw	142
  9443  002CBC  5E22               	subwf	___fttol@exp1,f,c
  9444  002CBE  AE22               	btfss	___fttol@exp1,7,c
  9445  002CC0  D010               	goto	l8481
  9446  002CC2  5022               	movf	___fttol@exp1,w,c
  9447  002CC4  0A80               	xorlw	128
  9448  002CC6  6E18               	movwf	??___fttol& (0+255),c
  9449  002CC8  0EF1               	movlw	241
  9450  002CCA  0A80               	xorlw	128
  9451  002CCC  5C18               	subwf	??___fttol,w,c
  9452  002CCE  A0D8               	btfss	status,0,c
  9453  002CD0  D00B               	goto	u6270
  9454  002CD2                     l8477:
  9455  002CD2  90D8               	bcf	status,0,c
  9456  002CD4  3221               	rrcf	___fttol@lval+3,f,c
  9457  002CD6  3220               	rrcf	___fttol@lval+2,f,c
  9458  002CD8  321F               	rrcf	___fttol@lval+1,f,c
  9459  002CDA  321E               	rrcf	___fttol@lval,f,c
  9460  002CDC  3E22               	incfsz	___fttol@exp1,f,c
  9461  002CDE  D7F9               	goto	l8477
  9462  002CE0  D014               	goto	l8491
  9463  002CE2                     l8481:
  9464  002CE2  0E17               	movlw	23
  9465  002CE4  6422               	cpfsgt	___fttol@exp1,c
  9466  002CE6  D00F               	goto	l8489
  9467  002CE8                     u6270:
  9468  002CE8  0E00               	movlw	0
  9469  002CEA  6E14               	movwf	?___fttol,c
  9470  002CEC  0E00               	movlw	0
  9471  002CEE  6E15               	movwf	?___fttol+1,c
  9472  002CF0  0E00               	movlw	0
  9473  002CF2  6E16               	movwf	?___fttol+2,c
  9474  002CF4  0E00               	movlw	0
  9475  002CF6  6E17               	movwf	?___fttol+3,c
  9476  002CF8  D01B               	goto	l1702
  9477  002CFA                     l8487:
  9478  002CFA  90D8               	bcf	status,0,c
  9479  002CFC  361E               	rlcf	___fttol@lval,f,c
  9480  002CFE  361F               	rlcf	___fttol@lval+1,f,c
  9481  002D00  3620               	rlcf	___fttol@lval+2,f,c
  9482  002D02  3621               	rlcf	___fttol@lval+3,f,c
  9483  002D04  0622               	decf	___fttol@exp1,f,c
  9484  002D06                     l8489:
  9485  002D06  6622               	tstfsz	___fttol@exp1,c
  9486  002D08  D7F8               	goto	l8487
  9487  002D0A                     l8491:
  9488  002D0A  501D               	movf	___fttol@sign1,w,c
  9489  002D0C  B4D8               	btfsc	status,2,c
  9490  002D0E  D008               	goto	l8495
  9491  002D10  1E21               	comf	___fttol@lval+3,f,c
  9492  002D12  1E20               	comf	___fttol@lval+2,f,c
  9493  002D14  1E1F               	comf	___fttol@lval+1,f,c
  9494  002D16  6C1E               	negf	___fttol@lval,c
  9495  002D18  0E00               	movlw	0
  9496  002D1A  221F               	addwfc	___fttol@lval+1,f,c
  9497  002D1C  2220               	addwfc	___fttol@lval+2,f,c
  9498  002D1E  2221               	addwfc	___fttol@lval+3,f,c
  9499  002D20                     l8495:
  9500  002D20  C01E  F014         	movff	___fttol@lval,?___fttol
  9501  002D24  C01F  F015         	movff	___fttol@lval+1,?___fttol+1
  9502  002D28  C020  F016         	movff	___fttol@lval+2,?___fttol+2
  9503  002D2C  C021  F017         	movff	___fttol@lval+3,?___fttol+3
  9504  002D30                     l1702:
  9505  002D30  0012               	return	
  9506  002D32  FFFF               	dw	65535	; errata NOP
  9507  002D34                     __end_of___fttol:
  9508                           	opt stack 0
  9509                           tblptru	equ	0xFF8
  9510                           tblptrh	equ	0xFF7
  9511                           tblptrl	equ	0xFF6
  9512                           tablat	equ	0xFF5
  9513                           prodh	equ	0xFF4
  9514                           prodl	equ	0xFF3
  9515                           postinc0	equ	0xFEE
  9516                           wreg	equ	0xFE8
  9517                           postdec1	equ	0xFE5
  9518                           fsr1h	equ	0xFE2
  9519                           fsr1l	equ	0xFE1
  9520                           indf2	equ	0xFDF
  9521                           postinc2	equ	0xFDE
  9522                           postdec2	equ	0xFDD
  9523                           fsr2h	equ	0xFDA
  9524                           fsr2l	equ	0xFD9
  9525                           status	equ	0xFD8
  9526                           
  9527 ;; *************** function ___ftneg *****************
  9528 ;; Defined at:
  9529 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  f1              3   46[COMRAM] float 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  3   46[COMRAM] float 
  9536 ;; Registers used:
  9537 ;;		wreg, status,2, status,0
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9543 ;;      Params:         3       0       0       0       0       0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0
  9546 ;;      Totals:         3       0       0       0       0       0       0
  9547 ;;Total ram usage:        3 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    2
  9550 ;; This function calls:
  9551 ;;		Nothing
  9552 ;; This function is called by:
  9553 ;;		_voltage_to_temp
  9554 ;;		_voltage_to_hum
  9555 ;;		_modf
  9556 ;;		_pow
  9557 ;;		_exp
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text34
  9562  007BDE                     __ptext34:
  9563                           	opt stack 0
  9564  007BDE                     ___ftneg:
  9565                           	opt stack 23
  9566                           
  9567                           ;incstack = 0
  9568  007BDE  FFFF               	dw	65535
  9569  007BE0  0E7F               	movlw	127
  9570  007BE2  1431               	andwf	___ftneg@f1+2,w,c
  9571  007BE4  1030               	iorwf	___ftneg@f1+1,w,c
  9572  007BE6  102F               	iorwf	___ftneg@f1,w,c
  9573  007BE8  B4D8               	btfsc	status,2,c
  9574  007BEA  D006               	goto	l1692
  9575  007BEC  0E00               	movlw	0
  9576  007BEE  1A2F               	xorwf	___ftneg@f1,f,c
  9577  007BF0  0E00               	movlw	0
  9578  007BF2  1A30               	xorwf	___ftneg@f1+1,f,c
  9579  007BF4  0E80               	movlw	128
  9580  007BF6  1A31               	xorwf	___ftneg@f1+2,f,c
  9581  007BF8                     l1692:
  9582  007BF8  C02F  F02F         	movff	___ftneg@f1,?___ftneg
  9583  007BFC  C030  F030         	movff	___ftneg@f1+1,?___ftneg+1
  9584  007C00  C031  F031         	movff	___ftneg@f1+2,?___ftneg+2
  9585  007C04  0012               	return	
  9586  007C06  FFFF               	dw	65535	; errata NOP
  9587  007C08                     __end_of___ftneg:
  9588                           	opt stack 0
  9589                           tblptru	equ	0xFF8
  9590                           tblptrh	equ	0xFF7
  9591                           tblptrl	equ	0xFF6
  9592                           tablat	equ	0xFF5
  9593                           prodh	equ	0xFF4
  9594                           prodl	equ	0xFF3
  9595                           postinc0	equ	0xFEE
  9596                           wreg	equ	0xFE8
  9597                           postdec1	equ	0xFE5
  9598                           fsr1h	equ	0xFE2
  9599                           fsr1l	equ	0xFE1
  9600                           indf2	equ	0xFDF
  9601                           postinc2	equ	0xFDE
  9602                           postdec2	equ	0xFDD
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function ___attoft *****************
  9608 ;; Defined at:
  9609 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\attoft.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  c               3   34[COMRAM] m
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;  sign            1   37[COMRAM] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  3   34[COMRAM] float 
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         3       0       0       0       0       0       0
  9624 ;;      Locals:         1       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0
  9626 ;;      Totals:         4       0       0       0       0       0       0
  9627 ;;Total ram usage:        4 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    3
  9630 ;; This function calls:
  9631 ;;		___ftpack
  9632 ;; This function is called by:
  9633 ;;		_modf
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text35
  9638  003D5E                     __ptext35:
  9639                           	opt stack 0
  9640  003D5E                     ___attoft:
  9641                           	opt stack 23
  9642                           
  9643                           ;incstack = 0
  9644  003D5E  FFFF               	dw	65535
  9645  003D60  0E00               	movlw	0
  9646  003D62  6E26               	movwf	___attoft@sign,c
  9647  003D64  5025               	movf	___attoft@c+2,w,c
  9648  003D66  0A80               	xorlw	128
  9649  003D68  0F80               	addlw	128
  9650  003D6A  E105               	bnz	u6725
  9651  003D6C  0E00               	movlw	0
  9652  003D6E  5C24               	subwf	___attoft@c+1,w,c
  9653  003D70  E102               	bnz	u6725
  9654  003D72  0E00               	movlw	0
  9655  003D74  5C23               	subwf	___attoft@c,w,c
  9656  003D76                     u6725:
  9657  003D76  B0D8               	btfsc	status,0,c
  9658  003D78  D008               	goto	l8805
  9659  003D7A  1E25               	comf	___attoft@c+2,f,c
  9660  003D7C  1E24               	comf	___attoft@c+1,f,c
  9661  003D7E  6C23               	negf	___attoft@c,c
  9662  003D80  0E00               	movlw	0
  9663  003D82  2224               	addwfc	___attoft@c+1,f,c
  9664  003D84  2225               	addwfc	___attoft@c+2,f,c
  9665  003D86  0E01               	movlw	1
  9666  003D88  6E26               	movwf	___attoft@sign,c
  9667  003D8A                     l8805:
  9668  003D8A  C023  F014         	movff	___attoft@c,___ftpack@arg
  9669  003D8E  C024  F015         	movff	___attoft@c+1,___ftpack@arg+1
  9670  003D92  C025  F016         	movff	___attoft@c+2,___ftpack@arg+2
  9671  003D96  0E8E               	movlw	142
  9672  003D98  6E17               	movwf	___ftpack@exp,c
  9673  003D9A  C026  F018         	movff	___attoft@sign,___ftpack@sign
  9674  003D9E  EC19  F018         	call	___ftpack	;wreg free
  9675  003DA2  C014  F023         	movff	?___ftpack,?___attoft
  9676  003DA6  C015  F024         	movff	?___ftpack+1,?___attoft+1
  9677  003DAA  C016  F025         	movff	?___ftpack+2,?___attoft+2
  9678  003DAE  0012               	return	
  9679  003DB0  FFFF               	dw	65535	; errata NOP
  9680  003DB2                     __end_of___attoft:
  9681                           	opt stack 0
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodh	equ	0xFF4
  9687                           prodl	equ	0xFF3
  9688                           postinc0	equ	0xFEE
  9689                           wreg	equ	0xFE8
  9690                           postdec1	equ	0xFE5
  9691                           fsr1h	equ	0xFE2
  9692                           fsr1l	equ	0xFE1
  9693                           indf2	equ	0xFDF
  9694                           postinc2	equ	0xFDE
  9695                           postdec2	equ	0xFDD
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function ___lwtoft *****************
  9701 ;; Defined at:
  9702 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  c               2   27[COMRAM] unsigned int 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;		None
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  3   27[COMRAM] float 
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, status,0, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9716 ;;      Params:         3       0       0       0       0       0       0
  9717 ;;      Locals:         0       0       0       0       0       0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0
  9719 ;;      Totals:         3       0       0       0       0       0       0
  9720 ;;Total ram usage:        3 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    3
  9723 ;; This function calls:
  9724 ;;		___ftpack
  9725 ;; This function is called by:
  9726 ;;		_get_current_readings
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           	psect	text36
  9731  007BB6                     __ptext36:
  9732                           	opt stack 0
  9733  007BB6                     ___lwtoft:
  9734                           	opt stack 25
  9735                           
  9736                           ;incstack = 0
  9737  007BB6  FFFF               	dw	65535
  9738  007BB8  C01C  F014         	movff	___lwtoft@c,___ftpack@arg
  9739  007BBC  C01D  F015         	movff	___lwtoft@c+1,___ftpack@arg+1
  9740  007BC0  6A16               	clrf	___ftpack@arg+2,c
  9741  007BC2  0E8E               	movlw	142
  9742  007BC4  6E17               	movwf	___ftpack@exp,c
  9743  007BC6  0E00               	movlw	0
  9744  007BC8  6E18               	movwf	___ftpack@sign,c
  9745  007BCA  EC19  F018         	call	___ftpack	;wreg free
  9746  007BCE  C014  F01C         	movff	?___ftpack,?___lwtoft
  9747  007BD2  C015  F01D         	movff	?___ftpack+1,?___lwtoft+1
  9748  007BD6  C016  F01E         	movff	?___ftpack+2,?___lwtoft+2
  9749  007BDA  0012               	return	
  9750  007BDC  FFFF               	dw	65535	; errata NOP
  9751  007BDE                     __end_of___lwtoft:
  9752                           	opt stack 0
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           postinc0	equ	0xFEE
  9760                           wreg	equ	0xFE8
  9761                           postdec1	equ	0xFE5
  9762                           fsr1h	equ	0xFE2
  9763                           fsr1l	equ	0xFE1
  9764                           indf2	equ	0xFDF
  9765                           postinc2	equ	0xFDE
  9766                           postdec2	equ	0xFDD
  9767                           fsr2h	equ	0xFDA
  9768                           fsr2l	equ	0xFD9
  9769                           status	equ	0xFD8
  9770                           
  9771 ;; *************** function _SetChanADC *****************
  9772 ;; Defined at:
  9773 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcsetch.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  channel         1    wreg     unsigned char 
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  channel         1   20[COMRAM] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;		None               void
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9787 ;;      Params:         0       0       0       0       0       0       0
  9788 ;;      Locals:         1       0       0       0       0       0       0
  9789 ;;      Temps:          1       0       0       0       0       0       0
  9790 ;;      Totals:         2       0       0       0       0       0       0
  9791 ;;Total ram usage:        2 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    2
  9794 ;; This function calls:
  9795 ;;		Nothing
  9796 ;; This function is called by:
  9797 ;;		_get_current_readings
  9798 ;; This function uses a non-reentrant model
  9799 ;;
  9800                           
  9801                           	psect	text37
  9802  007AC2                     __ptext37:
  9803                           	opt stack 0
  9804  007AC2                     _SetChanADC:
  9805                           	opt stack 26
  9806                           
  9807                           ;incstack = 0
  9808  007AC2  FFFF               	dw	65535
  9809                           
  9810                           ;SetChanADC@channel stored from wreg
  9811  007AC4  6E15               	movwf	SetChanADC@channel,c
  9812  007AC6  CFC2 F014          	movff	4034,??_SetChanADC	;volatile
  9813  007ACA  0EC7               	movlw	199
  9814  007ACC  1614               	andwf	??_SetChanADC,f,c
  9815  007ACE  5015               	movf	SetChanADC@channel,w,c
  9816  007AD0  0B38               	andlw	56
  9817  007AD2  1014               	iorwf	??_SetChanADC,w,c
  9818  007AD4  6EC2               	movwf	4034,c	;volatile
  9819  007AD6  0012               	return	
  9820  007AD8  FFFF               	dw	65535	; errata NOP
  9821  007ADA                     __end_of_SetChanADC:
  9822                           	opt stack 0
  9823                           tblptru	equ	0xFF8
  9824                           tblptrh	equ	0xFF7
  9825                           tblptrl	equ	0xFF6
  9826                           tablat	equ	0xFF5
  9827                           prodh	equ	0xFF4
  9828                           prodl	equ	0xFF3
  9829                           postinc0	equ	0xFEE
  9830                           wreg	equ	0xFE8
  9831                           postdec1	equ	0xFE5
  9832                           fsr1h	equ	0xFE2
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function _ReadADC *****************
  9842 ;; Defined at:
  9843 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcread.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  2   19[COMRAM] int 
  9850 ;; Registers used:
  9851 ;;		wreg, status,2
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9857 ;;      Params:         2       0       0       0       0       0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0
  9860 ;;      Totals:         2       0       0       0       0       0       0
  9861 ;;Total ram usage:        2 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    2
  9864 ;; This function calls:
  9865 ;;		Nothing
  9866 ;; This function is called by:
  9867 ;;		_get_current_readings
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text38
  9872  007A3C                     __ptext38:
  9873                           	opt stack 0
  9874  007A3C                     _ReadADC:
  9875                           	opt stack 26
  9876                           
  9877                           ;incstack = 0
  9878  007A3C  FFFF               	dw	65535
  9879  007A3E  50C4               	movf	4036,w,c	;volatile
  9880  007A40  6E15               	movwf	?_ReadADC+1,c
  9881  007A42  50C3               	movf	4035,w,c	;volatile
  9882  007A44  6E14               	movwf	?_ReadADC,c
  9883  007A46  0012               	return	
  9884  007A48  FFFF               	dw	65535	; errata NOP
  9885  007A4A                     __end_of_ReadADC:
  9886                           	opt stack 0
  9887                           tblptru	equ	0xFF8
  9888                           tblptrh	equ	0xFF7
  9889                           tblptrl	equ	0xFF6
  9890                           tablat	equ	0xFF5
  9891                           prodh	equ	0xFF4
  9892                           prodl	equ	0xFF3
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           postdec1	equ	0xFE5
  9896                           fsr1h	equ	0xFE2
  9897                           fsr1l	equ	0xFE1
  9898                           indf2	equ	0xFDF
  9899                           postinc2	equ	0xFDE
  9900                           postdec2	equ	0xFDD
  9901                           fsr2h	equ	0xFDA
  9902                           fsr2l	equ	0xFD9
  9903                           status	equ	0xFD8
  9904                           
  9905 ;; *************** function _OpenADC *****************
  9906 ;; Defined at:
  9907 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcopen.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  config          1    wreg     unsigned char 
  9910 ;;  config2         1   19[COMRAM] unsigned char 
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;  config          1   21[COMRAM] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9922 ;;      Params:         1       0       0       0       0       0       0
  9923 ;;      Locals:         1       0       0       0       0       0       0
  9924 ;;      Temps:          1       0       0       0       0       0       0
  9925 ;;      Totals:         3       0       0       0       0       0       0
  9926 ;;Total ram usage:        3 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    2
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_get_current_readings
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text39
  9937  007C8E                     __ptext39:
  9938                           	opt stack 0
  9939  007C8E                     _OpenADC:
  9940                           	opt stack 26
  9941                           
  9942                           ;incstack = 0
  9943  007C8E  FFFF               	dw	65535
  9944                           
  9945                           ;OpenADC@config stored from wreg
  9946  007C90  6E16               	movwf	OpenADC@config,c
  9947  007C92  0E00               	movlw	0
  9948  007C94  6EC2               	movwf	4034,c	;volatile
  9949  007C96  C016  FFC1         	movff	OpenADC@config,4033	;volatile
  9950  007C9A  C014  F015         	movff	OpenADC@config2,??_OpenADC
  9951  007C9E  0E38               	movlw	56
  9952  007CA0  1615               	andwf	??_OpenADC,f,c
  9953  007CA2  4416               	rlncf	OpenADC@config,w,c
  9954  007CA4  46E8               	rlncf	wreg,f,c
  9955  007CA6  0BFC               	andlw	252
  9956  007CA8  0BC0               	andlw	192
  9957  007CAA  1015               	iorwf	??_OpenADC,w,c
  9958  007CAC  6EC2               	movwf	4034,c	;volatile
  9959  007CAE  AE14               	btfss	OpenADC@config2,7,c
  9960  007CB0  D003               	goto	l1177
  9961  007CB2  9C9E               	bcf	3998,6,c	;volatile
  9962  007CB4  8C9D               	bsf	3997,6,c	;volatile
  9963  007CB6  8CF2               	bsf	intcon,6,c	;volatile
  9964  007CB8                     l1177:
  9965  007CB8  80C2               	bsf	4034,0,c	;volatile
  9966  007CBA  0012               	return	
  9967  007CBC  FFFF               	dw	65535	; errata NOP
  9968  007CBE                     __end_of_OpenADC:
  9969                           	opt stack 0
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           postinc0	equ	0xFEE
  9978                           wreg	equ	0xFE8
  9979                           postdec1	equ	0xFE5
  9980                           fsr1h	equ	0xFE2
  9981                           fsr1l	equ	0xFE1
  9982                           indf2	equ	0xFDF
  9983                           postinc2	equ	0xFDE
  9984                           postdec2	equ	0xFDD
  9985                           fsr2h	equ	0xFDA
  9986                           fsr2l	equ	0xFD9
  9987                           status	equ	0xFD8
  9988                           
  9989 ;; *************** function _ConvertADC *****************
  9990 ;; Defined at:
  9991 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcconv.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;		None               void
  9998 ;; Registers used:
  9999 ;;		None
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10005 ;;      Params:         0       0       0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0
 10008 ;;      Totals:         0       0       0       0       0       0       0
 10009 ;;Total ram usage:        0 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    2
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_get_current_readings
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           	psect	text40
 10020  007A22                     __ptext40:
 10021                           	opt stack 0
 10022  007A22                     _ConvertADC:
 10023                           	opt stack 26
 10024                           
 10025                           ;incstack = 0
 10026  007A22  FFFF               	dw	65535
 10027  007A24  84C2               	bsf	4034,2,c	;volatile
 10028  007A26  0012               	return	
 10029  007A28  FFFF               	dw	65535	; errata NOP
 10030  007A2A                     __end_of_ConvertADC:
 10031                           	opt stack 0
 10032                           tblptru	equ	0xFF8
 10033                           tblptrh	equ	0xFF7
 10034                           tblptrl	equ	0xFF6
 10035                           tablat	equ	0xFF5
 10036                           prodh	equ	0xFF4
 10037                           prodl	equ	0xFF3
 10038                           intcon	equ	0xFF2
 10039                           postinc0	equ	0xFEE
 10040                           wreg	equ	0xFE8
 10041                           postdec1	equ	0xFE5
 10042                           fsr1h	equ	0xFE2
 10043                           fsr1l	equ	0xFE1
 10044                           indf2	equ	0xFDF
 10045                           postinc2	equ	0xFDE
 10046                           postdec2	equ	0xFDD
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function _CloseADC *****************
 10052 ;; Defined at:
 10053 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcclose.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;		None               void
 10060 ;; Registers used:
 10061 ;;		None
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10067 ;;      Params:         0       0       0       0       0       0       0
 10068 ;;      Locals:         0       0       0       0       0       0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0
 10070 ;;      Totals:         0       0       0       0       0       0       0
 10071 ;;Total ram usage:        0 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    2
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_get_current_readings
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text41
 10082  007A32                     __ptext41:
 10083                           	opt stack 0
 10084  007A32                     _CloseADC:
 10085                           	opt stack 26
 10086                           
 10087                           ;incstack = 0
 10088  007A32  FFFF               	dw	65535
 10089  007A34  90C2               	bcf	4034,0,c	;volatile
 10090  007A36  9C9D               	bcf	3997,6,c	;volatile
 10091  007A38  0012               	return	
 10092  007A3A  FFFF               	dw	65535	; errata NOP
 10093  007A3C                     __end_of_CloseADC:
 10094                           	opt stack 0
 10095                           tblptru	equ	0xFF8
 10096                           tblptrh	equ	0xFF7
 10097                           tblptrl	equ	0xFF6
 10098                           tablat	equ	0xFF5
 10099                           prodh	equ	0xFF4
 10100                           prodl	equ	0xFF3
 10101                           intcon	equ	0xFF2
 10102                           postinc0	equ	0xFEE
 10103                           wreg	equ	0xFE8
 10104                           postdec1	equ	0xFE5
 10105                           fsr1h	equ	0xFE2
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _BusyADC *****************
 10115 ;; Defined at:
 10116 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\ADC\adcbusy.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      unsigned char 
 10123 ;; Registers used:
 10124 ;;		wreg
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10130 ;;      Params:         0       0       0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0
 10133 ;;      Totals:         0       0       0       0       0       0       0
 10134 ;;Total ram usage:        0 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    2
 10137 ;; This function calls:
 10138 ;;		Nothing
 10139 ;; This function is called by:
 10140 ;;		_get_current_readings
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text42
 10145  007A5A                     __ptext42:
 10146                           	opt stack 0
 10147  007A5A                     _BusyADC:
 10148                           	opt stack 26
 10149                           
 10150                           ;incstack = 0
 10151  007A5A  FFFF               	dw	65535
 10152  007A5C  A4C2               	btfss	4034,2,c	;volatile
 10153  007A5E  D002               	goto	u7420
 10154  007A60  0E01               	movlw	1
 10155  007A62  D001               	goto	l1150
 10156  007A64                     u7420:
 10157  007A64  0E00               	movlw	0
 10158  007A66                     l1150:
 10159  007A66  0012               	return	
 10160  007A68  FFFF               	dw	65535	; errata NOP
 10161  007A6A                     __end_of_BusyADC:
 10162                           	opt stack 0
 10163                           tblptru	equ	0xFF8
 10164                           tblptrh	equ	0xFF7
 10165                           tblptrl	equ	0xFF6
 10166                           tablat	equ	0xFF5
 10167                           prodh	equ	0xFF4
 10168                           prodl	equ	0xFF3
 10169                           intcon	equ	0xFF2
 10170                           postinc0	equ	0xFEE
 10171                           wreg	equ	0xFE8
 10172                           postdec1	equ	0xFE5
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           fsr2h	equ	0xFDA
 10179                           fsr2l	equ	0xFD9
 10180                           status	equ	0xFD8
 10181                           
 10182 ;; *************** function _DisplayReadings *****************
 10183 ;; Defined at:
 10184 ;;		line 531 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;		None
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  dec             1   48[COMRAM] unsigned char 
 10189 ;;  fract           1   47[COMRAM] unsigned char 
 10190 ;; Return value:  Size  Location     Type
 10191 ;;		None               void
 10192 ;; Registers used:
 10193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10199 ;;      Params:         0       0       0       0       0       0       0
 10200 ;;      Locals:         4       0       0       0       0       0       0
 10201 ;;      Temps:          3       0       0       0       0       0       0
 10202 ;;      Totals:         7       0       0       0       0       0       0
 10203 ;;Total ram usage:        7 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; Hardware stack levels required when called:    5
 10206 ;; This function calls:
 10207 ;;		_LCDByte
 10208 ;;		_LCDGotoXY
 10209 ;;		_LCDWriteInt
 10210 ;;		_LCDWriteString
 10211 ;; This function is called by:
 10212 ;;		_per_minute_reading
 10213 ;;		_per_second_reading
 10214 ;;		_local_display
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text43
 10219  001D70                     __ptext43:
 10220                           	opt stack 0
 10221  001D70                     _DisplayReadings:
 10222                           	opt stack 24
 10223                           
 10224                           ;incstack = 0
 10225  001D70  FFFF               	dw	65535
 10226                           
 10227                           ;Test1.c: 533: unsigned char dec, fract;
 10228                           ;Test1.c: 534: (LCDByte(0b00000001,0));
 10229  001D72  0E00               	movlw	0
 10230  001D74  6E17               	movwf	LCDByte@isdata,c
 10231  001D76  0E01               	movlw	1
 10232  001D78  EC54  F01E         	call	_LCDByte
 10233                           
 10234                           ;Test1.c: 535: LCDWriteString("T1=");
 10235  001D7C  0E7F               	movlw	high STR_71
 10236  001D7E  6E1E               	movwf	LCDWriteString@msg+1,c
 10237  001D80  0EEE               	movlw	low STR_71
 10238  001D82  6E1D               	movwf	LCDWriteString@msg,c
 10239  001D84  EC15  F019         	call	_LCDWriteString	;wreg free
 10240                           
 10241                           ;Test1.c: 536: dec = Temp1 >> 8;
 10242  001D88  0100               	movlb	0	; () banked
 10243  001D8A  C0F0  F02B         	movff	_Temp1+1,??_DisplayReadings
 10244  001D8E  C02B  F02C         	movff	??_DisplayReadings,??_DisplayReadings+1
 10245  001D92  6A2D               	clrf	(??_DisplayReadings+2)& (0+255),c
 10246  001D94  502C               	movf	??_DisplayReadings+1,w,c
 10247  001D96  6E31               	movwf	DisplayReadings@dec,c
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;Test1.c: 537: fract = Temp1 && 0x00FF;
 10251  001D98  0E00               	movlw	0
 10252  001D9A  6E2E               	movwf	_DisplayReadings$1261,c
 10253                           
 10254                           ; BSR set to: 0
 10255  001D9C  0100               	movlb	0	; () banked
 10256  001D9E  51F0               	movf	(_Temp1+1)& (0+255),w,b
 10257  001DA0  11EF               	iorwf	_Temp1& (0+255),w,b
 10258  001DA2  B4D8               	btfsc	status,2,c
 10259  001DA4  D002               	goto	l10127
 10260                           
 10261                           ; BSR set to: 0
 10262  001DA6  0E01               	movlw	1
 10263  001DA8  6E2E               	movwf	_DisplayReadings$1261,c
 10264  001DAA                     l10127:
 10265                           
 10266                           ; BSR set to: 0
 10267  001DAA  C02E  F030         	movff	_DisplayReadings$1261,DisplayReadings@fract
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;Test1.c: 538: LCDWriteInt(dec,2);
 10271  001DAE  C031  F01D         	movff	DisplayReadings@dec,LCDWriteInt@val
 10272  001DB2  6A1E               	clrf	LCDWriteInt@val+1,c
 10273  001DB4  0E02               	movlw	2
 10274  001DB6  6E1F               	movwf	LCDWriteInt@field_length,c
 10275  001DB8  EC74  F012         	call	_LCDWriteInt	;wreg free
 10276                           
 10277                           ;Test1.c: 539: LCDWriteString(".");
 10278  001DBC  0E7D               	movlw	high (STR_47+16)
 10279  001DBE  6E1E               	movwf	LCDWriteString@msg+1,c
 10280  001DC0  0E85               	movlw	low (STR_47+16)
 10281  001DC2  6E1D               	movwf	LCDWriteString@msg,c
 10282  001DC4  EC15  F019         	call	_LCDWriteString	;wreg free
 10283                           
 10284                           ;Test1.c: 540: LCDWriteInt(fract,1);
 10285  001DC8  C030  F01D         	movff	DisplayReadings@fract,LCDWriteInt@val
 10286  001DCC  6A1E               	clrf	LCDWriteInt@val+1,c
 10287  001DCE  0E01               	movlw	1
 10288  001DD0  6E1F               	movwf	LCDWriteInt@field_length,c
 10289  001DD2  EC74  F012         	call	_LCDWriteInt	;wreg free
 10290                           
 10291                           ;Test1.c: 541: LCDWriteString("%0C");
 10292  001DD6  0E7F               	movlw	high STR_73
 10293  001DD8  6E1E               	movwf	LCDWriteString@msg+1,c
 10294  001DDA  0EF6               	movlw	low STR_73
 10295  001DDC  6E1D               	movwf	LCDWriteString@msg,c
 10296  001DDE  EC15  F019         	call	_LCDWriteString	;wreg free
 10297                           
 10298                           ;Test1.c: 542: LCDWriteString(" H1=");
 10299  001DE2  0E7F               	movlw	high STR_74
 10300  001DE4  6E1E               	movwf	LCDWriteString@msg+1,c
 10301  001DE6  0EE4               	movlw	low STR_74
 10302  001DE8  6E1D               	movwf	LCDWriteString@msg,c
 10303  001DEA  EC15  F019         	call	_LCDWriteString	;wreg free
 10304                           
 10305                           ;Test1.c: 543: dec = Hum1 >> 8;
 10306  001DEE  0100               	movlb	0	; () banked
 10307  001DF0  C0EC  F02B         	movff	_Hum1+1,??_DisplayReadings
 10308  001DF4  C02B  F02C         	movff	??_DisplayReadings,??_DisplayReadings+1
 10309  001DF8  6A2D               	clrf	(??_DisplayReadings+2)& (0+255),c
 10310  001DFA  502C               	movf	??_DisplayReadings+1,w,c
 10311  001DFC  6E31               	movwf	DisplayReadings@dec,c
 10312                           
 10313                           ; BSR set to: 0
 10314                           ;Test1.c: 544: LCDWriteInt(dec,2);
 10315  001DFE  C031  F01D         	movff	DisplayReadings@dec,LCDWriteInt@val
 10316  001E02  6A1E               	clrf	LCDWriteInt@val+1,c
 10317  001E04  0E02               	movlw	2
 10318  001E06  6E1F               	movwf	LCDWriteInt@field_length,c
 10319  001E08  EC74  F012         	call	_LCDWriteInt	;wreg free
 10320                           
 10321                           ;Test1.c: 545: LCDWriteString("%");
 10322  001E0C  0E7F               	movlw	high STR_75
 10323  001E0E  6E1E               	movwf	LCDWriteString@msg+1,c
 10324  001E10  0EFA               	movlw	low STR_75
 10325  001E12  6E1D               	movwf	LCDWriteString@msg,c
 10326  001E14  EC15  F019         	call	_LCDWriteString	;wreg free
 10327                           
 10328                           ;Test1.c: 546: LCDGotoXY(0,1);
 10329  001E18  0E01               	movlw	1
 10330  001E1A  6E1D               	movwf	LCDGotoXY@y,c
 10331  001E1C  0E00               	movlw	0
 10332  001E1E  EC72  F01F         	call	_LCDGotoXY
 10333                           
 10334                           ;Test1.c: 547: LCDWriteString("T2=");
 10335  001E22  0E7F               	movlw	high STR_76
 10336  001E24  6E1E               	movwf	LCDWriteString@msg+1,c
 10337  001E26  0EF2               	movlw	low STR_76
 10338  001E28  6E1D               	movwf	LCDWriteString@msg,c
 10339  001E2A  EC15  F019         	call	_LCDWriteString	;wreg free
 10340                           
 10341                           ;Test1.c: 548: dec = Temp2 >> 8;
 10342  001E2E  0100               	movlb	0	; () banked
 10343  001E30  C0F2  F02B         	movff	_Temp2+1,??_DisplayReadings
 10344  001E34  C02B  F02C         	movff	??_DisplayReadings,??_DisplayReadings+1
 10345  001E38  6A2D               	clrf	(??_DisplayReadings+2)& (0+255),c
 10346  001E3A  502C               	movf	??_DisplayReadings+1,w,c
 10347  001E3C  6E31               	movwf	DisplayReadings@dec,c
 10348                           
 10349                           ; BSR set to: 0
 10350                           ;Test1.c: 549: fract = Temp2 && 0x00FF;
 10351  001E3E  0E00               	movlw	0
 10352  001E40  6E2F               	movwf	_DisplayReadings$1267,c
 10353                           
 10354                           ; BSR set to: 0
 10355  001E42  0100               	movlb	0	; () banked
 10356  001E44  51F2               	movf	(_Temp2+1)& (0+255),w,b
 10357  001E46  11F1               	iorwf	_Temp2& (0+255),w,b
 10358  001E48  B4D8               	btfsc	status,2,c
 10359  001E4A  D002               	goto	l10157
 10360                           
 10361                           ; BSR set to: 0
 10362  001E4C  0E01               	movlw	1
 10363  001E4E  6E2F               	movwf	_DisplayReadings$1267,c
 10364  001E50                     l10157:
 10365                           
 10366                           ; BSR set to: 0
 10367  001E50  C02F  F030         	movff	_DisplayReadings$1267,DisplayReadings@fract
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;Test1.c: 550: LCDWriteInt(dec,2);
 10371  001E54  C031  F01D         	movff	DisplayReadings@dec,LCDWriteInt@val
 10372  001E58  6A1E               	clrf	LCDWriteInt@val+1,c
 10373  001E5A  0E02               	movlw	2
 10374  001E5C  6E1F               	movwf	LCDWriteInt@field_length,c
 10375  001E5E  EC74  F012         	call	_LCDWriteInt	;wreg free
 10376                           
 10377                           ;Test1.c: 551: LCDWriteString(".");
 10378  001E62  0E7D               	movlw	high (STR_47+16)
 10379  001E64  6E1E               	movwf	LCDWriteString@msg+1,c
 10380  001E66  0E85               	movlw	low (STR_47+16)
 10381  001E68  6E1D               	movwf	LCDWriteString@msg,c
 10382  001E6A  EC15  F019         	call	_LCDWriteString	;wreg free
 10383                           
 10384                           ;Test1.c: 552: LCDWriteInt(fract,1);
 10385  001E6E  C030  F01D         	movff	DisplayReadings@fract,LCDWriteInt@val
 10386  001E72  6A1E               	clrf	LCDWriteInt@val+1,c
 10387  001E74  0E01               	movlw	1
 10388  001E76  6E1F               	movwf	LCDWriteInt@field_length,c
 10389  001E78  EC74  F012         	call	_LCDWriteInt	;wreg free
 10390                           
 10391                           ;Test1.c: 553: LCDWriteString("%0C");
 10392  001E7C  0E7F               	movlw	high STR_73
 10393  001E7E  6E1E               	movwf	LCDWriteString@msg+1,c
 10394  001E80  0EF6               	movlw	low STR_73
 10395  001E82  6E1D               	movwf	LCDWriteString@msg,c
 10396  001E84  EC15  F019         	call	_LCDWriteString	;wreg free
 10397                           
 10398                           ;Test1.c: 554: LCDWriteString(" H2=");
 10399  001E88  0E7F               	movlw	high STR_79
 10400  001E8A  6E1E               	movwf	LCDWriteString@msg+1,c
 10401  001E8C  0EE9               	movlw	low STR_79
 10402  001E8E  6E1D               	movwf	LCDWriteString@msg,c
 10403  001E90  EC15  F019         	call	_LCDWriteString	;wreg free
 10404                           
 10405                           ;Test1.c: 555: dec = Hum2 >> 8;
 10406  001E94  0100               	movlb	0	; () banked
 10407  001E96  C0EE  F02B         	movff	_Hum2+1,??_DisplayReadings
 10408  001E9A  C02B  F02C         	movff	??_DisplayReadings,??_DisplayReadings+1
 10409  001E9E  6A2D               	clrf	(??_DisplayReadings+2)& (0+255),c
 10410  001EA0  502C               	movf	??_DisplayReadings+1,w,c
 10411  001EA2  6E31               	movwf	DisplayReadings@dec,c
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;Test1.c: 556: LCDWriteInt(dec,2);
 10415  001EA4  C031  F01D         	movff	DisplayReadings@dec,LCDWriteInt@val
 10416  001EA8  6A1E               	clrf	LCDWriteInt@val+1,c
 10417  001EAA  0E02               	movlw	2
 10418  001EAC  6E1F               	movwf	LCDWriteInt@field_length,c
 10419  001EAE  EC74  F012         	call	_LCDWriteInt	;wreg free
 10420                           
 10421                           ;Test1.c: 557: LCDWriteString("%");
 10422  001EB2  0E7F               	movlw	high STR_75
 10423  001EB4  6E1E               	movwf	LCDWriteString@msg+1,c
 10424  001EB6  0EFA               	movlw	low STR_75
 10425  001EB8  6E1D               	movwf	LCDWriteString@msg,c
 10426  001EBA  EC15  F019         	call	_LCDWriteString	;wreg free
 10427  001EBE  0012               	return	
 10428  001EC0  FFFF               	dw	65535	; errata NOP
 10429  001EC2                     __end_of_DisplayReadings:
 10430                           	opt stack 0
 10431                           tblptru	equ	0xFF8
 10432                           tblptrh	equ	0xFF7
 10433                           tblptrl	equ	0xFF6
 10434                           tablat	equ	0xFF5
 10435                           prodh	equ	0xFF4
 10436                           prodl	equ	0xFF3
 10437                           intcon	equ	0xFF2
 10438                           postinc0	equ	0xFEE
 10439                           wreg	equ	0xFE8
 10440                           postdec1	equ	0xFE5
 10441                           fsr1h	equ	0xFE2
 10442                           fsr1l	equ	0xFE1
 10443                           indf2	equ	0xFDF
 10444                           postinc2	equ	0xFDE
 10445                           postdec2	equ	0xFDD
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _LCDWriteInt *****************
 10451 ;; Defined at:
 10452 ;;		line 266 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  val             2   28[COMRAM] int 
 10455 ;;  field_length    1   30[COMRAM] char 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  str             5   33[COMRAM] unsigned char [5]
 10458 ;;  i               2   40[COMRAM] int 
 10459 ;;  j               2   38[COMRAM] int 
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10469 ;;      Params:         3       0       0       0       0       0       0
 10470 ;;      Locals:         9       0       0       0       0       0       0
 10471 ;;      Temps:          2       0       0       0       0       0       0
 10472 ;;      Totals:        14       0       0       0       0       0       0
 10473 ;;Total ram usage:       14 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    4
 10476 ;; This function calls:
 10477 ;;		_LCDByte
 10478 ;;		___awdiv
 10479 ;;		___awmod
 10480 ;; This function is called by:
 10481 ;;		_main
 10482 ;;		_rtc_setting
 10483 ;;		_DisplayReadings
 10484 ;;		_rtc_local_display
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text44
 10489  0024E8                     __ptext44:
 10490                           	opt stack 0
 10491  0024E8                     _LCDWriteInt:
 10492                           	opt stack 25
 10493                           
 10494                           ;incstack = 0
 10495  0024E8  FFFF               	dw	65535
 10496                           
 10497                           ;lcd_hd44780_pic18.c: 279: char str[5]={0,0,0,0,0};
 10498  0024EA  EE20  F0BC         	lfsr	2,LCDWriteInt@F3701
 10499  0024EE  EE10  F022         	lfsr	1,LCDWriteInt@str
 10500  0024F2  0E05               	movlw	5
 10501  0024F4                     u7121:
 10502  0024F4  CFDE FFE6          	movff	postinc2,postinc1
 10503  0024F8  2EE8               	decfsz	wreg,f,c
 10504  0024FA  D7FC               	goto	u7121
 10505                           
 10506                           ;lcd_hd44780_pic18.c: 280: int i=4,j=0;
 10507  0024FC  0E00               	movlw	0
 10508  0024FE  6E2A               	movwf	LCDWriteInt@i+1,c
 10509  002500  0E04               	movlw	4
 10510  002502  6E29               	movwf	LCDWriteInt@i,c
 10511  002504  0E00               	movlw	0
 10512  002506  6E28               	movwf	LCDWriteInt@j+1,c
 10513  002508  0E00               	movlw	0
 10514  00250A  6E27               	movwf	LCDWriteInt@j,c
 10515                           
 10516                           ;lcd_hd44780_pic18.c: 283: if(val<0)
 10517  00250C  501E               	movf	LCDWriteInt@val+1,w,c
 10518  00250E  0A80               	xorlw	128
 10519  002510  6EF3               	movwf	prodl,c
 10520  002512  0E80               	movlw	128
 10521  002514  5CF3               	subwf	prodl,w,c
 10522  002516  0E00               	movlw	0
 10523  002518  B4D8               	btfsc	status,2,c
 10524  00251A  5C1D               	subwf	LCDWriteInt@val,w,c
 10525  00251C  B0D8               	btfsc	status,0,c
 10526  00251E  D02D               	goto	l9123
 10527                           
 10528                           ;lcd_hd44780_pic18.c: 284: {
 10529                           ;lcd_hd44780_pic18.c: 285: (LCDByte('-',1));
 10530  002520  0E01               	movlw	1
 10531  002522  6E17               	movwf	LCDByte@isdata,c
 10532  002524  0E2D               	movlw	45
 10533  002526  EC54  F01E         	call	_LCDByte
 10534                           
 10535                           ;lcd_hd44780_pic18.c: 286: val=val*-1;
 10536  00252A  6C1D               	negf	LCDWriteInt@val,c
 10537  00252C  1E1E               	comf	LCDWriteInt@val+1,f,c
 10538  00252E  B0D8               	btfsc	status,0,c
 10539  002530  2A1E               	incf	LCDWriteInt@val+1,f,c
 10540  002532  D023               	goto	l9123
 10541  002534                     l9117:
 10542                           
 10543                           ;lcd_hd44780_pic18.c: 290: {
 10544                           ;lcd_hd44780_pic18.c: 291: str[i]=val%10;
 10545  002534  0E22               	movlw	low LCDWriteInt@str
 10546  002536  2429               	addwf	LCDWriteInt@i,w,c
 10547  002538  6ED9               	movwf	fsr2l,c
 10548  00253A  0E00               	movlw	high LCDWriteInt@str
 10549  00253C  202A               	addwfc	LCDWriteInt@i+1,w,c
 10550  00253E  6EDA               	movwf	fsr2h,c
 10551  002540  C01D  F014         	movff	LCDWriteInt@val,___awmod@dividend
 10552  002544  C01E  F015         	movff	LCDWriteInt@val+1,___awmod@dividend+1
 10553  002548  0E00               	movlw	0
 10554  00254A  6E17               	movwf	___awmod@divisor+1,c
 10555  00254C  0E0A               	movlw	10
 10556  00254E  6E16               	movwf	___awmod@divisor,c
 10557  002550  EC92  F01A         	call	___awmod	;wreg free
 10558  002554  5014               	movf	?___awmod,w,c
 10559  002556  6EDF               	movwf	indf2,c
 10560                           
 10561                           ;lcd_hd44780_pic18.c: 292: val=val/10;
 10562  002558  C01D  F014         	movff	LCDWriteInt@val,___awdiv@dividend
 10563  00255C  C01E  F015         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
 10564  002560  0E00               	movlw	0
 10565  002562  6E17               	movwf	___awdiv@divisor+1,c
 10566  002564  0E0A               	movlw	10
 10567  002566  6E16               	movwf	___awdiv@divisor,c
 10568  002568  EC6F  F018         	call	___awdiv	;wreg free
 10569  00256C  C014  F01D         	movff	?___awdiv,LCDWriteInt@val
 10570  002570  C015  F01E         	movff	?___awdiv+1,LCDWriteInt@val+1
 10571                           
 10572                           ;lcd_hd44780_pic18.c: 293: i--;
 10573  002574  0629               	decf	LCDWriteInt@i,f,c
 10574  002576  A0D8               	btfss	status,0,c
 10575  002578  062A               	decf	LCDWriteInt@i+1,f,c
 10576  00257A                     l9123:
 10577  00257A  501E               	movf	LCDWriteInt@val+1,w,c
 10578  00257C  101D               	iorwf	LCDWriteInt@val,w,c
 10579  00257E  A4D8               	btfss	status,2,c
 10580  002580  D7D9               	goto	l9117
 10581                           
 10582                           ;lcd_hd44780_pic18.c: 294: }
 10583                           ;lcd_hd44780_pic18.c: 295: if(field_length==-1)
 10584  002582  281F               	incf	LCDWriteInt@field_length,w,c
 10585  002584  B4D8               	btfsc	status,2,c
 10586  002586  D003               	goto	l9131
 10587  002588  D00C               	goto	l9133
 10588  00258A                     l9129:
 10589  00258A  4A27               	infsnz	LCDWriteInt@j,f,c
 10590  00258C  2A28               	incf	LCDWriteInt@j+1,f,c
 10591  00258E                     l9131:
 10592  00258E  0E22               	movlw	low LCDWriteInt@str
 10593  002590  2427               	addwf	LCDWriteInt@j,w,c
 10594  002592  6ED9               	movwf	fsr2l,c
 10595  002594  0E00               	movlw	high LCDWriteInt@str
 10596  002596  2028               	addwfc	LCDWriteInt@j+1,w,c
 10597  002598  6EDA               	movwf	fsr2h,c
 10598  00259A  50DF               	movf	indf2,w,c
 10599  00259C  A4D8               	btfss	status,2,c
 10600  00259E  D010               	goto	l9135
 10601  0025A0  D7F4               	goto	l9129
 10602  0025A2                     l9133:
 10603                           
 10604                           ;lcd_hd44780_pic18.c: 297: else
 10605                           ;lcd_hd44780_pic18.c: 298: j=5-field_length;
 10606  0025A2  C01F  F020         	movff	LCDWriteInt@field_length,??_LCDWriteInt
 10607  0025A6  6A21               	clrf	(??_LCDWriteInt+1)& (0+255),c
 10608  0025A8  BE20               	btfsc	??_LCDWriteInt& (0+255),7,c
 10609  0025AA  0621               	decf	(??_LCDWriteInt+1)& (0+255),f,c
 10610  0025AC  1E20               	comf	??_LCDWriteInt,f,c
 10611  0025AE  1E21               	comf	??_LCDWriteInt+1,f,c
 10612  0025B0  4A20               	infsnz	??_LCDWriteInt,f,c
 10613  0025B2  2A21               	incf	??_LCDWriteInt+1,f,c
 10614  0025B4  0E05               	movlw	5
 10615  0025B6  2420               	addwf	??_LCDWriteInt,w,c
 10616  0025B8  6E27               	movwf	LCDWriteInt@j,c
 10617  0025BA  0E00               	movlw	0
 10618  0025BC  2021               	addwfc	??_LCDWriteInt+1,w,c
 10619  0025BE  6E28               	movwf	LCDWriteInt@j+1,c
 10620  0025C0                     l9135:
 10621                           
 10622                           ;lcd_hd44780_pic18.c: 301: for(i=j;i<5;i++)
 10623  0025C0  C027  F029         	movff	LCDWriteInt@j,LCDWriteInt@i
 10624  0025C4  C028  F02A         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
 10625  0025C8  502A               	movf	LCDWriteInt@i+1,w,c
 10626  0025CA  0A80               	xorlw	128
 10627  0025CC  0F80               	addlw	-128
 10628  0025CE  0E05               	movlw	5
 10629  0025D0  B4D8               	btfsc	status,2,c
 10630  0025D2  5C29               	subwf	LCDWriteInt@i,w,c
 10631  0025D4  B0D8               	btfsc	status,0,c
 10632  0025D6  D00F               	goto	l59
 10633                           
 10634                           ;lcd_hd44780_pic18.c: 302: {
 10635                           ;lcd_hd44780_pic18.c: 303: (LCDByte(48+str[i],1));
 10636  0025D8  0E01               	movlw	1
 10637  0025DA  6E17               	movwf	LCDByte@isdata,c
 10638  0025DC  0E22               	movlw	low LCDWriteInt@str
 10639  0025DE  2429               	addwf	LCDWriteInt@i,w,c
 10640  0025E0  6ED9               	movwf	fsr2l,c
 10641  0025E2  0E00               	movlw	high LCDWriteInt@str
 10642  0025E4  202A               	addwfc	LCDWriteInt@i+1,w,c
 10643  0025E6  6EDA               	movwf	fsr2h,c
 10644  0025E8  50DF               	movf	indf2,w,c
 10645  0025EA  0F30               	addlw	48
 10646  0025EC  EC54  F01E         	call	_LCDByte
 10647  0025F0  4A29               	infsnz	LCDWriteInt@i,f,c
 10648  0025F2  2A2A               	incf	LCDWriteInt@i+1,f,c
 10649  0025F4  D7E9               	goto	L19
 10650  0025F6                     l59:
 10651  0025F6  0012               	return	
 10652  0025F8  FFFF               	dw	65535	; errata NOP
 10653  0025FA                     __end_of_LCDWriteInt:
 10654                           	opt stack 0
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           postinc0	equ	0xFEE
 10663                           wreg	equ	0xFE8
 10664                           postinc1	equ	0xFE6
 10665                           postdec1	equ	0xFE5
 10666                           fsr1h	equ	0xFE2
 10667                           fsr1l	equ	0xFE1
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function ___awmod *****************
 10676 ;; Defined at:
 10677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;  dividend        2   19[COMRAM] int 
 10680 ;;  divisor         2   21[COMRAM] int 
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  sign            1   24[COMRAM] unsigned char 
 10683 ;;  counter         1   23[COMRAM] unsigned char 
 10684 ;; Return value:  Size  Location     Type
 10685 ;;                  2   19[COMRAM] int 
 10686 ;; Registers used:
 10687 ;;		wreg, status,2, status,0, prodl
 10688 ;; Tracked objects:
 10689 ;;		On entry : 0/0
 10690 ;;		On exit  : 0/0
 10691 ;;		Unchanged: 0/0
 10692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10693 ;;      Params:         4       0       0       0       0       0       0
 10694 ;;      Locals:         2       0       0       0       0       0       0
 10695 ;;      Temps:          0       0       0       0       0       0       0
 10696 ;;      Totals:         6       0       0       0       0       0       0
 10697 ;;Total ram usage:        6 bytes
 10698 ;; Hardware stack levels used:    1
 10699 ;; Hardware stack levels required when called:    2
 10700 ;; This function calls:
 10701 ;;		Nothing
 10702 ;; This function is called by:
 10703 ;;		_LCDWriteInt
 10704 ;;		_USARTWriteInt
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text45
 10709  003524                     __ptext45:
 10710                           	opt stack 0
 10711  003524                     ___awmod:
 10712                           	opt stack 26
 10713                           
 10714                           ;incstack = 0
 10715  003524  FFFF               	dw	65535
 10716  003526  0E00               	movlw	0
 10717  003528  6E19               	movwf	___awmod@sign,c
 10718  00352A  5015               	movf	___awmod@dividend+1,w,c
 10719  00352C  0A80               	xorlw	128
 10720  00352E  6EF3               	movwf	prodl,c
 10721  003530  0E80               	movlw	128
 10722  003532  5CF3               	subwf	prodl,w,c
 10723  003534  0E00               	movlw	0
 10724  003536  B4D8               	btfsc	status,2,c
 10725  003538  5C14               	subwf	___awmod@dividend,w,c
 10726  00353A  B0D8               	btfsc	status,0,c
 10727  00353C  D006               	goto	l9077
 10728  00353E  6C14               	negf	___awmod@dividend,c
 10729  003540  1E15               	comf	___awmod@dividend+1,f,c
 10730  003542  B0D8               	btfsc	status,0,c
 10731  003544  2A15               	incf	___awmod@dividend+1,f,c
 10732  003546  0E01               	movlw	1
 10733  003548  6E19               	movwf	___awmod@sign,c
 10734  00354A                     l9077:
 10735  00354A  5017               	movf	___awmod@divisor+1,w,c
 10736  00354C  0A80               	xorlw	128
 10737  00354E  6EF3               	movwf	prodl,c
 10738  003550  0E80               	movlw	128
 10739  003552  5CF3               	subwf	prodl,w,c
 10740  003554  0E00               	movlw	0
 10741  003556  B4D8               	btfsc	status,2,c
 10742  003558  5C16               	subwf	___awmod@divisor,w,c
 10743  00355A  B0D8               	btfsc	status,0,c
 10744  00355C  D004               	goto	l9081
 10745  00355E  6C16               	negf	___awmod@divisor,c
 10746  003560  1E17               	comf	___awmod@divisor+1,f,c
 10747  003562  B0D8               	btfsc	status,0,c
 10748  003564  2A17               	incf	___awmod@divisor+1,f,c
 10749  003566                     l9081:
 10750  003566  5017               	movf	___awmod@divisor+1,w,c
 10751  003568  1016               	iorwf	___awmod@divisor,w,c
 10752  00356A  B4D8               	btfsc	status,2,c
 10753  00356C  D018               	goto	l9097
 10754  00356E  0E01               	movlw	1
 10755  003570  6E18               	movwf	___awmod@counter,c
 10756  003572  D004               	goto	l9087
 10757  003574                     l9085:
 10758  003574  90D8               	bcf	status,0,c
 10759  003576  3616               	rlcf	___awmod@divisor,f,c
 10760  003578  3617               	rlcf	___awmod@divisor+1,f,c
 10761  00357A  2A18               	incf	___awmod@counter,f,c
 10762  00357C                     l9087:
 10763  00357C  AE17               	btfss	___awmod@divisor+1,7,c
 10764  00357E  D7FA               	goto	l9085
 10765  003580                     l9089:
 10766  003580  5016               	movf	___awmod@divisor,w,c
 10767  003582  5C14               	subwf	___awmod@dividend,w,c
 10768  003584  5017               	movf	___awmod@divisor+1,w,c
 10769  003586  5815               	subwfb	___awmod@dividend+1,w,c
 10770  003588  A0D8               	btfss	status,0,c
 10771  00358A  D004               	goto	l9093
 10772  00358C  5016               	movf	___awmod@divisor,w,c
 10773  00358E  5E14               	subwf	___awmod@dividend,f,c
 10774  003590  5017               	movf	___awmod@divisor+1,w,c
 10775  003592  5A15               	subwfb	___awmod@dividend+1,f,c
 10776  003594                     l9093:
 10777  003594  90D8               	bcf	status,0,c
 10778  003596  3217               	rrcf	___awmod@divisor+1,f,c
 10779  003598  3216               	rrcf	___awmod@divisor,f,c
 10780  00359A  2E18               	decfsz	___awmod@counter,f,c
 10781  00359C  D7F1               	goto	l9089
 10782  00359E                     l9097:
 10783  00359E  5019               	movf	___awmod@sign,w,c
 10784  0035A0  B4D8               	btfsc	status,2,c
 10785  0035A2  D004               	goto	l9101
 10786  0035A4  6C14               	negf	___awmod@dividend,c
 10787  0035A6  1E15               	comf	___awmod@dividend+1,f,c
 10788  0035A8  B0D8               	btfsc	status,0,c
 10789  0035AA  2A15               	incf	___awmod@dividend+1,f,c
 10790  0035AC                     l9101:
 10791  0035AC  C014  F014         	movff	___awmod@dividend,?___awmod
 10792  0035B0  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
 10793  0035B4  0012               	return	
 10794  0035B6  FFFF               	dw	65535	; errata NOP
 10795  0035B8                     __end_of___awmod:
 10796                           	opt stack 0
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           postinc0	equ	0xFEE
 10805                           wreg	equ	0xFE8
 10806                           postinc1	equ	0xFE6
 10807                           postdec1	equ	0xFE5
 10808                           fsr1h	equ	0xFE2
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function ___awdiv *****************
 10818 ;; Defined at:
 10819 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  dividend        2   19[COMRAM] int 
 10822 ;;  divisor         2   21[COMRAM] int 
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;  quotient        2   25[COMRAM] int 
 10825 ;;  sign            1   24[COMRAM] unsigned char 
 10826 ;;  counter         1   23[COMRAM] unsigned char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  2   19[COMRAM] int 
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, status,0, prodl
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10836 ;;      Params:         4       0       0       0       0       0       0
 10837 ;;      Locals:         4       0       0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0
 10839 ;;      Totals:         8       0       0       0       0       0       0
 10840 ;;Total ram usage:        8 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    2
 10843 ;; This function calls:
 10844 ;;		Nothing
 10845 ;; This function is called by:
 10846 ;;		_LCDWriteInt
 10847 ;;		_USARTWriteInt
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text46
 10852  0030DE                     __ptext46:
 10853                           	opt stack 0
 10854  0030DE                     ___awdiv:
 10855                           	opt stack 26
 10856                           
 10857                           ;incstack = 0
 10858  0030DE  FFFF               	dw	65535
 10859  0030E0  0E00               	movlw	0
 10860  0030E2  6E19               	movwf	___awdiv@sign,c
 10861  0030E4  5017               	movf	___awdiv@divisor+1,w,c
 10862  0030E6  0A80               	xorlw	128
 10863  0030E8  6EF3               	movwf	prodl,c
 10864  0030EA  0E80               	movlw	128
 10865  0030EC  5CF3               	subwf	prodl,w,c
 10866  0030EE  0E00               	movlw	0
 10867  0030F0  B4D8               	btfsc	status,2,c
 10868  0030F2  5C16               	subwf	___awdiv@divisor,w,c
 10869  0030F4  B0D8               	btfsc	status,0,c
 10870  0030F6  D006               	goto	l9033
 10871  0030F8  6C16               	negf	___awdiv@divisor,c
 10872  0030FA  1E17               	comf	___awdiv@divisor+1,f,c
 10873  0030FC  B0D8               	btfsc	status,0,c
 10874  0030FE  2A17               	incf	___awdiv@divisor+1,f,c
 10875  003100  0E01               	movlw	1
 10876  003102  6E19               	movwf	___awdiv@sign,c
 10877  003104                     l9033:
 10878  003104  5015               	movf	___awdiv@dividend+1,w,c
 10879  003106  0A80               	xorlw	128
 10880  003108  6EF3               	movwf	prodl,c
 10881  00310A  0E80               	movlw	128
 10882  00310C  5CF3               	subwf	prodl,w,c
 10883  00310E  0E00               	movlw	0
 10884  003110  B4D8               	btfsc	status,2,c
 10885  003112  5C14               	subwf	___awdiv@dividend,w,c
 10886  003114  B0D8               	btfsc	status,0,c
 10887  003116  D006               	goto	l9039
 10888  003118  6C14               	negf	___awdiv@dividend,c
 10889  00311A  1E15               	comf	___awdiv@dividend+1,f,c
 10890  00311C  B0D8               	btfsc	status,0,c
 10891  00311E  2A15               	incf	___awdiv@dividend+1,f,c
 10892  003120  0E01               	movlw	1
 10893  003122  1A19               	xorwf	___awdiv@sign,f,c
 10894  003124                     l9039:
 10895  003124  0E00               	movlw	0
 10896  003126  6E1B               	movwf	___awdiv@quotient+1,c
 10897  003128  0E00               	movlw	0
 10898  00312A  6E1A               	movwf	___awdiv@quotient,c
 10899  00312C  5017               	movf	___awdiv@divisor+1,w,c
 10900  00312E  1016               	iorwf	___awdiv@divisor,w,c
 10901  003130  B4D8               	btfsc	status,2,c
 10902  003132  D01C               	goto	l9061
 10903  003134  0E01               	movlw	1
 10904  003136  6E18               	movwf	___awdiv@counter,c
 10905  003138  D004               	goto	l9047
 10906  00313A                     l9045:
 10907  00313A  90D8               	bcf	status,0,c
 10908  00313C  3616               	rlcf	___awdiv@divisor,f,c
 10909  00313E  3617               	rlcf	___awdiv@divisor+1,f,c
 10910  003140  2A18               	incf	___awdiv@counter,f,c
 10911  003142                     l9047:
 10912  003142  AE17               	btfss	___awdiv@divisor+1,7,c
 10913  003144  D7FA               	goto	l9045
 10914  003146                     l9049:
 10915  003146  90D8               	bcf	status,0,c
 10916  003148  361A               	rlcf	___awdiv@quotient,f,c
 10917  00314A  361B               	rlcf	___awdiv@quotient+1,f,c
 10918  00314C  5016               	movf	___awdiv@divisor,w,c
 10919  00314E  5C14               	subwf	___awdiv@dividend,w,c
 10920  003150  5017               	movf	___awdiv@divisor+1,w,c
 10921  003152  5815               	subwfb	___awdiv@dividend+1,w,c
 10922  003154  A0D8               	btfss	status,0,c
 10923  003156  D005               	goto	l9057
 10924  003158  5016               	movf	___awdiv@divisor,w,c
 10925  00315A  5E14               	subwf	___awdiv@dividend,f,c
 10926  00315C  5017               	movf	___awdiv@divisor+1,w,c
 10927  00315E  5A15               	subwfb	___awdiv@dividend+1,f,c
 10928  003160  801A               	bsf	___awdiv@quotient,0,c
 10929  003162                     l9057:
 10930  003162  90D8               	bcf	status,0,c
 10931  003164  3217               	rrcf	___awdiv@divisor+1,f,c
 10932  003166  3216               	rrcf	___awdiv@divisor,f,c
 10933  003168  2E18               	decfsz	___awdiv@counter,f,c
 10934  00316A  D7ED               	goto	l9049
 10935  00316C                     l9061:
 10936  00316C  5019               	movf	___awdiv@sign,w,c
 10937  00316E  B4D8               	btfsc	status,2,c
 10938  003170  D004               	goto	l9065
 10939  003172  6C1A               	negf	___awdiv@quotient,c
 10940  003174  1E1B               	comf	___awdiv@quotient+1,f,c
 10941  003176  B0D8               	btfsc	status,0,c
 10942  003178  2A1B               	incf	___awdiv@quotient+1,f,c
 10943  00317A                     l9065:
 10944  00317A  C01A  F014         	movff	___awdiv@quotient,?___awdiv
 10945  00317E  C01B  F015         	movff	___awdiv@quotient+1,?___awdiv+1
 10946  003182  0012               	return	
 10947  003184  FFFF               	dw	65535	; errata NOP
 10948  003186                     __end_of___awdiv:
 10949                           	opt stack 0
 10950                           tblptru	equ	0xFF8
 10951                           tblptrh	equ	0xFF7
 10952                           tblptrl	equ	0xFF6
 10953                           tablat	equ	0xFF5
 10954                           prodh	equ	0xFF4
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           postinc0	equ	0xFEE
 10958                           wreg	equ	0xFE8
 10959                           postinc1	equ	0xFE6
 10960                           postdec1	equ	0xFE5
 10961                           fsr1h	equ	0xFE2
 10962                           fsr1l	equ	0xFE1
 10963                           indf2	equ	0xFDF
 10964                           postinc2	equ	0xFDE
 10965                           postdec2	equ	0xFDD
 10966                           fsr2h	equ	0xFDA
 10967                           fsr2l	equ	0xFD9
 10968                           status	equ	0xFD8
 10969                           
 10970 ;; *************** function _getkey *****************
 10971 ;; Defined at:
 10972 ;;		line 185 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\rtu.c"
 10973 ;; Parameters:    Size  Location     Type
 10974 ;;  msecs           2   19[COMRAM] unsigned int 
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;		None
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  1    wreg      unsigned char 
 10979 ;; Registers used:
 10980 ;;		wreg, status,2, status,0
 10981 ;; Tracked objects:
 10982 ;;		On entry : 0/0
 10983 ;;		On exit  : 0/0
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10986 ;;      Params:         2       0       0       0       0       0       0
 10987 ;;      Locals:         0       0       0       0       0       0       0
 10988 ;;      Temps:          1       0       0       0       0       0       0
 10989 ;;      Totals:         3       0       0       0       0       0       0
 10990 ;;Total ram usage:        3 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; Hardware stack levels required when called:    2
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		_main
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text47
 11001  003BE4                     __ptext47:
 11002                           	opt stack 0
 11003  003BE4                     _getkey:
 11004                           	opt stack 28
 11005                           
 11006                           ;incstack = 0
 11007  003BE4  FFFF               	dw	65535
 11008                           
 11009                           ;rtu.c: 188: while(RD5 == 0 && RD4 == 0 && RC5 == 0 && RD0 == 0 && RD1 == 0 && msecs > 0
      +                          )
 11010  003BE6  D00A               	goto	l10403
 11011  003BE8                     l10399:
 11012                           
 11013                           ;rtu.c: 189: {
 11014                           ;rtu.c: 190: _delay((unsigned long)((1)*(100000000/4000.0)));
 11015  003BE8  0E19               	movlw	25
 11016  003BEA  6E16               	movwf	??_getkey& (0+255),c
 11017  003BEC  0E5D               	movlw	93
 11018  003BEE                     u8857:
 11019  003BEE  2EE8               	decfsz	wreg,f,c
 11020  003BF0  D7FE               	goto	u8857
 11021  003BF2  2E16               	decfsz	??_getkey& (0+255),f,c
 11022  003BF4  D7FC               	goto	u8857
 11023                           
 11024                           ;rtu.c: 191: msecs--;
 11025  003BF6  0614               	decf	getkey@msecs,f,c
 11026  003BF8  A0D8               	btfss	status,0,c
 11027  003BFA  0615               	decf	getkey@msecs+1,f,c
 11028  003BFC                     l10403:
 11029  003BFC  AA83               	btfss	3971,5,c	;volatile
 11030  003BFE  B883               	btfsc	3971,4,c	;volatile
 11031  003C00  D009               	goto	l10415
 11032  003C02  AA82               	btfss	3970,5,c	;volatile
 11033  003C04  B083               	btfsc	3971,0,c	;volatile
 11034  003C06  D006               	goto	l10415
 11035  003C08  B283               	btfsc	3971,1,c	;volatile
 11036  003C0A  D004               	goto	l10415
 11037  003C0C  5015               	movf	getkey@msecs+1,w,c
 11038  003C0E  1014               	iorwf	getkey@msecs,w,c
 11039  003C10  A4D8               	btfss	status,2,c
 11040  003C12  D7EA               	goto	l10399
 11041  003C14                     l10415:
 11042                           
 11043                           ;rtu.c: 192: }
 11044                           ;rtu.c: 194: if(msecs <= 0)
 11045  003C14  5015               	movf	getkey@msecs+1,w,c
 11046  003C16  1014               	iorwf	getkey@msecs,w,c
 11047  003C18  A4D8               	btfss	status,2,c
 11048  003C1A  D002               	goto	l770
 11049                           
 11050                           ;rtu.c: 195: return 0;
 11051  003C1C  0E00               	movlw	0
 11052  003C1E  D012               	goto	l771
 11053  003C20                     l770:
 11054                           
 11055                           ;rtu.c: 196: if(RD5 == 1)
 11056  003C20  AA83               	btfss	3971,5,c	;volatile
 11057  003C22  D002               	goto	l772
 11058                           
 11059                           ;rtu.c: 197: return 1;
 11060  003C24  0E01               	movlw	1
 11061  003C26  D00E               	goto	l771
 11062  003C28                     l772:
 11063                           
 11064                           ;rtu.c: 198: if(RD4 == 1)
 11065  003C28  A883               	btfss	3971,4,c	;volatile
 11066  003C2A  D002               	goto	l773
 11067                           
 11068                           ;rtu.c: 199: return 2;
 11069  003C2C  0E02               	movlw	2
 11070  003C2E  D00A               	goto	l771
 11071  003C30                     l773:
 11072                           
 11073                           ;rtu.c: 200: if(RC5 == 1)
 11074  003C30  AA82               	btfss	3970,5,c	;volatile
 11075  003C32  D002               	goto	l774
 11076                           
 11077                           ;rtu.c: 201: return 3;
 11078  003C34  0E03               	movlw	3
 11079  003C36  D006               	goto	l771
 11080  003C38                     l774:
 11081                           
 11082                           ;rtu.c: 202: if(RD0 == 1)
 11083  003C38  A083               	btfss	3971,0,c	;volatile
 11084  003C3A  D002               	goto	l775
 11085                           
 11086                           ;rtu.c: 203: return 4;
 11087  003C3C  0E04               	movlw	4
 11088  003C3E  D002               	goto	l771
 11089  003C40                     l775:
 11090                           
 11091                           ;rtu.c: 204: if(RD1 == 1)
 11092  003C40  B283               	btfsc	3971,1,c	;volatile
 11093                           
 11094                           ;rtu.c: 205: return 5;
 11095  003C42  0E05               	movlw	5
 11096  003C44                     l771:
 11097  003C44  0012               	return	
 11098  003C46  FFFF               	dw	65535	; errata NOP
 11099  003C48                     __end_of_getkey:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           postinc0	equ	0xFEE
 11109                           wreg	equ	0xFE8
 11110                           postinc1	equ	0xFE6
 11111                           postdec1	equ	0xFE5
 11112                           fsr1h	equ	0xFE2
 11113                           fsr1l	equ	0xFE1
 11114                           indf2	equ	0xFDF
 11115                           postinc2	equ	0xFDE
 11116                           postdec2	equ	0xFDD
 11117                           fsr2h	equ	0xFDA
 11118                           fsr2l	equ	0xFD9
 11119                           status	equ	0xFD8
 11120                           
 11121 ;; *************** function _data_to_center *****************
 11122 ;; Defined at:
 11123 ;;		line 406 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  attempts        1   48[COMRAM] unsigned char 
 11128 ;;  result          1   47[COMRAM] unsigned char 
 11129 ;; Return value:  Size  Location     Type
 11130 ;;		None               void
 11131 ;; Registers used:
 11132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11133 ;; Tracked objects:
 11134 ;;		On entry : 0/0
 11135 ;;		On exit  : 0/0
 11136 ;;		Unchanged: 0/0
 11137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11138 ;;      Params:         0       0       0       0       0       0       0
 11139 ;;      Locals:         2       0       0       0       0       0       0
 11140 ;;      Temps:          0       0       0       0       0       0       0
 11141 ;;      Totals:         2       0       0       0       0       0       0
 11142 ;;Total ram usage:        2 bytes
 11143 ;; Hardware stack levels used:    1
 11144 ;; Hardware stack levels required when called:    8
 11145 ;; This function calls:
 11146 ;;		_Clear_Packet
 11147 ;;		_LCDByte
 11148 ;;		_LCDGotoXY
 11149 ;;		_LCDWriteString
 11150 ;;		_MyDelay
 11151 ;;		_Write_b_eep
 11152 ;;		_beep
 11153 ;;		_clear_rom
 11154 ;;		_read_packet_from_page
 11155 ;;		_tx_packet
 11156 ;; This function is called by:
 11157 ;;		_main
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text48
 11162  0016CE                     __ptext48:
 11163                           	opt stack 0
 11164  0016CE                     _data_to_center:
 11165                           	opt stack 22
 11166                           
 11167                           ;incstack = 0
 11168  0016CE  FFFF               	dw	65535
 11169                           
 11170                           ;Test1.c: 408: unsigned char result = 0, attempts = 0;
 11171  0016D0  0E00               	movlw	0
 11172  0016D2  6E30               	movwf	data_to_center@result,c
 11173  0016D4  0E00               	movlw	0
 11174  0016D6  6E31               	movwf	data_to_center@attempts,c
 11175                           
 11176                           ;Test1.c: 411: if(Current_Write_Page == 0)
 11177  0016D8  0100               	movlb	0	; () banked
 11178  0016DA  51EA               	movf	(_Current_Write_Page+1)& (0+255),w,b	;volatile
 11179  0016DC  11E9               	iorwf	_Current_Write_Page& (0+255),w,b	;volatile
 11180  0016DE  A4D8               	btfss	status,2,c
 11181  0016E0  D011               	goto	l10459
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;Test1.c: 412: {
 11185                           ;Test1.c: 413: (LCDByte(0b00000001,0));
 11186  0016E2  0E00               	movlw	0
 11187  0016E4  6E17               	movwf	LCDByte@isdata,c
 11188  0016E6  0E01               	movlw	1
 11189  0016E8  EC54  F01E         	call	_LCDByte
 11190                           
 11191                           ;Test1.c: 414: LCDWriteString("NOTHING TO SEND!");
 11192  0016EC  0E7D               	movlw	high STR_61
 11193  0016EE  6E1E               	movwf	LCDWriteString@msg+1,c
 11194  0016F0  0EE1               	movlw	low STR_61
 11195  0016F2  6E1D               	movwf	LCDWriteString@msg,c
 11196  0016F4  EC15  F019         	call	_LCDWriteString	;wreg free
 11197                           
 11198                           ;Test1.c: 415: MyDelay(1000);
 11199  0016F8  0E03               	movlw	3
 11200  0016FA  6E15               	movwf	MyDelay@ms+1,c
 11201  0016FC  0EE8               	movlw	232
 11202  0016FE  6E14               	movwf	MyDelay@ms,c
 11203  001700  EC8E  F03D         	call	_MyDelay	;wreg free
 11204  001704                     l10459:
 11205                           
 11206                           ;Test1.c: 416: }
 11207                           ;Test1.c: 417: RC2 = 1;
 11208  001704  8482               	bsf	3970,2,c	;volatile
 11209                           
 11210                           ;Test1.c: 418: beep(100);
 11211  001706  0E00               	movlw	0
 11212  001708  6E18               	movwf	beep@del+1,c
 11213  00170A  0E64               	movlw	100
 11214  00170C  6E17               	movwf	beep@del,c
 11215  00170E  EC4A  F03D         	call	_beep	;wreg free
 11216                           
 11217                           ;Test1.c: 419: MyDelay(500);
 11218  001712  0E01               	movlw	1
 11219  001714  6E15               	movwf	MyDelay@ms+1,c
 11220  001716  0EF4               	movlw	244
 11221  001718  6E14               	movwf	MyDelay@ms,c
 11222  00171A  EC8E  F03D         	call	_MyDelay	;wreg free
 11223                           
 11224                           ;Test1.c: 420: for(Current_Read_Page = 0; Current_Read_Page < Current_Write_Page; Curren
      +                          t_Read_Page++)
 11225  00171E  0E00               	movlw	0
 11226  001720  0100               	movlb	0	; () banked
 11227  001722  6FE8               	movwf	(_Current_Read_Page+1)& (0+255),b	;volatile
 11228  001724  0E00               	movlw	0
 11229  001726  0100               	movlb	0	; () banked
 11230  001728  6FE7               	movwf	_Current_Read_Page& (0+255),b	;volatile
 11231  00172A  D042               	goto	l10495
 11232  00172C                     l10467:
 11233                           
 11234                           ; BSR set to: 0
 11235                           ;Test1.c: 421: {
 11236                           ;Test1.c: 422: Clear_Packet();
 11237  00172C  EC2F  F03E         	call	_Clear_Packet	;wreg free
 11238                           
 11239                           ;Test1.c: 424: (LCDByte(0b00000001,0));
 11240  001730  0E00               	movlw	0
 11241  001732  6E17               	movwf	LCDByte@isdata,c
 11242  001734  0E01               	movlw	1
 11243  001736  EC54  F01E         	call	_LCDByte
 11244                           
 11245                           ;Test1.c: 425: LCDWriteString("READING EEPROM...");
 11246  00173A  0E7D               	movlw	high STR_37
 11247  00173C  6E1E               	movwf	LCDWriteString@msg+1,c
 11248  00173E  0E87               	movlw	low STR_37
 11249  001740  6E1D               	movwf	LCDWriteString@msg,c
 11250  001742  EC15  F019         	call	_LCDWriteString	;wreg free
 11251                           
 11252                           ;Test1.c: 426: read_packet_from_page(Current_Read_Page);
 11253  001746  C0E7  F01F         	movff	_Current_Read_Page,read_packet_from_page@page_no	;volatile
 11254  00174A  C0E8  F020         	movff	_Current_Read_Page+1,read_packet_from_page@page_no+1	;volatile
 11255  00174E  ECAD  F01B         	call	_read_packet_from_page	;wreg free
 11256                           
 11257                           ;Test1.c: 427: MyDelay(10);
 11258  001752  0E00               	movlw	0
 11259  001754  6E15               	movwf	MyDelay@ms+1,c
 11260  001756  0E0A               	movlw	10
 11261  001758  6E14               	movwf	MyDelay@ms,c
 11262  00175A  EC8E  F03D         	call	_MyDelay	;wreg free
 11263                           
 11264                           ;Test1.c: 428: LCDGotoXY(0,1);
 11265  00175E  0E01               	movlw	1
 11266  001760  6E1D               	movwf	LCDGotoXY@y,c
 11267  001762  0E00               	movlw	0
 11268  001764  EC72  F01F         	call	_LCDGotoXY
 11269                           
 11270                           ;Test1.c: 429: LCDWriteString("SENDING PACKET...");
 11271  001768  0E7D               	movlw	high STR_38
 11272  00176A  6E1E               	movwf	LCDWriteString@msg+1,c
 11273  00176C  0E99               	movlw	low STR_38
 11274  00176E  6E1D               	movwf	LCDWriteString@msg,c
 11275  001770  EC15  F019         	call	_LCDWriteString	;wreg free
 11276                           
 11277                           ;Test1.c: 431: tx_packet();
 11278  001774  ECDD  F014         	call	_tx_packet	;wreg free
 11279                           
 11280                           ;Test1.c: 432: (LCDByte(0b00000001,0));
 11281  001778  0E00               	movlw	0
 11282  00177A  6E17               	movwf	LCDByte@isdata,c
 11283  00177C  0E01               	movlw	1
 11284  00177E  EC54  F01E         	call	_LCDByte
 11285                           
 11286                           ;Test1.c: 433: LCDWriteString("PACKET SENT!");
 11287  001782  0E7F               	movlw	high STR_39
 11288  001784  6E1E               	movwf	LCDWriteString@msg+1,c
 11289  001786  0E37               	movlw	low STR_39
 11290  001788  6E1D               	movwf	LCDWriteString@msg,c
 11291  00178A  EC15  F019         	call	_LCDWriteString	;wreg free
 11292                           
 11293                           ;Test1.c: 434: MyDelay(100);
 11294  00178E  0E00               	movlw	0
 11295  001790  6E15               	movwf	MyDelay@ms+1,c
 11296  001792  0E64               	movlw	100
 11297  001794  6E14               	movwf	MyDelay@ms,c
 11298  001796  EC8E  F03D         	call	_MyDelay	;wreg free
 11299                           
 11300                           ;Test1.c: 435: (LCDByte(0b00000001,0));
 11301  00179A  0E00               	movlw	0
 11302  00179C  6E17               	movwf	LCDByte@isdata,c
 11303  00179E  0E01               	movlw	1
 11304  0017A0  EC54  F01E         	call	_LCDByte
 11305                           
 11306                           ;Test1.c: 436: Current_Read_Page++;
 11307  0017A4  0100               	movlb	0	; () banked
 11308  0017A6  4BE7               	infsnz	_Current_Read_Page& (0+255),f,b	;volatile
 11309  0017A8  2BE8               	incf	(_Current_Read_Page+1)& (0+255),f,b	;volatile
 11310                           
 11311                           ; BSR set to: 0
 11312  0017AA  0100               	movlb	0	; () banked
 11313  0017AC  4BE7               	infsnz	_Current_Read_Page& (0+255),f,b	;volatile
 11314  0017AE  2BE8               	incf	(_Current_Read_Page+1)& (0+255),f,b	;volatile
 11315  0017B0                     l10495:
 11316                           
 11317                           ; BSR set to: 0
 11318  0017B0  0100               	movlb	0	; () banked
 11319  0017B2  51E9               	movf	_Current_Write_Page& (0+255),w,b	;volatile
 11320  0017B4  0100               	movlb	0	; () banked
 11321  0017B6  5DE7               	subwf	_Current_Read_Page& (0+255),w,b	;volatile
 11322  0017B8  0100               	movlb	0	; () banked
 11323  0017BA  51EA               	movf	(_Current_Write_Page+1)& (0+255),w,b	;volatile
 11324  0017BC  0100               	movlb	0	; () banked
 11325  0017BE  59E8               	subwfb	(_Current_Read_Page+1)& (0+255),w,b	;volatile
 11326  0017C0  A0D8               	btfss	status,0,c
 11327  0017C2  D7B4               	goto	l10467
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;Test1.c: 437: }
 11331                           ;Test1.c: 438: RC2 = 0;
 11332  0017C4  9482               	bcf	3970,2,c	;volatile
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;Test1.c: 439: beep(100);
 11336  0017C6  0E00               	movlw	0
 11337  0017C8  6E18               	movwf	beep@del+1,c
 11338  0017CA  0E64               	movlw	100
 11339  0017CC  6E17               	movwf	beep@del,c
 11340  0017CE  EC4A  F03D         	call	_beep	;wreg free
 11341                           
 11342                           ;Test1.c: 440: MyDelay(500);
 11343  0017D2  0E01               	movlw	1
 11344  0017D4  6E15               	movwf	MyDelay@ms+1,c
 11345  0017D6  0EF4               	movlw	244
 11346  0017D8  6E14               	movwf	MyDelay@ms,c
 11347  0017DA  EC8E  F03D         	call	_MyDelay	;wreg free
 11348                           
 11349                           ;Test1.c: 442: (LCDByte(0b00000001,0));
 11350  0017DE  0E00               	movlw	0
 11351  0017E0  6E17               	movwf	LCDByte@isdata,c
 11352  0017E2  0E01               	movlw	1
 11353  0017E4  EC54  F01E         	call	_LCDByte
 11354                           
 11355                           ;Test1.c: 443: LCDWriteString("ALL DATA SENT");
 11356  0017E8  0E7F               	movlw	high STR_65
 11357  0017EA  6E1E               	movwf	LCDWriteString@msg+1,c
 11358  0017EC  0E00               	movlw	low STR_65
 11359  0017EE  6E1D               	movwf	LCDWriteString@msg,c
 11360  0017F0  EC15  F019         	call	_LCDWriteString	;wreg free
 11361                           
 11362                           ;Test1.c: 444: MyDelay(1000);
 11363  0017F4  0E03               	movlw	3
 11364  0017F6  6E15               	movwf	MyDelay@ms+1,c
 11365  0017F8  0EE8               	movlw	232
 11366  0017FA  6E14               	movwf	MyDelay@ms,c
 11367  0017FC  EC8E  F03D         	call	_MyDelay	;wreg free
 11368                           
 11369                           ;Test1.c: 446: (LCDByte(0b00000001,0));
 11370  001800  0E00               	movlw	0
 11371  001802  6E17               	movwf	LCDByte@isdata,c
 11372  001804  0E01               	movlw	1
 11373  001806  EC54  F01E         	call	_LCDByte
 11374                           
 11375                           ;Test1.c: 447: LCDWriteString("FORMATING MEMORY");
 11376  00180A  0E7E               	movlw	high STR_66
 11377  00180C  6E1E               	movwf	LCDWriteString@msg+1,c
 11378  00180E  0E36               	movlw	low STR_66
 11379  001810  6E1D               	movwf	LCDWriteString@msg,c
 11380  001812  EC15  F019         	call	_LCDWriteString	;wreg free
 11381                           
 11382                           ;Test1.c: 448: MyDelay(1000);
 11383  001816  0E03               	movlw	3
 11384  001818  6E15               	movwf	MyDelay@ms+1,c
 11385  00181A  0EE8               	movlw	232
 11386  00181C  6E14               	movwf	MyDelay@ms,c
 11387  00181E  EC8E  F03D         	call	_MyDelay	;wreg free
 11388                           
 11389                           ;Test1.c: 450: Current_Write_Page = 0;
 11390  001822  0E00               	movlw	0
 11391  001824  0100               	movlb	0	; () banked
 11392  001826  6FEA               	movwf	(_Current_Write_Page+1)& (0+255),b	;volatile
 11393  001828  0E00               	movlw	0
 11394  00182A  0100               	movlb	0	; () banked
 11395  00182C  6FE9               	movwf	_Current_Write_Page& (0+255),b	;volatile
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;Test1.c: 452: Write_b_eep(0x00, 0x00);
 11399  00182E  0E00               	movlw	0
 11400  001830  6E15               	movwf	Write_b_eep@badd+1,c
 11401  001832  0E00               	movlw	0
 11402  001834  6E14               	movwf	Write_b_eep@badd,c
 11403  001836  0E00               	movlw	0
 11404  001838  6E16               	movwf	Write_b_eep@bdat,c
 11405  00183A  EC94  F01F         	call	_Write_b_eep	;wreg free
 11406                           
 11407                           ;Test1.c: 453: _delay(50);
 11408  00183E  0E0A               	movlw	10
 11409  001840                     u8867:
 11410  001840  F000               	nop	
 11411  001842  2EE8               	decfsz	wreg,f,c
 11412  001844  D7FD               	goto	u8867
 11413                           
 11414                           ;Test1.c: 454: Write_b_eep(0x01, 0x00);
 11415  001846  0E00               	movlw	0
 11416  001848  6E15               	movwf	Write_b_eep@badd+1,c
 11417  00184A  0E01               	movlw	1
 11418  00184C  6E14               	movwf	Write_b_eep@badd,c
 11419  00184E  0E00               	movlw	0
 11420  001850  6E16               	movwf	Write_b_eep@bdat,c
 11421  001852  EC94  F01F         	call	_Write_b_eep	;wreg free
 11422                           
 11423                           ;Test1.c: 455: _delay(50);
 11424  001856  0E0A               	movlw	10
 11425  001858                     u8877:
 11426  001858  F000               	nop	
 11427  00185A  2EE8               	decfsz	wreg,f,c
 11428  00185C  D7FD               	goto	u8877
 11429                           
 11430                           ;Test1.c: 458: clear_rom();
 11431  00185E  EC6F  F01C         	call	_clear_rom	;wreg free
 11432                           
 11433                           ;Test1.c: 460: (LCDByte(0b00000001,0));
 11434  001862  0E00               	movlw	0
 11435  001864  6E17               	movwf	LCDByte@isdata,c
 11436  001866  0E01               	movlw	1
 11437  001868  EC54  F01E         	call	_LCDByte
 11438                           
 11439                           ;Test1.c: 461: LCDWriteString("FORMAT COMPLETE!");
 11440  00186C  0E7D               	movlw	high STR_67
 11441  00186E  6E1E               	movwf	LCDWriteString@msg+1,c
 11442  001870  0EF2               	movlw	low STR_67
 11443  001872  6E1D               	movwf	LCDWriteString@msg,c
 11444  001874  EC15  F019         	call	_LCDWriteString	;wreg free
 11445                           
 11446                           ;Test1.c: 462: MyDelay(1000);
 11447  001878  0E03               	movlw	3
 11448  00187A  6E15               	movwf	MyDelay@ms+1,c
 11449  00187C  0EE8               	movlw	232
 11450  00187E  6E14               	movwf	MyDelay@ms,c
 11451  001880  EC8E  F03D         	call	_MyDelay	;wreg free
 11452                           
 11453                           ;Test1.c: 463: return;
 11454  001884  0012               	return	
 11455  001886  FFFF               	dw	65535	; errata NOP
 11456  001888                     __end_of_data_to_center:
 11457                           	opt stack 0
 11458                           tblptru	equ	0xFF8
 11459                           tblptrh	equ	0xFF7
 11460                           tblptrl	equ	0xFF6
 11461                           tablat	equ	0xFF5
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           intcon	equ	0xFF2
 11465                           postinc0	equ	0xFEE
 11466                           wreg	equ	0xFE8
 11467                           postinc1	equ	0xFE6
 11468                           postdec1	equ	0xFE5
 11469                           fsr1h	equ	0xFE2
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           fsr2h	equ	0xFDA
 11475                           fsr2l	equ	0xFD9
 11476                           status	equ	0xFD8
 11477                           
 11478 ;; *************** function _tx_packet *****************
 11479 ;; Defined at:
 11480 ;;		line 487 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\Test1.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;  res             1   46[COMRAM] unsigned char 
 11485 ;;  attempts        1   45[COMRAM] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;		None               void
 11488 ;; Registers used:
 11489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11495 ;;      Params:         0       0       0       0       0       0       0
 11496 ;;      Locals:         2       0       0       0       0       0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0
 11498 ;;      Totals:         2       0       0       0       0       0       0
 11499 ;;Total ram usage:        2 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    7
 11502 ;; This function calls:
 11503 ;;		_LCDByte
 11504 ;;		_LCDWriteString
 11505 ;;		_MyDelay
 11506 ;;		_Send_Packet
 11507 ;;		_beep
 11508 ;; This function is called by:
 11509 ;;		_per_minute_reading
 11510 ;;		_per_second_reading
 11511 ;;		_rtc_setting
 11512 ;;		_data_to_center
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text49
 11517  0029BA                     __ptext49:
 11518                           	opt stack 0
 11519  0029BA                     _tx_packet:
 11520                           	opt stack 22
 11521                           
 11522                           ;incstack = 0
 11523  0029BA  FFFF               	dw	65535
 11524                           
 11525                           ;Test1.c: 489: unsigned char attempts = 0;
 11526  0029BC  0E00               	movlw	0
 11527  0029BE  6E2E               	movwf	tx_packet@attempts,c
 11528                           
 11529                           ;Test1.c: 490: unsigned char res = 48;
 11530  0029C0  0E30               	movlw	48
 11531  0029C2  6E2F               	movwf	tx_packet@res,c
 11532                           
 11533                           ;Test1.c: 491: while(res == 48 && attempts < 10)
 11534  0029C4  D038               	goto	l10203
 11535  0029C6                     l10177:
 11536                           
 11537                           ;Test1.c: 492: {
 11538                           ;Test1.c: 493: res = Send_Packet();
 11539  0029C6  ECAB  F010         	call	_Send_Packet	;wreg free
 11540  0029CA  6E2F               	movwf	tx_packet@res,c
 11541                           
 11542                           ;Test1.c: 494: if(res == 0x00)
 11543  0029CC  662F               	tstfsz	tx_packet@res,c
 11544  0029CE  D032               	goto	l10201
 11545                           
 11546                           ;Test1.c: 495: {
 11547                           ;Test1.c: 496: RC2 = 0;
 11548  0029D0  9482               	bcf	3970,2,c	;volatile
 11549                           
 11550                           ;Test1.c: 497: (LCDByte(0b00000001,0));
 11551  0029D2  0E00               	movlw	0
 11552  0029D4  6E17               	movwf	LCDByte@isdata,c
 11553  0029D6  0E01               	movlw	1
 11554  0029D8  EC54  F01E         	call	_LCDByte
 11555                           
 11556                           ;Test1.c: 498: LCDWriteString("RF LINK OFF");
 11557  0029DC  0E7F               	movlw	high STR_68
 11558  0029DE  6E1E               	movwf	LCDWriteString@msg+1,c
 11559  0029E0  0E84               	movlw	low STR_68
 11560  0029E2  6E1D               	movwf	LCDWriteString@msg,c
 11561  0029E4  EC15  F019         	call	_LCDWriteString	;wreg free
 11562                           
 11563                           ;Test1.c: 499: beep(100);
 11564  0029E8  0E00               	movlw	0
 11565  0029EA  6E18               	movwf	beep@del+1,c
 11566  0029EC  0E64               	movlw	100
 11567  0029EE  6E17               	movwf	beep@del,c
 11568  0029F0  EC4A  F03D         	call	_beep	;wreg free
 11569                           
 11570                           ;Test1.c: 500: MyDelay(5000);
 11571  0029F4  0E13               	movlw	19
 11572  0029F6  6E15               	movwf	MyDelay@ms+1,c
 11573  0029F8  0E88               	movlw	136
 11574  0029FA  6E14               	movwf	MyDelay@ms,c
 11575  0029FC  EC8E  F03D         	call	_MyDelay	;wreg free
 11576                           
 11577                           ;Test1.c: 501: RC2 = 1;
 11578  002A00  8482               	bsf	3970,2,c	;volatile
 11579                           
 11580                           ;Test1.c: 502: (LCDByte(0b00000001,0));
 11581  002A02  0E00               	movlw	0
 11582  002A04  6E17               	movwf	LCDByte@isdata,c
 11583  002A06  0E01               	movlw	1
 11584  002A08  EC54  F01E         	call	_LCDByte
 11585                           
 11586                           ;Test1.c: 503: LCDWriteString("RF LINK ON");
 11587  002A0C  0E7F               	movlw	high STR_69
 11588  002A0E  6E1E               	movwf	LCDWriteString@msg+1,c
 11589  002A10  0E9C               	movlw	low STR_69
 11590  002A12  6E1D               	movwf	LCDWriteString@msg,c
 11591  002A14  EC15  F019         	call	_LCDWriteString	;wreg free
 11592                           
 11593                           ;Test1.c: 504: beep(100);
 11594  002A18  0E00               	movlw	0
 11595  002A1A  6E18               	movwf	beep@del+1,c
 11596  002A1C  0E64               	movlw	100
 11597  002A1E  6E17               	movwf	beep@del,c
 11598  002A20  EC4A  F03D         	call	_beep	;wreg free
 11599                           
 11600                           ;Test1.c: 505: MyDelay(500);
 11601  002A24  0E01               	movlw	1
 11602  002A26  6E15               	movwf	MyDelay@ms+1,c
 11603  002A28  0EF4               	movlw	244
 11604  002A2A  6E14               	movwf	MyDelay@ms,c
 11605  002A2C  EC8E  F03D         	call	_MyDelay	;wreg free
 11606                           
 11607                           ;Test1.c: 506: res = 48;
 11608  002A30  0E30               	movlw	48
 11609  002A32  6E2F               	movwf	tx_packet@res,c
 11610  002A34                     l10201:
 11611                           
 11612                           ;Test1.c: 507: }
 11613                           ;Test1.c: 508: attempts++;
 11614  002A34  2A2E               	incf	tx_packet@attempts,f,c
 11615  002A36                     l10203:
 11616  002A36  502F               	movf	tx_packet@res,w,c
 11617  002A38  0A30               	xorlw	48
 11618  002A3A  A4D8               	btfss	status,2,c
 11619  002A3C  D003               	goto	l10207
 11620  002A3E  0E09               	movlw	9
 11621  002A40  642E               	cpfsgt	tx_packet@attempts,c
 11622  002A42  D7C1               	goto	l10177
 11623  002A44                     l10207:
 11624                           
 11625                           ;Test1.c: 509: }
 11626                           ;Test1.c: 510: if(res != 49)
 11627  002A44  502F               	movf	tx_packet@res,w,c
 11628  002A46  0A31               	xorlw	49
 11629  002A48  B4D8               	btfsc	status,2,c
 11630  002A4A  D022               	goto	l10229
 11631                           
 11632                           ;Test1.c: 511: {
 11633                           ;Test1.c: 514: (LCDByte(0b00000001,0));
 11634  002A4C  0E00               	movlw	0
 11635  002A4E  6E17               	movwf	LCDByte@isdata,c
 11636  002A50  0E01               	movlw	1
 11637  002A52  EC54  F01E         	call	_LCDByte
 11638                           
 11639                           ;Test1.c: 515: RD7 = 1;
 11640  002A56  8E83               	bsf	3971,7,c	;volatile
 11641  002A58                     l10213:
 11642                           
 11643                           ;Test1.c: 517: {
 11644                           ;Test1.c: 518: LCDWriteString("WIRELESS FAILD...!");
 11645  002A58  0E7D               	movlw	high STR_70
 11646  002A5A  6E1E               	movwf	LCDWriteString@msg+1,c
 11647  002A5C  0E62               	movlw	low STR_70
 11648  002A5E  6E1D               	movwf	LCDWriteString@msg,c
 11649  002A60  EC15  F019         	call	_LCDWriteString	;wreg free
 11650                           
 11651                           ;Test1.c: 519: RE0 = 1;
 11652  002A64  8084               	bsf	3972,0,c	;volatile
 11653                           
 11654                           ;Test1.c: 520: RD7 = 1;
 11655  002A66  8E83               	bsf	3971,7,c	;volatile
 11656                           
 11657                           ;Test1.c: 521: MyDelay(100);
 11658  002A68  0E00               	movlw	0
 11659  002A6A  6E15               	movwf	MyDelay@ms+1,c
 11660  002A6C  0E64               	movlw	100
 11661  002A6E  6E14               	movwf	MyDelay@ms,c
 11662  002A70  EC8E  F03D         	call	_MyDelay	;wreg free
 11663                           
 11664                           ;Test1.c: 522: (LCDByte(0b00000001,0));
 11665  002A74  0E00               	movlw	0
 11666  002A76  6E17               	movwf	LCDByte@isdata,c
 11667  002A78  0E01               	movlw	1
 11668  002A7A  EC54  F01E         	call	_LCDByte
 11669                           
 11670                           ;Test1.c: 523: RE0 = 0;
 11671  002A7E  9084               	bcf	3972,0,c	;volatile
 11672                           
 11673                           ;Test1.c: 524: RD7 = 0;
 11674  002A80  9E83               	bcf	3971,7,c	;volatile
 11675                           
 11676                           ;Test1.c: 525: MyDelay(100);
 11677  002A82  0E00               	movlw	0
 11678  002A84  6E15               	movwf	MyDelay@ms+1,c
 11679  002A86  0E64               	movlw	100
 11680  002A88  6E14               	movwf	MyDelay@ms,c
 11681  002A8A  EC8E  F03D         	call	_MyDelay	;wreg free
 11682  002A8E  D7E4               	goto	l10213
 11683  002A90                     l10229:
 11684                           
 11685                           ;Test1.c: 526: }
 11686                           ;Test1.c: 527: }
 11687                           ;Test1.c: 528: MyDelay(50);
 11688  002A90  0E00               	movlw	0
 11689  002A92  6E15               	movwf	MyDelay@ms+1,c
 11690  002A94  0E32               	movlw	50
 11691  002A96  6E14               	movwf	MyDelay@ms,c
 11692  002A98  EC8E  F03D         	call	_MyDelay	;wreg free
 11693  002A9C  0012               	return	
 11694  002A9E  FFFF               	dw	65535	; errata NOP
 11695  002AA0                     __end_of_tx_packet:
 11696                           	opt stack 0
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           intcon	equ	0xFF2
 11704                           postinc0	equ	0xFEE
 11705                           wreg	equ	0xFE8
 11706                           postinc1	equ	0xFE6
 11707                           postdec1	equ	0xFE5
 11708                           fsr1h	equ	0xFE2
 11709                           fsr1l	equ	0xFE1
 11710                           indf2	equ	0xFDF
 11711                           postinc2	equ	0xFDE
 11712                           postdec2	equ	0xFDD
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _beep *****************
 11718 ;; Defined at:
 11719 ;;		line 208 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\rtu.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;  del             2   22[COMRAM] unsigned int 
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;		None
 11724 ;; Return value:  Size  Location     Type
 11725 ;;		None               void
 11726 ;; Registers used:
 11727 ;;		wreg, status,2, status,0, cstack
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11733 ;;      Params:         2       0       0       0       0       0       0
 11734 ;;      Locals:         0       0       0       0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0
 11736 ;;      Totals:         2       0       0       0       0       0       0
 11737 ;;Total ram usage:        2 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    3
 11740 ;; This function calls:
 11741 ;;		_MyDelay
 11742 ;; This function is called by:
 11743 ;;		_main
 11744 ;;		_per_minute_reading
 11745 ;;		_per_second_reading
 11746 ;;		_rtc_setting
 11747 ;;		_data_to_center
 11748 ;;		_tx_packet
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752                           	psect	text50
 11753  007A94                     __ptext50:
 11754                           	opt stack 0
 11755  007A94                     _beep:
 11756                           	opt stack 25
 11757                           
 11758                           ;incstack = 0
 11759  007A94  FFFF               	dw	65535
 11760                           
 11761                           ;rtu.c: 210: RD7 = 1;
 11762  007A96  8E83               	bsf	3971,7,c	;volatile
 11763                           
 11764                           ;rtu.c: 211: MyDelay(del);
 11765  007A98  C017  F014         	movff	beep@del,MyDelay@ms
 11766  007A9C  C018  F015         	movff	beep@del+1,MyDelay@ms+1
 11767  007AA0  EC8E  F03D         	call	_MyDelay	;wreg free
 11768                           
 11769                           ;rtu.c: 212: RD7 = 0;
 11770  007AA4  9E83               	bcf	3971,7,c	;volatile
 11771  007AA6  0012               	return	
 11772  007AA8  FFFF               	dw	65535	; errata NOP
 11773  007AAA                     __end_of_beep:
 11774                           	opt stack 0
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           postinc0	equ	0xFEE
 11783                           wreg	equ	0xFE8
 11784                           postinc1	equ	0xFE6
 11785                           postdec1	equ	0xFE5
 11786                           fsr1h	equ	0xFE2
 11787                           fsr1l	equ	0xFE1
 11788                           indf2	equ	0xFDF
 11789                           postinc2	equ	0xFDE
 11790                           postdec2	equ	0xFDD
 11791                           fsr2h	equ	0xFDA
 11792                           fsr2l	equ	0xFD9
 11793                           status	equ	0xFD8
 11794                           
 11795 ;; *************** function _Send_Packet *****************
 11796 ;; Defined at:
 11797 ;;		line 131 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\communication.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;		None
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;  ts              2   39[COMRAM] unsigned int 
 11802 ;;  data            1   44[COMRAM] unsigned char 
 11803 ;;  n               1   43[COMRAM] unsigned char 
 11804 ;;  result          1   42[COMRAM] unsigned char 
 11805 ;;  count           1   41[COMRAM] unsigned char 
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      unsigned char 
 11808 ;; Registers used:
 11809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11815 ;;      Params:         0       0       0       0       0       0       0
 11816 ;;      Locals:         6       0       0       0       0       0       0
 11817 ;;      Temps:          1       0       0       0       0       0       0
 11818 ;;      Totals:         7       0       0       0       0       0       0
 11819 ;;Total ram usage:        7 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    6
 11822 ;; This function calls:
 11823 ;;		_Eco_Test
 11824 ;;		_LCDByte
 11825 ;;		_LCDWriteString
 11826 ;;		_USARTDataAvailable
 11827 ;;		_USARTFlushBuffer
 11828 ;;		_USARTReadData
 11829 ;;		_USARTWriteChar
 11830 ;; This function is called by:
 11831 ;;		_tx_packet
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           	psect	text51
 11836  002156                     __ptext51:
 11837                           	opt stack 0
 11838  002156                     _Send_Packet:
 11839                           	opt stack 22
 11840                           
 11841                           ;incstack = 0
 11842  002156  FFFF               	dw	65535
 11843                           
 11844                           ;communication.c: 134: unsigned char result = 0;
 11845  002158  0E00               	movlw	0
 11846  00215A  6E2B               	movwf	Send_Packet@result,c
 11847                           
 11848                           ;communication.c: 135: unsigned char count = 0, data = 0, n = 0;
 11849  00215C  0E00               	movlw	0
 11850  00215E  6E2A               	movwf	Send_Packet@count,c
 11851  002160  0E00               	movlw	0
 11852  002162  6E2D               	movwf	Send_Packet@data,c
 11853  002164  0E00               	movlw	0
 11854  002166  6E2C               	movwf	Send_Packet@n,c
 11855                           
 11856                           ;communication.c: 136: unsigned int ts = 0;
 11857  002168  0E00               	movlw	0
 11858  00216A  6E29               	movwf	Send_Packet@ts+1,c
 11859  00216C  0E00               	movlw	0
 11860  00216E  6E28               	movwf	Send_Packet@ts,c
 11861                           
 11862                           ;communication.c: 138: result = Eco_Test();
 11863  002170  EC7E  F013         	call	_Eco_Test	;wreg free
 11864  002174  6E2B               	movwf	Send_Packet@result,c
 11865                           
 11866                           ;communication.c: 140: if(result == 0x01)
 11867  002176  042B               	decf	Send_Packet@result,w,c
 11868  002178  A4D8               	btfss	status,2,c
 11869  00217A  D08F               	goto	l9437
 11870                           
 11871                           ;communication.c: 141: {
 11872                           ;communication.c: 145: (LCDByte(0b00000001,0));
 11873  00217C  0E00               	movlw	0
 11874  00217E  6E17               	movwf	LCDByte@isdata,c
 11875  002180  0E01               	movlw	1
 11876  002182  EC54  F01E         	call	_LCDByte
 11877                           
 11878                           ;communication.c: 146: LCDWriteString("SENDING PACKET ");
 11879  002186  0E7E               	movlw	high STR_8
 11880  002188  6E1E               	movwf	LCDWriteString@msg+1,c
 11881  00218A  0E89               	movlw	low STR_8
 11882  00218C  6E1D               	movwf	LCDWriteString@msg,c
 11883  00218E  EC15  F019         	call	_LCDWriteString	;wreg free
 11884                           
 11885                           ;communication.c: 147: _delay((unsigned long)((1)*(100000000/4000.0)));
 11886  002192  0E19               	movlw	25
 11887  002194  6E27               	movwf	??_Send_Packet& (0+255),c
 11888  002196  0E5D               	movlw	93
 11889  002198                     u8887:
 11890  002198  2EE8               	decfsz	wreg,f,c
 11891  00219A  D7FE               	goto	u8887
 11892  00219C  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 11893  00219E  D7FC               	goto	u8887
 11894                           
 11895                           ;communication.c: 148: count = 0;
 11896  0021A0  0E00               	movlw	0
 11897  0021A2  6E2A               	movwf	Send_Packet@count,c
 11898                           
 11899                           ;communication.c: 149: data = PACKET[0];
 11900  0021A4  C100  F02D         	movff	_PACKET,Send_Packet@data	;volatile
 11901                           
 11902                           ;communication.c: 150: while(data != 0xEA)
 11903  0021A8  D022               	goto	l9391
 11904  0021AA                     l524:
 11905                           
 11906                           ;communication.c: 151: {
 11907                           ;communication.c: 152: RE2 = 1;
 11908  0021AA  8484               	bsf	3972,2,c	;volatile
 11909                           
 11910                           ;communication.c: 153: USARTWriteChar(data);
 11911  0021AC  502D               	movf	Send_Packet@data,w,c
 11912  0021AE  EC25  F03D         	call	_USARTWriteChar
 11913                           
 11914                           ;communication.c: 154: _delay((unsigned long)((5)*(100000000/4000.0)));
 11915  0021B2  0E7A               	movlw	122
 11916  0021B4  6E27               	movwf	??_Send_Packet& (0+255),c
 11917  0021B6  0ED4               	movlw	212
 11918  0021B8                     u8897:
 11919  0021B8  2EE8               	decfsz	wreg,f,c
 11920  0021BA  D7FE               	goto	u8897
 11921  0021BC  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 11922  0021BE  D7FC               	goto	u8897
 11923  0021C0  D000               	nop2	
 11924                           
 11925                           ;communication.c: 155: _delay((unsigned long)((5)*(100000000/4000.0)));
 11926  0021C2  0E7A               	movlw	122
 11927  0021C4  6E27               	movwf	??_Send_Packet& (0+255),c
 11928  0021C6  0ED4               	movlw	212
 11929  0021C8                     u8907:
 11930  0021C8  2EE8               	decfsz	wreg,f,c
 11931  0021CA  D7FE               	goto	u8907
 11932  0021CC  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 11933  0021CE  D7FC               	goto	u8907
 11934  0021D0  D000               	nop2	
 11935                           
 11936                           ;communication.c: 156: RE2 = 0;
 11937  0021D2  9484               	bcf	3972,2,c	;volatile
 11938                           
 11939                           ;communication.c: 157: count++;
 11940  0021D4  2A2A               	incf	Send_Packet@count,f,c
 11941                           
 11942                           ;communication.c: 158: data = PACKET[count];
 11943  0021D6  502A               	movf	Send_Packet@count,w,c
 11944  0021D8  0D01               	mullw	1
 11945  0021DA  0101               	movlb	1	; () banked
 11946  0021DC  0E00               	movlw	low _PACKET	;volatile
 11947  0021DE  24F3               	addwf	prodl,w,c
 11948  0021E0  6ED9               	movwf	fsr2l,c
 11949  0021E2  0101               	movlb	1	; () banked
 11950  0021E4  0E01               	movlw	high _PACKET	;volatile
 11951  0021E6  20F4               	addwfc	prodh,w,c
 11952  0021E8  6EDA               	movwf	fsr2h,c
 11953  0021EA  50DF               	movf	indf2,w,c
 11954  0021EC  6E2D               	movwf	Send_Packet@data,c
 11955  0021EE                     l9391:
 11956  0021EE  502D               	movf	Send_Packet@data,w,c
 11957  0021F0  0AEA               	xorlw	234
 11958  0021F2  A4D8               	btfss	status,2,c
 11959  0021F4  D7DA               	goto	l524
 11960                           
 11961                           ;communication.c: 159: }
 11962                           ;communication.c: 161: RE2 = 1;
 11963  0021F6  8484               	bsf	3972,2,c	;volatile
 11964                           
 11965                           ;communication.c: 162: USARTWriteChar(data);
 11966  0021F8  502D               	movf	Send_Packet@data,w,c
 11967  0021FA  EC25  F03D         	call	_USARTWriteChar
 11968                           
 11969                           ;communication.c: 163: _delay((unsigned long)((5)*(100000000/4000.0)));
 11970  0021FE  0E7A               	movlw	122
 11971  002200  6E27               	movwf	??_Send_Packet& (0+255),c
 11972  002202  0ED4               	movlw	212
 11973  002204                     u8917:
 11974  002204  2EE8               	decfsz	wreg,f,c
 11975  002206  D7FE               	goto	u8917
 11976  002208  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 11977  00220A  D7FC               	goto	u8917
 11978  00220C  D000               	nop2	
 11979                           
 11980                           ;communication.c: 164: _delay((unsigned long)((5)*(100000000/4000.0)));
 11981  00220E  0E7A               	movlw	122
 11982  002210  6E27               	movwf	??_Send_Packet& (0+255),c
 11983  002212  0ED4               	movlw	212
 11984  002214                     u8927:
 11985  002214  2EE8               	decfsz	wreg,f,c
 11986  002216  D7FE               	goto	u8927
 11987  002218  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 11988  00221A  D7FC               	goto	u8927
 11989  00221C  D000               	nop2	
 11990                           
 11991                           ;communication.c: 165: RE2 = 0;
 11992  00221E  9484               	bcf	3972,2,c	;volatile
 11993                           
 11994                           ;communication.c: 166: (LCDByte(0b00000001,0));
 11995  002220  0E00               	movlw	0
 11996  002222  6E17               	movwf	LCDByte@isdata,c
 11997  002224  0E01               	movlw	1
 11998  002226  EC54  F01E         	call	_LCDByte
 11999                           
 12000                           ;communication.c: 167: LCDWriteString("PACKET SENT");
 12001  00222A  0E7F               	movlw	high STR_9
 12002  00222C  6E1E               	movwf	LCDWriteString@msg+1,c
 12003  00222E  0E90               	movlw	low STR_9
 12004  002230  6E1D               	movwf	LCDWriteString@msg,c
 12005  002232  EC15  F019         	call	_LCDWriteString	;wreg free
 12006                           
 12007                           ;communication.c: 169: n = 0;
 12008  002236  0E00               	movlw	0
 12009  002238  6E2C               	movwf	Send_Packet@n,c
 12010                           
 12011                           ;communication.c: 170: ts = 0;
 12012  00223A  0E00               	movlw	0
 12013  00223C  6E29               	movwf	Send_Packet@ts+1,c
 12014  00223E  0E00               	movlw	0
 12015  002240  6E28               	movwf	Send_Packet@ts,c
 12016                           
 12017                           ;communication.c: 172: USARTFlushBuffer();
 12018  002242  EC55  F03D         	call	_USARTFlushBuffer	;wreg free
 12019                           
 12020                           ;communication.c: 174: while(n == 0 && ts < 2000)
 12021  002246  D00C               	goto	l9417
 12022  002248                     l9411:
 12023                           
 12024                           ;communication.c: 175: {
 12025                           ;communication.c: 177: n = USARTDataAvailable();
 12026  002248  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
 12027  00224C  6E2C               	movwf	Send_Packet@n,c
 12028                           
 12029                           ;communication.c: 178: ts++;
 12030  00224E  4A28               	infsnz	Send_Packet@ts,f,c
 12031  002250  2A29               	incf	Send_Packet@ts+1,f,c
 12032                           
 12033                           ;communication.c: 179: _delay((unsigned long)((1)*(100000000/4000.0)));
 12034  002252  0E19               	movlw	25
 12035  002254  6E27               	movwf	??_Send_Packet& (0+255),c
 12036  002256  0E5D               	movlw	93
 12037  002258                     u8937:
 12038  002258  2EE8               	decfsz	wreg,f,c
 12039  00225A  D7FE               	goto	u8937
 12040  00225C  2E27               	decfsz	??_Send_Packet& (0+255),f,c
 12041  00225E  D7FC               	goto	u8937
 12042  002260                     l9417:
 12043  002260  662C               	tstfsz	Send_Packet@n,c
 12044  002262  D006               	goto	l9421
 12045  002264  0ED0               	movlw	208
 12046  002266  5C28               	subwf	Send_Packet@ts,w,c
 12047  002268  0E07               	movlw	7
 12048  00226A  5829               	subwfb	Send_Packet@ts+1,w,c
 12049  00226C  A0D8               	btfss	status,0,c
 12050  00226E  D7EC               	goto	l9411
 12051  002270                     l9421:
 12052                           
 12053                           ;communication.c: 180: }
 12054                           ;communication.c: 186: if(n!=0)
 12055  002270  502C               	movf	Send_Packet@n,w,c
 12056  002272  B4D8               	btfsc	status,2,c
 12057  002274  D012               	goto	l9437
 12058                           
 12059                           ;communication.c: 187: {
 12060                           ;communication.c: 190: RC0 = 1;
 12061  002276  8082               	bsf	3970,0,c	;volatile
 12062                           
 12063                           ;communication.c: 191: result=USARTReadData();
 12064  002278  ECCF  F01F         	call	_USARTReadData	;wreg free
 12065  00227C  6E2B               	movwf	Send_Packet@result,c
 12066                           
 12067                           ;communication.c: 192: RC0 = 0;
 12068  00227E  9082               	bcf	3970,0,c	;volatile
 12069                           
 12070                           ;communication.c: 193: (LCDByte(0b00000001,0));
 12071  002280  0E00               	movlw	0
 12072  002282  6E17               	movwf	LCDByte@isdata,c
 12073  002284  0E01               	movlw	1
 12074  002286  EC54  F01E         	call	_LCDByte
 12075                           
 12076                           ;communication.c: 194: LCDWriteString("PACKET DELIVERED");
 12077  00228A  0E7E               	movlw	high STR_10
 12078  00228C  6E1E               	movwf	LCDWriteString@msg+1,c
 12079  00228E  0E58               	movlw	low STR_10
 12080  002290  6E1D               	movwf	LCDWriteString@msg,c
 12081  002292  EC15  F019         	call	_LCDWriteString	;wreg free
 12082                           
 12083                           ;communication.c: 195: return result;
 12084  002296  502B               	movf	Send_Packet@result,w,c
 12085  002298  D001               	goto	l532
 12086  00229A                     l9437:
 12087                           
 12088                           ;communication.c: 196: }
 12089                           ;communication.c: 197: }
 12090                           ;communication.c: 198: return 0;
 12091  00229A  0E00               	movlw	0
 12092  00229C                     l532:
 12093  00229C  0012               	return	
 12094  00229E  FFFF               	dw	65535	; errata NOP
 12095  0022A0                     __end_of_Send_Packet:
 12096                           	opt stack 0
 12097                           tblptru	equ	0xFF8
 12098                           tblptrh	equ	0xFF7
 12099                           tblptrl	equ	0xFF6
 12100                           tablat	equ	0xFF5
 12101                           prodh	equ	0xFF4
 12102                           prodl	equ	0xFF3
 12103                           intcon	equ	0xFF2
 12104                           postinc0	equ	0xFEE
 12105                           wreg	equ	0xFE8
 12106                           postinc1	equ	0xFE6
 12107                           postdec1	equ	0xFE5
 12108                           fsr1h	equ	0xFE2
 12109                           fsr1l	equ	0xFE1
 12110                           indf2	equ	0xFDF
 12111                           postinc2	equ	0xFDE
 12112                           postdec2	equ	0xFDD
 12113                           fsr2h	equ	0xFDA
 12114                           fsr2l	equ	0xFD9
 12115                           status	equ	0xFD8
 12116                           
 12117 ;; *************** function _Eco_Test *****************
 12118 ;; Defined at:
 12119 ;;		line 30 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\communication.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;		None
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  data            1   34[COMRAM] unsigned char 
 12124 ;;  ts              2   35[COMRAM] unsigned int 
 12125 ;;  n               1   37[COMRAM] unsigned char 
 12126 ;;  re              1   33[COMRAM] unsigned char 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  1    wreg      unsigned char 
 12129 ;; Registers used:
 12130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12136 ;;      Params:         0       0       0       0       0       0       0
 12137 ;;      Locals:         5       0       0       0       0       0       0
 12138 ;;      Temps:          1       0       0       0       0       0       0
 12139 ;;      Totals:         6       0       0       0       0       0       0
 12140 ;;Total ram usage:        6 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    5
 12143 ;; This function calls:
 12144 ;;		_Check_Busy_Line
 12145 ;;		_LCDByte
 12146 ;;		_LCDWriteString
 12147 ;;		_USARTDataAvailable
 12148 ;;		_USARTFlushBuffer
 12149 ;;		_USARTReadData
 12150 ;;		_USARTWriteChar
 12151 ;; This function is called by:
 12152 ;;		_Send_Packet
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text52
 12157  0026FC                     __ptext52:
 12158                           	opt stack 0
 12159  0026FC                     _Eco_Test:
 12160                           	opt stack 22
 12161                           
 12162                           ;incstack = 0
 12163  0026FC  FFFF               	dw	65535
 12164                           
 12165                           ;communication.c: 32: uint8_t n = 0;
 12166  0026FE  0E00               	movlw	0
 12167  002700  6E26               	movwf	Eco_Test@n,c
 12168                           
 12169                           ;communication.c: 33: unsigned int ts = 0;
 12170  002702  0E00               	movlw	0
 12171  002704  6E25               	movwf	Eco_Test@ts+1,c
 12172  002706  0E00               	movlw	0
 12173  002708  6E24               	movwf	Eco_Test@ts,c
 12174                           
 12175                           ;communication.c: 34: unsigned char re = 0;
 12176  00270A  0E00               	movlw	0
 12177  00270C  6E22               	movwf	Eco_Test@re,c
 12178                           
 12179                           ;communication.c: 36: re = Check_Busy_Line();
 12180  00270E  EC29  F01F         	call	_Check_Busy_Line	;wreg free
 12181  002712  6E22               	movwf	Eco_Test@re,c
 12182                           
 12183                           ;communication.c: 37: if(re = 0x01)
 12184  002714  0E01               	movlw	1
 12185  002716  6E22               	movwf	Eco_Test@re,c
 12186                           
 12187                           ;communication.c: 38: {
 12188                           ;communication.c: 39: (LCDByte(0b00000001,0));
 12189  002718  0E00               	movlw	0
 12190  00271A  6E17               	movwf	LCDByte@isdata,c
 12191  00271C  0E01               	movlw	1
 12192  00271E  EC54  F01E         	call	_LCDByte
 12193                           
 12194                           ;communication.c: 40: LCDWriteString("LINE FREE");
 12195  002722  0E7F               	movlw	high STR_1
 12196  002724  6E1E               	movwf	LCDWriteString@msg+1,c
 12197  002726  0EC8               	movlw	low STR_1
 12198  002728  6E1D               	movwf	LCDWriteString@msg,c
 12199  00272A  EC15  F019         	call	_LCDWriteString	;wreg free
 12200                           
 12201                           ;communication.c: 42: USARTFlushBuffer();
 12202  00272E  EC55  F03D         	call	_USARTFlushBuffer	;wreg free
 12203                           
 12204                           ;communication.c: 45: RE2 = 1;
 12205  002732  8484               	bsf	3972,2,c	;volatile
 12206                           
 12207                           ;communication.c: 46: _delay((unsigned long)((5)*(100000000/4000.0)));
 12208  002734  0E7A               	movlw	122
 12209  002736  6E21               	movwf	??_Eco_Test& (0+255),c
 12210  002738  0ED4               	movlw	212
 12211  00273A                     u8947:
 12212  00273A  2EE8               	decfsz	wreg,f,c
 12213  00273C  D7FE               	goto	u8947
 12214  00273E  2E21               	decfsz	??_Eco_Test& (0+255),f,c
 12215  002740  D7FC               	goto	u8947
 12216  002742  D000               	nop2	
 12217                           
 12218                           ;communication.c: 47: _delay((unsigned long)((5)*(100000000/4000.0)));
 12219  002744  0E7A               	movlw	122
 12220  002746  6E21               	movwf	??_Eco_Test& (0+255),c
 12221  002748  0ED4               	movlw	212
 12222  00274A                     u8957:
 12223  00274A  2EE8               	decfsz	wreg,f,c
 12224  00274C  D7FE               	goto	u8957
 12225  00274E  2E21               	decfsz	??_Eco_Test& (0+255),f,c
 12226  002750  D7FC               	goto	u8957
 12227  002752  D000               	nop2	
 12228                           
 12229                           ;communication.c: 48: USARTWriteChar(Source_ID);
 12230  002754  505F               	movf	_Source_ID,w,c
 12231  002756  EC25  F03D         	call	_USARTWriteChar
 12232                           
 12233                           ;communication.c: 49: RE2 = 0;
 12234  00275A  9484               	bcf	3972,2,c	;volatile
 12235                           
 12236                           ;communication.c: 51: (LCDByte(0b00000001,0));
 12237  00275C  0E00               	movlw	0
 12238  00275E  6E17               	movwf	LCDByte@isdata,c
 12239  002760  0E01               	movlw	1
 12240  002762  EC54  F01E         	call	_LCDByte
 12241                           
 12242                           ;communication.c: 52: LCDWriteString("ECO SENT");
 12243  002766  0E7F               	movlw	high STR_2
 12244  002768  6E1E               	movwf	LCDWriteString@msg+1,c
 12245  00276A  0EDB               	movlw	low STR_2
 12246  00276C  6E1D               	movwf	LCDWriteString@msg,c
 12247  00276E  EC15  F019         	call	_LCDWriteString	;wreg free
 12248                           
 12249                           ;communication.c: 55: while(n == 0 && ts < 2000)
 12250  002772  D00C               	goto	l8951
 12251  002774                     l8945:
 12252                           
 12253                           ;communication.c: 56: {
 12254                           ;communication.c: 58: n = USARTDataAvailable();
 12255  002774  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
 12256  002778  6E26               	movwf	Eco_Test@n,c
 12257                           
 12258                           ;communication.c: 59: ts++;
 12259  00277A  4A24               	infsnz	Eco_Test@ts,f,c
 12260  00277C  2A25               	incf	Eco_Test@ts+1,f,c
 12261                           
 12262                           ;communication.c: 60: _delay((unsigned long)((1)*(100000000/4000.0)));
 12263  00277E  0E19               	movlw	25
 12264  002780  6E21               	movwf	??_Eco_Test& (0+255),c
 12265  002782  0E5D               	movlw	93
 12266  002784                     u8967:
 12267  002784  2EE8               	decfsz	wreg,f,c
 12268  002786  D7FE               	goto	u8967
 12269  002788  2E21               	decfsz	??_Eco_Test& (0+255),f,c
 12270  00278A  D7FC               	goto	u8967
 12271  00278C                     l8951:
 12272  00278C  6626               	tstfsz	Eco_Test@n,c
 12273  00278E  D006               	goto	l8955
 12274  002790  0ED0               	movlw	208
 12275  002792  5C24               	subwf	Eco_Test@ts,w,c
 12276  002794  0E07               	movlw	7
 12277  002796  5825               	subwfb	Eco_Test@ts+1,w,c
 12278  002798  A0D8               	btfss	status,0,c
 12279  00279A  D7EC               	goto	l8945
 12280  00279C                     l8955:
 12281                           
 12282                           ;communication.c: 61: }
 12283                           ;communication.c: 64: if(n!=0)
 12284  00279C  5026               	movf	Eco_Test@n,w,c
 12285  00279E  B4D8               	btfsc	status,2,c
 12286  0027A0  D015               	goto	l8973
 12287                           
 12288                           ;communication.c: 65: {
 12289                           ;communication.c: 67: RC0 = 1;
 12290  0027A2  8082               	bsf	3970,0,c	;volatile
 12291                           
 12292                           ;communication.c: 68: unsigned char data=USARTReadData();
 12293  0027A4  ECCF  F01F         	call	_USARTReadData	;wreg free
 12294  0027A8  6E23               	movwf	Eco_Test@data,c
 12295                           
 12296                           ;communication.c: 69: RC0 = 0;
 12297  0027AA  9082               	bcf	3970,0,c	;volatile
 12298                           
 12299                           ;communication.c: 70: if(data == Source_ID)
 12300  0027AC  505F               	movf	_Source_ID,w,c
 12301  0027AE  6223               	cpfseq	Eco_Test@data,c
 12302  0027B0  D00D               	goto	l8973
 12303                           
 12304                           ;communication.c: 71: {
 12305                           ;communication.c: 72: (LCDByte(0b00000001,0));
 12306  0027B2  0E00               	movlw	0
 12307  0027B4  6E17               	movwf	LCDByte@isdata,c
 12308  0027B6  0E01               	movlw	1
 12309  0027B8  EC54  F01E         	call	_LCDByte
 12310                           
 12311                           ;communication.c: 73: LCDWriteString("ECO SUCCESSFUL ");
 12312  0027BC  0E7E               	movlw	high STR_3
 12313  0027BE  6E1E               	movwf	LCDWriteString@msg+1,c
 12314  0027C0  0E79               	movlw	low STR_3
 12315  0027C2  6E1D               	movwf	LCDWriteString@msg,c
 12316  0027C4  EC15  F019         	call	_LCDWriteString	;wreg free
 12317                           
 12318                           ;communication.c: 74: return 0x01;
 12319  0027C8  0E01               	movlw	1
 12320  0027CA  D00C               	goto	l511
 12321  0027CC                     l8973:
 12322                           
 12323                           ;communication.c: 75: }
 12324                           ;communication.c: 76: }
 12325                           ;communication.c: 77: }
 12326                           ;communication.c: 79: (LCDByte(0b00000001,0));
 12327  0027CC  0E00               	movlw	0
 12328  0027CE  6E17               	movwf	LCDByte@isdata,c
 12329  0027D0  0E01               	movlw	1
 12330  0027D2  EC54  F01E         	call	_LCDByte
 12331                           
 12332                           ;communication.c: 80: LCDWriteString("ECO FAIL");
 12333  0027D6  0E7F               	movlw	high STR_4
 12334  0027D8  6E1E               	movwf	LCDWriteString@msg+1,c
 12335  0027DA  0ED2               	movlw	low STR_4
 12336  0027DC  6E1D               	movwf	LCDWriteString@msg,c
 12337  0027DE  EC15  F019         	call	_LCDWriteString	;wreg free
 12338                           
 12339                           ;communication.c: 81: return 0x00;
 12340  0027E2  0E00               	movlw	0
 12341  0027E4                     l511:
 12342  0027E4  0012               	return	
 12343  0027E6  FFFF               	dw	65535	; errata NOP
 12344  0027E8                     __end_of_Eco_Test:
 12345                           	opt stack 0
 12346                           tblptru	equ	0xFF8
 12347                           tblptrh	equ	0xFF7
 12348                           tblptrl	equ	0xFF6
 12349                           tablat	equ	0xFF5
 12350                           prodh	equ	0xFF4
 12351                           prodl	equ	0xFF3
 12352                           intcon	equ	0xFF2
 12353                           postinc0	equ	0xFEE
 12354                           wreg	equ	0xFE8
 12355                           postinc1	equ	0xFE6
 12356                           postdec1	equ	0xFE5
 12357                           fsr1h	equ	0xFE2
 12358                           fsr1l	equ	0xFE1
 12359                           indf2	equ	0xFDF
 12360                           postinc2	equ	0xFDE
 12361                           postdec2	equ	0xFDD
 12362                           fsr2h	equ	0xFDA
 12363                           fsr2l	equ	0xFD9
 12364                           status	equ	0xFD8
 12365                           
 12366 ;; *************** function _USARTWriteChar *****************
 12367 ;; Defined at:
 12368 ;;		line 52 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 12369 ;; Parameters:    Size  Location     Type
 12370 ;;  ch              1    wreg     unsigned char 
 12371 ;; Auto vars:     Size  Location     Type
 12372 ;;  ch              1   19[COMRAM] unsigned char 
 12373 ;; Return value:  Size  Location     Type
 12374 ;;		None               void
 12375 ;; Registers used:
 12376 ;;		wreg
 12377 ;; Tracked objects:
 12378 ;;		On entry : 0/0
 12379 ;;		On exit  : 0/0
 12380 ;;		Unchanged: 0/0
 12381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12382 ;;      Params:         0       0       0       0       0       0       0
 12383 ;;      Locals:         1       0       0       0       0       0       0
 12384 ;;      Temps:          0       0       0       0       0       0       0
 12385 ;;      Totals:         1       0       0       0       0       0       0
 12386 ;;Total ram usage:        1 bytes
 12387 ;; Hardware stack levels used:    1
 12388 ;; Hardware stack levels required when called:    2
 12389 ;; This function calls:
 12390 ;;		Nothing
 12391 ;; This function is called by:
 12392 ;;		_Eco_Test
 12393 ;;		_Eco_Replay
 12394 ;;		_Send_Packet
 12395 ;;		_Receive_Packet
 12396 ;;		_USARTWriteString
 12397 ;;		_USARTWriteLine
 12398 ;;		_USARTWriteInt
 12399 ;;		_USARTGotoNewLine
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           	psect	text53
 12404  007A4A                     __ptext53:
 12405                           	opt stack 0
 12406  007A4A                     _USARTWriteChar:
 12407                           	opt stack 25
 12408                           
 12409                           ;incstack = 0
 12410  007A4A  FFFF               	dw	65535
 12411                           
 12412                           ;USARTWriteChar@ch stored from wreg
 12413  007A4C  6E14               	movwf	USARTWriteChar@ch,c
 12414  007A4E                     l817:
 12415  007A4E  A89E               	btfss	3998,4,c	;volatile
 12416  007A50  D7FE               	goto	l817
 12417                           
 12418                           ;usart_pic18.c: 56: TXREG=ch;
 12419  007A52  C014  FFAD         	movff	USARTWriteChar@ch,4013	;volatile
 12420  007A56  0012               	return	
 12421  007A58  FFFF               	dw	65535	; errata NOP
 12422  007A5A                     __end_of_USARTWriteChar:
 12423                           	opt stack 0
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           postinc0	equ	0xFEE
 12432                           wreg	equ	0xFE8
 12433                           postinc1	equ	0xFE6
 12434                           postdec1	equ	0xFE5
 12435                           fsr1h	equ	0xFE2
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           fsr2h	equ	0xFDA
 12441                           fsr2l	equ	0xFD9
 12442                           status	equ	0xFD8
 12443                           
 12444 ;; *************** function _LCDWriteString *****************
 12445 ;; Defined at:
 12446 ;;		line 210 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;  msg             2   28[COMRAM] PTR const unsigned char 
 12449 ;;		 -> STR_80(2), STR_79(5), STR_78(4), STR_77(2), 
 12450 ;;		 -> STR_76(4), STR_75(2), STR_74(5), STR_73(4), 
 12451 ;;		 -> STR_72(2), STR_71(4), STR_70(19), STR_69(11), 
 12452 ;;		 -> STR_68(12), STR_67(17), STR_66(17), STR_65(14), 
 12453 ;;		 -> STR_64(13), STR_63(18), STR_62(18), STR_61(17), 
 12454 ;;		 -> STR_60(2), STR_59(2), STR_58(22), STR_57(2), 
 12455 ;;		 -> STR_56(2), STR_55(21), STR_54(21), STR_53(17), 
 12456 ;;		 -> STR_52(20), STR_51(13), STR_50(13), STR_49(13), 
 12457 ;;		 -> STR_48(14), STR_47(18), STR_46(13), STR_45(18), 
 12458 ;;		 -> STR_44(18), STR_43(17), STR_42(15), STR_41(13), 
 12459 ;;		 -> STR_40(16), STR_39(13), STR_38(18), STR_37(18), 
 12460 ;;		 -> STR_36(17), STR_35(15), STR_34(13), STR_33(16), 
 12461 ;;		 -> STR_32(15), STR_31(11), STR_30(15), STR_29(11), 
 12462 ;;		 -> STR_28(15), STR_27(11), STR_26(13), STR_25(11), 
 12463 ;;		 -> STR_24(14), STR_23(14), STR_22(15), STR_21(12), 
 12464 ;;		 -> STR_20(2), STR_19(2), STR_18(18), STR_17(17), 
 12465 ;;		 -> STR_16(15), STR_15(18), STR_14(23), STR_13(17), 
 12466 ;;		 -> STR_12(20), STR_11(11), STR_10(17), STR_9(12), 
 12467 ;;		 -> STR_8(16), STR_7(18), STR_6(14), STR_5(17), 
 12468 ;;		 -> STR_4(9), STR_3(16), STR_2(9), STR_1(10), 
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  cc              1   31[COMRAM] char 
 12471 ;; Return value:  Size  Location     Type
 12472 ;;		None               void
 12473 ;; Registers used:
 12474 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12480 ;;      Params:         2       0       0       0       0       0       0
 12481 ;;      Locals:         1       0       0       0       0       0       0
 12482 ;;      Temps:          1       0       0       0       0       0       0
 12483 ;;      Totals:         4       0       0       0       0       0       0
 12484 ;;Total ram usage:        4 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    4
 12487 ;; This function calls:
 12488 ;;		_LCDByte
 12489 ;; This function is called by:
 12490 ;;		_Eco_Test
 12491 ;;		_Eco_Replay
 12492 ;;		_Send_Packet
 12493 ;;		_Receive_Packet
 12494 ;;		_main
 12495 ;;		_per_minute_reading
 12496 ;;		_per_second_reading
 12497 ;;		_rtc_setting
 12498 ;;		_data_to_center
 12499 ;;		_tx_packet
 12500 ;;		_DisplayReadings
 12501 ;;		_rtc_local_display
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           	psect	text54
 12506  00322A                     __ptext54:
 12507                           	opt stack 0
 12508  00322A                     _LCDWriteString:
 12509                           	opt stack 23
 12510                           
 12511                           ;incstack = 0
 12512  00322A  FFFF               	dw	65535
 12513                           
 12514                           ;lcd_hd44780_pic18.c: 240: while(*msg!='\0')
 12515  00322C  D043               	goto	l8717
 12516  00322E                     l8697:
 12517                           
 12518                           ;lcd_hd44780_pic18.c: 241: {
 12519                           ;lcd_hd44780_pic18.c: 243: if(*msg=='%')
 12520  00322E  C01D  FFF6         	movff	LCDWriteString@msg,tblptrl
 12521  003232  C01E  FFF7         	movff	LCDWriteString@msg+1,tblptrh
 12522  003236                     	if	0	;tblptru may be non-zero
 12523  003236                     	endif
 12524  003236                     	if	0	;tblptru may be non-zero
 12525  003236                     	endif
 12526  003236  0008               	tblrd		*
 12527  003238  FFFF               	dw	65535	; errata NOP
 12528  00323A  50F5               	movf	tablat,w,c
 12529  00323C  0A25               	xorlw	37
 12530  00323E  A4D8               	btfss	status,2,c
 12531  003240  D02C               	goto	l8713
 12532                           
 12533                           ;lcd_hd44780_pic18.c: 244: {
 12534                           ;lcd_hd44780_pic18.c: 245: msg++;
 12535  003242  4A1D               	infsnz	LCDWriteString@msg,f,c
 12536  003244  2A1E               	incf	LCDWriteString@msg+1,f,c
 12537                           
 12538                           ;lcd_hd44780_pic18.c: 246: int8_t cc=*msg-'0';
 12539  003246  C01D  FFF6         	movff	LCDWriteString@msg,tblptrl
 12540  00324A  C01E  FFF7         	movff	LCDWriteString@msg+1,tblptrh
 12541  00324E                     	if	0	;tblptru may be non-zero
 12542  00324E                     	endif
 12543  00324E                     	if	0	;tblptru may be non-zero
 12544  00324E                     	endif
 12545  00324E  0008               	tblrd		*
 12546  003250  FFFF               	dw	65535	; errata NOP
 12547  003252  50F5               	movf	tablat,w,c
 12548  003254  0FD0               	addlw	208
 12549  003256  6E20               	movwf	LCDWriteString@cc,c
 12550                           
 12551                           ;lcd_hd44780_pic18.c: 248: if(cc>=0 && cc<=7)
 12552  003258  BE20               	btfsc	LCDWriteString@cc,7,c
 12553  00325A  D00E               	goto	l8709
 12554  00325C  5020               	movf	LCDWriteString@cc,w,c
 12555  00325E  0A80               	xorlw	128
 12556  003260  6E1F               	movwf	??_LCDWriteString& (0+255),c
 12557  003262  0E08               	movlw	8
 12558  003264  0A80               	xorlw	128
 12559  003266  5C1F               	subwf	??_LCDWriteString,w,c
 12560  003268  B0D8               	btfsc	status,0,c
 12561  00326A  D006               	goto	l8709
 12562                           
 12563                           ;lcd_hd44780_pic18.c: 249: {
 12564                           ;lcd_hd44780_pic18.c: 250: (LCDByte(cc,1));
 12565  00326C  0E01               	movlw	1
 12566  00326E  6E17               	movwf	LCDByte@isdata,c
 12567  003270  5020               	movf	LCDWriteString@cc,w,c
 12568  003272  EC54  F01E         	call	_LCDByte
 12569                           
 12570                           ;lcd_hd44780_pic18.c: 251: }
 12571  003276  D01C               	goto	l8715
 12572  003278                     l8709:
 12573                           
 12574                           ;lcd_hd44780_pic18.c: 252: else
 12575                           ;lcd_hd44780_pic18.c: 253: {
 12576                           ;lcd_hd44780_pic18.c: 254: (LCDByte('%',1));
 12577  003278  0E01               	movlw	1
 12578  00327A  6E17               	movwf	LCDByte@isdata,c
 12579  00327C  0E25               	movlw	37
 12580  00327E  EC54  F01E         	call	_LCDByte
 12581                           
 12582                           ;lcd_hd44780_pic18.c: 255: (LCDByte(*msg,1));
 12583  003282  0E01               	movlw	1
 12584  003284  6E17               	movwf	LCDByte@isdata,c
 12585  003286  C01D  FFF6         	movff	LCDWriteString@msg,tblptrl
 12586  00328A  C01E  FFF7         	movff	LCDWriteString@msg+1,tblptrh
 12587  00328E                     	if	0	;tblptru may be non-zero
 12588  00328E                     	endif
 12589  00328E                     	if	0	;tblptru may be non-zero
 12590  00328E                     	endif
 12591  00328E  0008               	tblrd		*
 12592  003290  FFFF               	dw	65535	; errata NOP
 12593  003292  50F5               	movf	tablat,w,c
 12594  003294  EC54  F01E         	call	_LCDByte
 12595  003298  D00B               	goto	l8715
 12596  00329A                     l8713:
 12597                           
 12598                           ;lcd_hd44780_pic18.c: 258: else
 12599                           ;lcd_hd44780_pic18.c: 259: {
 12600                           ;lcd_hd44780_pic18.c: 260: (LCDByte(*msg,1));
 12601  00329A  0E01               	movlw	1
 12602  00329C  6E17               	movwf	LCDByte@isdata,c
 12603  00329E  C01D  FFF6         	movff	LCDWriteString@msg,tblptrl
 12604  0032A2  C01E  FFF7         	movff	LCDWriteString@msg+1,tblptrh
 12605  0032A6                     	if	0	;tblptru may be non-zero
 12606  0032A6                     	endif
 12607  0032A6                     	if	0	;tblptru may be non-zero
 12608  0032A6                     	endif
 12609  0032A6  0008               	tblrd		*
 12610  0032A8  FFFF               	dw	65535	; errata NOP
 12611  0032AA  50F5               	movf	tablat,w,c
 12612  0032AC  EC54  F01E         	call	_LCDByte
 12613  0032B0                     l8715:
 12614                           
 12615                           ;lcd_hd44780_pic18.c: 261: }
 12616                           ;lcd_hd44780_pic18.c: 262: msg++;
 12617  0032B0  4A1D               	infsnz	LCDWriteString@msg,f,c
 12618  0032B2  2A1E               	incf	LCDWriteString@msg+1,f,c
 12619  0032B4                     l8717:
 12620  0032B4  C01D  FFF6         	movff	LCDWriteString@msg,tblptrl
 12621  0032B8  C01E  FFF7         	movff	LCDWriteString@msg+1,tblptrh
 12622  0032BC                     	if	0	;tblptru may be non-zero
 12623  0032BC                     	endif
 12624  0032BC                     	if	0	;tblptru may be non-zero
 12625  0032BC                     	endif
 12626  0032BC  0008               	tblrd		*
 12627  0032BE  FFFF               	dw	65535	; errata NOP
 12628  0032C0  50F5               	movf	tablat,w,c
 12629  0032C2  0900               	iorlw	0
 12630  0032C4  B4D8               	btfsc	status,2,c
 12631  0032C6  0012               	return	
 12632  0032C8  FFFF               	dw	65535	; assembler added errata NOP
 12633  0032CA  D7B1               	goto	l8697
 12634  0032CC  FFFF               	dw	65535	; errata NOP
 12635  0032CE                     __end_of_LCDWriteString:
 12636                           	opt stack 0
 12637                           tblptru	equ	0xFF8
 12638                           tblptrh	equ	0xFF7
 12639                           tblptrl	equ	0xFF6
 12640                           tablat	equ	0xFF5
 12641                           prodh	equ	0xFF4
 12642                           prodl	equ	0xFF3
 12643                           intcon	equ	0xFF2
 12644                           postinc0	equ	0xFEE
 12645                           wreg	equ	0xFE8
 12646                           postinc1	equ	0xFE6
 12647                           postdec1	equ	0xFE5
 12648                           fsr1h	equ	0xFE2
 12649                           fsr1l	equ	0xFE1
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _Check_Busy_Line *****************
 12658 ;; Defined at:
 12659 ;;		line 12 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\communication.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;		None
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  ms              2   21[COMRAM] unsigned int 
 12664 ;;  n               1   23[COMRAM] unsigned char 
 12665 ;; Return value:  Size  Location     Type
 12666 ;;                  1    wreg      unsigned char 
 12667 ;; Registers used:
 12668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12669 ;; Tracked objects:
 12670 ;;		On entry : 0/0
 12671 ;;		On exit  : 0/0
 12672 ;;		Unchanged: 0/0
 12673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12674 ;;      Params:         0       0       0       0       0       0       0
 12675 ;;      Locals:         3       0       0       0       0       0       0
 12676 ;;      Temps:          1       0       0       0       0       0       0
 12677 ;;      Totals:         4       0       0       0       0       0       0
 12678 ;;Total ram usage:        4 bytes
 12679 ;; Hardware stack levels used:    1
 12680 ;; Hardware stack levels required when called:    4
 12681 ;; This function calls:
 12682 ;;		_USARTDataAvailable
 12683 ;;		_USARTFlushBuffer
 12684 ;; This function is called by:
 12685 ;;		_Eco_Test
 12686 ;; This function uses a non-reentrant model
 12687 ;;
 12688                           
 12689                           	psect	text55
 12690  003E52                     __ptext55:
 12691                           	opt stack 0
 12692  003E52                     _Check_Busy_Line:
 12693                           	opt stack 22
 12694                           
 12695                           ;incstack = 0
 12696  003E52  FFFF               	dw	65535
 12697                           
 12698                           ;communication.c: 14: USARTFlushBuffer();
 12699  003E54  EC55  F03D         	call	_USARTFlushBuffer	;wreg free
 12700                           
 12701                           ;communication.c: 15: unsigned int ms = 0;
 12702  003E58  0E00               	movlw	0
 12703  003E5A  6E17               	movwf	Check_Busy_Line@ms+1,c
 12704  003E5C  0E00               	movlw	0
 12705  003E5E  6E16               	movwf	Check_Busy_Line@ms,c
 12706                           
 12707                           ;communication.c: 16: uint8_t n = 0;
 12708  003E60  0E00               	movlw	0
 12709  003E62  6E18               	movwf	Check_Busy_Line@n,c
 12710                           
 12711                           ;communication.c: 18: while(n == 0 && ms < 2500)
 12712  003E64  D00C               	goto	l8781
 12713  003E66                     l8775:
 12714                           
 12715                           ;communication.c: 19: {
 12716                           ;communication.c: 21: n = USARTDataAvailable();
 12717  003E66  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
 12718  003E6A  6E18               	movwf	Check_Busy_Line@n,c
 12719                           
 12720                           ;communication.c: 22: ms++;
 12721  003E6C  4A16               	infsnz	Check_Busy_Line@ms,f,c
 12722  003E6E  2A17               	incf	Check_Busy_Line@ms+1,f,c
 12723                           
 12724                           ;communication.c: 23: _delay((unsigned long)((1)*(100000000/4000.0)));
 12725  003E70  0E19               	movlw	25
 12726  003E72  6E15               	movwf	??_Check_Busy_Line& (0+255),c
 12727  003E74  0E5D               	movlw	93
 12728  003E76                     u8977:
 12729  003E76  2EE8               	decfsz	wreg,f,c
 12730  003E78  D7FE               	goto	u8977
 12731  003E7A  2E15               	decfsz	??_Check_Busy_Line& (0+255),f,c
 12732  003E7C  D7FC               	goto	u8977
 12733  003E7E                     l8781:
 12734  003E7E  6618               	tstfsz	Check_Busy_Line@n,c
 12735  003E80  D006               	goto	l498
 12736  003E82  0EC4               	movlw	196
 12737  003E84  5C16               	subwf	Check_Busy_Line@ms,w,c
 12738  003E86  0E09               	movlw	9
 12739  003E88  5817               	subwfb	Check_Busy_Line@ms+1,w,c
 12740  003E8A  A0D8               	btfss	status,0,c
 12741  003E8C  D7EC               	goto	l8775
 12742  003E8E                     l498:
 12743                           
 12744                           ;communication.c: 24: }
 12745                           ;communication.c: 25: if(n == 0)
 12746  003E8E  6618               	tstfsz	Check_Busy_Line@n,c
 12747  003E90  D002               	goto	l8789
 12748                           
 12749                           ;communication.c: 26: return 0x01;
 12750  003E92  0E01               	movlw	1
 12751  003E94  D001               	goto	l500
 12752  003E96                     l8789:
 12753                           
 12754                           ;communication.c: 27: return 0x00;
 12755  003E96  0E00               	movlw	0
 12756  003E98                     l500:
 12757  003E98  0012               	return	
 12758  003E9A  FFFF               	dw	65535	; errata NOP
 12759  003E9C                     __end_of_Check_Busy_Line:
 12760                           	opt stack 0
 12761                           tblptru	equ	0xFF8
 12762                           tblptrh	equ	0xFF7
 12763                           tblptrl	equ	0xFF6
 12764                           tablat	equ	0xFF5
 12765                           prodh	equ	0xFF4
 12766                           prodl	equ	0xFF3
 12767                           intcon	equ	0xFF2
 12768                           postinc0	equ	0xFEE
 12769                           wreg	equ	0xFE8
 12770                           postinc1	equ	0xFE6
 12771                           postdec1	equ	0xFE5
 12772                           fsr1h	equ	0xFE2
 12773                           fsr1l	equ	0xFE1
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _USARTFlushBuffer *****************
 12782 ;; Defined at:
 12783 ;;		line 192 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;		None
 12788 ;; Return value:  Size  Location     Type
 12789 ;;		None               void
 12790 ;; Registers used:
 12791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12797 ;;      Params:         0       0       0       0       0       0       0
 12798 ;;      Locals:         0       0       0       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0       0       0
 12800 ;;      Totals:         0       0       0       0       0       0       0
 12801 ;;Total ram usage:        0 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    3
 12804 ;; This function calls:
 12805 ;;		_USARTDataAvailable
 12806 ;;		_USARTReadData
 12807 ;; This function is called by:
 12808 ;;		_Check_Busy_Line
 12809 ;;		_Eco_Test
 12810 ;;		_Eco_Replay
 12811 ;;		_Send_Packet
 12812 ;;		_Receive_Packet
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           	psect	text56
 12817  007AAA                     __ptext56:
 12818                           	opt stack 0
 12819  007AAA                     _USARTFlushBuffer:
 12820                           	opt stack 24
 12821                           
 12822                           ;incstack = 0
 12823  007AAA  FFFF               	dw	65535
 12824                           
 12825                           ;usart_pic18.c: 194: while(USARTDataAvailable()>0)
 12826  007AAC  D002               	goto	l8557
 12827  007AAE                     l8555:
 12828                           
 12829                           ;usart_pic18.c: 195: {
 12830                           ;usart_pic18.c: 196: USARTReadData();
 12831  007AAE  ECCF  F01F         	call	_USARTReadData	;wreg free
 12832  007AB2                     l8557:
 12833  007AB2  EC4E  F01F         	call	_USARTDataAvailable	;wreg free
 12834  007AB6  0900               	iorlw	0
 12835  007AB8  B4D8               	btfsc	status,2,c
 12836  007ABA  0012               	return	
 12837  007ABC  FFFF               	dw	65535	; assembler added errata NOP
 12838  007ABE  D7F7               	goto	l8555
 12839  007AC0  FFFF               	dw	65535	; errata NOP
 12840  007AC2                     __end_of_USARTFlushBuffer:
 12841                           	opt stack 0
 12842                           tblptru	equ	0xFF8
 12843                           tblptrh	equ	0xFF7
 12844                           tblptrl	equ	0xFF6
 12845                           tablat	equ	0xFF5
 12846                           prodh	equ	0xFF4
 12847                           prodl	equ	0xFF3
 12848                           intcon	equ	0xFF2
 12849                           postinc0	equ	0xFEE
 12850                           wreg	equ	0xFE8
 12851                           postinc1	equ	0xFE6
 12852                           postdec1	equ	0xFE5
 12853                           fsr1h	equ	0xFE2
 12854                           fsr1l	equ	0xFE1
 12855                           indf2	equ	0xFDF
 12856                           postinc2	equ	0xFDE
 12857                           postdec2	equ	0xFDD
 12858                           fsr2h	equ	0xFDA
 12859                           fsr2l	equ	0xFD9
 12860                           status	equ	0xFD8
 12861                           
 12862 ;; *************** function _USARTReadData *****************
 12863 ;; Defined at:
 12864 ;;		line 100 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;		None
 12867 ;; Auto vars:     Size  Location     Type
 12868 ;;  data            1   19[COMRAM] unsigned char 
 12869 ;; Return value:  Size  Location     Type
 12870 ;;                  1    wreg      unsigned char 
 12871 ;; Registers used:
 12872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12878 ;;      Params:         0       0       0       0       0       0       0
 12879 ;;      Locals:         1       0       0       0       0       0       0
 12880 ;;      Temps:          0       0       0       0       0       0       0
 12881 ;;      Totals:         1       0       0       0       0       0       0
 12882 ;;Total ram usage:        1 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    2
 12885 ;; This function calls:
 12886 ;;		Nothing
 12887 ;; This function is called by:
 12888 ;;		_Eco_Test
 12889 ;;		_Eco_Replay
 12890 ;;		_Send_Packet
 12891 ;;		_Receive_Packet
 12892 ;;		_USARTFlushBuffer
 12893 ;;		_USARTReadBuffer
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           	psect	text57
 12898  003F9E                     __ptext57:
 12899                           	opt stack 0
 12900  003F9E                     _USARTReadData:
 12901                           	opt stack 25
 12902                           
 12903                           ;incstack = 0
 12904  003F9E  FFFF               	dw	65535
 12905                           
 12906                           ;usart_pic18.c: 102: char data;
 12907                           ;usart_pic18.c: 105: if(UQFront==-1)
 12908  003FA0  2861               	incf	_UQFront,w,c	;volatile
 12909  003FA2  A4D8               	btfss	status,2,c
 12910  003FA4  D002               	goto	l8283
 12911                           
 12912                           ;usart_pic18.c: 106: return 0;
 12913  003FA6  0E00               	movlw	0
 12914  003FA8  D014               	goto	l845
 12915  003FAA                     l8283:
 12916                           
 12917                           ;usart_pic18.c: 108: data=URBuff[UQFront];
 12918  003FAA  5061               	movf	_UQFront,w,c	;volatile
 12919  003FAC  0D01               	mullw	1
 12920  003FAE  0101               	movlb	1	; () banked
 12921  003FB0  0E80               	movlw	low _URBuff	;volatile
 12922  003FB2  24F3               	addwf	prodl,w,c
 12923  003FB4  6ED9               	movwf	fsr2l,c
 12924  003FB6  0101               	movlb	1	; () banked
 12925  003FB8  0E01               	movlw	high _URBuff	;volatile
 12926  003FBA  20F4               	addwfc	prodh,w,c
 12927  003FBC  6EDA               	movwf	fsr2h,c
 12928  003FBE  50DF               	movf	indf2,w,c
 12929  003FC0  6E14               	movwf	USARTReadData@data,c
 12930                           
 12931                           ; BSR set to: 1
 12932                           ;usart_pic18.c: 110: if(UQFront==UQEnd)
 12933  003FC2  5060               	movf	_UQEnd,w,c	;volatile
 12934  003FC4  6261               	cpfseq	_UQFront,c	;volatile
 12935  003FC6  D003               	goto	l8289
 12936                           
 12937                           ; BSR set to: 1
 12938                           ;usart_pic18.c: 111: {
 12939                           ;usart_pic18.c: 114: UQFront=UQEnd=-1;
 12940  003FC8  6860               	setf	_UQEnd,c	;volatile
 12941  003FCA  6861               	setf	_UQFront,c	;volatile
 12942                           
 12943                           ;usart_pic18.c: 115: }
 12944  003FCC  D001               	goto	l847
 12945  003FCE                     l8289:
 12946                           
 12947                           ; BSR set to: 1
 12948                           ;usart_pic18.c: 116: else
 12949                           ;usart_pic18.c: 117: {
 12950                           ;usart_pic18.c: 118: UQFront++;
 12951  003FCE  2A61               	incf	_UQFront,f,c	;volatile
 12952  003FD0                     l847:
 12953                           
 12954                           ; BSR set to: 1
 12955                           ;usart_pic18.c: 122: }
 12956                           ;usart_pic18.c: 124: return data;
 12957  003FD0  5014               	movf	USARTReadData@data,w,c
 12958  003FD2                     l845:
 12959  003FD2  0012               	return	
 12960  003FD4  FFFF               	dw	65535	; errata NOP
 12961  003FD6                     __end_of_USARTReadData:
 12962                           	opt stack 0
 12963                           tblptru	equ	0xFF8
 12964                           tblptrh	equ	0xFF7
 12965                           tblptrl	equ	0xFF6
 12966                           tablat	equ	0xFF5
 12967                           prodh	equ	0xFF4
 12968                           prodl	equ	0xFF3
 12969                           intcon	equ	0xFF2
 12970                           postinc0	equ	0xFEE
 12971                           wreg	equ	0xFE8
 12972                           postinc1	equ	0xFE6
 12973                           postdec1	equ	0xFE5
 12974                           fsr1h	equ	0xFE2
 12975                           fsr1l	equ	0xFE1
 12976                           indf2	equ	0xFDF
 12977                           postinc2	equ	0xFDE
 12978                           postdec2	equ	0xFDD
 12979                           fsr2h	equ	0xFDA
 12980                           fsr2l	equ	0xFD9
 12981                           status	equ	0xFD8
 12982                           
 12983 ;; *************** function _USARTDataAvailable *****************
 12984 ;; Defined at:
 12985 ;;		line 127 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;		None
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;		None
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      unsigned char 
 12992 ;; Registers used:
 12993 ;;		wreg, status,2, status,0
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12999 ;;      Params:         0       0       0       0       0       0       0
 13000 ;;      Locals:         0       0       0       0       0       0       0
 13001 ;;      Temps:          1       0       0       0       0       0       0
 13002 ;;      Totals:         1       0       0       0       0       0       0
 13003 ;;Total ram usage:        1 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    2
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_Check_Busy_Line
 13010 ;;		_Eco_Test
 13011 ;;		_Eco_Replay
 13012 ;;		_Send_Packet
 13013 ;;		_Receive_Packet
 13014 ;;		_USARTFlushBuffer
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           	psect	text58
 13019  003E9C                     __ptext58:
 13020                           	opt stack 0
 13021  003E9C                     _USARTDataAvailable:
 13022                           	opt stack 24
 13023                           
 13024                           ;incstack = 0
 13025  003E9C  FFFF               	dw	65535
 13026                           
 13027                           ;usart_pic18.c: 129: if(UQFront==-1) return 0;
 13028  003E9E  2861               	incf	_UQFront,w,c	;volatile
 13029  003EA0  A4D8               	btfss	status,2,c
 13030  003EA2  D002               	goto	l8257
 13031  003EA4  0E00               	movlw	0
 13032  003EA6  D01C               	goto	l852
 13033  003EA8                     l8257:
 13034                           
 13035                           ;usart_pic18.c: 130: if(UQFront<UQEnd)
 13036  003EA8  5061               	movf	_UQFront,w,c	;volatile
 13037  003EAA  0A80               	xorlw	128
 13038  003EAC  6E14               	movwf	??_USARTDataAvailable& (0+255),c
 13039  003EAE  5060               	movf	_UQEnd,w,c	;volatile
 13040  003EB0  0A80               	xorlw	128
 13041  003EB2  5C14               	subwf	??_USARTDataAvailable,w,c
 13042  003EB4  B0D8               	btfsc	status,0,c
 13043  003EB6  D006               	goto	l8265
 13044                           
 13045                           ;usart_pic18.c: 131: return(UQEnd-UQFront+1);
 13046  003EB8  5061               	movf	_UQFront,w,c	;volatile
 13047  003EBA  0800               	sublw	0
 13048  003EBC  2460               	addwf	_UQEnd,w,c	;volatile
 13049  003EBE  6E14               	movwf	??_USARTDataAvailable& (0+255),c
 13050  003EC0  2814               	incf	??_USARTDataAvailable,w,c
 13051  003EC2  D00E               	goto	l852
 13052  003EC4                     l8265:
 13053                           
 13054                           ;usart_pic18.c: 132: else if(UQFront>UQEnd)
 13055  003EC4  5060               	movf	_UQEnd,w,c	;volatile
 13056  003EC6  0A80               	xorlw	128
 13057  003EC8  6E14               	movwf	??_USARTDataAvailable& (0+255),c
 13058  003ECA  5061               	movf	_UQFront,w,c	;volatile
 13059  003ECC  0A80               	xorlw	128
 13060  003ECE  5C14               	subwf	??_USARTDataAvailable,w,c
 13061  003ED0  B0D8               	btfsc	status,0,c
 13062  003ED2  D005               	goto	l8273
 13063                           
 13064                           ;usart_pic18.c: 133: return (128-UQFront+UQEnd+1);
 13065  003ED4  5061               	movf	_UQFront,w,c	;volatile
 13066  003ED6  0800               	sublw	0
 13067  003ED8  2460               	addwf	_UQEnd,w,c	;volatile
 13068  003EDA  0F81               	addlw	129
 13069  003EDC  D001               	goto	l852
 13070  003EDE                     l8273:
 13071                           
 13072                           ;usart_pic18.c: 134: else
 13073                           ;usart_pic18.c: 135: return 1;
 13074  003EDE  0E01               	movlw	1
 13075  003EE0                     l852:
 13076  003EE0  0012               	return	
 13077  003EE2  FFFF               	dw	65535	; errata NOP
 13078  003EE4                     __end_of_USARTDataAvailable:
 13079                           	opt stack 0
 13080                           tblptru	equ	0xFF8
 13081                           tblptrh	equ	0xFF7
 13082                           tblptrl	equ	0xFF6
 13083                           tablat	equ	0xFF5
 13084                           prodh	equ	0xFF4
 13085                           prodl	equ	0xFF3
 13086                           intcon	equ	0xFF2
 13087                           postinc0	equ	0xFEE
 13088                           wreg	equ	0xFE8
 13089                           postinc1	equ	0xFE6
 13090                           postdec1	equ	0xFE5
 13091                           fsr1h	equ	0xFE2
 13092                           fsr1l	equ	0xFE1
 13093                           indf2	equ	0xFDF
 13094                           postinc2	equ	0xFDE
 13095                           postdec2	equ	0xFDD
 13096                           fsr2h	equ	0xFDA
 13097                           fsr2l	equ	0xFD9
 13098                           status	equ	0xFD8
 13099                           
 13100 ;; *************** function _read_packet_from_page *****************
 13101 ;; Defined at:
 13102 ;;		line 145 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myeeprom.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;  page_no         2   30[COMRAM] unsigned int 
 13105 ;; Auto vars:     Size  Location     Type
 13106 ;;  address         2   37[COMRAM] unsigned int 
 13107 ;;  count           1   39[COMRAM] unsigned char 
 13108 ;;  lsb             1   36[COMRAM] unsigned char 
 13109 ;;  msb             1   35[COMRAM] unsigned char 
 13110 ;;  data            1   34[COMRAM] unsigned char 
 13111 ;; Return value:  Size  Location     Type
 13112 ;;		None               void
 13113 ;; Registers used:
 13114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13120 ;;      Params:         2       0       0       0       0       0       0
 13121 ;;      Locals:         6       0       0       0       0       0       0
 13122 ;;      Temps:          2       0       0       0       0       0       0
 13123 ;;      Totals:        10       0       0       0       0       0       0
 13124 ;;Total ram usage:       10 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; Hardware stack levels required when called:    5
 13127 ;; This function calls:
 13128 ;;		_rom_byte_read
 13129 ;; This function is called by:
 13130 ;;		_per_minute_reading
 13131 ;;		_per_second_reading
 13132 ;;		_data_to_center
 13133 ;; This function uses a non-reentrant model
 13134 ;;
 13135                           
 13136                           	psect	text59
 13137  00375A                     __ptext59:
 13138                           	opt stack 0
 13139  00375A                     _read_packet_from_page:
 13140                           	opt stack 24
 13141                           
 13142                           ;incstack = 0
 13143  00375A  FFFF               	dw	65535
 13144                           
 13145                           ;myeeprom.c: 147: unsigned char count = 0, data = 0;
 13146  00375C  0E00               	movlw	0
 13147  00375E  6E28               	movwf	read_packet_from_page@count,c
 13148  003760  0E00               	movlw	0
 13149  003762  6E23               	movwf	read_packet_from_page@data,c
 13150                           
 13151                           ;myeeprom.c: 148: unsigned char msb = 0, lsb = 0;
 13152  003764  0E00               	movlw	0
 13153  003766  6E24               	movwf	read_packet_from_page@msb,c
 13154  003768  0E00               	movlw	0
 13155  00376A  6E25               	movwf	read_packet_from_page@lsb,c
 13156                           
 13157                           ;myeeprom.c: 149: unsigned int address = 0;
 13158  00376C  0E00               	movlw	0
 13159  00376E  6E27               	movwf	read_packet_from_page@address+1,c
 13160  003770  0E00               	movlw	0
 13161  003772  6E26               	movwf	read_packet_from_page@address,c
 13162                           
 13163                           ;myeeprom.c: 151: address = page_no * 128;
 13164  003774  C01F  F021         	movff	read_packet_from_page@page_no,??_read_packet_from_page
 13165  003778  C020  F022         	movff	read_packet_from_page@page_no+1,??_read_packet_from_page+1
 13166  00377C  0E07               	movlw	7
 13167  00377E                     u7475:
 13168  00377E  90D8               	bcf	status,0,c
 13169  003780  3621               	rlcf	??_read_packet_from_page,f,c
 13170  003782  3622               	rlcf	??_read_packet_from_page+1,f,c
 13171  003784  2EE8               	decfsz	wreg,f,c
 13172  003786  D7FB               	goto	u7475
 13173  003788  C021  F026         	movff	??_read_packet_from_page,read_packet_from_page@address
 13174  00378C  C022  F027         	movff	??_read_packet_from_page+1,read_packet_from_page@address+1
 13175                           
 13176                           ;myeeprom.c: 154: count = 0;
 13177  003790  0E00               	movlw	0
 13178  003792  6E28               	movwf	read_packet_from_page@count,c
 13179  003794                     l9593:
 13180                           
 13181                           ;myeeprom.c: 156: {
 13182                           ;myeeprom.c: 157: PACKET[count] = rom_byte_read(address);
 13183  003794  5028               	movf	read_packet_from_page@count,w,c
 13184  003796  0D01               	mullw	1
 13185  003798  0101               	movlb	1	; () banked
 13186  00379A  0E00               	movlw	low _PACKET	;volatile
 13187  00379C  24F3               	addwf	prodl,w,c
 13188  00379E  6ED9               	movwf	fsr2l,c
 13189  0037A0  0101               	movlb	1	; () banked
 13190  0037A2  0E01               	movlw	high _PACKET	;volatile
 13191  0037A4  20F4               	addwfc	prodh,w,c
 13192  0037A6  6EDA               	movwf	fsr2h,c
 13193  0037A8  C026  F017         	movff	read_packet_from_page@address,rom_byte_read@address
 13194  0037AC  C027  F018         	movff	read_packet_from_page@address+1,rom_byte_read@address+1
 13195  0037B0  EC20  F01D         	call	_rom_byte_read	;wreg free
 13196  0037B4  6EDF               	movwf	indf2,c
 13197                           
 13198                           ;myeeprom.c: 158: if(PACKET[count] == 0xEA)
 13199  0037B6  5028               	movf	read_packet_from_page@count,w,c
 13200  0037B8  0D01               	mullw	1
 13201  0037BA  0101               	movlb	1	; () banked
 13202  0037BC  0E00               	movlw	low _PACKET	;volatile
 13203  0037BE  24F3               	addwf	prodl,w,c
 13204  0037C0  6ED9               	movwf	fsr2l,c
 13205  0037C2  0101               	movlb	1	; () banked
 13206  0037C4  0E01               	movlw	high _PACKET	;volatile
 13207  0037C6  20F4               	addwfc	prodh,w,c
 13208  0037C8  6EDA               	movwf	fsr2h,c
 13209  0037CA  0EEA               	movlw	234
 13210  0037CC  62DF               	cpfseq	indf2,c
 13211  0037CE  D001               	goto	l9601
 13212  0037D0  D004               	goto	l159
 13213  0037D2                     l9601:
 13214                           
 13215                           ; BSR set to: 1
 13216                           ;myeeprom.c: 162: else
 13217                           ;myeeprom.c: 163: {
 13218                           ;myeeprom.c: 164: address++;
 13219  0037D2  4A26               	infsnz	read_packet_from_page@address,f,c
 13220  0037D4  2A27               	incf	read_packet_from_page@address+1,f,c
 13221                           
 13222                           ;myeeprom.c: 165: count++;
 13223  0037D6  2A28               	incf	read_packet_from_page@count,f,c
 13224  0037D8  D7DD               	goto	l9593
 13225  0037DA                     l159:
 13226                           
 13227                           ; BSR set to: 1
 13228  0037DA  0012               	return	
 13229  0037DC  FFFF               	dw	65535	; errata NOP
 13230  0037DE                     __end_of_read_packet_from_page:
 13231                           	opt stack 0
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           intcon	equ	0xFF2
 13239                           postinc0	equ	0xFEE
 13240                           wreg	equ	0xFE8
 13241                           postinc1	equ	0xFE6
 13242                           postdec1	equ	0xFE5
 13243                           fsr1h	equ	0xFE2
 13244                           fsr1l	equ	0xFE1
 13245                           indf2	equ	0xFDF
 13246                           postinc2	equ	0xFDE
 13247                           postdec2	equ	0xFDD
 13248                           fsr2h	equ	0xFDA
 13249                           fsr2l	equ	0xFD9
 13250                           status	equ	0xFD8
 13251                           
 13252 ;; *************** function _rom_byte_read *****************
 13253 ;; Defined at:
 13254 ;;		line 29 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myeeprom.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;  address         2   22[COMRAM] unsigned int 
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  data            1   29[COMRAM] unsigned char 
 13259 ;;  lsb             1   28[COMRAM] unsigned char 
 13260 ;;  msb             1   27[COMRAM] unsigned char 
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  1    wreg      unsigned char 
 13263 ;; Registers used:
 13264 ;;		wreg, status,2, status,0, cstack
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13270 ;;      Params:         2       0       0       0       0       0       0
 13271 ;;      Locals:         3       0       0       0       0       0       0
 13272 ;;      Temps:          3       0       0       0       0       0       0
 13273 ;;      Totals:         8       0       0       0       0       0       0
 13274 ;;Total ram usage:        8 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    4
 13277 ;; This function calls:
 13278 ;;		_IdleI2C
 13279 ;;		_ReadI2C
 13280 ;;		_WriteI2C
 13281 ;; This function is called by:
 13282 ;;		_read_packet_from_page
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           	psect	text60
 13287  003A40                     __ptext60:
 13288                           	opt stack 0
 13289  003A40                     _rom_byte_read:
 13290                           	opt stack 24
 13291                           
 13292                           ; BSR set to: 1
 13293                           ;incstack = 0
 13294  003A40  FFFF               	dw	65535
 13295                           
 13296                           ;myeeprom.c: 31: unsigned char data = 0;
 13297  003A42  0E00               	movlw	0
 13298  003A44  6E1E               	movwf	rom_byte_read@data,c
 13299                           
 13300                           ;myeeprom.c: 32: unsigned char msb, lsb;
 13301                           ;myeeprom.c: 33: msb = address >> 8;
 13302  003A46  C018  F019         	movff	rom_byte_read@address+1,??_rom_byte_read
 13303  003A4A  C019  F01A         	movff	??_rom_byte_read,??_rom_byte_read+1
 13304  003A4E  6A1B               	clrf	(??_rom_byte_read+2)& (0+255),c
 13305  003A50  501A               	movf	??_rom_byte_read+1,w,c
 13306  003A52  6E1C               	movwf	rom_byte_read@msb,c
 13307                           
 13308                           ;myeeprom.c: 34: lsb = address & 0x00FF;
 13309  003A54  C017  F01D         	movff	rom_byte_read@address,rom_byte_read@lsb
 13310                           
 13311                           ;myeeprom.c: 36: RE1 = 1;
 13312  003A58  8284               	bsf	3972,1,c	;volatile
 13313                           
 13314                           ;myeeprom.c: 37: IdleI2C();
 13315  003A5A  EC35  F03D         	call	_IdleI2C	;wreg free
 13316                           
 13317                           ;myeeprom.c: 38: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 13318  003A5E  80C5               	bsf	4037,0,c	;volatile
 13319  003A60                     l105:
 13320  003A60  B0C5               	btfsc	4037,0,c	;volatile
 13321  003A62  D7FE               	goto	l105
 13322                           
 13323                           ;myeeprom.c: 39: WriteI2C(device & 0xFE);
 13324  003A64  5064               	movf	_device,w,c
 13325  003A66  0BFE               	andlw	254
 13326  003A68  EC59  F01D         	call	_WriteI2C
 13327                           
 13328                           ;myeeprom.c: 40: IdleI2C();
 13329  003A6C  EC35  F03D         	call	_IdleI2C	;wreg free
 13330                           
 13331                           ;myeeprom.c: 41: WriteI2C(msb);
 13332  003A70  501C               	movf	rom_byte_read@msb,w,c
 13333  003A72  EC59  F01D         	call	_WriteI2C
 13334                           
 13335                           ;myeeprom.c: 42: IdleI2C();
 13336  003A76  EC35  F03D         	call	_IdleI2C	;wreg free
 13337                           
 13338                           ;myeeprom.c: 43: WriteI2C(lsb);
 13339  003A7A  501D               	movf	rom_byte_read@lsb,w,c
 13340  003A7C  EC59  F01D         	call	_WriteI2C
 13341                           
 13342                           ;myeeprom.c: 44: IdleI2C();
 13343  003A80  EC35  F03D         	call	_IdleI2C	;wreg free
 13344                           
 13345                           ;myeeprom.c: 46: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 13346  003A84  82C5               	bsf	4037,1,c	;volatile
 13347  003A86                     l108:
 13348  003A86  B2C5               	btfsc	4037,1,c	;volatile
 13349  003A88  D7FE               	goto	l108
 13350                           
 13351                           ;myeeprom.c: 47: WriteI2C(device | 0x01);
 13352  003A8A  5064               	movf	_device,w,c
 13353  003A8C  0901               	iorlw	1
 13354  003A8E  EC59  F01D         	call	_WriteI2C
 13355                           
 13356                           ;myeeprom.c: 48: IdleI2C();
 13357  003A92  EC35  F03D         	call	_IdleI2C	;wreg free
 13358                           
 13359                           ;myeeprom.c: 49: data = ReadI2C();
 13360  003A96  EC19  F03E         	call	_ReadI2C	;wreg free
 13361  003A9A  6E1E               	movwf	rom_byte_read@data,c
 13362                           
 13363                           ;myeeprom.c: 50: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 13364  003A9C  8AC5               	bsf	4037,5,c	;volatile
 13365  003A9E  88C5               	bsf	4037,4,c	;volatile
 13366  003AA0                     l111:
 13367  003AA0  B8C5               	btfsc	4037,4,c	;volatile
 13368  003AA2  D7FE               	goto	l111
 13369                           
 13370                           ;myeeprom.c: 51: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 13371  003AA4  84C5               	bsf	4037,2,c	;volatile
 13372  003AA6                     l114:
 13373  003AA6  B4C5               	btfsc	4037,2,c	;volatile
 13374  003AA8  D7FE               	goto	l114
 13375                           
 13376                           ;myeeprom.c: 52: RE1 = 0;
 13377  003AAA  9284               	bcf	3972,1,c	;volatile
 13378                           
 13379                           ;myeeprom.c: 53: return data;
 13380  003AAC  501E               	movf	rom_byte_read@data,w,c
 13381  003AAE  0012               	return	
 13382  003AB0  FFFF               	dw	65535	; errata NOP
 13383  003AB2                     __end_of_rom_byte_read:
 13384                           	opt stack 0
 13385                           tblptru	equ	0xFF8
 13386                           tblptrh	equ	0xFF7
 13387                           tblptrl	equ	0xFF6
 13388                           tablat	equ	0xFF5
 13389                           prodh	equ	0xFF4
 13390                           prodl	equ	0xFF3
 13391                           intcon	equ	0xFF2
 13392                           postinc0	equ	0xFEE
 13393                           wreg	equ	0xFE8
 13394                           postinc1	equ	0xFE6
 13395                           postdec1	equ	0xFE5
 13396                           fsr1h	equ	0xFE2
 13397                           fsr1l	equ	0xFE1
 13398                           indf2	equ	0xFDF
 13399                           postinc2	equ	0xFDE
 13400                           postdec2	equ	0xFDD
 13401                           fsr2h	equ	0xFDA
 13402                           fsr2l	equ	0xFD9
 13403                           status	equ	0xFD8
 13404                           
 13405 ;; *************** function _clear_rom *****************
 13406 ;; Defined at:
 13407 ;;		line 251 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myeeprom.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;		None
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;  page            2   23[COMRAM] int 
 13412 ;;  word            1   25[COMRAM] unsigned char 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;		None               void
 13415 ;; Registers used:
 13416 ;;		wreg, status,2, status,0, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13422 ;;      Params:         0       0       0       0       0       0       0
 13423 ;;      Locals:         3       0       0       0       0       0       0
 13424 ;;      Temps:          1       0       0       0       0       0       0
 13425 ;;      Totals:         4       0       0       0       0       0       0
 13426 ;;Total ram usage:        4 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    4
 13429 ;; This function calls:
 13430 ;;		_IdleI2C
 13431 ;;		_WriteI2C
 13432 ;; This function is called by:
 13433 ;;		_data_to_center
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437                           	psect	text61
 13438  0038DE                     __ptext61:
 13439                           	opt stack 0
 13440  0038DE                     _clear_rom:
 13441                           	opt stack 25
 13442                           
 13443                           ;incstack = 0
 13444  0038DE  FFFF               	dw	65535
 13445                           
 13446                           ;myeeprom.c: 253: char word;
 13447                           ;myeeprom.c: 254: int page;
 13448                           ;myeeprom.c: 256: IdleI2C();
 13449  0038E0  EC35  F03D         	call	_IdleI2C	;wreg free
 13450                           
 13451                           ;myeeprom.c: 257: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 13452  0038E4  80C5               	bsf	4037,0,c	;volatile
 13453  0038E6                     l165:
 13454  0038E6  B0C5               	btfsc	4037,0,c	;volatile
 13455  0038E8  D7FE               	goto	l165
 13456                           
 13457                           ;myeeprom.c: 258: WriteI2C(device & 0xFE);
 13458  0038EA  5064               	movf	_device,w,c
 13459  0038EC  0BFE               	andlw	254
 13460  0038EE  EC59  F01D         	call	_WriteI2C
 13461                           
 13462                           ;myeeprom.c: 259: IdleI2C();
 13463  0038F2  EC35  F03D         	call	_IdleI2C	;wreg free
 13464                           
 13465                           ;myeeprom.c: 260: WriteI2C(0x00);
 13466  0038F6  0E00               	movlw	0
 13467  0038F8  EC59  F01D         	call	_WriteI2C
 13468                           
 13469                           ;myeeprom.c: 261: IdleI2C();
 13470  0038FC  EC35  F03D         	call	_IdleI2C	;wreg free
 13471                           
 13472                           ;myeeprom.c: 262: WriteI2C(0x00);
 13473  003900  0E00               	movlw	0
 13474  003902  EC59  F01D         	call	_WriteI2C
 13475                           
 13476                           ;myeeprom.c: 263: IdleI2C();
 13477  003906  EC35  F03D         	call	_IdleI2C	;wreg free
 13478                           
 13479                           ;myeeprom.c: 265: for(page = 0; page < 512; page++)
 13480  00390A  0E00               	movlw	0
 13481  00390C  6E19               	movwf	clear_rom@page+1,c
 13482  00390E  0E00               	movlw	0
 13483  003910  6E18               	movwf	clear_rom@page,c
 13484  003912  5019               	movf	clear_rom@page+1,w,c
 13485  003914  0A80               	xorlw	128
 13486  003916  0F7E               	addlw	-130
 13487  003918  0E00               	movlw	0
 13488  00391A  B4D8               	btfsc	status,2,c
 13489  00391C  5C18               	subwf	clear_rom@page,w,c
 13490  00391E  B0D8               	btfsc	status,0,c
 13491  003920  D00F               	goto	l169
 13492                           
 13493                           ;myeeprom.c: 266: {
 13494                           ;myeeprom.c: 267: for(word = 0; word < 128; word++)
 13495  003922  0E00               	movlw	0
 13496  003924  6E1A               	movwf	clear_rom@word,c
 13497  003926  D006               	goto	L21
 13498  003928                     l9621:
 13499                           
 13500                           ;myeeprom.c: 268: {
 13501                           ;myeeprom.c: 269: WriteI2C(0xFF);
 13502  003928  0EFF               	movlw	255
 13503  00392A  EC59  F01D         	call	_WriteI2C
 13504                           
 13505                           ;myeeprom.c: 270: IdleI2C();
 13506  00392E  EC35  F03D         	call	_IdleI2C	;wreg free
 13507  003932  2A1A               	incf	clear_rom@word,f,c
 13508  003934                     L21:
 13509  003934  0E7F               	movlw	127
 13510  003936  641A               	cpfsgt	clear_rom@word,c
 13511  003938  D7F7               	goto	l9621
 13512  00393A  4A18               	infsnz	clear_rom@page,f,c
 13513  00393C  2A19               	incf	clear_rom@page+1,f,c
 13514  00393E  D7E9               	goto	L20
 13515  003940                     l169:
 13516                           
 13517                           ;myeeprom.c: 271: }
 13518                           ;myeeprom.c: 272: }
 13519                           ;myeeprom.c: 274: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 13520  003940  84C5               	bsf	4037,2,c	;volatile
 13521  003942                     l172:
 13522  003942  B4C5               	btfsc	4037,2,c	;volatile
 13523  003944  D7FE               	goto	l172
 13524                           
 13525                           ;myeeprom.c: 275: _delay(100000);
 13526  003946  0E62               	movlw	98
 13527  003948  6E17               	movwf	??_clear_rom& (0+255),c
 13528  00394A  0E76               	movlw	118
 13529  00394C                     u8987:
 13530  00394C  2EE8               	decfsz	wreg,f,c
 13531  00394E  D7FE               	goto	u8987
 13532  003950  2E17               	decfsz	??_clear_rom& (0+255),f,c
 13533  003952  D7FC               	goto	u8987
 13534  003954  D000               	nop2	
 13535                           
 13536                           ;myeeprom.c: 276: return;
 13537  003956  0012               	return	
 13538  003958  FFFF               	dw	65535	; errata NOP
 13539  00395A                     __end_of_clear_rom:
 13540                           	opt stack 0
 13541                           tblptru	equ	0xFF8
 13542                           tblptrh	equ	0xFF7
 13543                           tblptrl	equ	0xFF6
 13544                           tablat	equ	0xFF5
 13545                           prodh	equ	0xFF4
 13546                           prodl	equ	0xFF3
 13547                           intcon	equ	0xFF2
 13548                           postinc0	equ	0xFEE
 13549                           wreg	equ	0xFE8
 13550                           postinc1	equ	0xFE6
 13551                           postdec1	equ	0xFE5
 13552                           fsr1h	equ	0xFE2
 13553                           fsr1l	equ	0xFE1
 13554                           indf2	equ	0xFDF
 13555                           postinc2	equ	0xFDE
 13556                           postdec2	equ	0xFDD
 13557                           fsr2h	equ	0xFDA
 13558                           fsr2l	equ	0xFD9
 13559                           status	equ	0xFD8
 13560                           
 13561 ;; *************** function _LCDGotoXY *****************
 13562 ;; Defined at:
 13563 ;;		line 311 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 13564 ;; Parameters:    Size  Location     Type
 13565 ;;  x               1    wreg     unsigned char 
 13566 ;;  y               1   28[COMRAM] unsigned char 
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;  x               1   29[COMRAM] unsigned char 
 13569 ;; Return value:  Size  Location     Type
 13570 ;;		None               void
 13571 ;; Registers used:
 13572 ;;		wreg, status,2, status,0, cstack
 13573 ;; Tracked objects:
 13574 ;;		On entry : 0/0
 13575 ;;		On exit  : 0/0
 13576 ;;		Unchanged: 0/0
 13577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13578 ;;      Params:         1       0       0       0       0       0       0
 13579 ;;      Locals:         1       0       0       0       0       0       0
 13580 ;;      Temps:          0       0       0       0       0       0       0
 13581 ;;      Totals:         2       0       0       0       0       0       0
 13582 ;;Total ram usage:        2 bytes
 13583 ;; Hardware stack levels used:    1
 13584 ;; Hardware stack levels required when called:    4
 13585 ;; This function calls:
 13586 ;;		_LCDByte
 13587 ;; This function is called by:
 13588 ;;		_main
 13589 ;;		_per_minute_reading
 13590 ;;		_per_second_reading
 13591 ;;		_rtc_setting
 13592 ;;		_data_to_center
 13593 ;;		_DisplayReadings
 13594 ;;		_rtc_local_display
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           	psect	text62
 13599  003EE4                     __ptext62:
 13600                           	opt stack 0
 13601  003EE4                     _LCDGotoXY:
 13602                           	opt stack 25
 13603                           
 13604                           ;incstack = 0
 13605  003EE4  FFFF               	dw	65535
 13606                           
 13607                           ;LCDGotoXY@x stored from wreg
 13608  003EE6  6E1E               	movwf	LCDGotoXY@x,c
 13609                           
 13610                           ;lcd_hd44780_pic18.c: 313: if(x>=20) return;
 13611  003EE8  0E13               	movlw	19
 13612  003EEA  641E               	cpfsgt	LCDGotoXY@x,c
 13613  003EEC  D008               	goto	l9157
 13614  003EEE  D01A               	goto	l63
 13615  003EF0                     l9149:
 13616                           
 13617                           ;lcd_hd44780_pic18.c: 322: x|=0b01000000;
 13618  003EF0  8C1E               	bsf	LCDGotoXY@x,6,c
 13619                           
 13620                           ;lcd_hd44780_pic18.c: 323: break;
 13621  003EF2  D012               	goto	l9159
 13622  003EF4                     l9151:
 13623                           
 13624                           ;lcd_hd44780_pic18.c: 325: x+=0x14;
 13625  003EF4  0E14               	movlw	20
 13626  003EF6  D001               	goto	L22
 13627  003EF8                     l9153:
 13628                           
 13629                           ;lcd_hd44780_pic18.c: 328: x+=0x54;
 13630  003EF8  0E54               	movlw	84
 13631  003EFA                     L22:
 13632  003EFA  261E               	addwf	LCDGotoXY@x,f,c
 13633                           
 13634                           ;lcd_hd44780_pic18.c: 329: break;
 13635  003EFC  D00D               	goto	l9159
 13636  003EFE                     l9157:
 13637  003EFE  501D               	movf	LCDGotoXY@y,w,c
 13638                           
 13639                           ; Switch size 1, requested type "space"
 13640                           ; Number of cases is 4, Range of values is 0 to 3
 13641                           ; switch strategies available:
 13642                           ; Name         Instructions Cycles
 13643                           ; simple_byte           13     7 (average)
 13644                           ;	Chosen strategy is simple_byte
 13645  003F00  0A00               	xorlw	0	; case 0
 13646  003F02  B4D8               	btfsc	status,2,c
 13647  003F04  D009               	goto	l9159
 13648  003F06  0A01               	xorlw	1	; case 1
 13649  003F08  B4D8               	btfsc	status,2,c
 13650  003F0A  D7F2               	goto	l9149
 13651  003F0C  0A03               	xorlw	3	; case 2
 13652  003F0E  B4D8               	btfsc	status,2,c
 13653  003F10  D7F1               	goto	l9151
 13654  003F12  0A01               	xorlw	1	; case 3
 13655  003F14  B4D8               	btfsc	status,2,c
 13656  003F16  D7F0               	goto	l9153
 13657  003F18                     l9159:
 13658                           
 13659                           ;lcd_hd44780_pic18.c: 352: x|=0b10000000;
 13660  003F18  8E1E               	bsf	LCDGotoXY@x,7,c
 13661                           
 13662                           ;lcd_hd44780_pic18.c: 353: (LCDByte(x,0));
 13663  003F1A  0E00               	movlw	0
 13664  003F1C  6E17               	movwf	LCDByte@isdata,c
 13665  003F1E  501E               	movf	LCDGotoXY@x,w,c
 13666  003F20  EC54  F01E         	call	_LCDByte
 13667  003F24                     l63:
 13668  003F24  0012               	return	
 13669  003F26  FFFF               	dw	65535	; errata NOP
 13670  003F28                     __end_of_LCDGotoXY:
 13671                           	opt stack 0
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           postinc0	equ	0xFEE
 13680                           wreg	equ	0xFE8
 13681                           postinc1	equ	0xFE6
 13682                           postdec1	equ	0xFE5
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           fsr2h	equ	0xFDA
 13689                           fsr2l	equ	0xFD9
 13690                           status	equ	0xFD8
 13691                           
 13692 ;; *************** function _Clear_Packet *****************
 13693 ;; Defined at:
 13694 ;;		line 139 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\packet.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;		None
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  i               1   19[COMRAM] unsigned char 
 13699 ;; Return value:  Size  Location     Type
 13700 ;;		None               void
 13701 ;; Registers used:
 13702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13703 ;; Tracked objects:
 13704 ;;		On entry : 0/0
 13705 ;;		On exit  : 0/0
 13706 ;;		Unchanged: 0/0
 13707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13708 ;;      Params:         0       0       0       0       0       0       0
 13709 ;;      Locals:         1       0       0       0       0       0       0
 13710 ;;      Temps:          0       0       0       0       0       0       0
 13711 ;;      Totals:         1       0       0       0       0       0       0
 13712 ;;Total ram usage:        1 bytes
 13713 ;; Hardware stack levels used:    1
 13714 ;; Hardware stack levels required when called:    2
 13715 ;; This function calls:
 13716 ;;		Nothing
 13717 ;; This function is called by:
 13718 ;;		_Creat_RTC_Packet
 13719 ;;		_per_minute_reading
 13720 ;;		_per_second_reading
 13721 ;;		_data_to_center
 13722 ;; This function uses a non-reentrant model
 13723 ;;
 13724                           
 13725                           	psect	text63
 13726  007C5E                     __ptext63:
 13727                           	opt stack 0
 13728  007C5E                     _Clear_Packet:
 13729                           	opt stack 26
 13730                           
 13731                           ;incstack = 0
 13732  007C5E  FFFF               	dw	65535
 13733                           
 13734                           ;packet.c: 141: char i = 0;
 13735  007C60  0E00               	movlw	0
 13736  007C62  6E14               	movwf	Clear_Packet@i,c
 13737                           
 13738                           ;packet.c: 142: for(i = 0; i < 128; i++)
 13739  007C64  0E00               	movlw	0
 13740  007C66  6E14               	movwf	Clear_Packet@i,c
 13741  007C68  D00D               	goto	L23
 13742  007C6A                     l9259:
 13743                           
 13744                           ;packet.c: 143: PACKET[i] = 0xFF;
 13745  007C6A  5014               	movf	Clear_Packet@i,w,c
 13746  007C6C  0D01               	mullw	1
 13747  007C6E  0101               	movlb	1	; () banked
 13748  007C70  0E00               	movlw	low _PACKET	;volatile
 13749  007C72  24F3               	addwf	prodl,w,c
 13750  007C74  6ED9               	movwf	fsr2l,c
 13751  007C76  0101               	movlb	1	; () banked
 13752  007C78  0E01               	movlw	high _PACKET	;volatile
 13753  007C7A  20F4               	addwfc	prodh,w,c
 13754  007C7C  6EDA               	movwf	fsr2h,c
 13755  007C7E  0EFF               	movlw	255
 13756  007C80  6EDF               	movwf	indf2,c
 13757                           
 13758                           ; BSR set to: 1
 13759  007C82  2A14               	incf	Clear_Packet@i,f,c
 13760  007C84                     L23:
 13761                           
 13762                           ; BSR set to: 1
 13763  007C84  0E7F               	movlw	127
 13764  007C86  6414               	cpfsgt	Clear_Packet@i,c
 13765  007C88  D7F0               	goto	l9259
 13766                           
 13767                           ; BSR set to: 1
 13768  007C8A  0012               	return	
 13769  007C8C  FFFF               	dw	65535	; errata NOP
 13770  007C8E                     __end_of_Clear_Packet:
 13771                           	opt stack 0
 13772                           tblptru	equ	0xFF8
 13773                           tblptrh	equ	0xFF7
 13774                           tblptrl	equ	0xFF6
 13775                           tablat	equ	0xFF5
 13776                           prodh	equ	0xFF4
 13777                           prodl	equ	0xFF3
 13778                           intcon	equ	0xFF2
 13779                           postinc0	equ	0xFEE
 13780                           wreg	equ	0xFE8
 13781                           postinc1	equ	0xFE6
 13782                           postdec1	equ	0xFE5
 13783                           fsr1h	equ	0xFE2
 13784                           fsr1l	equ	0xFE1
 13785                           indf2	equ	0xFDF
 13786                           postinc2	equ	0xFDE
 13787                           postdec2	equ	0xFDD
 13788                           fsr2h	equ	0xFDA
 13789                           fsr2l	equ	0xFD9
 13790                           status	equ	0xFD8
 13791                           
 13792 ;; *************** function _RTUInit *****************
 13793 ;; Defined at:
 13794 ;;		line 15 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\rtu.c"
 13795 ;; Parameters:    Size  Location     Type
 13796 ;;		None
 13797 ;; Auto vars:     Size  Location     Type
 13798 ;;  adr             2   61[COMRAM] unsigned int 
 13799 ;;  low             1   64[COMRAM] unsigned char 
 13800 ;;  high            1   63[COMRAM] unsigned char 
 13801 ;;  count           1    0        unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;		None               void
 13804 ;; Registers used:
 13805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13811 ;;      Params:         0       0       0       0       0       0       0
 13812 ;;      Locals:         4       0       0       0       0       0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0
 13814 ;;      Totals:         4       0       0       0       0       0       0
 13815 ;;Total ram usage:        4 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    5
 13818 ;; This function calls:
 13819 ;;		_LCDByte
 13820 ;;		_LCDInit
 13821 ;;		_MyDelay
 13822 ;;		_OpenI2C
 13823 ;;		_Read_b_eep
 13824 ;;		_USARTInit
 13825 ;;		_Write_b_eep
 13826 ;;		___ftadd
 13827 ;;		___ftmul
 13828 ;;		___lbtoft
 13829 ;;		_ds1307_get_date
 13830 ;;		_ds1307_get_time
 13831 ;;		_ds1307_init
 13832 ;;		_ds1307_set_date_time
 13833 ;; This function is called by:
 13834 ;;		_main
 13835 ;; This function uses a non-reentrant model
 13836 ;;
 13837                           
 13838                           	psect	text64
 13839  00009A                     __ptext64:
 13840                           	opt stack 0
 13841  00009A                     _RTUInit:
 13842                           	opt stack 25
 13843                           
 13844                           ;incstack = 0
 13845  00009A  FFFF               	dw	65535
 13846                           
 13847                           ;rtu.c: 17: unsigned char high, low, count;
 13848                           ;rtu.c: 18: unsigned int adr;
 13849                           ;rtu.c: 20: TRISA = 0x1F;
 13850  00009C  0E1F               	movlw	31
 13851  00009E  6E92               	movwf	3986,c	;volatile
 13852                           
 13853                           ;rtu.c: 21: TRISB = 0x01;
 13854  0000A0  0E01               	movlw	1
 13855  0000A2  6E93               	movwf	3987,c	;volatile
 13856                           
 13857                           ;rtu.c: 22: TRISC = 0xA0;
 13858  0000A4  0EA0               	movlw	160
 13859  0000A6  6E94               	movwf	3988,c	;volatile
 13860                           
 13861                           ;rtu.c: 23: TRISD = 0x33;
 13862  0000A8  0E33               	movlw	51
 13863  0000AA  6E95               	movwf	3989,c	;volatile
 13864                           
 13865                           ;rtu.c: 24: TRISE = 0x00;
 13866  0000AC  0E00               	movlw	0
 13867  0000AE  6E96               	movwf	3990,c	;volatile
 13868                           
 13869                           ;rtu.c: 26: RE0 = 0;
 13870  0000B0  9084               	bcf	3972,0,c	;volatile
 13871                           
 13872                           ;rtu.c: 27: RE1 = 0;
 13873  0000B2  9284               	bcf	3972,1,c	;volatile
 13874                           
 13875                           ;rtu.c: 28: RE2 = 0;
 13876  0000B4  9484               	bcf	3972,2,c	;volatile
 13877                           
 13878                           ;rtu.c: 29: RC0 = 0;
 13879  0000B6  9082               	bcf	3970,0,c	;volatile
 13880                           
 13881                           ;rtu.c: 30: RC1 = 0;
 13882  0000B8  9282               	bcf	3970,1,c	;volatile
 13883                           
 13884                           ;rtu.c: 32: PORTB = 0x00;
 13885  0000BA  0E00               	movlw	0
 13886  0000BC  6E81               	movwf	3969,c	;volatile
 13887                           
 13888                           ;rtu.c: 33: RC2 = 0;
 13889  0000BE  9482               	bcf	3970,2,c	;volatile
 13890                           
 13891                           ;rtu.c: 36: for(c = 0; c < 5; c++)
 13892  0000C0  0E00               	movlw	0
 13893  0000C2  6E62               	movwf	_c,c
 13894  0000C4  D00F               	goto	L24
 13895  0000C6                     l748:
 13896                           
 13897                           ;rtu.c: 37: {
 13898                           ;rtu.c: 38: RE0 = 1;
 13899  0000C6  8084               	bsf	3972,0,c	;volatile
 13900                           
 13901                           ;rtu.c: 39: MyDelay(100);
 13902  0000C8  0E00               	movlw	0
 13903  0000CA  6E15               	movwf	MyDelay@ms+1,c
 13904  0000CC  0E64               	movlw	100
 13905  0000CE  6E14               	movwf	MyDelay@ms,c
 13906  0000D0  EC8E  F03D         	call	_MyDelay	;wreg free
 13907                           
 13908                           ;rtu.c: 40: RE0 = 0;
 13909  0000D4  9084               	bcf	3972,0,c	;volatile
 13910                           
 13911                           ;rtu.c: 41: MyDelay(100);
 13912  0000D6  0E00               	movlw	0
 13913  0000D8  6E15               	movwf	MyDelay@ms+1,c
 13914  0000DA  0E64               	movlw	100
 13915  0000DC  6E14               	movwf	MyDelay@ms,c
 13916  0000DE  EC8E  F03D         	call	_MyDelay	;wreg free
 13917  0000E2  2A62               	incf	_c,f,c
 13918  0000E4                     L24:
 13919  0000E4  0E04               	movlw	4
 13920  0000E6  6462               	cpfsgt	_c,c
 13921  0000E8  D7EE               	goto	l748
 13922                           
 13923                           ;rtu.c: 42: }
 13924                           ;rtu.c: 44: Source_ID = 'x';
 13925  0000EA  0E78               	movlw	120
 13926  0000EC  6E5F               	movwf	_Source_ID,c
 13927                           
 13928                           ;rtu.c: 45: Destination_ID = 'z';
 13929  0000EE  0E7A               	movlw	122
 13930  0000F0  6E5E               	movwf	_Destination_ID,c
 13931                           
 13932                           ;rtu.c: 47: seconds = 0;
 13933  0000F2  0E00               	movlw	0
 13934  0000F4  6E6B               	movwf	_seconds,c
 13935                           
 13936                           ;rtu.c: 48: sec_flag = 0;
 13937  0000F6  0E00               	movlw	0
 13938  0000F8  6E6A               	movwf	_sec_flag,c
 13939                           
 13940                           ;rtu.c: 49: min_flag = 0;
 13941  0000FA  0E00               	movlw	0
 13942  0000FC  0100               	movlb	0	; () banked
 13943  0000FE  6FF5               	movwf	_min_flag& (0+255),b
 13944                           
 13945                           ;rtu.c: 52: device = 0xA0;
 13946  000100  0EA0               	movlw	160
 13947  000102  6E64               	movwf	_device,c
 13948                           
 13949                           ; BSR set to: 0
 13950                           ;rtu.c: 55: high = Read_b_eep(0);
 13951  000104  0E00               	movlw	0
 13952  000106  6E15               	movwf	Read_b_eep@badd+1,c
 13953  000108  0E00               	movlw	0
 13954  00010A  6E14               	movwf	Read_b_eep@badd,c
 13955  00010C  EC3F  F03D         	call	_Read_b_eep	;wreg free
 13956  000110  6E40               	movwf	RTUInit@high,c
 13957                           
 13958                           ;rtu.c: 56: _delay(50);
 13959  000112  0E0A               	movlw	10
 13960  000114                     u8997:
 13961  000114  F000               	nop	
 13962  000116  2EE8               	decfsz	wreg,f,c
 13963  000118  D7FD               	goto	u8997
 13964                           
 13965                           ;rtu.c: 57: low = Read_b_eep(1);
 13966  00011A  0E00               	movlw	0
 13967  00011C  6E15               	movwf	Read_b_eep@badd+1,c
 13968  00011E  0E01               	movlw	1
 13969  000120  6E14               	movwf	Read_b_eep@badd,c
 13970  000122  EC3F  F03D         	call	_Read_b_eep	;wreg free
 13971  000126  6E41               	movwf	RTUInit@low,c
 13972                           
 13973                           ;rtu.c: 58: _delay(50);
 13974  000128  0E0A               	movlw	10
 13975  00012A                     u9007:
 13976  00012A  F000               	nop	
 13977  00012C  2EE8               	decfsz	wreg,f,c
 13978  00012E  D7FD               	goto	u9007
 13979                           
 13980                           ;rtu.c: 61: adr = 0x0000;
 13981  000130  0E00               	movlw	0
 13982  000132  6E3F               	movwf	RTUInit@adr+1,c
 13983  000134  0E00               	movlw	0
 13984  000136  6E3E               	movwf	RTUInit@adr,c
 13985                           
 13986                           ;rtu.c: 62: adr = adr + high;
 13987  000138  5040               	movf	RTUInit@high,w,c
 13988  00013A  243E               	addwf	RTUInit@adr,w,c
 13989  00013C  6E3E               	movwf	RTUInit@adr,c
 13990  00013E  0E00               	movlw	0
 13991  000140  203F               	addwfc	RTUInit@adr+1,w,c
 13992  000142  6E3F               	movwf	RTUInit@adr+1,c
 13993                           
 13994                           ;rtu.c: 63: adr = adr << 8;
 13995  000144  503E               	movf	RTUInit@adr,w,c
 13996  000146  6E3F               	movwf	RTUInit@adr+1,c
 13997  000148  6A3E               	clrf	RTUInit@adr,c
 13998                           
 13999                           ;rtu.c: 64: adr = adr + low;
 14000  00014A  5041               	movf	RTUInit@low,w,c
 14001  00014C  243E               	addwf	RTUInit@adr,w,c
 14002  00014E  6E3E               	movwf	RTUInit@adr,c
 14003  000150  0E00               	movlw	0
 14004  000152  203F               	addwfc	RTUInit@adr+1,w,c
 14005  000154  6E3F               	movwf	RTUInit@adr+1,c
 14006                           
 14007                           ;rtu.c: 65: if(adr > 2)
 14008  000156  0E03               	movlw	3
 14009  000158  5C3E               	subwf	RTUInit@adr,w,c
 14010  00015A  0E00               	movlw	0
 14011  00015C  583F               	subwfb	RTUInit@adr+1,w,c
 14012  00015E  A0D8               	btfss	status,0,c
 14013  000160  D004               	goto	l10277
 14014                           
 14015                           ;rtu.c: 66: adr = 0;
 14016  000162  0E00               	movlw	0
 14017  000164  6E3F               	movwf	RTUInit@adr+1,c
 14018  000166  0E00               	movlw	0
 14019  000168  6E3E               	movwf	RTUInit@adr,c
 14020  00016A                     l10277:
 14021                           
 14022                           ;rtu.c: 67: Current_Write_Page = adr;
 14023  00016A  C03E  F0E9         	movff	RTUInit@adr,_Current_Write_Page	;volatile
 14024  00016E  C03F  F0EA         	movff	RTUInit@adr+1,_Current_Write_Page+1	;volatile
 14025                           
 14026                           ;rtu.c: 69: Current_Write_Page = 0;
 14027  000172  0E00               	movlw	0
 14028  000174  0100               	movlb	0	; () banked
 14029  000176  6FEA               	movwf	(_Current_Write_Page+1)& (0+255),b	;volatile
 14030  000178  0E00               	movlw	0
 14031  00017A  0100               	movlb	0	; () banked
 14032  00017C  6FE9               	movwf	_Current_Write_Page& (0+255),b	;volatile
 14033                           
 14034                           ;rtu.c: 70: Current_Read_Page = 0;
 14035  00017E  0E00               	movlw	0
 14036  000180  0100               	movlb	0	; () banked
 14037  000182  6FE8               	movwf	(_Current_Read_Page+1)& (0+255),b	;volatile
 14038  000184  0E00               	movlw	0
 14039  000186  0100               	movlb	0	; () banked
 14040  000188  6FE7               	movwf	_Current_Read_Page& (0+255),b	;volatile
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;rtu.c: 73: OpenI2C(0b00001000,0b10000000);
 14044  00018A  0E80               	movlw	128
 14045  00018C  6E14               	movwf	OpenI2C@slew,c
 14046  00018E  0E08               	movlw	8
 14047  000190  EC7D  F03D         	call	_OpenI2C
 14048                           
 14049                           ;rtu.c: 74: SSPADD = 0x19;
 14050  000194  0E19               	movlw	25
 14051  000196  6EC8               	movwf	4040,c	;volatile
 14052                           
 14053                           ;rtu.c: 77: ds1307_init();
 14054  000198  ECBE  F017         	call	_ds1307_init	;wreg free
 14055                           
 14056                           ;rtu.c: 79: if(Read_b_eep(4) != 0)
 14057  00019C  0E00               	movlw	0
 14058  00019E  6E15               	movwf	Read_b_eep@badd+1,c
 14059  0001A0  0E04               	movlw	4
 14060  0001A2  6E14               	movwf	Read_b_eep@badd,c
 14061  0001A4  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14062  0001A8  0900               	iorlw	0
 14063  0001AA  B4D8               	btfsc	status,2,c
 14064  0001AC  D022               	goto	l10295
 14065                           
 14066                           ;rtu.c: 80: {
 14067                           ;rtu.c: 81: day = 1;
 14068  0001AE  0E01               	movlw	1
 14069  0001B0  6E63               	movwf	_day,c
 14070                           
 14071                           ;rtu.c: 82: ` month = 1;
 14072  0001B2  0E01               	movlw	1
 14073  0001B4  6E68               	movwf	_month,c
 14074                           
 14075                           ;rtu.c: 83: year = 15;
 14076  0001B6  0E0F               	movlw	15
 14077  0001B8  6E6C               	movwf	_year,c
 14078                           
 14079                           ;rtu.c: 84: dow = 2;
 14080  0001BA  0E02               	movlw	2
 14081  0001BC  6E65               	movwf	_dow,c
 14082                           
 14083                           ;rtu.c: 85: hr = 6;
 14084  0001BE  0E06               	movlw	6
 14085  0001C0  6E66               	movwf	_hr,c
 14086                           
 14087                           ;rtu.c: 86: min = 0;
 14088  0001C2  0E00               	movlw	0
 14089  0001C4  6E67               	movwf	_min,c
 14090                           
 14091                           ;rtu.c: 87: sec = 0;
 14092  0001C6  0E00               	movlw	0
 14093  0001C8  6E69               	movwf	_sec,c
 14094                           
 14095                           ;rtu.c: 88: ds1307_set_date_time();
 14096  0001CA  EC61  F017         	call	_ds1307_set_date_time	;wreg free
 14097                           
 14098                           ;rtu.c: 89: MyDelay(100);
 14099  0001CE  0E00               	movlw	0
 14100  0001D0  6E15               	movwf	MyDelay@ms+1,c
 14101  0001D2  0E64               	movlw	100
 14102  0001D4  6E14               	movwf	MyDelay@ms,c
 14103  0001D6  EC8E  F03D         	call	_MyDelay	;wreg free
 14104                           
 14105                           ;rtu.c: 90: Write_b_eep(0x04,0);
 14106  0001DA  0E00               	movlw	0
 14107  0001DC  6E15               	movwf	Write_b_eep@badd+1,c
 14108  0001DE  0E04               	movlw	4
 14109  0001E0  6E14               	movwf	Write_b_eep@badd,c
 14110  0001E2  0E00               	movlw	0
 14111  0001E4  6E16               	movwf	Write_b_eep@bdat,c
 14112  0001E6  EC94  F01F         	call	_Write_b_eep	;wreg free
 14113                           
 14114                           ;rtu.c: 91: _delay(50);
 14115  0001EA  0E0A               	movlw	10
 14116  0001EC                     u9017:
 14117  0001EC  F000               	nop	
 14118  0001EE  2EE8               	decfsz	wreg,f,c
 14119  0001F0  D7FD               	goto	u9017
 14120  0001F2                     l10295:
 14121                           
 14122                           ;rtu.c: 92: }
 14123                           ;rtu.c: 95: ds1307_get_date();
 14124  0001F2  EC67  F019         	call	_ds1307_get_date	;wreg free
 14125                           
 14126                           ;rtu.c: 96: MyDelay(100);
 14127  0001F6  0E00               	movlw	0
 14128  0001F8  6E15               	movwf	MyDelay@ms+1,c
 14129  0001FA  0E64               	movlw	100
 14130  0001FC  6E14               	movwf	MyDelay@ms,c
 14131  0001FE  EC8E  F03D         	call	_MyDelay	;wreg free
 14132                           
 14133                           ;rtu.c: 98: ds1307_get_time();
 14134  000202  EC30  F01C         	call	_ds1307_get_time	;wreg free
 14135                           
 14136                           ;rtu.c: 99: MyDelay(100);
 14137  000206  0E00               	movlw	0
 14138  000208  6E15               	movwf	MyDelay@ms+1,c
 14139  00020A  0E64               	movlw	100
 14140  00020C  6E14               	movwf	MyDelay@ms,c
 14141  00020E  EC8E  F03D         	call	_MyDelay	;wreg free
 14142                           
 14143                           ;rtu.c: 101: high = Read_b_eep(5);
 14144  000212  0E00               	movlw	0
 14145  000214  6E15               	movwf	Read_b_eep@badd+1,c
 14146  000216  0E05               	movlw	5
 14147  000218  6E14               	movwf	Read_b_eep@badd,c
 14148  00021A  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14149  00021E  6E40               	movwf	RTUInit@high,c
 14150                           
 14151                           ;rtu.c: 102: _delay(50);
 14152  000220  0E0A               	movlw	10
 14153  000222                     u9027:
 14154  000222  F000               	nop	
 14155  000224  2EE8               	decfsz	wreg,f,c
 14156  000226  D7FD               	goto	u9027
 14157                           
 14158                           ;rtu.c: 103: low = Read_b_eep(6);
 14159  000228  0E00               	movlw	0
 14160  00022A  6E15               	movwf	Read_b_eep@badd+1,c
 14161  00022C  0E06               	movlw	6
 14162  00022E  6E14               	movwf	Read_b_eep@badd,c
 14163  000230  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14164  000234  6E41               	movwf	RTUInit@low,c
 14165                           
 14166                           ;rtu.c: 104: _delay(50);
 14167  000236  0E0A               	movlw	10
 14168  000238                     u9037:
 14169  000238  F000               	nop	
 14170  00023A  2EE8               	decfsz	wreg,f,c
 14171  00023C  D7FD               	goto	u9037
 14172                           
 14173                           ;rtu.c: 105: thresh_temp1 = high + (low*0.01);
 14174  00023E  5040               	movf	RTUInit@high,w,c
 14175  000240  ECC7  F03D         	call	___lbtoft
 14176  000244  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14177  000248  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14178  00024C  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14179  000250  0ED7               	movlw	215
 14180  000252  6E23               	movwf	___ftmul@f2,c
 14181  000254  0E23               	movlw	35
 14182  000256  6E24               	movwf	___ftmul@f2+1,c
 14183  000258  0E3C               	movlw	60
 14184  00025A  6E25               	movwf	___ftmul@f2+2,c
 14185  00025C  5041               	movf	RTUInit@low,w,c
 14186  00025E  ECC7  F03D         	call	___lbtoft
 14187  000262  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14188  000266  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14189  00026A  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14190  00026E  EC69  F014         	call	___ftmul	;wreg free
 14191  000272  C020  F035         	movff	?___ftmul,___ftadd@f2
 14192  000276  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14193  00027A  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14194  00027E  EC44  F00C         	call	___ftadd	;wreg free
 14195  000282  C032  F059         	movff	?___ftadd,_thresh_temp1
 14196  000286  C033  F05A         	movff	?___ftadd+1,_thresh_temp1+1
 14197  00028A  C034  F05B         	movff	?___ftadd+2,_thresh_temp1+2
 14198                           
 14199                           ;rtu.c: 107: high = Read_b_eep(7);
 14200  00028E  0E00               	movlw	0
 14201  000290  6E15               	movwf	Read_b_eep@badd+1,c
 14202  000292  0E07               	movlw	7
 14203  000294  6E14               	movwf	Read_b_eep@badd,c
 14204  000296  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14205  00029A  6E40               	movwf	RTUInit@high,c
 14206                           
 14207                           ;rtu.c: 108: _delay(50);
 14208  00029C  0E0A               	movlw	10
 14209  00029E                     u9047:
 14210  00029E  F000               	nop	
 14211  0002A0  2EE8               	decfsz	wreg,f,c
 14212  0002A2  D7FD               	goto	u9047
 14213                           
 14214                           ;rtu.c: 109: low = Read_b_eep(8);
 14215  0002A4  0E00               	movlw	0
 14216  0002A6  6E15               	movwf	Read_b_eep@badd+1,c
 14217  0002A8  0E08               	movlw	8
 14218  0002AA  6E14               	movwf	Read_b_eep@badd,c
 14219  0002AC  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14220  0002B0  6E41               	movwf	RTUInit@low,c
 14221                           
 14222                           ;rtu.c: 110: _delay(50);
 14223  0002B2  0E0A               	movlw	10
 14224  0002B4                     u9057:
 14225  0002B4  F000               	nop	
 14226  0002B6  2EE8               	decfsz	wreg,f,c
 14227  0002B8  D7FD               	goto	u9057
 14228                           
 14229                           ;rtu.c: 111: thresh_hum1 = high + (low*0.01);
 14230  0002BA  5040               	movf	RTUInit@high,w,c
 14231  0002BC  ECC7  F03D         	call	___lbtoft
 14232  0002C0  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14233  0002C4  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14234  0002C8  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14235  0002CC  0ED7               	movlw	215
 14236  0002CE  6E23               	movwf	___ftmul@f2,c
 14237  0002D0  0E23               	movlw	35
 14238  0002D2  6E24               	movwf	___ftmul@f2+1,c
 14239  0002D4  0E3C               	movlw	60
 14240  0002D6  6E25               	movwf	___ftmul@f2+2,c
 14241  0002D8  5041               	movf	RTUInit@low,w,c
 14242  0002DA  ECC7  F03D         	call	___lbtoft
 14243  0002DE  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14244  0002E2  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14245  0002E6  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14246  0002EA  EC69  F014         	call	___ftmul	;wreg free
 14247  0002EE  C020  F035         	movff	?___ftmul,___ftadd@f2
 14248  0002F2  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14249  0002F6  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14250  0002FA  EC44  F00C         	call	___ftadd	;wreg free
 14251  0002FE  C032  F0D2         	movff	?___ftadd,_thresh_hum1
 14252  000302  C033  F0D3         	movff	?___ftadd+1,_thresh_hum1+1
 14253  000306  C034  F0D4         	movff	?___ftadd+2,_thresh_hum1+2
 14254                           
 14255                           ;rtu.c: 113: high = Read_b_eep(9);
 14256  00030A  0E00               	movlw	0
 14257  00030C  6E15               	movwf	Read_b_eep@badd+1,c
 14258  00030E  0E09               	movlw	9
 14259  000310  6E14               	movwf	Read_b_eep@badd,c
 14260  000312  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14261  000316  6E40               	movwf	RTUInit@high,c
 14262                           
 14263                           ;rtu.c: 114: _delay(50);
 14264  000318  0E0A               	movlw	10
 14265  00031A                     u9067:
 14266  00031A  F000               	nop	
 14267  00031C  2EE8               	decfsz	wreg,f,c
 14268  00031E  D7FD               	goto	u9067
 14269                           
 14270                           ;rtu.c: 115: low = Read_b_eep(10);
 14271  000320  0E00               	movlw	0
 14272  000322  6E15               	movwf	Read_b_eep@badd+1,c
 14273  000324  0E0A               	movlw	10
 14274  000326  6E14               	movwf	Read_b_eep@badd,c
 14275  000328  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14276  00032C  6E41               	movwf	RTUInit@low,c
 14277                           
 14278                           ;rtu.c: 116: _delay(50);
 14279  00032E  0E0A               	movlw	10
 14280  000330                     u9077:
 14281  000330  F000               	nop	
 14282  000332  2EE8               	decfsz	wreg,f,c
 14283  000334  D7FD               	goto	u9077
 14284                           
 14285                           ;rtu.c: 117: thresh_temp2 = high + (low*0.01);
 14286  000336  5040               	movf	RTUInit@high,w,c
 14287  000338  ECC7  F03D         	call	___lbtoft
 14288  00033C  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14289  000340  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14290  000344  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14291  000348  0ED7               	movlw	215
 14292  00034A  6E23               	movwf	___ftmul@f2,c
 14293  00034C  0E23               	movlw	35
 14294  00034E  6E24               	movwf	___ftmul@f2+1,c
 14295  000350  0E3C               	movlw	60
 14296  000352  6E25               	movwf	___ftmul@f2+2,c
 14297  000354  5041               	movf	RTUInit@low,w,c
 14298  000356  ECC7  F03D         	call	___lbtoft
 14299  00035A  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14300  00035E  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14301  000362  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14302  000366  EC69  F014         	call	___ftmul	;wreg free
 14303  00036A  C020  F035         	movff	?___ftmul,___ftadd@f2
 14304  00036E  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14305  000372  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14306  000376  EC44  F00C         	call	___ftadd	;wreg free
 14307  00037A  C032  F0D8         	movff	?___ftadd,_thresh_temp2
 14308  00037E  C033  F0D9         	movff	?___ftadd+1,_thresh_temp2+1
 14309  000382  C034  F0DA         	movff	?___ftadd+2,_thresh_temp2+2
 14310                           
 14311                           ;rtu.c: 119: high = Read_b_eep(11);
 14312  000386  0E00               	movlw	0
 14313  000388  6E15               	movwf	Read_b_eep@badd+1,c
 14314  00038A  0E0B               	movlw	11
 14315  00038C  6E14               	movwf	Read_b_eep@badd,c
 14316  00038E  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14317  000392  6E40               	movwf	RTUInit@high,c
 14318                           
 14319                           ;rtu.c: 120: _delay(50);
 14320  000394  0E0A               	movlw	10
 14321  000396                     u9087:
 14322  000396  F000               	nop	
 14323  000398  2EE8               	decfsz	wreg,f,c
 14324  00039A  D7FD               	goto	u9087
 14325                           
 14326                           ;rtu.c: 121: low = Read_b_eep(12);
 14327  00039C  0E00               	movlw	0
 14328  00039E  6E15               	movwf	Read_b_eep@badd+1,c
 14329  0003A0  0E0C               	movlw	12
 14330  0003A2  6E14               	movwf	Read_b_eep@badd,c
 14331  0003A4  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14332  0003A8  6E41               	movwf	RTUInit@low,c
 14333                           
 14334                           ;rtu.c: 122: _delay(50);
 14335  0003AA  0E0A               	movlw	10
 14336  0003AC                     u9097:
 14337  0003AC  F000               	nop	
 14338  0003AE  2EE8               	decfsz	wreg,f,c
 14339  0003B0  D7FD               	goto	u9097
 14340                           
 14341                           ;rtu.c: 123: thresh_hum2 = high + (low*0.01);
 14342  0003B2  5040               	movf	RTUInit@high,w,c
 14343  0003B4  ECC7  F03D         	call	___lbtoft
 14344  0003B8  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14345  0003BC  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14346  0003C0  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14347  0003C4  0ED7               	movlw	215
 14348  0003C6  6E23               	movwf	___ftmul@f2,c
 14349  0003C8  0E23               	movlw	35
 14350  0003CA  6E24               	movwf	___ftmul@f2+1,c
 14351  0003CC  0E3C               	movlw	60
 14352  0003CE  6E25               	movwf	___ftmul@f2+2,c
 14353  0003D0  5041               	movf	RTUInit@low,w,c
 14354  0003D2  ECC7  F03D         	call	___lbtoft
 14355  0003D6  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14356  0003DA  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14357  0003DE  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14358  0003E2  EC69  F014         	call	___ftmul	;wreg free
 14359  0003E6  C020  F035         	movff	?___ftmul,___ftadd@f2
 14360  0003EA  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14361  0003EE  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14362  0003F2  EC44  F00C         	call	___ftadd	;wreg free
 14363  0003F6  C032  F0D5         	movff	?___ftadd,_thresh_hum2
 14364  0003FA  C033  F0D6         	movff	?___ftadd+1,_thresh_hum2+1
 14365  0003FE  C034  F0D7         	movff	?___ftadd+2,_thresh_hum2+2
 14366                           
 14367                           ;rtu.c: 125: high = Read_b_eep(13);
 14368  000402  0E00               	movlw	0
 14369  000404  6E15               	movwf	Read_b_eep@badd+1,c
 14370  000406  0E0D               	movlw	13
 14371  000408  6E14               	movwf	Read_b_eep@badd,c
 14372  00040A  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14373  00040E  6E40               	movwf	RTUInit@high,c
 14374                           
 14375                           ;rtu.c: 126: _delay(50);
 14376  000410  0E0A               	movlw	10
 14377  000412                     u9107:
 14378  000412  F000               	nop	
 14379  000414  2EE8               	decfsz	wreg,f,c
 14380  000416  D7FD               	goto	u9107
 14381                           
 14382                           ;rtu.c: 127: low = Read_b_eep(14);
 14383  000418  0E00               	movlw	0
 14384  00041A  6E15               	movwf	Read_b_eep@badd+1,c
 14385  00041C  0E0E               	movlw	14
 14386  00041E  6E14               	movwf	Read_b_eep@badd,c
 14387  000420  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14388  000424  6E41               	movwf	RTUInit@low,c
 14389                           
 14390                           ;rtu.c: 128: _delay(50);
 14391  000426  0E0A               	movlw	10
 14392  000428                     u9117:
 14393  000428  F000               	nop	
 14394  00042A  2EE8               	decfsz	wreg,f,c
 14395  00042C  D7FD               	goto	u9117
 14396                           
 14397                           ;rtu.c: 129: trig_temp1 = high + (low*0.01);
 14398  00042E  5040               	movf	RTUInit@high,w,c
 14399  000430  ECC7  F03D         	call	___lbtoft
 14400  000434  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14401  000438  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14402  00043C  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14403  000440  0ED7               	movlw	215
 14404  000442  6E23               	movwf	___ftmul@f2,c
 14405  000444  0E23               	movlw	35
 14406  000446  6E24               	movwf	___ftmul@f2+1,c
 14407  000448  0E3C               	movlw	60
 14408  00044A  6E25               	movwf	___ftmul@f2+2,c
 14409  00044C  5041               	movf	RTUInit@low,w,c
 14410  00044E  ECC7  F03D         	call	___lbtoft
 14411  000452  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14412  000456  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14413  00045A  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14414  00045E  EC69  F014         	call	___ftmul	;wreg free
 14415  000462  C020  F035         	movff	?___ftmul,___ftadd@f2
 14416  000466  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14417  00046A  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14418  00046E  EC44  F00C         	call	___ftadd	;wreg free
 14419  000472  C032  F0E1         	movff	?___ftadd,_trig_temp1
 14420  000476  C033  F0E2         	movff	?___ftadd+1,_trig_temp1+1
 14421  00047A  C034  F0E3         	movff	?___ftadd+2,_trig_temp1+2
 14422                           
 14423                           ;rtu.c: 131: high = Read_b_eep(15);
 14424  00047E  0E00               	movlw	0
 14425  000480  6E15               	movwf	Read_b_eep@badd+1,c
 14426  000482  0E0F               	movlw	15
 14427  000484  6E14               	movwf	Read_b_eep@badd,c
 14428  000486  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14429  00048A  6E40               	movwf	RTUInit@high,c
 14430                           
 14431                           ;rtu.c: 132: _delay(50);
 14432  00048C  0E0A               	movlw	10
 14433  00048E                     u9127:
 14434  00048E  F000               	nop	
 14435  000490  2EE8               	decfsz	wreg,f,c
 14436  000492  D7FD               	goto	u9127
 14437                           
 14438                           ;rtu.c: 133: low = Read_b_eep(16);
 14439  000494  0E00               	movlw	0
 14440  000496  6E15               	movwf	Read_b_eep@badd+1,c
 14441  000498  0E10               	movlw	16
 14442  00049A  6E14               	movwf	Read_b_eep@badd,c
 14443  00049C  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14444  0004A0  6E41               	movwf	RTUInit@low,c
 14445                           
 14446                           ;rtu.c: 134: _delay(50);
 14447  0004A2  0E0A               	movlw	10
 14448  0004A4                     u9137:
 14449  0004A4  F000               	nop	
 14450  0004A6  2EE8               	decfsz	wreg,f,c
 14451  0004A8  D7FD               	goto	u9137
 14452                           
 14453                           ;rtu.c: 135: trig_hum1 = high + (low*0.01);
 14454  0004AA  5040               	movf	RTUInit@high,w,c
 14455  0004AC  ECC7  F03D         	call	___lbtoft
 14456  0004B0  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14457  0004B4  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14458  0004B8  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14459  0004BC  0ED7               	movlw	215
 14460  0004BE  6E23               	movwf	___ftmul@f2,c
 14461  0004C0  0E23               	movlw	35
 14462  0004C2  6E24               	movwf	___ftmul@f2+1,c
 14463  0004C4  0E3C               	movlw	60
 14464  0004C6  6E25               	movwf	___ftmul@f2+2,c
 14465  0004C8  5041               	movf	RTUInit@low,w,c
 14466  0004CA  ECC7  F03D         	call	___lbtoft
 14467  0004CE  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14468  0004D2  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14469  0004D6  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14470  0004DA  EC69  F014         	call	___ftmul	;wreg free
 14471  0004DE  C020  F035         	movff	?___ftmul,___ftadd@f2
 14472  0004E2  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14473  0004E6  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14474  0004EA  EC44  F00C         	call	___ftadd	;wreg free
 14475  0004EE  C032  F0DB         	movff	?___ftadd,_trig_hum1
 14476  0004F2  C033  F0DC         	movff	?___ftadd+1,_trig_hum1+1
 14477  0004F6  C034  F0DD         	movff	?___ftadd+2,_trig_hum1+2
 14478                           
 14479                           ;rtu.c: 137: high = Read_b_eep(17);
 14480  0004FA  0E00               	movlw	0
 14481  0004FC  6E15               	movwf	Read_b_eep@badd+1,c
 14482  0004FE  0E11               	movlw	17
 14483  000500  6E14               	movwf	Read_b_eep@badd,c
 14484  000502  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14485  000506  6E40               	movwf	RTUInit@high,c
 14486                           
 14487                           ;rtu.c: 138: _delay(50);
 14488  000508  0E0A               	movlw	10
 14489  00050A                     u9147:
 14490  00050A  F000               	nop	
 14491  00050C  2EE8               	decfsz	wreg,f,c
 14492  00050E  D7FD               	goto	u9147
 14493                           
 14494                           ;rtu.c: 139: low = Read_b_eep(18);
 14495  000510  0E00               	movlw	0
 14496  000512  6E15               	movwf	Read_b_eep@badd+1,c
 14497  000514  0E12               	movlw	18
 14498  000516  6E14               	movwf	Read_b_eep@badd,c
 14499  000518  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14500  00051C  6E41               	movwf	RTUInit@low,c
 14501                           
 14502                           ;rtu.c: 140: _delay(50);
 14503  00051E  0E0A               	movlw	10
 14504  000520                     u9157:
 14505  000520  F000               	nop	
 14506  000522  2EE8               	decfsz	wreg,f,c
 14507  000524  D7FD               	goto	u9157
 14508                           
 14509                           ;rtu.c: 141: trig_temp2 = high + (low*0.01);
 14510  000526  5040               	movf	RTUInit@high,w,c
 14511  000528  ECC7  F03D         	call	___lbtoft
 14512  00052C  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14513  000530  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14514  000534  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14515  000538  0ED7               	movlw	215
 14516  00053A  6E23               	movwf	___ftmul@f2,c
 14517  00053C  0E23               	movlw	35
 14518  00053E  6E24               	movwf	___ftmul@f2+1,c
 14519  000540  0E3C               	movlw	60
 14520  000542  6E25               	movwf	___ftmul@f2+2,c
 14521  000544  5041               	movf	RTUInit@low,w,c
 14522  000546  ECC7  F03D         	call	___lbtoft
 14523  00054A  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14524  00054E  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14525  000552  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14526  000556  EC69  F014         	call	___ftmul	;wreg free
 14527  00055A  C020  F035         	movff	?___ftmul,___ftadd@f2
 14528  00055E  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14529  000562  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14530  000566  EC44  F00C         	call	___ftadd	;wreg free
 14531  00056A  C032  F0E4         	movff	?___ftadd,_trig_temp2
 14532  00056E  C033  F0E5         	movff	?___ftadd+1,_trig_temp2+1
 14533  000572  C034  F0E6         	movff	?___ftadd+2,_trig_temp2+2
 14534                           
 14535                           ;rtu.c: 143: high = Read_b_eep(19);
 14536  000576  0E00               	movlw	0
 14537  000578  6E15               	movwf	Read_b_eep@badd+1,c
 14538  00057A  0E13               	movlw	19
 14539  00057C  6E14               	movwf	Read_b_eep@badd,c
 14540  00057E  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14541  000582  6E40               	movwf	RTUInit@high,c
 14542                           
 14543                           ;rtu.c: 144: _delay(50);
 14544  000584  0E0A               	movlw	10
 14545  000586                     u9167:
 14546  000586  F000               	nop	
 14547  000588  2EE8               	decfsz	wreg,f,c
 14548  00058A  D7FD               	goto	u9167
 14549                           
 14550                           ;rtu.c: 145: low = Read_b_eep(20);
 14551  00058C  0E00               	movlw	0
 14552  00058E  6E15               	movwf	Read_b_eep@badd+1,c
 14553  000590  0E14               	movlw	20
 14554  000592  6E14               	movwf	Read_b_eep@badd,c
 14555  000594  EC3F  F03D         	call	_Read_b_eep	;wreg free
 14556  000598  6E41               	movwf	RTUInit@low,c
 14557                           
 14558                           ;rtu.c: 146: _delay(50);
 14559  00059A  0E0A               	movlw	10
 14560  00059C                     u9177:
 14561  00059C  F000               	nop	
 14562  00059E  2EE8               	decfsz	wreg,f,c
 14563  0005A0  D7FD               	goto	u9177
 14564                           
 14565                           ;rtu.c: 147: trig_hum2 = high + (low*0.01);
 14566  0005A2  5040               	movf	RTUInit@high,w,c
 14567  0005A4  ECC7  F03D         	call	___lbtoft
 14568  0005A8  C01C  F032         	movff	?___lbtoft,___ftadd@f1
 14569  0005AC  C01D  F033         	movff	?___lbtoft+1,___ftadd@f1+1
 14570  0005B0  C01E  F034         	movff	?___lbtoft+2,___ftadd@f1+2
 14571  0005B4  0ED7               	movlw	215
 14572  0005B6  6E23               	movwf	___ftmul@f2,c
 14573  0005B8  0E23               	movlw	35
 14574  0005BA  6E24               	movwf	___ftmul@f2+1,c
 14575  0005BC  0E3C               	movlw	60
 14576  0005BE  6E25               	movwf	___ftmul@f2+2,c
 14577  0005C0  5041               	movf	RTUInit@low,w,c
 14578  0005C2  ECC7  F03D         	call	___lbtoft
 14579  0005C6  C01C  F020         	movff	?___lbtoft,___ftmul@f1
 14580  0005CA  C01D  F021         	movff	?___lbtoft+1,___ftmul@f1+1
 14581  0005CE  C01E  F022         	movff	?___lbtoft+2,___ftmul@f1+2
 14582  0005D2  EC69  F014         	call	___ftmul	;wreg free
 14583  0005D6  C020  F035         	movff	?___ftmul,___ftadd@f2
 14584  0005DA  C021  F036         	movff	?___ftmul+1,___ftadd@f2+1
 14585  0005DE  C022  F037         	movff	?___ftmul+2,___ftadd@f2+2
 14586  0005E2  EC44  F00C         	call	___ftadd	;wreg free
 14587  0005E6  C032  F0DE         	movff	?___ftadd,_trig_hum2
 14588  0005EA  C033  F0DF         	movff	?___ftadd+1,_trig_hum2+1
 14589  0005EE  C034  F0E0         	movff	?___ftadd+2,_trig_hum2+2
 14590                           
 14591                           ;rtu.c: 150: RB1 = 1;
 14592  0005F2  8281               	bsf	3969,1,c	;volatile
 14593                           
 14594                           ;rtu.c: 151: LCDInit(0B00000000);
 14595  0005F4  0E00               	movlw	0
 14596  0005F6  EC69  F01B         	call	_LCDInit
 14597                           
 14598                           ;rtu.c: 153: (LCDByte(0b00000001,0));
 14599  0005FA  0E00               	movlw	0
 14600  0005FC  6E17               	movwf	LCDByte@isdata,c
 14601  0005FE  0E01               	movlw	1
 14602  000600  EC54  F01E         	call	_LCDByte
 14603                           
 14604                           ;rtu.c: 156: USARTInit(9600);
 14605  000604  0E25               	movlw	37
 14606  000606  6E15               	movwf	USARTInit@baud_rate+1,c
 14607  000608  0E80               	movlw	128
 14608  00060A  6E14               	movwf	USARTInit@baud_rate,c
 14609  00060C  ECEF  F01B         	call	_USARTInit	;wreg free
 14610                           
 14611                           ;rtu.c: 159: INTEDG0 = 1;
 14612  000610  8CF1               	bsf	intcon2,6,c	;volatile
 14613                           
 14614                           ;rtu.c: 160: INT0IE = 1;
 14615  000612  88F2               	bsf	intcon,4,c	;volatile
 14616                           
 14617                           ;rtu.c: 161: (INTCONbits.GIE = 1);
 14618  000614  8EF2               	bsf	intcon,7,c	;volatile
 14619  000616  0012               	return	
 14620  000618  FFFF               	dw	65535	; errata NOP
 14621  00061A                     __end_of_RTUInit:
 14622                           	opt stack 0
 14623                           tblptru	equ	0xFF8
 14624                           tblptrh	equ	0xFF7
 14625                           tblptrl	equ	0xFF6
 14626                           tablat	equ	0xFF5
 14627                           prodh	equ	0xFF4
 14628                           prodl	equ	0xFF3
 14629                           intcon	equ	0xFF2
 14630                           intcon2	equ	0xFF1
 14631                           postinc0	equ	0xFEE
 14632                           wreg	equ	0xFE8
 14633                           postinc1	equ	0xFE6
 14634                           postdec1	equ	0xFE5
 14635                           fsr1h	equ	0xFE2
 14636                           fsr1l	equ	0xFE1
 14637                           indf2	equ	0xFDF
 14638                           postinc2	equ	0xFDE
 14639                           postdec2	equ	0xFDD
 14640                           fsr2h	equ	0xFDA
 14641                           fsr2l	equ	0xFD9
 14642                           status	equ	0xFD8
 14643                           
 14644 ;; *************** function _ds1307_set_date_time *****************
 14645 ;; Defined at:
 14646 ;;		line 45 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 14647 ;; Parameters:    Size  Location     Type
 14648 ;;		None
 14649 ;; Auto vars:     Size  Location     Type
 14650 ;;		None
 14651 ;; Return value:  Size  Location     Type
 14652 ;;		None               void
 14653 ;; Registers used:
 14654 ;;		wreg, status,2, status,0, cstack
 14655 ;; Tracked objects:
 14656 ;;		On entry : 0/0
 14657 ;;		On exit  : 0/0
 14658 ;;		Unchanged: 0/0
 14659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14660 ;;      Params:         0       0       0       0       0       0       0
 14661 ;;      Locals:         0       0       0       0       0       0       0
 14662 ;;      Temps:          0       0       0       0       0       0       0
 14663 ;;      Totals:         0       0       0       0       0       0       0
 14664 ;;Total ram usage:        0 bytes
 14665 ;; Hardware stack levels used:    1
 14666 ;; Hardware stack levels required when called:    4
 14667 ;; This function calls:
 14668 ;;		_IdleI2C
 14669 ;;		_WriteI2C
 14670 ;;		_bin2bcd
 14671 ;; This function is called by:
 14672 ;;		_RTUInit
 14673 ;;		_rtc_setting
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           	psect	text65
 14678  002EC2                     __ptext65:
 14679                           	opt stack 0
 14680  002EC2                     _ds1307_set_date_time:
 14681                           	opt stack 25
 14682                           
 14683                           ;incstack = 0
 14684  002EC2  FFFF               	dw	65535
 14685                           
 14686                           ;myrtc.C: 47: sec &= 0x7F;
 14687  002EC4  9E69               	bcf	_sec,7,c
 14688                           
 14689                           ;myrtc.C: 48: hr &= 0x3F;
 14690  002EC6  0E3F               	movlw	63
 14691  002EC8  1666               	andwf	_hr,f,c
 14692                           
 14693                           ;myrtc.C: 50: sec = bin2bcd(sec);
 14694  002ECA  5069               	movf	_sec,w,c
 14695  002ECC  ECB4  F03D         	call	_bin2bcd
 14696  002ED0  6E69               	movwf	_sec,c
 14697                           
 14698                           ;myrtc.C: 51: min = bin2bcd(min);
 14699  002ED2  5067               	movf	_min,w,c
 14700  002ED4  ECB4  F03D         	call	_bin2bcd
 14701  002ED8  6E67               	movwf	_min,c
 14702                           
 14703                           ;myrtc.C: 52: hr = bin2bcd(hr);
 14704  002EDA  5066               	movf	_hr,w,c
 14705  002EDC  ECB4  F03D         	call	_bin2bcd
 14706  002EE0  6E66               	movwf	_hr,c
 14707                           
 14708                           ;myrtc.C: 53: dow = bin2bcd(dow);
 14709  002EE2  5065               	movf	_dow,w,c
 14710  002EE4  ECB4  F03D         	call	_bin2bcd
 14711  002EE8  6E65               	movwf	_dow,c
 14712                           
 14713                           ;myrtc.C: 54: day = bin2bcd(day);
 14714  002EEA  5063               	movf	_day,w,c
 14715  002EEC  ECB4  F03D         	call	_bin2bcd
 14716  002EF0  6E63               	movwf	_day,c
 14717                           
 14718                           ;myrtc.C: 55: month = bin2bcd(month);
 14719  002EF2  5068               	movf	_month,w,c
 14720  002EF4  ECB4  F03D         	call	_bin2bcd
 14721  002EF8  6E68               	movwf	_month,c
 14722                           
 14723                           ;myrtc.C: 56: year = bin2bcd(year);
 14724  002EFA  506C               	movf	_year,w,c
 14725  002EFC  ECB4  F03D         	call	_bin2bcd
 14726  002F00  6E6C               	movwf	_year,c
 14727                           
 14728                           ;myrtc.C: 58: IdleI2C();
 14729  002F02  EC35  F03D         	call	_IdleI2C	;wreg free
 14730                           
 14731                           ;myrtc.C: 59: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 14732  002F06  80C5               	bsf	4037,0,c	;volatile
 14733  002F08                     l230:
 14734  002F08  B0C5               	btfsc	4037,0,c	;volatile
 14735  002F0A  D7FE               	goto	l230
 14736                           
 14737                           ;myrtc.C: 60: WriteI2C(0xD0);
 14738  002F0C  0ED0               	movlw	208
 14739  002F0E  EC59  F01D         	call	_WriteI2C
 14740                           
 14741                           ;myrtc.C: 61: IdleI2C();
 14742  002F12  EC35  F03D         	call	_IdleI2C	;wreg free
 14743                           
 14744                           ;myrtc.C: 62: WriteI2C(0x00);
 14745  002F16  0E00               	movlw	0
 14746  002F18  EC59  F01D         	call	_WriteI2C
 14747                           
 14748                           ;myrtc.C: 63: IdleI2C();
 14749  002F1C  EC35  F03D         	call	_IdleI2C	;wreg free
 14750                           
 14751                           ;myrtc.C: 64: WriteI2C(sec);
 14752  002F20  5069               	movf	_sec,w,c
 14753  002F22  EC59  F01D         	call	_WriteI2C
 14754                           
 14755                           ;myrtc.C: 65: IdleI2C();
 14756  002F26  EC35  F03D         	call	_IdleI2C	;wreg free
 14757                           
 14758                           ;myrtc.C: 66: WriteI2C(min);
 14759  002F2A  5067               	movf	_min,w,c
 14760  002F2C  EC59  F01D         	call	_WriteI2C
 14761                           
 14762                           ;myrtc.C: 67: IdleI2C();
 14763  002F30  EC35  F03D         	call	_IdleI2C	;wreg free
 14764                           
 14765                           ;myrtc.C: 68: WriteI2C(hr);
 14766  002F34  5066               	movf	_hr,w,c
 14767  002F36  EC59  F01D         	call	_WriteI2C
 14768                           
 14769                           ;myrtc.C: 69: IdleI2C();
 14770  002F3A  EC35  F03D         	call	_IdleI2C	;wreg free
 14771                           
 14772                           ;myrtc.C: 70: WriteI2C(dow);
 14773  002F3E  5065               	movf	_dow,w,c
 14774  002F40  EC59  F01D         	call	_WriteI2C
 14775                           
 14776                           ;myrtc.C: 71: IdleI2C();
 14777  002F44  EC35  F03D         	call	_IdleI2C	;wreg free
 14778                           
 14779                           ;myrtc.C: 72: WriteI2C(day);
 14780  002F48  5063               	movf	_day,w,c
 14781  002F4A  EC59  F01D         	call	_WriteI2C
 14782                           
 14783                           ;myrtc.C: 73: IdleI2C();
 14784  002F4E  EC35  F03D         	call	_IdleI2C	;wreg free
 14785                           
 14786                           ;myrtc.C: 74: WriteI2C(month);
 14787  002F52  5068               	movf	_month,w,c
 14788  002F54  EC59  F01D         	call	_WriteI2C
 14789                           
 14790                           ;myrtc.C: 75: IdleI2C();
 14791  002F58  EC35  F03D         	call	_IdleI2C	;wreg free
 14792                           
 14793                           ;myrtc.C: 76: WriteI2C(year);
 14794  002F5C  506C               	movf	_year,w,c
 14795  002F5E  EC59  F01D         	call	_WriteI2C
 14796                           
 14797                           ;myrtc.C: 77: IdleI2C();
 14798  002F62  EC35  F03D         	call	_IdleI2C	;wreg free
 14799                           
 14800                           ;myrtc.C: 78: WriteI2C(0x10);
 14801  002F66  0E10               	movlw	16
 14802  002F68  EC59  F01D         	call	_WriteI2C
 14803                           
 14804                           ;myrtc.C: 79: IdleI2C();
 14805  002F6C  EC35  F03D         	call	_IdleI2C	;wreg free
 14806                           
 14807                           ;myrtc.C: 80: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 14808  002F70  84C5               	bsf	4037,2,c	;volatile
 14809  002F72                     l233:
 14810  002F72  A4C5               	btfss	4037,2,c	;volatile
 14811  002F74  0012               	return	
 14812  002F76  FFFF               	dw	65535	; assembler added errata NOP
 14813  002F78  D7FC               	goto	l233
 14814  002F7A  FFFF               	dw	65535	; errata NOP
 14815  002F7C                     __end_of_ds1307_set_date_time:
 14816                           	opt stack 0
 14817                           tblptru	equ	0xFF8
 14818                           tblptrh	equ	0xFF7
 14819                           tblptrl	equ	0xFF6
 14820                           tablat	equ	0xFF5
 14821                           prodh	equ	0xFF4
 14822                           prodl	equ	0xFF3
 14823                           intcon	equ	0xFF2
 14824                           intcon2	equ	0xFF1
 14825                           postinc0	equ	0xFEE
 14826                           wreg	equ	0xFE8
 14827                           postinc1	equ	0xFE6
 14828                           postdec1	equ	0xFE5
 14829                           fsr1h	equ	0xFE2
 14830                           fsr1l	equ	0xFE1
 14831                           indf2	equ	0xFDF
 14832                           postinc2	equ	0xFDE
 14833                           postdec2	equ	0xFDD
 14834                           fsr2h	equ	0xFDA
 14835                           fsr2l	equ	0xFD9
 14836                           status	equ	0xFD8
 14837                           
 14838 ;; *************** function _ds1307_init *****************
 14839 ;; Defined at:
 14840 ;;		line 4 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 14841 ;; Parameters:    Size  Location     Type
 14842 ;;		None
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;  seconds         1   22[COMRAM] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;		None               void
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0, cstack
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14854 ;;      Params:         0       0       0       0       0       0       0
 14855 ;;      Locals:         1       0       0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0
 14857 ;;      Totals:         1       0       0       0       0       0       0
 14858 ;;Total ram usage:        1 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    4
 14861 ;; This function calls:
 14862 ;;		_IdleI2C
 14863 ;;		_ReadI2C
 14864 ;;		_WriteI2C
 14865 ;;		_bcd2bin
 14866 ;;		_bin2bcd
 14867 ;; This function is called by:
 14868 ;;		_RTUInit
 14869 ;; This function uses a non-reentrant model
 14870 ;;
 14871                           
 14872                           	psect	text66
 14873  002F7C                     __ptext66:
 14874                           	opt stack 0
 14875  002F7C                     _ds1307_init:
 14876                           	opt stack 25
 14877                           
 14878                           ;incstack = 0
 14879  002F7C  FFFF               	dw	65535
 14880                           
 14881                           ;myrtc.C: 6: unsigned char seconds = 0;
 14882  002F7E  0E00               	movlw	0
 14883  002F80  6E17               	movwf	ds1307_init@seconds,c
 14884                           
 14885                           ;myrtc.C: 8: IdleI2C();
 14886  002F82  EC35  F03D         	call	_IdleI2C	;wreg free
 14887                           
 14888                           ;myrtc.C: 9: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 14889  002F86  80C5               	bsf	4037,0,c	;volatile
 14890  002F88                     l206:
 14891  002F88  B0C5               	btfsc	4037,0,c	;volatile
 14892  002F8A  D7FE               	goto	l206
 14893                           
 14894                           ;myrtc.C: 10: WriteI2C(0xD0);
 14895  002F8C  0ED0               	movlw	208
 14896  002F8E  EC59  F01D         	call	_WriteI2C
 14897                           
 14898                           ;myrtc.C: 11: IdleI2C();
 14899  002F92  EC35  F03D         	call	_IdleI2C	;wreg free
 14900                           
 14901                           ;myrtc.C: 12: WriteI2C(0x00);
 14902  002F96  0E00               	movlw	0
 14903  002F98  EC59  F01D         	call	_WriteI2C
 14904                           
 14905                           ;myrtc.C: 13: IdleI2C();
 14906  002F9C  EC35  F03D         	call	_IdleI2C	;wreg free
 14907                           
 14908                           ;myrtc.C: 14: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 14909  002FA0  82C5               	bsf	4037,1,c	;volatile
 14910  002FA2                     l209:
 14911  002FA2  B2C5               	btfsc	4037,1,c	;volatile
 14912  002FA4  D7FE               	goto	l209
 14913                           
 14914                           ;myrtc.C: 15: WriteI2C(0xD1);
 14915  002FA6  0ED1               	movlw	209
 14916  002FA8  EC59  F01D         	call	_WriteI2C
 14917                           
 14918                           ;myrtc.C: 16: seconds = ReadI2C();
 14919  002FAC  EC19  F03E         	call	_ReadI2C	;wreg free
 14920  002FB0  6E17               	movwf	ds1307_init@seconds,c
 14921                           
 14922                           ;myrtc.C: 17: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 14923  002FB2  8AC5               	bsf	4037,5,c	;volatile
 14924  002FB4  88C5               	bsf	4037,4,c	;volatile
 14925  002FB6                     l212:
 14926  002FB6  B8C5               	btfsc	4037,4,c	;volatile
 14927  002FB8  D7FE               	goto	l212
 14928                           
 14929                           ;myrtc.C: 18: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 14930  002FBA  84C5               	bsf	4037,2,c	;volatile
 14931  002FBC                     l215:
 14932  002FBC  B4C5               	btfsc	4037,2,c	;volatile
 14933  002FBE  D7FE               	goto	l215
 14934                           
 14935                           ;myrtc.C: 20: seconds = bcd2bin(seconds);
 14936  002FC0  5017               	movf	ds1307_init@seconds,w,c
 14937  002FC2  ECA1  F03D         	call	_bcd2bin
 14938  002FC6  6E17               	movwf	ds1307_init@seconds,c
 14939                           
 14940                           ;myrtc.C: 21: seconds &= 0x7F;
 14941  002FC8  9E17               	bcf	ds1307_init@seconds,7,c
 14942                           
 14943                           ;myrtc.C: 22: seconds = bin2bcd(seconds);
 14944  002FCA  5017               	movf	ds1307_init@seconds,w,c
 14945  002FCC  ECB4  F03D         	call	_bin2bcd
 14946  002FD0  6E17               	movwf	ds1307_init@seconds,c
 14947                           
 14948                           ;myrtc.C: 24: _delay(10);
 14949  002FD2  0E02               	movlw	2
 14950  002FD4                     u9187:
 14951  002FD4  F000               	nop	
 14952  002FD6  2EE8               	decfsz	wreg,f,c
 14953  002FD8  D7FD               	goto	u9187
 14954                           
 14955                           ;myrtc.C: 26: IdleI2C();
 14956  002FDA  EC35  F03D         	call	_IdleI2C	;wreg free
 14957                           
 14958                           ;myrtc.C: 27: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 14959  002FDE  80C5               	bsf	4037,0,c	;volatile
 14960  002FE0                     l218:
 14961  002FE0  B0C5               	btfsc	4037,0,c	;volatile
 14962  002FE2  D7FE               	goto	l218
 14963                           
 14964                           ;myrtc.C: 28: WriteI2C(0xD0);
 14965  002FE4  0ED0               	movlw	208
 14966  002FE6  EC59  F01D         	call	_WriteI2C
 14967                           
 14968                           ;myrtc.C: 29: IdleI2C();
 14969  002FEA  EC35  F03D         	call	_IdleI2C	;wreg free
 14970                           
 14971                           ;myrtc.C: 30: WriteI2C(0x00);
 14972  002FEE  0E00               	movlw	0
 14973  002FF0  EC59  F01D         	call	_WriteI2C
 14974                           
 14975                           ;myrtc.C: 31: IdleI2C();
 14976  002FF4  EC35  F03D         	call	_IdleI2C	;wreg free
 14977                           
 14978                           ;myrtc.C: 32: WriteI2C(seconds);
 14979  002FF8  5017               	movf	ds1307_init@seconds,w,c
 14980  002FFA  EC59  F01D         	call	_WriteI2C
 14981                           
 14982                           ;myrtc.C: 33: IdleI2C();
 14983  002FFE  EC35  F03D         	call	_IdleI2C	;wreg free
 14984                           
 14985                           ;myrtc.C: 34: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 14986  003002  82C5               	bsf	4037,1,c	;volatile
 14987  003004                     l221:
 14988  003004  B2C5               	btfsc	4037,1,c	;volatile
 14989  003006  D7FE               	goto	l221
 14990                           
 14991                           ;myrtc.C: 35: WriteI2C(0xD0);
 14992  003008  0ED0               	movlw	208
 14993  00300A  EC59  F01D         	call	_WriteI2C
 14994                           
 14995                           ;myrtc.C: 36: IdleI2C();
 14996  00300E  EC35  F03D         	call	_IdleI2C	;wreg free
 14997                           
 14998                           ;myrtc.C: 37: WriteI2C(0x07);
 14999  003012  0E07               	movlw	7
 15000  003014  EC59  F01D         	call	_WriteI2C
 15001                           
 15002                           ;myrtc.C: 38: IdleI2C();
 15003  003018  EC35  F03D         	call	_IdleI2C	;wreg free
 15004                           
 15005                           ;myrtc.C: 39: WriteI2C(0x10);
 15006  00301C  0E10               	movlw	16
 15007  00301E  EC59  F01D         	call	_WriteI2C
 15008                           
 15009                           ;myrtc.C: 40: IdleI2C();
 15010  003022  EC35  F03D         	call	_IdleI2C	;wreg free
 15011                           
 15012                           ;myrtc.C: 41: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 15013  003026  84C5               	bsf	4037,2,c	;volatile
 15014  003028                     l224:
 15015  003028  A4C5               	btfss	4037,2,c	;volatile
 15016  00302A  0012               	return	
 15017  00302C  FFFF               	dw	65535	; assembler added errata NOP
 15018  00302E  D7FC               	goto	l224
 15019  003030  FFFF               	dw	65535	; errata NOP
 15020  003032                     __end_of_ds1307_init:
 15021                           	opt stack 0
 15022                           tblptru	equ	0xFF8
 15023                           tblptrh	equ	0xFF7
 15024                           tblptrl	equ	0xFF6
 15025                           tablat	equ	0xFF5
 15026                           prodh	equ	0xFF4
 15027                           prodl	equ	0xFF3
 15028                           intcon	equ	0xFF2
 15029                           intcon2	equ	0xFF1
 15030                           postinc0	equ	0xFEE
 15031                           wreg	equ	0xFE8
 15032                           postinc1	equ	0xFE6
 15033                           postdec1	equ	0xFE5
 15034                           fsr1h	equ	0xFE2
 15035                           fsr1l	equ	0xFE1
 15036                           indf2	equ	0xFDF
 15037                           postinc2	equ	0xFDE
 15038                           postdec2	equ	0xFDD
 15039                           fsr2h	equ	0xFDA
 15040                           fsr2l	equ	0xFD9
 15041                           status	equ	0xFD8
 15042                           
 15043 ;; *************** function _bin2bcd *****************
 15044 ;; Defined at:
 15045 ;;		line 135 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;  binary_value    1    wreg     unsigned char 
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;  binary_value    1   19[COMRAM] unsigned char 
 15050 ;;  temp            1   21[COMRAM] unsigned char 
 15051 ;;  retval          1   20[COMRAM] unsigned char 
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  1    wreg      unsigned char 
 15054 ;; Registers used:
 15055 ;;		wreg, status,2, status,0
 15056 ;; Tracked objects:
 15057 ;;		On entry : 0/0
 15058 ;;		On exit  : 0/0
 15059 ;;		Unchanged: 0/0
 15060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15061 ;;      Params:         0       0       0       0       0       0       0
 15062 ;;      Locals:         3       0       0       0       0       0       0
 15063 ;;      Temps:          0       0       0       0       0       0       0
 15064 ;;      Totals:         3       0       0       0       0       0       0
 15065 ;;Total ram usage:        3 bytes
 15066 ;; Hardware stack levels used:    1
 15067 ;; Hardware stack levels required when called:    2
 15068 ;; This function calls:
 15069 ;;		Nothing
 15070 ;; This function is called by:
 15071 ;;		_ds1307_init
 15072 ;;		_ds1307_set_date_time
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text67
 15077  007B68                     __ptext67:
 15078                           	opt stack 0
 15079  007B68                     _bin2bcd:
 15080                           	opt stack 26
 15081                           
 15082                           ;incstack = 0
 15083  007B68  FFFF               	dw	65535
 15084                           
 15085                           ;bin2bcd@binary_value stored from wreg
 15086  007B6A  6E14               	movwf	bin2bcd@binary_value,c
 15087                           
 15088                           ;myrtc.C: 137: unsigned char temp;
 15089                           ;myrtc.C: 138: unsigned char retval;
 15090                           ;myrtc.C: 140: temp = binary_value;
 15091  007B6C  C014  F016         	movff	bin2bcd@binary_value,bin2bcd@temp
 15092                           
 15093                           ;myrtc.C: 141: retval = 0;
 15094  007B70  0E00               	movlw	0
 15095  007B72  6E15               	movwf	bin2bcd@retval,c
 15096  007B74                     l9209:
 15097                           
 15098                           ;myrtc.C: 144: {
 15099                           ;myrtc.C: 147: if(temp >= 10)
 15100  007B74  0E09               	movlw	9
 15101  007B76  6416               	cpfsgt	bin2bcd@temp,c
 15102  007B78  D005               	goto	l9213
 15103                           
 15104                           ;myrtc.C: 148: {
 15105                           ;myrtc.C: 149: temp -= 10;
 15106  007B7A  0E0A               	movlw	10
 15107  007B7C  5E16               	subwf	bin2bcd@temp,f,c
 15108                           
 15109                           ;myrtc.C: 150: retval += 0x10;
 15110  007B7E  0E10               	movlw	16
 15111  007B80  2615               	addwf	bin2bcd@retval,f,c
 15112                           
 15113                           ;myrtc.C: 151: }
 15114  007B82  D7F8               	goto	l9209
 15115  007B84                     l9213:
 15116                           
 15117                           ;myrtc.C: 152: else
 15118                           ;myrtc.C: 153: {
 15119                           ;myrtc.C: 154: retval += temp;
 15120  007B84  5016               	movf	bin2bcd@temp,w,c
 15121  007B86  2615               	addwf	bin2bcd@retval,f,c
 15122                           
 15123                           ;myrtc.C: 156: }
 15124                           ;myrtc.C: 157: }
 15125                           ;myrtc.C: 159: return(retval);
 15126                           
 15127                           ;myrtc.C: 155: break;
 15128  007B88  5015               	movf	bin2bcd@retval,w,c
 15129  007B8A  0012               	return	
 15130  007B8C  FFFF               	dw	65535	; errata NOP
 15131  007B8E                     __end_of_bin2bcd:
 15132                           	opt stack 0
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           intcon2	equ	0xFF1
 15141                           postinc0	equ	0xFEE
 15142                           wreg	equ	0xFE8
 15143                           postinc1	equ	0xFE6
 15144                           postdec1	equ	0xFE5
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           fsr2h	equ	0xFDA
 15151                           fsr2l	equ	0xFD9
 15152                           status	equ	0xFD8
 15153                           
 15154 ;; *************** function _ds1307_get_time *****************
 15155 ;; Defined at:
 15156 ;;		line 111 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;		None
 15159 ;; Auto vars:     Size  Location     Type
 15160 ;;		None
 15161 ;; Return value:  Size  Location     Type
 15162 ;;		None               void
 15163 ;; Registers used:
 15164 ;;		wreg, status,2, status,0, cstack
 15165 ;; Tracked objects:
 15166 ;;		On entry : 0/0
 15167 ;;		On exit  : 0/0
 15168 ;;		Unchanged: 0/0
 15169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15170 ;;      Params:         0       0       0       0       0       0       0
 15171 ;;      Locals:         0       0       0       0       0       0       0
 15172 ;;      Temps:          0       0       0       0       0       0       0
 15173 ;;      Totals:         0       0       0       0       0       0       0
 15174 ;;Total ram usage:        0 bytes
 15175 ;; Hardware stack levels used:    1
 15176 ;; Hardware stack levels required when called:    4
 15177 ;; This function calls:
 15178 ;;		_IdleI2C
 15179 ;;		_ReadI2C
 15180 ;;		_WriteI2C
 15181 ;;		_bcd2bin
 15182 ;; This function is called by:
 15183 ;;		_Creat_Packet
 15184 ;;		_RTUInit
 15185 ;;		_main
 15186 ;;		_rtc_setting
 15187 ;;		_rtc_local_display
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           	psect	text68
 15192  003860                     __ptext68:
 15193                           	opt stack 0
 15194  003860                     _ds1307_get_time:
 15195                           	opt stack 25
 15196                           
 15197                           ;incstack = 0
 15198  003860  FFFF               	dw	65535
 15199                           
 15200                           ;myrtc.C: 113: IdleI2C();
 15201  003862  EC35  F03D         	call	_IdleI2C	;wreg free
 15202                           
 15203                           ;myrtc.C: 114: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 15204  003866  80C5               	bsf	4037,0,c	;volatile
 15205  003868                     l263:
 15206  003868  B0C5               	btfsc	4037,0,c	;volatile
 15207  00386A  D7FE               	goto	l263
 15208                           
 15209                           ;myrtc.C: 115: WriteI2C(0xD0);
 15210  00386C  0ED0               	movlw	208
 15211  00386E  EC59  F01D         	call	_WriteI2C
 15212                           
 15213                           ;myrtc.C: 116: IdleI2C();
 15214  003872  EC35  F03D         	call	_IdleI2C	;wreg free
 15215                           
 15216                           ;myrtc.C: 117: WriteI2C(0x00);
 15217  003876  0E00               	movlw	0
 15218  003878  EC59  F01D         	call	_WriteI2C
 15219                           
 15220                           ;myrtc.C: 118: IdleI2C();
 15221  00387C  EC35  F03D         	call	_IdleI2C	;wreg free
 15222                           
 15223                           ;myrtc.C: 119: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 15224  003880  82C5               	bsf	4037,1,c	;volatile
 15225  003882                     l266:
 15226  003882  B2C5               	btfsc	4037,1,c	;volatile
 15227  003884  D7FE               	goto	l266
 15228                           
 15229                           ;myrtc.C: 120: WriteI2C(0xD1);
 15230  003886  0ED1               	movlw	209
 15231  003888  EC59  F01D         	call	_WriteI2C
 15232                           
 15233                           ;myrtc.C: 121: sec = ReadI2C();
 15234  00388C  EC19  F03E         	call	_ReadI2C	;wreg free
 15235  003890  6E69               	movwf	_sec,c
 15236                           
 15237                           ;myrtc.C: 122: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15238  003892  9AC5               	bcf	4037,5,c	;volatile
 15239  003894  88C5               	bsf	4037,4,c	;volatile
 15240  003896                     l269:
 15241  003896  B8C5               	btfsc	4037,4,c	;volatile
 15242  003898  D7FE               	goto	l269
 15243                           
 15244                           ;myrtc.C: 123: min = ReadI2C();
 15245  00389A  EC19  F03E         	call	_ReadI2C	;wreg free
 15246  00389E  6E67               	movwf	_min,c
 15247                           
 15248                           ;myrtc.C: 124: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15249  0038A0  9AC5               	bcf	4037,5,c	;volatile
 15250  0038A2  88C5               	bsf	4037,4,c	;volatile
 15251  0038A4                     l272:
 15252  0038A4  B8C5               	btfsc	4037,4,c	;volatile
 15253  0038A6  D7FE               	goto	l272
 15254                           
 15255                           ;myrtc.C: 125: hr = ReadI2C();
 15256  0038A8  EC19  F03E         	call	_ReadI2C	;wreg free
 15257  0038AC  6E66               	movwf	_hr,c
 15258                           
 15259                           ;myrtc.C: 126: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15260  0038AE  8AC5               	bsf	4037,5,c	;volatile
 15261  0038B0  88C5               	bsf	4037,4,c	;volatile
 15262  0038B2                     l275:
 15263  0038B2  B8C5               	btfsc	4037,4,c	;volatile
 15264  0038B4  D7FE               	goto	l275
 15265                           
 15266                           ;myrtc.C: 127: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 15267  0038B6  84C5               	bsf	4037,2,c	;volatile
 15268  0038B8                     l278:
 15269  0038B8  B4C5               	btfsc	4037,2,c	;volatile
 15270  0038BA  D7FE               	goto	l278
 15271                           
 15272                           ;myrtc.C: 130: sec = bcd2bin(sec & 0x7f);
 15273  0038BC  5069               	movf	_sec,w,c
 15274  0038BE  0B7F               	andlw	127
 15275  0038C0  ECA1  F03D         	call	_bcd2bin
 15276  0038C4  6E69               	movwf	_sec,c
 15277                           
 15278                           ;myrtc.C: 131: min = bcd2bin(min & 0x7f);
 15279  0038C6  5067               	movf	_min,w,c
 15280  0038C8  0B7F               	andlw	127
 15281  0038CA  ECA1  F03D         	call	_bcd2bin
 15282  0038CE  6E67               	movwf	_min,c
 15283                           
 15284                           ;myrtc.C: 132: hr = bcd2bin(hr & 0x3f);
 15285  0038D0  5066               	movf	_hr,w,c
 15286  0038D2  0B3F               	andlw	63
 15287  0038D4  ECA1  F03D         	call	_bcd2bin
 15288  0038D8  6E66               	movwf	_hr,c
 15289  0038DA  0012               	return	
 15290  0038DC  FFFF               	dw	65535	; errata NOP
 15291  0038DE                     __end_of_ds1307_get_time:
 15292                           	opt stack 0
 15293                           tblptru	equ	0xFF8
 15294                           tblptrh	equ	0xFF7
 15295                           tblptrl	equ	0xFF6
 15296                           tablat	equ	0xFF5
 15297                           prodh	equ	0xFF4
 15298                           prodl	equ	0xFF3
 15299                           intcon	equ	0xFF2
 15300                           intcon2	equ	0xFF1
 15301                           postinc0	equ	0xFEE
 15302                           wreg	equ	0xFE8
 15303                           postinc1	equ	0xFE6
 15304                           postdec1	equ	0xFE5
 15305                           fsr1h	equ	0xFE2
 15306                           fsr1l	equ	0xFE1
 15307                           indf2	equ	0xFDF
 15308                           postinc2	equ	0xFDE
 15309                           postdec2	equ	0xFDD
 15310                           fsr2h	equ	0xFDA
 15311                           fsr2l	equ	0xFD9
 15312                           status	equ	0xFD8
 15313                           
 15314 ;; *************** function _ds1307_get_date *****************
 15315 ;; Defined at:
 15316 ;;		line 83 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 15317 ;; Parameters:    Size  Location     Type
 15318 ;;		None
 15319 ;; Auto vars:     Size  Location     Type
 15320 ;;		None
 15321 ;; Return value:  Size  Location     Type
 15322 ;;		None               void
 15323 ;; Registers used:
 15324 ;;		wreg, status,2, status,0, cstack
 15325 ;; Tracked objects:
 15326 ;;		On entry : 0/0
 15327 ;;		On exit  : 0/0
 15328 ;;		Unchanged: 0/0
 15329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15330 ;;      Params:         0       0       0       0       0       0       0
 15331 ;;      Locals:         0       0       0       0       0       0       0
 15332 ;;      Temps:          0       0       0       0       0       0       0
 15333 ;;      Totals:         0       0       0       0       0       0       0
 15334 ;;Total ram usage:        0 bytes
 15335 ;; Hardware stack levels used:    1
 15336 ;; Hardware stack levels required when called:    4
 15337 ;; This function calls:
 15338 ;;		_IdleI2C
 15339 ;;		_ReadI2C
 15340 ;;		_WriteI2C
 15341 ;;		_bcd2bin
 15342 ;; This function is called by:
 15343 ;;		_RTUInit
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           	psect	text69
 15348  0032CE                     __ptext69:
 15349                           	opt stack 0
 15350  0032CE                     _ds1307_get_date:
 15351                           	opt stack 25
 15352                           
 15353                           ;incstack = 0
 15354  0032CE  FFFF               	dw	65535
 15355                           
 15356                           ;myrtc.C: 85: IdleI2C();
 15357  0032D0  EC35  F03D         	call	_IdleI2C	;wreg free
 15358                           
 15359                           ;myrtc.C: 86: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
 15360  0032D4  80C5               	bsf	4037,0,c	;volatile
 15361  0032D6                     l239:
 15362  0032D6  B0C5               	btfsc	4037,0,c	;volatile
 15363  0032D8  D7FE               	goto	l239
 15364                           
 15365                           ;myrtc.C: 87: WriteI2C(0xD0);
 15366  0032DA  0ED0               	movlw	208
 15367  0032DC  EC59  F01D         	call	_WriteI2C
 15368                           
 15369                           ;myrtc.C: 88: IdleI2C();
 15370  0032E0  EC35  F03D         	call	_IdleI2C	;wreg free
 15371                           
 15372                           ;myrtc.C: 89: WriteI2C(0x03);
 15373  0032E4  0E03               	movlw	3
 15374  0032E6  EC59  F01D         	call	_WriteI2C
 15375                           
 15376                           ;myrtc.C: 90: IdleI2C();
 15377  0032EA  EC35  F03D         	call	_IdleI2C	;wreg free
 15378                           
 15379                           ;myrtc.C: 92: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
 15380  0032EE  82C5               	bsf	4037,1,c	;volatile
 15381  0032F0                     l242:
 15382  0032F0  B2C5               	btfsc	4037,1,c	;volatile
 15383  0032F2  D7FE               	goto	l242
 15384                           
 15385                           ;myrtc.C: 93: WriteI2C(0xD1);
 15386  0032F4  0ED1               	movlw	209
 15387  0032F6  EC59  F01D         	call	_WriteI2C
 15388                           
 15389                           ;myrtc.C: 94: IdleI2C();
 15390  0032FA  EC35  F03D         	call	_IdleI2C	;wreg free
 15391                           
 15392                           ;myrtc.C: 95: dow = ReadI2C();
 15393  0032FE  EC19  F03E         	call	_ReadI2C	;wreg free
 15394  003302  6E65               	movwf	_dow,c
 15395                           
 15396                           ;myrtc.C: 96: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15397  003304  9AC5               	bcf	4037,5,c	;volatile
 15398  003306  88C5               	bsf	4037,4,c	;volatile
 15399  003308                     l245:
 15400  003308  B8C5               	btfsc	4037,4,c	;volatile
 15401  00330A  D7FE               	goto	l245
 15402                           
 15403                           ;myrtc.C: 97: day = ReadI2C();
 15404  00330C  EC19  F03E         	call	_ReadI2C	;wreg free
 15405  003310  6E63               	movwf	_day,c
 15406                           
 15407                           ;myrtc.C: 98: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15408  003312  9AC5               	bcf	4037,5,c	;volatile
 15409  003314  88C5               	bsf	4037,4,c	;volatile
 15410  003316                     l248:
 15411  003316  B8C5               	btfsc	4037,4,c	;volatile
 15412  003318  D7FE               	goto	l248
 15413                           
 15414                           ;myrtc.C: 99: month = ReadI2C();
 15415  00331A  EC19  F03E         	call	_ReadI2C	;wreg free
 15416  00331E  6E68               	movwf	_month,c
 15417                           
 15418                           ;myrtc.C: 100: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15419  003320  9AC5               	bcf	4037,5,c	;volatile
 15420  003322  88C5               	bsf	4037,4,c	;volatile
 15421  003324                     l251:
 15422  003324  B8C5               	btfsc	4037,4,c	;volatile
 15423  003326  D7FE               	goto	l251
 15424                           
 15425                           ;myrtc.C: 101: year = ReadI2C();
 15426  003328  EC19  F03E         	call	_ReadI2C	;wreg free
 15427  00332C  6E6C               	movwf	_year,c
 15428                           
 15429                           ;myrtc.C: 102: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
 15430  00332E  8AC5               	bsf	4037,5,c	;volatile
 15431  003330  88C5               	bsf	4037,4,c	;volatile
 15432  003332                     l254:
 15433  003332  B8C5               	btfsc	4037,4,c	;volatile
 15434  003334  D7FE               	goto	l254
 15435                           
 15436                           ;myrtc.C: 103: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
 15437  003336  84C5               	bsf	4037,2,c	;volatile
 15438  003338                     l257:
 15439  003338  B4C5               	btfsc	4037,2,c	;volatile
 15440  00333A  D7FE               	goto	l257
 15441                           
 15442                           ;myrtc.C: 105: dow = bcd2bin(dow & 0x7f);
 15443  00333C  5065               	movf	_dow,w,c
 15444  00333E  0B7F               	andlw	127
 15445  003340  ECA1  F03D         	call	_bcd2bin
 15446  003344  6E65               	movwf	_dow,c
 15447                           
 15448                           ;myrtc.C: 106: day = bcd2bin(day & 0x3f);
 15449  003346  5063               	movf	_day,w,c
 15450  003348  0B3F               	andlw	63
 15451  00334A  ECA1  F03D         	call	_bcd2bin
 15452  00334E  6E63               	movwf	_day,c
 15453                           
 15454                           ;myrtc.C: 107: month = bcd2bin(month & 0x1f);
 15455  003350  5068               	movf	_month,w,c
 15456  003352  0B1F               	andlw	31
 15457  003354  ECA1  F03D         	call	_bcd2bin
 15458  003358  6E68               	movwf	_month,c
 15459                           
 15460                           ;myrtc.C: 108: year = bcd2bin(year);
 15461  00335A  506C               	movf	_year,w,c
 15462  00335C  ECA1  F03D         	call	_bcd2bin
 15463  003360  6E6C               	movwf	_year,c
 15464  003362  0012               	return	
 15465  003364  FFFF               	dw	65535	; errata NOP
 15466  003366                     __end_of_ds1307_get_date:
 15467                           	opt stack 0
 15468                           tblptru	equ	0xFF8
 15469                           tblptrh	equ	0xFF7
 15470                           tblptrl	equ	0xFF6
 15471                           tablat	equ	0xFF5
 15472                           prodh	equ	0xFF4
 15473                           prodl	equ	0xFF3
 15474                           intcon	equ	0xFF2
 15475                           intcon2	equ	0xFF1
 15476                           postinc0	equ	0xFEE
 15477                           wreg	equ	0xFE8
 15478                           postinc1	equ	0xFE6
 15479                           postdec1	equ	0xFE5
 15480                           fsr1h	equ	0xFE2
 15481                           fsr1l	equ	0xFE1
 15482                           indf2	equ	0xFDF
 15483                           postinc2	equ	0xFDE
 15484                           postdec2	equ	0xFDD
 15485                           fsr2h	equ	0xFDA
 15486                           fsr2l	equ	0xFD9
 15487                           status	equ	0xFD8
 15488                           
 15489 ;; *************** function _bcd2bin *****************
 15490 ;; Defined at:
 15491 ;;		line 164 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\myrtc.C"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;  bcd_value       1    wreg     unsigned char 
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;  bcd_value       1   20[COMRAM] unsigned char 
 15496 ;;  temp            1   21[COMRAM] unsigned char 
 15497 ;; Return value:  Size  Location     Type
 15498 ;;                  1    wreg      unsigned char 
 15499 ;; Registers used:
 15500 ;;		wreg, status,2, status,0
 15501 ;; Tracked objects:
 15502 ;;		On entry : 0/0
 15503 ;;		On exit  : 0/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15506 ;;      Params:         0       0       0       0       0       0       0
 15507 ;;      Locals:         2       0       0       0       0       0       0
 15508 ;;      Temps:          1       0       0       0       0       0       0
 15509 ;;      Totals:         3       0       0       0       0       0       0
 15510 ;;Total ram usage:        3 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    2
 15513 ;; This function calls:
 15514 ;;		Nothing
 15515 ;; This function is called by:
 15516 ;;		_ds1307_init
 15517 ;;		_ds1307_get_date
 15518 ;;		_ds1307_get_time
 15519 ;; This function uses a non-reentrant model
 15520 ;;
 15521                           
 15522                           	psect	text70
 15523  007B42                     __ptext70:
 15524                           	opt stack 0
 15525  007B42                     _bcd2bin:
 15526                           	opt stack 26
 15527                           
 15528                           ;incstack = 0
 15529  007B42  FFFF               	dw	65535
 15530                           
 15531                           ;bcd2bin@bcd_value stored from wreg
 15532  007B44  6E15               	movwf	bcd2bin@bcd_value,c
 15533                           
 15534                           ;myrtc.C: 166: unsigned char temp;
 15535                           ;myrtc.C: 168: temp = bcd_value;
 15536  007B46  C015  F016         	movff	bcd2bin@bcd_value,bcd2bin@temp
 15537                           
 15538                           ;myrtc.C: 170: temp >>= 1;
 15539  007B4A  90D8               	bcf	status,0,c
 15540  007B4C  3216               	rrcf	bcd2bin@temp,f,c
 15541                           
 15542                           ;myrtc.C: 172: temp &= 0x78;
 15543  007B4E  0E78               	movlw	120
 15544  007B50  1616               	andwf	bcd2bin@temp,f,c
 15545                           
 15546                           ;myrtc.C: 176: return(temp + (temp >> 2) + (bcd_value & 0x0f));
 15547  007B52  C015  F014         	movff	bcd2bin@bcd_value,??_bcd2bin
 15548  007B56  0E0F               	movlw	15
 15549  007B58  1614               	andwf	??_bcd2bin,f,c
 15550  007B5A  4016               	rrncf	bcd2bin@temp,w,c
 15551  007B5C  42E8               	rrncf	wreg,f,c
 15552  007B5E  0B3F               	andlw	63
 15553  007B60  2414               	addwf	??_bcd2bin,w,c
 15554  007B62  2416               	addwf	bcd2bin@temp,w,c
 15555  007B64  0012               	return	
 15556  007B66  FFFF               	dw	65535	; errata NOP
 15557  007B68                     __end_of_bcd2bin:
 15558                           	opt stack 0
 15559                           tblptru	equ	0xFF8
 15560                           tblptrh	equ	0xFF7
 15561                           tblptrl	equ	0xFF6
 15562                           tablat	equ	0xFF5
 15563                           prodh	equ	0xFF4
 15564                           prodl	equ	0xFF3
 15565                           intcon	equ	0xFF2
 15566                           intcon2	equ	0xFF1
 15567                           postinc0	equ	0xFEE
 15568                           wreg	equ	0xFE8
 15569                           postinc1	equ	0xFE6
 15570                           postdec1	equ	0xFE5
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           indf2	equ	0xFDF
 15574                           postinc2	equ	0xFDE
 15575                           postdec2	equ	0xFDD
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function _WriteI2C *****************
 15581 ;; Defined at:
 15582 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_writ.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  data_out        1    wreg     unsigned char 
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;  data_out        1   21[COMRAM] unsigned char 
 15587 ;; Return value:  Size  Location     Type
 15588 ;;                  1    wreg      char 
 15589 ;; Registers used:
 15590 ;;		wreg, status,2, status,0, cstack
 15591 ;; Tracked objects:
 15592 ;;		On entry : 0/0
 15593 ;;		On exit  : 0/0
 15594 ;;		Unchanged: 0/0
 15595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15596 ;;      Params:         0       0       0       0       0       0       0
 15597 ;;      Locals:         1       0       0       0       0       0       0
 15598 ;;      Temps:          1       0       0       0       0       0       0
 15599 ;;      Totals:         2       0       0       0       0       0       0
 15600 ;;Total ram usage:        2 bytes
 15601 ;; Hardware stack levels used:    1
 15602 ;; Hardware stack levels required when called:    3
 15603 ;; This function calls:
 15604 ;;		_IdleI2C
 15605 ;; This function is called by:
 15606 ;;		_rom_byte_write
 15607 ;;		_rom_byte_read
 15608 ;;		_clear_rom
 15609 ;;		_ds1307_init
 15610 ;;		_ds1307_set_date_time
 15611 ;;		_ds1307_get_date
 15612 ;;		_ds1307_get_time
 15613 ;;		_rom_page_write
 15614 ;;		_rom_page_read
 15615 ;; This function uses a non-reentrant model
 15616 ;;
 15617                           
 15618                           	psect	text71
 15619  003AB2                     __ptext71:
 15620                           	opt stack 0
 15621  003AB2                     _WriteI2C:
 15622                           	opt stack 25
 15623                           
 15624                           ;incstack = 0
 15625  003AB2  FFFF               	dw	65535
 15626                           
 15627                           ;WriteI2C@data_out stored from wreg
 15628  003AB4  6E16               	movwf	WriteI2C@data_out,c
 15629  003AB6  C016  FFC9         	movff	WriteI2C@data_out,4041	;volatile
 15630  003ABA  BEC6               	btfsc	4038,7,c	;volatile
 15631  003ABC  D02C               	goto	l1273
 15632                           
 15633                           ;	Return value of _WriteI2C is never used
 15634  003ABE  CFC6 F015          	movff	4038,??_WriteI2C	;volatile
 15635  003AC2  0E0F               	movlw	15
 15636  003AC4  1615               	andwf	??_WriteI2C,f,c
 15637  003AC6  5015               	movf	??_WriteI2C,w,c
 15638  003AC8  0A08               	xorlw	8
 15639  003ACA  B4D8               	btfsc	status,2,c
 15640  003ACC  D00F               	goto	l8739
 15641  003ACE  CFC6 F015          	movff	4038,??_WriteI2C	;volatile
 15642  003AD2  0E0F               	movlw	15
 15643  003AD4  1615               	andwf	??_WriteI2C,f,c
 15644  003AD6  5015               	movf	??_WriteI2C,w,c
 15645  003AD8  0A0B               	xorlw	11
 15646  003ADA  B4D8               	btfsc	status,2,c
 15647  003ADC  D007               	goto	l8739
 15648  003ADE  88C6               	bsf	4038,4,c	;volatile
 15649  003AE0                     l1276:
 15650  003AE0  A69E               	btfss	3998,3,c	;volatile
 15651  003AE2  D7FE               	goto	l1276
 15652  003AE4  B4C7               	btfsc	4039,2,c	;volatile
 15653  003AE6  D017               	goto	l1273
 15654  003AE8  50C7               	movf	4039,w,c	;volatile
 15655  003AEA  D015               	goto	l1273
 15656  003AEC                     l8739:
 15657  003AEC  CFC6 F015          	movff	4038,??_WriteI2C	;volatile
 15658  003AF0  0E0F               	movlw	15
 15659  003AF2  1615               	andwf	??_WriteI2C,f,c
 15660  003AF4  5015               	movf	??_WriteI2C,w,c
 15661  003AF6  0A08               	xorlw	8
 15662  003AF8  B4D8               	btfsc	status,2,c
 15663  003AFA  D008               	goto	l1285
 15664  003AFC  CFC6 F015          	movff	4038,??_WriteI2C	;volatile
 15665  003B00  0E0F               	movlw	15
 15666  003B02  1615               	andwf	??_WriteI2C,f,c
 15667  003B04  5015               	movf	??_WriteI2C,w,c
 15668  003B06  0A0B               	xorlw	11
 15669  003B08  A4D8               	btfss	status,2,c
 15670  003B0A  D005               	goto	l1273
 15671  003B0C                     l1285:
 15672  003B0C  B0C7               	btfsc	4039,0,c	;volatile
 15673  003B0E  D7FE               	goto	l1285
 15674  003B10  EC35  F03D         	call	_IdleI2C	;wreg free
 15675  003B14  50C5               	movf	4037,w,c	;volatile
 15676  003B16                     l1273:
 15677  003B16  0012               	return	
 15678  003B18  FFFF               	dw	65535	; errata NOP
 15679  003B1A                     __end_of_WriteI2C:
 15680                           	opt stack 0
 15681                           tblptru	equ	0xFF8
 15682                           tblptrh	equ	0xFF7
 15683                           tblptrl	equ	0xFF6
 15684                           tablat	equ	0xFF5
 15685                           prodh	equ	0xFF4
 15686                           prodl	equ	0xFF3
 15687                           intcon	equ	0xFF2
 15688                           intcon2	equ	0xFF1
 15689                           postinc0	equ	0xFEE
 15690                           wreg	equ	0xFE8
 15691                           postinc1	equ	0xFE6
 15692                           postdec1	equ	0xFE5
 15693                           fsr1h	equ	0xFE2
 15694                           fsr1l	equ	0xFE1
 15695                           indf2	equ	0xFDF
 15696                           postinc2	equ	0xFDE
 15697                           postdec2	equ	0xFDD
 15698                           fsr2h	equ	0xFDA
 15699                           fsr2l	equ	0xFD9
 15700                           status	equ	0xFD8
 15701                           
 15702 ;; *************** function _IdleI2C *****************
 15703 ;; Defined at:
 15704 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_idle.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;		None
 15707 ;; Auto vars:     Size  Location     Type
 15708 ;;		None
 15709 ;; Return value:  Size  Location     Type
 15710 ;;		None               void
 15711 ;; Registers used:
 15712 ;;		wreg, status,2, status,0
 15713 ;; Tracked objects:
 15714 ;;		On entry : 0/0
 15715 ;;		On exit  : 0/0
 15716 ;;		Unchanged: 0/0
 15717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15718 ;;      Params:         0       0       0       0       0       0       0
 15719 ;;      Locals:         0       0       0       0       0       0       0
 15720 ;;      Temps:          1       0       0       0       0       0       0
 15721 ;;      Totals:         1       0       0       0       0       0       0
 15722 ;;Total ram usage:        1 bytes
 15723 ;; Hardware stack levels used:    1
 15724 ;; Hardware stack levels required when called:    2
 15725 ;; This function calls:
 15726 ;;		Nothing
 15727 ;; This function is called by:
 15728 ;;		_rom_byte_write
 15729 ;;		_rom_byte_read
 15730 ;;		_clear_rom
 15731 ;;		_ds1307_init
 15732 ;;		_ds1307_set_date_time
 15733 ;;		_ds1307_get_date
 15734 ;;		_ds1307_get_time
 15735 ;;		_WriteI2C
 15736 ;;		_rom_page_write
 15737 ;;		_rom_page_read
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	text72
 15742  007A6A                     __ptext72:
 15743                           	opt stack 0
 15744  007A6A                     _IdleI2C:
 15745                           	opt stack 25
 15746                           
 15747                           ;incstack = 0
 15748  007A6A  FFFF               	dw	65535
 15749  007A6C                     l8549:
 15750  007A6C  CFC5 F014          	movff	4037,??_IdleI2C	;volatile
 15751  007A70  0E1F               	movlw	31
 15752  007A72  1614               	andwf	??_IdleI2C,f,c
 15753  007A74  B4D8               	btfsc	status,2,c
 15754  007A76  B4C7               	btfsc	4039,2,c	;volatile
 15755  007A78  D7F9               	goto	l8549
 15756  007A7A  0012               	return	
 15757  007A7C  FFFF               	dw	65535	; errata NOP
 15758  007A7E                     __end_of_IdleI2C:
 15759                           	opt stack 0
 15760                           tblptru	equ	0xFF8
 15761                           tblptrh	equ	0xFF7
 15762                           tblptrl	equ	0xFF6
 15763                           tablat	equ	0xFF5
 15764                           prodh	equ	0xFF4
 15765                           prodl	equ	0xFF3
 15766                           intcon	equ	0xFF2
 15767                           intcon2	equ	0xFF1
 15768                           postinc0	equ	0xFEE
 15769                           wreg	equ	0xFE8
 15770                           postinc1	equ	0xFE6
 15771                           postdec1	equ	0xFE5
 15772                           fsr1h	equ	0xFE2
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           fsr2h	equ	0xFDA
 15778                           fsr2l	equ	0xFD9
 15779                           status	equ	0xFD8
 15780                           
 15781 ;; *************** function _ReadI2C *****************
 15782 ;; Defined at:
 15783 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_read.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;		None
 15786 ;; Auto vars:     Size  Location     Type
 15787 ;;		None
 15788 ;; Return value:  Size  Location     Type
 15789 ;;                  1    wreg      unsigned char 
 15790 ;; Registers used:
 15791 ;;		wreg, status,2, status,0
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15797 ;;      Params:         0       0       0       0       0       0       0
 15798 ;;      Locals:         0       0       0       0       0       0       0
 15799 ;;      Temps:          1       0       0       0       0       0       0
 15800 ;;      Totals:         1       0       0       0       0       0       0
 15801 ;;Total ram usage:        1 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    2
 15804 ;; This function calls:
 15805 ;;		Nothing
 15806 ;; This function is called by:
 15807 ;;		_rom_byte_read
 15808 ;;		_ds1307_init
 15809 ;;		_ds1307_get_date
 15810 ;;		_ds1307_get_time
 15811 ;;		_rom_page_read
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           	psect	text73
 15816  007C32                     __ptext73:
 15817                           	opt stack 0
 15818  007C32                     _ReadI2C:
 15819                           	opt stack 26
 15820                           
 15821                           ;incstack = 0
 15822  007C32  FFFF               	dw	65535
 15823  007C34  CFC6 F014          	movff	4038,??_ReadI2C	;volatile
 15824  007C38  0E0F               	movlw	15
 15825  007C3A  1614               	andwf	??_ReadI2C,f,c
 15826  007C3C  5014               	movf	??_ReadI2C,w,c
 15827  007C3E  0A08               	xorlw	8
 15828  007C40  B4D8               	btfsc	status,2,c
 15829  007C42  D007               	goto	l1251
 15830  007C44  CFC6 F014          	movff	4038,??_ReadI2C	;volatile
 15831  007C48  0E0F               	movlw	15
 15832  007C4A  1614               	andwf	??_ReadI2C,f,c
 15833  007C4C  5014               	movf	??_ReadI2C,w,c
 15834  007C4E  0A0B               	xorlw	11
 15835  007C50  B4D8               	btfsc	status,2,c
 15836  007C52                     l1251:
 15837  007C52  86C5               	bsf	4037,3,c	;volatile
 15838  007C54                     l1252:
 15839  007C54  A0C7               	btfss	4039,0,c	;volatile
 15840  007C56  D7FE               	goto	l1252
 15841  007C58  50C9               	movf	4041,w,c	;volatile
 15842  007C5A  0012               	return	
 15843  007C5C  FFFF               	dw	65535	; errata NOP
 15844  007C5E                     __end_of_ReadI2C:
 15845                           	opt stack 0
 15846                           tblptru	equ	0xFF8
 15847                           tblptrh	equ	0xFF7
 15848                           tblptrl	equ	0xFF6
 15849                           tablat	equ	0xFF5
 15850                           prodh	equ	0xFF4
 15851                           prodl	equ	0xFF3
 15852                           intcon	equ	0xFF2
 15853                           intcon2	equ	0xFF1
 15854                           postinc0	equ	0xFEE
 15855                           wreg	equ	0xFE8
 15856                           postinc1	equ	0xFE6
 15857                           postdec1	equ	0xFE5
 15858                           fsr1h	equ	0xFE2
 15859                           fsr1l	equ	0xFE1
 15860                           indf2	equ	0xFDF
 15861                           postinc2	equ	0xFDE
 15862                           postdec2	equ	0xFDD
 15863                           fsr2h	equ	0xFDA
 15864                           fsr2l	equ	0xFD9
 15865                           status	equ	0xFD8
 15866                           
 15867 ;; *************** function ___lbtoft *****************
 15868 ;; Defined at:
 15869 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbtoft.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;  c               1    wreg     unsigned char 
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  c               1   30[COMRAM] unsigned char 
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  3   27[COMRAM] float 
 15876 ;; Registers used:
 15877 ;;		wreg, status,2, status,0, cstack
 15878 ;; Tracked objects:
 15879 ;;		On entry : 0/0
 15880 ;;		On exit  : 0/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15883 ;;      Params:         3       0       0       0       0       0       0
 15884 ;;      Locals:         1       0       0       0       0       0       0
 15885 ;;      Temps:          0       0       0       0       0       0       0
 15886 ;;      Totals:         4       0       0       0       0       0       0
 15887 ;;Total ram usage:        4 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    3
 15890 ;; This function calls:
 15891 ;;		___ftpack
 15892 ;; This function is called by:
 15893 ;;		_RTUInit
 15894 ;; This function uses a non-reentrant model
 15895 ;;
 15896                           
 15897                           	psect	text74
 15898  007B8E                     __ptext74:
 15899                           	opt stack 0
 15900  007B8E                     ___lbtoft:
 15901                           	opt stack 26
 15902                           
 15903                           ;incstack = 0
 15904  007B8E  FFFF               	dw	65535
 15905                           
 15906                           ;___lbtoft@c stored from wreg
 15907  007B90  6E1F               	movwf	___lbtoft@c,c
 15908  007B92  501F               	movf	___lbtoft@c,w,c
 15909  007B94  6E14               	movwf	___ftpack@arg,c
 15910  007B96  6A15               	clrf	___ftpack@arg+1,c
 15911  007B98  6A16               	clrf	___ftpack@arg+2,c
 15912  007B9A  0E8E               	movlw	142
 15913  007B9C  6E17               	movwf	___ftpack@exp,c
 15914  007B9E  0E00               	movlw	0
 15915  007BA0  6E18               	movwf	___ftpack@sign,c
 15916  007BA2  EC19  F018         	call	___ftpack	;wreg free
 15917  007BA6  C014  F01C         	movff	?___ftpack,?___lbtoft
 15918  007BAA  C015  F01D         	movff	?___ftpack+1,?___lbtoft+1
 15919  007BAE  C016  F01E         	movff	?___ftpack+2,?___lbtoft+2
 15920  007BB2  0012               	return	
 15921  007BB4  FFFF               	dw	65535	; errata NOP
 15922  007BB6                     __end_of___lbtoft:
 15923                           	opt stack 0
 15924                           tblptru	equ	0xFF8
 15925                           tblptrh	equ	0xFF7
 15926                           tblptrl	equ	0xFF6
 15927                           tablat	equ	0xFF5
 15928                           prodh	equ	0xFF4
 15929                           prodl	equ	0xFF3
 15930                           intcon	equ	0xFF2
 15931                           intcon2	equ	0xFF1
 15932                           postinc0	equ	0xFEE
 15933                           wreg	equ	0xFE8
 15934                           postinc1	equ	0xFE6
 15935                           postdec1	equ	0xFE5
 15936                           fsr1h	equ	0xFE2
 15937                           fsr1l	equ	0xFE1
 15938                           indf2	equ	0xFDF
 15939                           postinc2	equ	0xFDE
 15940                           postdec2	equ	0xFDD
 15941                           fsr2h	equ	0xFDA
 15942                           fsr2l	equ	0xFD9
 15943                           status	equ	0xFD8
 15944                           
 15945 ;; *************** function ___ftmul *****************
 15946 ;; Defined at:
 15947 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
 15948 ;; Parameters:    Size  Location     Type
 15949 ;;  f1              3   31[COMRAM] float 
 15950 ;;  f2              3   34[COMRAM] float 
 15951 ;; Auto vars:     Size  Location     Type
 15952 ;;  f3_as_produc    3   41[COMRAM] unsigned um
 15953 ;;  sign            1   45[COMRAM] unsigned char 
 15954 ;;  cntr            1   44[COMRAM] unsigned char 
 15955 ;;  exp             1   40[COMRAM] unsigned char 
 15956 ;; Return value:  Size  Location     Type
 15957 ;;                  3   31[COMRAM] float 
 15958 ;; Registers used:
 15959 ;;		wreg, status,2, status,0, cstack
 15960 ;; Tracked objects:
 15961 ;;		On entry : 0/0
 15962 ;;		On exit  : 0/0
 15963 ;;		Unchanged: 0/0
 15964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15965 ;;      Params:         6       0       0       0       0       0       0
 15966 ;;      Locals:         6       0       0       0       0       0       0
 15967 ;;      Temps:          3       0       0       0       0       0       0
 15968 ;;      Totals:        15       0       0       0       0       0       0
 15969 ;;Total ram usage:       15 bytes
 15970 ;; Hardware stack levels used:    1
 15971 ;; Hardware stack levels required when called:    3
 15972 ;; This function calls:
 15973 ;;		___ftpack
 15974 ;; This function is called by:
 15975 ;;		_get_current_readings
 15976 ;;		_float_to_int
 15977 ;;		_voltage_to_temp
 15978 ;;		_voltage_to_hum
 15979 ;;		_RTUInit
 15980 ;;		_pow
 15981 ;;		_exp
 15982 ;;		_log
 15983 ;;		_eval_poly
 15984 ;; This function uses a non-reentrant model
 15985 ;;
 15986                           
 15987                           	psect	text75
 15988  0028D2                     __ptext75:
 15989                           	opt stack 0
 15990  0028D2                     ___ftmul:
 15991                           	opt stack 21
 15992                           
 15993                           ;incstack = 0
 15994  0028D2  FFFF               	dw	65535
 15995  0028D4  C022  F026         	movff	___ftmul@f1+2,??___ftmul
 15996  0028D8  6A27               	clrf	(??___ftmul+1)& (0+255),c
 15997  0028DA  6A28               	clrf	(??___ftmul+2)& (0+255),c
 15998  0028DC  3421               	rlcf	___ftmul@f1+1,w,c
 15999  0028DE  3626               	rlcf	??___ftmul& (0+255),f,c
 16000  0028E0  E301               	bnc	u6131
 16001  0028E2  8027               	bsf	(??___ftmul+1)& (0+255),0,c
 16002  0028E4                     u6131:
 16003  0028E4  5026               	movf	??___ftmul,w,c
 16004  0028E6  6E29               	movwf	___ftmul@exp,c
 16005  0028E8  6629               	tstfsz	___ftmul@exp& (0+255),c
 16006  0028EA  D001               	goto	l8393
 16007  0028EC  D00C               	goto	u6160
 16008  0028EE                     l8393:
 16009  0028EE  C025  F026         	movff	___ftmul@f2+2,??___ftmul
 16010  0028F2  6A27               	clrf	(??___ftmul+1)& (0+255),c
 16011  0028F4  6A28               	clrf	(??___ftmul+2)& (0+255),c
 16012  0028F6  3424               	rlcf	___ftmul@f2+1,w,c
 16013  0028F8  3626               	rlcf	??___ftmul& (0+255),f,c
 16014  0028FA  E301               	bnc	u6151
 16015  0028FC  8027               	bsf	(??___ftmul+1)& (0+255),0,c
 16016  0028FE                     u6151:
 16017  0028FE  5026               	movf	??___ftmul,w,c
 16018  002900  6E2E               	movwf	___ftmul@sign,c
 16019  002902  662E               	tstfsz	___ftmul@sign& (0+255),c
 16020  002904  D007               	goto	l8399
 16021  002906                     u6160:
 16022  002906  0E00               	movlw	0
 16023  002908  6E20               	movwf	?___ftmul,c
 16024  00290A  0E00               	movlw	0
 16025  00290C  6E21               	movwf	?___ftmul+1,c
 16026  00290E  0E00               	movlw	0
 16027  002910  6E22               	movwf	?___ftmul+2,c
 16028  002912  D051               	goto	l1682
 16029  002914                     l8399:
 16030  002914  502E               	movf	___ftmul@sign,w,c
 16031  002916  0F7B               	addlw	123
 16032  002918  2629               	addwf	___ftmul@exp,f,c
 16033  00291A  C022  F02E         	movff	___ftmul@f1+2,___ftmul@sign
 16034  00291E  5025               	movf	___ftmul@f2+2,w,c
 16035  002920  1A2E               	xorwf	___ftmul@sign,f,c
 16036  002922  0E80               	movlw	128
 16037  002924  162E               	andwf	___ftmul@sign,f,c
 16038  002926  8E21               	bsf	___ftmul@f1+1,7,c
 16039  002928  8E24               	bsf	___ftmul@f2+1,7,c
 16040  00292A  0EFF               	movlw	255
 16041  00292C  1623               	andwf	___ftmul@f2,f,c
 16042  00292E  0EFF               	movlw	255
 16043  002930  1624               	andwf	___ftmul@f2+1,f,c
 16044  002932  0E00               	movlw	0
 16045  002934  1625               	andwf	___ftmul@f2+2,f,c
 16046  002936  0E00               	movlw	0
 16047  002938  6E2A               	movwf	___ftmul@f3_as_product,c
 16048  00293A  0E00               	movlw	0
 16049  00293C  6E2B               	movwf	___ftmul@f3_as_product+1,c
 16050  00293E  0E00               	movlw	0
 16051  002940  6E2C               	movwf	___ftmul@f3_as_product+2,c
 16052  002942  0E07               	movlw	7
 16053  002944  6E2D               	movwf	___ftmul@cntr,c
 16054  002946                     l8413:
 16055  002946  A020               	btfss	___ftmul@f1,0,c
 16056  002948  D006               	goto	l8417
 16057  00294A  5023               	movf	___ftmul@f2,w,c
 16058  00294C  262A               	addwf	___ftmul@f3_as_product,f,c
 16059  00294E  5024               	movf	___ftmul@f2+1,w,c
 16060  002950  222B               	addwfc	___ftmul@f3_as_product+1,f,c
 16061  002952  5025               	movf	___ftmul@f2+2,w,c
 16062  002954  222C               	addwfc	___ftmul@f3_as_product+2,f,c
 16063  002956                     l8417:
 16064  002956  90D8               	bcf	status,0,c
 16065  002958  3222               	rrcf	___ftmul@f1+2,f,c
 16066  00295A  3221               	rrcf	___ftmul@f1+1,f,c
 16067  00295C  3220               	rrcf	___ftmul@f1,f,c
 16068  00295E  90D8               	bcf	status,0,c
 16069  002960  3623               	rlcf	___ftmul@f2,f,c
 16070  002962  3624               	rlcf	___ftmul@f2+1,f,c
 16071  002964  3625               	rlcf	___ftmul@f2+2,f,c
 16072  002966  2E2D               	decfsz	___ftmul@cntr,f,c
 16073  002968  D7EE               	goto	l8413
 16074  00296A  0E09               	movlw	9
 16075  00296C  6E2D               	movwf	___ftmul@cntr,c
 16076  00296E                     l8423:
 16077  00296E  A020               	btfss	___ftmul@f1,0,c
 16078  002970  D006               	goto	l8427
 16079  002972  5023               	movf	___ftmul@f2,w,c
 16080  002974  262A               	addwf	___ftmul@f3_as_product,f,c
 16081  002976  5024               	movf	___ftmul@f2+1,w,c
 16082  002978  222B               	addwfc	___ftmul@f3_as_product+1,f,c
 16083  00297A  5025               	movf	___ftmul@f2+2,w,c
 16084  00297C  222C               	addwfc	___ftmul@f3_as_product+2,f,c
 16085  00297E                     l8427:
 16086  00297E  90D8               	bcf	status,0,c
 16087  002980  3222               	rrcf	___ftmul@f1+2,f,c
 16088  002982  3221               	rrcf	___ftmul@f1+1,f,c
 16089  002984  3220               	rrcf	___ftmul@f1,f,c
 16090  002986  90D8               	bcf	status,0,c
 16091  002988  322C               	rrcf	___ftmul@f3_as_product+2,f,c
 16092  00298A  322B               	rrcf	___ftmul@f3_as_product+1,f,c
 16093  00298C  322A               	rrcf	___ftmul@f3_as_product,f,c
 16094  00298E  2E2D               	decfsz	___ftmul@cntr,f,c
 16095  002990  D7EE               	goto	l8423
 16096  002992  C02A  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
 16097  002996  C02B  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16098  00299A  C02C  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16099  00299E  C029  F017         	movff	___ftmul@exp,___ftpack@exp
 16100  0029A2  C02E  F018         	movff	___ftmul@sign,___ftpack@sign
 16101  0029A6  EC19  F018         	call	___ftpack	;wreg free
 16102  0029AA  C014  F020         	movff	?___ftpack,?___ftmul
 16103  0029AE  C015  F021         	movff	?___ftpack+1,?___ftmul+1
 16104  0029B2  C016  F022         	movff	?___ftpack+2,?___ftmul+2
 16105  0029B6                     l1682:
 16106  0029B6  0012               	return	
 16107  0029B8  FFFF               	dw	65535	; errata NOP
 16108  0029BA                     __end_of___ftmul:
 16109                           	opt stack 0
 16110                           tblptru	equ	0xFF8
 16111                           tblptrh	equ	0xFF7
 16112                           tblptrl	equ	0xFF6
 16113                           tablat	equ	0xFF5
 16114                           prodh	equ	0xFF4
 16115                           prodl	equ	0xFF3
 16116                           intcon	equ	0xFF2
 16117                           intcon2	equ	0xFF1
 16118                           postinc0	equ	0xFEE
 16119                           wreg	equ	0xFE8
 16120                           postinc1	equ	0xFE6
 16121                           postdec1	equ	0xFE5
 16122                           fsr1h	equ	0xFE2
 16123                           fsr1l	equ	0xFE1
 16124                           indf2	equ	0xFDF
 16125                           postinc2	equ	0xFDE
 16126                           postdec2	equ	0xFDD
 16127                           fsr2h	equ	0xFDA
 16128                           fsr2l	equ	0xFD9
 16129                           status	equ	0xFD8
 16130                           
 16131 ;; *************** function ___ftadd *****************
 16132 ;; Defined at:
 16133 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
 16134 ;; Parameters:    Size  Location     Type
 16135 ;;  f1              3   49[COMRAM] float 
 16136 ;;  f2              3   52[COMRAM] float 
 16137 ;; Auto vars:     Size  Location     Type
 16138 ;;  exp1            1   60[COMRAM] unsigned char 
 16139 ;;  exp2            1   59[COMRAM] unsigned char 
 16140 ;;  sign            1   58[COMRAM] unsigned char 
 16141 ;; Return value:  Size  Location     Type
 16142 ;;                  3   49[COMRAM] float 
 16143 ;; Registers used:
 16144 ;;		wreg, status,2, status,0, cstack
 16145 ;; Tracked objects:
 16146 ;;		On entry : 0/0
 16147 ;;		On exit  : 0/0
 16148 ;;		Unchanged: 0/0
 16149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16150 ;;      Params:         6       0       0       0       0       0       0
 16151 ;;      Locals:         3       0       0       0       0       0       0
 16152 ;;      Temps:          3       0       0       0       0       0       0
 16153 ;;      Totals:        12       0       0       0       0       0       0
 16154 ;;Total ram usage:       12 bytes
 16155 ;; Hardware stack levels used:    1
 16156 ;; Hardware stack levels required when called:    3
 16157 ;; This function calls:
 16158 ;;		___ftpack
 16159 ;; This function is called by:
 16160 ;;		_voltage_to_temp
 16161 ;;		_voltage_to_hum
 16162 ;;		_RTUInit
 16163 ;;		___ftsub
 16164 ;;		_modf
 16165 ;;		_floor
 16166 ;;		_log
 16167 ;;		_eval_poly
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           	psect	text76
 16172  001888                     __ptext76:
 16173                           	opt stack 0
 16174  001888                     ___ftadd:
 16175                           	opt stack 21
 16176                           
 16177                           ;incstack = 0
 16178  001888  FFFF               	dw	65535
 16179  00188A  C034  F038         	movff	___ftadd@f1+2,??___ftadd
 16180  00188E  6A39               	clrf	(??___ftadd+1)& (0+255),c
 16181  001890  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 16182  001892  3433               	rlcf	___ftadd@f1+1,w,c
 16183  001894  3638               	rlcf	??___ftadd& (0+255),f,c
 16184  001896  E301               	bnc	u5921
 16185  001898  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 16186  00189A                     u5921:
 16187  00189A  5038               	movf	??___ftadd,w,c
 16188  00189C  6E3D               	movwf	___ftadd@exp1,c
 16189  00189E  C037  F038         	movff	___ftadd@f2+2,??___ftadd
 16190  0018A2  6A39               	clrf	(??___ftadd+1)& (0+255),c
 16191  0018A4  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 16192  0018A6  3436               	rlcf	___ftadd@f2+1,w,c
 16193  0018A8  3638               	rlcf	??___ftadd& (0+255),f,c
 16194  0018AA  E301               	bnc	u5931
 16195  0018AC  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 16196  0018AE                     u5931:
 16197  0018AE  5038               	movf	??___ftadd,w,c
 16198  0018B0  6E3C               	movwf	___ftadd@exp2,c
 16199  0018B2  503D               	movf	___ftadd@exp1,w,c
 16200  0018B4  B4D8               	btfsc	status,2,c
 16201  0018B6  D00C               	goto	l1635
 16202  0018B8  503C               	movf	___ftadd@exp2,w,c
 16203  0018BA  5C3D               	subwf	___ftadd@exp1,w,c
 16204  0018BC  B0D8               	btfsc	status,0,c
 16205  0018BE  D00F               	goto	l8325
 16206  0018C0  503D               	movf	___ftadd@exp1,w,c
 16207  0018C2  0800               	sublw	0
 16208  0018C4  243C               	addwf	___ftadd@exp2,w,c
 16209  0018C6  6E38               	movwf	??___ftadd& (0+255),c
 16210  0018C8  0E19               	movlw	25
 16211  0018CA  5C38               	subwf	??___ftadd,w,c
 16212  0018CC  A0D8               	btfss	status,0,c
 16213  0018CE  D007               	goto	l8325
 16214  0018D0                     l1635:
 16215  0018D0  C035  F032         	movff	___ftadd@f2,?___ftadd
 16216  0018D4  C036  F033         	movff	___ftadd@f2+1,?___ftadd+1
 16217  0018D8  C037  F034         	movff	___ftadd@f2+2,?___ftadd+2
 16218  0018DC  D0AB               	goto	l1636
 16219  0018DE                     l8325:
 16220  0018DE  503C               	movf	___ftadd@exp2,w,c
 16221  0018E0  B4D8               	btfsc	status,2,c
 16222  0018E2  D00C               	goto	l1639
 16223  0018E4  503D               	movf	___ftadd@exp1,w,c
 16224  0018E6  5C3C               	subwf	___ftadd@exp2,w,c
 16225  0018E8  B0D8               	btfsc	status,0,c
 16226  0018EA  D00F               	goto	l8331
 16227  0018EC  503C               	movf	___ftadd@exp2,w,c
 16228  0018EE  0800               	sublw	0
 16229  0018F0  243D               	addwf	___ftadd@exp1,w,c
 16230  0018F2  6E38               	movwf	??___ftadd& (0+255),c
 16231  0018F4  0E19               	movlw	25
 16232  0018F6  5C38               	subwf	??___ftadd,w,c
 16233  0018F8  A0D8               	btfss	status,0,c
 16234  0018FA  D007               	goto	l8331
 16235  0018FC                     l1639:
 16236  0018FC  C032  F032         	movff	___ftadd@f1,?___ftadd
 16237  001900  C033  F033         	movff	___ftadd@f1+1,?___ftadd+1
 16238  001904  C034  F034         	movff	___ftadd@f1+2,?___ftadd+2
 16239  001908  D095               	goto	l1636
 16240  00190A                     l8331:
 16241  00190A  0E06               	movlw	6
 16242  00190C  6E3B               	movwf	___ftadd@sign,c
 16243  00190E  BE34               	btfsc	___ftadd@f1+2,7,c
 16244  001910  8E3B               	bsf	___ftadd@sign,7,c
 16245  001912  BE37               	btfsc	___ftadd@f2+2,7,c
 16246  001914  8C3B               	bsf	___ftadd@sign,6,c
 16247  001916  8E33               	bsf	___ftadd@f1+1,7,c
 16248  001918  0EFF               	movlw	255
 16249  00191A  1632               	andwf	___ftadd@f1,f,c
 16250  00191C  0EFF               	movlw	255
 16251  00191E  1633               	andwf	___ftadd@f1+1,f,c
 16252  001920  0E00               	movlw	0
 16253  001922  1634               	andwf	___ftadd@f1+2,f,c
 16254  001924  8E36               	bsf	___ftadd@f2+1,7,c
 16255  001926  0EFF               	movlw	255
 16256  001928  1635               	andwf	___ftadd@f2,f,c
 16257  00192A  0EFF               	movlw	255
 16258  00192C  1636               	andwf	___ftadd@f2+1,f,c
 16259  00192E  0E00               	movlw	0
 16260  001930  1637               	andwf	___ftadd@f2+2,f,c
 16261  001932  503C               	movf	___ftadd@exp2,w,c
 16262  001934  5C3D               	subwf	___ftadd@exp1,w,c
 16263  001936  B0D8               	btfsc	status,0,c
 16264  001938  D01A               	goto	l8357
 16265  00193A                     l8347:
 16266  00193A  90D8               	bcf	status,0,c
 16267  00193C  3635               	rlcf	___ftadd@f2,f,c
 16268  00193E  3636               	rlcf	___ftadd@f2+1,f,c
 16269  001940  3637               	rlcf	___ftadd@f2+2,f,c
 16270  001942  063C               	decf	___ftadd@exp2,f,c
 16271  001944  503C               	movf	___ftadd@exp2,w,c
 16272  001946  183D               	xorwf	___ftadd@exp1,w,c
 16273  001948  B4D8               	btfsc	status,2,c
 16274  00194A  D00D               	goto	l8355
 16275  00194C  063B               	decf	___ftadd@sign,f,c
 16276  00194E  C03B  F038         	movff	___ftadd@sign,??___ftadd
 16277  001952  0E07               	movlw	7
 16278  001954  1638               	andwf	??___ftadd,f,c
 16279  001956  B4D8               	btfsc	status,2,c
 16280  001958  D006               	goto	l8355
 16281  00195A  D7EF               	goto	l8347
 16282  00195C                     l8353:
 16283  00195C  90D8               	bcf	status,0,c
 16284  00195E  3234               	rrcf	___ftadd@f1+2,f,c
 16285  001960  3233               	rrcf	___ftadd@f1+1,f,c
 16286  001962  3232               	rrcf	___ftadd@f1,f,c
 16287  001964  2A3D               	incf	___ftadd@exp1,f,c
 16288  001966                     l8355:
 16289  001966  503C               	movf	___ftadd@exp2,w,c
 16290  001968  623D               	cpfseq	___ftadd@exp1,c
 16291  00196A  D7F8               	goto	l8353
 16292  00196C  D01D               	goto	l1650
 16293  00196E                     l8357:
 16294  00196E  503D               	movf	___ftadd@exp1,w,c
 16295  001970  5C3C               	subwf	___ftadd@exp2,w,c
 16296  001972  B0D8               	btfsc	status,0,c
 16297  001974  D019               	goto	l1650
 16298  001976                     l8359:
 16299  001976  90D8               	bcf	status,0,c
 16300  001978  3632               	rlcf	___ftadd@f1,f,c
 16301  00197A  3633               	rlcf	___ftadd@f1+1,f,c
 16302  00197C  3634               	rlcf	___ftadd@f1+2,f,c
 16303  00197E  063D               	decf	___ftadd@exp1,f,c
 16304  001980  503C               	movf	___ftadd@exp2,w,c
 16305  001982  183D               	xorwf	___ftadd@exp1,w,c
 16306  001984  B4D8               	btfsc	status,2,c
 16307  001986  D00D               	goto	l8367
 16308  001988  063B               	decf	___ftadd@sign,f,c
 16309  00198A  C03B  F038         	movff	___ftadd@sign,??___ftadd
 16310  00198E  0E07               	movlw	7
 16311  001990  1638               	andwf	??___ftadd,f,c
 16312  001992  B4D8               	btfsc	status,2,c
 16313  001994  D006               	goto	l8367
 16314  001996  D7EF               	goto	l8359
 16315  001998                     l8365:
 16316  001998  90D8               	bcf	status,0,c
 16317  00199A  3237               	rrcf	___ftadd@f2+2,f,c
 16318  00199C  3236               	rrcf	___ftadd@f2+1,f,c
 16319  00199E  3235               	rrcf	___ftadd@f2,f,c
 16320  0019A0  2A3C               	incf	___ftadd@exp2,f,c
 16321  0019A2                     l8367:
 16322  0019A2  503C               	movf	___ftadd@exp2,w,c
 16323  0019A4  623D               	cpfseq	___ftadd@exp1,c
 16324  0019A6  D7F8               	goto	l8365
 16325  0019A8                     l1650:
 16326  0019A8  AE3B               	btfss	___ftadd@sign,7,c
 16327  0019AA  D00C               	goto	l1659
 16328  0019AC  0EFF               	movlw	255
 16329  0019AE  1A32               	xorwf	___ftadd@f1,f,c
 16330  0019B0  0EFF               	movlw	255
 16331  0019B2  1A33               	xorwf	___ftadd@f1+1,f,c
 16332  0019B4  0EFF               	movlw	255
 16333  0019B6  1A34               	xorwf	___ftadd@f1+2,f,c
 16334  0019B8  0E01               	movlw	1
 16335  0019BA  2632               	addwf	___ftadd@f1,f,c
 16336  0019BC  0E00               	movlw	0
 16337  0019BE  2233               	addwfc	___ftadd@f1+1,f,c
 16338  0019C0  0E00               	movlw	0
 16339  0019C2  2234               	addwfc	___ftadd@f1+2,f,c
 16340  0019C4                     l1659:
 16341  0019C4  AC3B               	btfss	___ftadd@sign,6,c
 16342  0019C6  D00C               	goto	l8373
 16343  0019C8  0EFF               	movlw	255
 16344  0019CA  1A35               	xorwf	___ftadd@f2,f,c
 16345  0019CC  0EFF               	movlw	255
 16346  0019CE  1A36               	xorwf	___ftadd@f2+1,f,c
 16347  0019D0  0EFF               	movlw	255
 16348  0019D2  1A37               	xorwf	___ftadd@f2+2,f,c
 16349  0019D4  0E01               	movlw	1
 16350  0019D6  2635               	addwf	___ftadd@f2,f,c
 16351  0019D8  0E00               	movlw	0
 16352  0019DA  2236               	addwfc	___ftadd@f2+1,f,c
 16353  0019DC  0E00               	movlw	0
 16354  0019DE  2237               	addwfc	___ftadd@f2+2,f,c
 16355  0019E0                     l8373:
 16356  0019E0  0E00               	movlw	0
 16357  0019E2  6E3B               	movwf	___ftadd@sign,c
 16358  0019E4  5032               	movf	___ftadd@f1,w,c
 16359  0019E6  2635               	addwf	___ftadd@f2,f,c
 16360  0019E8  5033               	movf	___ftadd@f1+1,w,c
 16361  0019EA  2236               	addwfc	___ftadd@f2+1,f,c
 16362  0019EC  5034               	movf	___ftadd@f1+2,w,c
 16363  0019EE  2237               	addwfc	___ftadd@f2+2,f,c
 16364  0019F0  AE37               	btfss	___ftadd@f2+2,7,c
 16365  0019F2  D00E               	goto	l8383
 16366  0019F4  0EFF               	movlw	255
 16367  0019F6  1A35               	xorwf	___ftadd@f2,f,c
 16368  0019F8  0EFF               	movlw	255
 16369  0019FA  1A36               	xorwf	___ftadd@f2+1,f,c
 16370  0019FC  0EFF               	movlw	255
 16371  0019FE  1A37               	xorwf	___ftadd@f2+2,f,c
 16372  001A00  0E01               	movlw	1
 16373  001A02  2635               	addwf	___ftadd@f2,f,c
 16374  001A04  0E00               	movlw	0
 16375  001A06  2236               	addwfc	___ftadd@f2+1,f,c
 16376  001A08  0E00               	movlw	0
 16377  001A0A  2237               	addwfc	___ftadd@f2+2,f,c
 16378  001A0C  0E01               	movlw	1
 16379  001A0E  6E3B               	movwf	___ftadd@sign,c
 16380  001A10                     l8383:
 16381  001A10  C035  F014         	movff	___ftadd@f2,___ftpack@arg
 16382  001A14  C036  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
 16383  001A18  C037  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
 16384  001A1C  C03D  F017         	movff	___ftadd@exp1,___ftpack@exp
 16385  001A20  C03B  F018         	movff	___ftadd@sign,___ftpack@sign
 16386  001A24  EC19  F018         	call	___ftpack	;wreg free
 16387  001A28  C014  F032         	movff	?___ftpack,?___ftadd
 16388  001A2C  C015  F033         	movff	?___ftpack+1,?___ftadd+1
 16389  001A30  C016  F034         	movff	?___ftpack+2,?___ftadd+2
 16390  001A34                     l1636:
 16391  001A34  0012               	return	
 16392  001A36  FFFF               	dw	65535	; errata NOP
 16393  001A38                     __end_of___ftadd:
 16394                           	opt stack 0
 16395                           tblptru	equ	0xFF8
 16396                           tblptrh	equ	0xFF7
 16397                           tblptrl	equ	0xFF6
 16398                           tablat	equ	0xFF5
 16399                           prodh	equ	0xFF4
 16400                           prodl	equ	0xFF3
 16401                           intcon	equ	0xFF2
 16402                           intcon2	equ	0xFF1
 16403                           postinc0	equ	0xFEE
 16404                           wreg	equ	0xFE8
 16405                           postinc1	equ	0xFE6
 16406                           postdec1	equ	0xFE5
 16407                           fsr1h	equ	0xFE2
 16408                           fsr1l	equ	0xFE1
 16409                           indf2	equ	0xFDF
 16410                           postinc2	equ	0xFDE
 16411                           postdec2	equ	0xFDD
 16412                           fsr2h	equ	0xFDA
 16413                           fsr2l	equ	0xFD9
 16414                           status	equ	0xFD8
 16415                           
 16416 ;; *************** function ___ftpack *****************
 16417 ;; Defined at:
 16418 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;  arg             3   19[COMRAM] unsigned um
 16421 ;;  exp             1   22[COMRAM] unsigned char 
 16422 ;;  sign            1   23[COMRAM] unsigned char 
 16423 ;; Auto vars:     Size  Location     Type
 16424 ;;		None
 16425 ;; Return value:  Size  Location     Type
 16426 ;;                  3   19[COMRAM] float 
 16427 ;; Registers used:
 16428 ;;		wreg, status,2, status,0
 16429 ;; Tracked objects:
 16430 ;;		On entry : 0/0
 16431 ;;		On exit  : 0/0
 16432 ;;		Unchanged: 0/0
 16433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16434 ;;      Params:         5       0       0       0       0       0       0
 16435 ;;      Locals:         0       0       0       0       0       0       0
 16436 ;;      Temps:          3       0       0       0       0       0       0
 16437 ;;      Totals:         8       0       0       0       0       0       0
 16438 ;;Total ram usage:        8 bytes
 16439 ;; Hardware stack levels used:    1
 16440 ;; Hardware stack levels required when called:    2
 16441 ;; This function calls:
 16442 ;;		Nothing
 16443 ;; This function is called by:
 16444 ;;		___altoft
 16445 ;;		___attoft
 16446 ;;		___awtoft
 16447 ;;		___ftadd
 16448 ;;		___ftdiv
 16449 ;;		___ftmul
 16450 ;;		___lbtoft
 16451 ;;		___lltoft
 16452 ;;		___lwtoft
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text77
 16457  003032                     __ptext77:
 16458                           	opt stack 0
 16459  003032                     ___ftpack:
 16460                           	opt stack 21
 16461                           
 16462                           ;incstack = 0
 16463  003032  FFFF               	dw	65535
 16464  003034  5017               	movf	___ftpack@exp,w,c
 16465  003036  B4D8               	btfsc	status,2,c
 16466  003038  D005               	goto	l8175
 16467  00303A  5014               	movf	___ftpack@arg,w,c
 16468  00303C  1015               	iorwf	___ftpack@arg+1,w,c
 16469  00303E  1016               	iorwf	___ftpack@arg+2,w,c
 16470  003040  A4D8               	btfss	status,2,c
 16471  003042  D00C               	goto	l8181
 16472  003044                     l8175:
 16473  003044  0E00               	movlw	0
 16474  003046  6E14               	movwf	?___ftpack,c
 16475  003048  0E00               	movlw	0
 16476  00304A  6E15               	movwf	?___ftpack+1,c
 16477  00304C  0E00               	movlw	0
 16478  00304E  6E16               	movwf	?___ftpack+2,c
 16479  003050  D044               	goto	l1598
 16480  003052                     l8179:
 16481  003052  2A17               	incf	___ftpack@exp,f,c
 16482  003054  90D8               	bcf	status,0,c
 16483  003056  3216               	rrcf	___ftpack@arg+2,f,c
 16484  003058  3215               	rrcf	___ftpack@arg+1,f,c
 16485  00305A  3214               	rrcf	___ftpack@arg,f,c
 16486  00305C                     l8181:
 16487  00305C  0E00               	movlw	0
 16488  00305E  1414               	andwf	___ftpack@arg,w,c
 16489  003060  6E19               	movwf	??___ftpack& (0+255),c
 16490  003062  0E00               	movlw	0
 16491  003064  1415               	andwf	___ftpack@arg+1,w,c
 16492  003066  6E1A               	movwf	(??___ftpack+1)& (0+255),c
 16493  003068  0EFE               	movlw	254
 16494  00306A  1416               	andwf	___ftpack@arg+2,w,c
 16495  00306C  6E1B               	movwf	(??___ftpack+2)& (0+255),c
 16496  00306E  5019               	movf	??___ftpack,w,c
 16497  003070  101A               	iorwf	??___ftpack+1,w,c
 16498  003072  101B               	iorwf	??___ftpack+2,w,c
 16499  003074  B4D8               	btfsc	status,2,c
 16500  003076  D00C               	goto	l8187
 16501  003078  D7EC               	goto	l8179
 16502  00307A                     l8183:
 16503  00307A  2A17               	incf	___ftpack@exp,f,c
 16504  00307C  0E01               	movlw	1
 16505  00307E  2614               	addwf	___ftpack@arg,f,c
 16506  003080  0E00               	movlw	0
 16507  003082  2215               	addwfc	___ftpack@arg+1,f,c
 16508  003084  0E00               	movlw	0
 16509  003086  2216               	addwfc	___ftpack@arg+2,f,c
 16510  003088  90D8               	bcf	status,0,c
 16511  00308A  3216               	rrcf	___ftpack@arg+2,f,c
 16512  00308C  3215               	rrcf	___ftpack@arg+1,f,c
 16513  00308E  3214               	rrcf	___ftpack@arg,f,c
 16514  003090                     l8187:
 16515  003090  0E00               	movlw	0
 16516  003092  1414               	andwf	___ftpack@arg,w,c
 16517  003094  6E19               	movwf	??___ftpack& (0+255),c
 16518  003096  0E00               	movlw	0
 16519  003098  1415               	andwf	___ftpack@arg+1,w,c
 16520  00309A  6E1A               	movwf	(??___ftpack+1)& (0+255),c
 16521  00309C  0EFF               	movlw	255
 16522  00309E  1416               	andwf	___ftpack@arg+2,w,c
 16523  0030A0  6E1B               	movwf	(??___ftpack+2)& (0+255),c
 16524  0030A2  5019               	movf	??___ftpack,w,c
 16525  0030A4  101A               	iorwf	??___ftpack+1,w,c
 16526  0030A6  101B               	iorwf	??___ftpack+2,w,c
 16527  0030A8  B4D8               	btfsc	status,2,c
 16528  0030AA  D006               	goto	l8191
 16529  0030AC  D7E6               	goto	l8183
 16530  0030AE                     l8189:
 16531  0030AE  0617               	decf	___ftpack@exp,f,c
 16532  0030B0  90D8               	bcf	status,0,c
 16533  0030B2  3614               	rlcf	___ftpack@arg,f,c
 16534  0030B4  3615               	rlcf	___ftpack@arg+1,f,c
 16535  0030B6  3616               	rlcf	___ftpack@arg+2,f,c
 16536  0030B8                     l8191:
 16537  0030B8  AE15               	btfss	___ftpack@arg+1,7,c
 16538  0030BA  D7F9               	goto	l8189
 16539  0030BC  A017               	btfss	___ftpack@exp,0,c
 16540  0030BE  9E15               	bcf	___ftpack@arg+1,7,c
 16541  0030C0  90D8               	bcf	status,0,c
 16542  0030C2  3217               	rrcf	___ftpack@exp,f,c
 16543  0030C4  5017               	movf	___ftpack@exp,w,c
 16544  0030C6  1216               	iorwf	___ftpack@arg+2,f,c
 16545  0030C8  5018               	movf	___ftpack@sign,w,c
 16546  0030CA  A4D8               	btfss	status,2,c
 16547  0030CC  8E16               	bsf	___ftpack@arg+2,7,c
 16548  0030CE  C014  F014         	movff	___ftpack@arg,?___ftpack
 16549  0030D2  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
 16550  0030D6  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
 16551  0030DA                     l1598:
 16552  0030DA  0012               	return	
 16553  0030DC  FFFF               	dw	65535	; errata NOP
 16554  0030DE                     __end_of___ftpack:
 16555                           	opt stack 0
 16556                           tblptru	equ	0xFF8
 16557                           tblptrh	equ	0xFF7
 16558                           tblptrl	equ	0xFF6
 16559                           tablat	equ	0xFF5
 16560                           prodh	equ	0xFF4
 16561                           prodl	equ	0xFF3
 16562                           intcon	equ	0xFF2
 16563                           intcon2	equ	0xFF1
 16564                           postinc0	equ	0xFEE
 16565                           wreg	equ	0xFE8
 16566                           postinc1	equ	0xFE6
 16567                           postdec1	equ	0xFE5
 16568                           fsr1h	equ	0xFE2
 16569                           fsr1l	equ	0xFE1
 16570                           indf2	equ	0xFDF
 16571                           postinc2	equ	0xFDE
 16572                           postdec2	equ	0xFDD
 16573                           fsr2h	equ	0xFDA
 16574                           fsr2l	equ	0xFD9
 16575                           status	equ	0xFD8
 16576                           
 16577 ;; *************** function _Write_b_eep *****************
 16578 ;; Defined at:
 16579 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
 16580 ;; Parameters:    Size  Location     Type
 16581 ;;  badd            2   19[COMRAM] unsigned int 
 16582 ;;  bdat            1   21[COMRAM] unsigned char 
 16583 ;; Auto vars:     Size  Location     Type
 16584 ;;  GIE_BIT_VAL     1   22[COMRAM] unsigned char 
 16585 ;; Return value:  Size  Location     Type
 16586 ;;		None               void
 16587 ;; Registers used:
 16588 ;;		wreg, status,2
 16589 ;; Tracked objects:
 16590 ;;		On entry : 0/0
 16591 ;;		On exit  : 0/0
 16592 ;;		Unchanged: 0/0
 16593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16594 ;;      Params:         3       0       0       0       0       0       0
 16595 ;;      Locals:         1       0       0       0       0       0       0
 16596 ;;      Temps:          0       0       0       0       0       0       0
 16597 ;;      Totals:         4       0       0       0       0       0       0
 16598 ;;Total ram usage:        4 bytes
 16599 ;; Hardware stack levels used:    1
 16600 ;; Hardware stack levels required when called:    2
 16601 ;; This function calls:
 16602 ;;		Nothing
 16603 ;; This function is called by:
 16604 ;;		_RTUInit
 16605 ;;		_per_minute_reading
 16606 ;;		_per_second_reading
 16607 ;;		_rtc_setting
 16608 ;;		_data_to_center
 16609 ;; This function uses a non-reentrant model
 16610 ;;
 16611                           
 16612                           	psect	text78
 16613  003F28                     __ptext78:
 16614                           	opt stack 0
 16615  003F28                     _Write_b_eep:
 16616                           	opt stack 27
 16617                           
 16618                           ;incstack = 0
 16619  003F28  FFFF               	dw	65535
 16620  003F2A  0E00               	movlw	0
 16621  003F2C  6E17               	movwf	Write_b_eep@GIE_BIT_VAL,c
 16622  003F2E  C014  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 16623  003F32  C016  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 16624  003F36  9EA6               	bcf	4006,7,c	;volatile
 16625  003F38  9CA6               	bcf	4006,6,c	;volatile
 16626  003F3A  84A6               	bsf	4006,2,c	;volatile
 16627  003F3C  0E00               	movlw	0
 16628  003F3E  BEF2               	btfsc	intcon,7,c	;volatile
 16629  003F40  0E01               	movlw	1
 16630  003F42  6E17               	movwf	Write_b_eep@GIE_BIT_VAL,c
 16631  003F44  9EF2               	bcf	intcon,7,c	;volatile
 16632  003F46  0E55               	movlw	85
 16633  003F48  6EA7               	movwf	4007,c	;volatile
 16634  003F4A  0EAA               	movlw	170
 16635  003F4C  6EA7               	movwf	4007,c	;volatile
 16636  003F4E  82A6               	bsf	4006,1,c	;volatile
 16637  003F50                     l1214:
 16638  003F50  B2A6               	btfsc	4006,1,c	;volatile
 16639  003F52  D7FE               	goto	l1214
 16640  003F54  B017               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 16641  003F56  D002               	bra	u7915
 16642  003F58  9EF2               	bcf	intcon,7,c	;volatile
 16643  003F5A  D001               	bra	u7916
 16644  003F5C                     u7915:
 16645  003F5C  8EF2               	bsf	intcon,7,c	;volatile
 16646  003F5E                     u7916:
 16647  003F5E  94A6               	bcf	4006,2,c	;volatile
 16648  003F60  0012               	return	
 16649  003F62  FFFF               	dw	65535	; errata NOP
 16650  003F64                     __end_of_Write_b_eep:
 16651                           	opt stack 0
 16652                           tblptru	equ	0xFF8
 16653                           tblptrh	equ	0xFF7
 16654                           tblptrl	equ	0xFF6
 16655                           tablat	equ	0xFF5
 16656                           prodh	equ	0xFF4
 16657                           prodl	equ	0xFF3
 16658                           intcon	equ	0xFF2
 16659                           intcon2	equ	0xFF1
 16660                           postinc0	equ	0xFEE
 16661                           wreg	equ	0xFE8
 16662                           postinc1	equ	0xFE6
 16663                           postdec1	equ	0xFE5
 16664                           fsr1h	equ	0xFE2
 16665                           fsr1l	equ	0xFE1
 16666                           indf2	equ	0xFDF
 16667                           postinc2	equ	0xFDE
 16668                           postdec2	equ	0xFDD
 16669                           fsr2h	equ	0xFDA
 16670                           fsr2l	equ	0xFD9
 16671                           status	equ	0xFD8
 16672                           
 16673 ;; *************** function _USARTInit *****************
 16674 ;; Defined at:
 16675 ;;		line 6 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;  baud_rate       2   19[COMRAM] unsigned int 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;		None
 16680 ;; Return value:  Size  Location     Type
 16681 ;;		None               void
 16682 ;; Registers used:
 16683 ;;		wreg, status,2, status,0
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16689 ;;      Params:         2       0       0       0       0       0       0
 16690 ;;      Locals:         0       0       0       0       0       0       0
 16691 ;;      Temps:          2       0       0       0       0       0       0
 16692 ;;      Totals:         4       0       0       0       0       0       0
 16693 ;;Total ram usage:        4 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    2
 16696 ;; This function calls:
 16697 ;;		Nothing
 16698 ;; This function is called by:
 16699 ;;		_RTUInit
 16700 ;; This function uses a non-reentrant model
 16701 ;;
 16702                           
 16703                           	psect	text79
 16704  0037DE                     __ptext79:
 16705                           	opt stack 0
 16706  0037DE                     _USARTInit:
 16707                           	opt stack 27
 16708                           
 16709                           ;incstack = 0
 16710  0037DE  FFFF               	dw	65535
 16711                           
 16712                           ;usart_pic18.c: 9: UQFront=UQEnd=-1;
 16713  0037E0  6860               	setf	_UQEnd,c	;volatile
 16714  0037E2  6861               	setf	_UQFront,c	;volatile
 16715                           
 16716                           ;usart_pic18.c: 13: switch(baud_rate)
 16717  0037E4  D009               	goto	l10097
 16718  0037E6                     l10087:
 16719                           
 16720                           ;usart_pic18.c: 16: SPBRG=64;
 16721  0037E6  0E40               	movlw	64
 16722  0037E8  D005               	goto	L28
 16723  0037EA                     l10089:
 16724                           
 16725                           ;usart_pic18.c: 19: SPBRG=32;
 16726  0037EA  0E20               	movlw	32
 16727  0037EC  D003               	goto	L28
 16728  0037EE                     l10091:
 16729                           
 16730                           ;usart_pic18.c: 22: SPBRG=15;
 16731  0037EE  0E0F               	movlw	15
 16732  0037F0  D001               	goto	L28
 16733  0037F2                     l10093:
 16734                           
 16735                           ;usart_pic18.c: 25: SPBRG=10;
 16736  0037F2  0E0A               	movlw	10
 16737  0037F4                     L28:
 16738  0037F4  6EAF               	movwf	4015,c	;volatile
 16739                           
 16740                           ;usart_pic18.c: 26: break;
 16741  0037F6  D025               	goto	l810
 16742  0037F8                     l10097:
 16743  0037F8  C014  F016         	movff	USARTInit@baud_rate,??_USARTInit
 16744  0037FC  C015  F017         	movff	USARTInit@baud_rate+1,??_USARTInit+1
 16745                           
 16746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 16747                           ; Switch size 1, requested type "space"
 16748                           ; Number of cases is 4, Range of values is 37 to 225
 16749                           ; switch strategies available:
 16750                           ; Name         Instructions Cycles
 16751                           ; simple_byte           13     7 (average)
 16752                           ;	Chosen strategy is simple_byte
 16753  003800  5017               	movf	??_USARTInit+1,w,c
 16754  003802  0A25               	xorlw	37	; case 37
 16755  003804  B4D8               	btfsc	status,2,c
 16756  003806  D00A               	goto	l11235
 16757  003808  0A6E               	xorlw	110	; case 75
 16758  00380A  B4D8               	btfsc	status,2,c
 16759  00380C  D00C               	goto	l11237
 16760  00380E  0ADD               	xorlw	221	; case 150
 16761  003810  B4D8               	btfsc	status,2,c
 16762  003812  D00E               	goto	l11239
 16763  003814  0A77               	xorlw	119	; case 225
 16764  003816  B4D8               	btfsc	status,2,c
 16765  003818  D010               	goto	l11241
 16766  00381A  D013               	goto	l810
 16767  00381C                     l11235:
 16768                           
 16769                           ; Switch size 1, requested type "space"
 16770                           ; Number of cases is 1, Range of values is 128 to 128
 16771                           ; switch strategies available:
 16772                           ; Name         Instructions Cycles
 16773                           ; simple_byte            4     3 (average)
 16774                           ;	Chosen strategy is simple_byte
 16775  00381C  5016               	movf	??_USARTInit,w,c
 16776  00381E  0A80               	xorlw	128	; case 128
 16777  003820  B4D8               	btfsc	status,2,c
 16778  003822  D7E1               	goto	l10087
 16779  003824  D00E               	goto	l810
 16780  003826                     l11237:
 16781                           
 16782                           ; Switch size 1, requested type "space"
 16783                           ; Number of cases is 1, Range of values is 0 to 0
 16784                           ; switch strategies available:
 16785                           ; Name         Instructions Cycles
 16786                           ; simple_byte            4     3 (average)
 16787                           ;	Chosen strategy is simple_byte
 16788  003826  5016               	movf	??_USARTInit,w,c
 16789  003828  0A00               	xorlw	0	; case 0
 16790  00382A  B4D8               	btfsc	status,2,c
 16791  00382C  D7DE               	goto	l10089
 16792  00382E  D009               	goto	l810
 16793  003830                     l11239:
 16794                           
 16795                           ; Switch size 1, requested type "space"
 16796                           ; Number of cases is 1, Range of values is 0 to 0
 16797                           ; switch strategies available:
 16798                           ; Name         Instructions Cycles
 16799                           ; simple_byte            4     3 (average)
 16800                           ;	Chosen strategy is simple_byte
 16801  003830  5016               	movf	??_USARTInit,w,c
 16802  003832  0A00               	xorlw	0	; case 0
 16803  003834  B4D8               	btfsc	status,2,c
 16804  003836  D7DB               	goto	l10091
 16805  003838  D004               	goto	l810
 16806  00383A                     l11241:
 16807                           
 16808                           ; Switch size 1, requested type "space"
 16809                           ; Number of cases is 1, Range of values is 0 to 0
 16810                           ; switch strategies available:
 16811                           ; Name         Instructions Cycles
 16812                           ; simple_byte            4     3 (average)
 16813                           ;	Chosen strategy is simple_byte
 16814  00383A  5016               	movf	??_USARTInit,w,c
 16815  00383C  0A00               	xorlw	0	; case 0
 16816  00383E  B4D8               	btfsc	status,2,c
 16817  003840  D7D8               	goto	l10093
 16818  003842                     l810:
 16819                           
 16820                           ;usart_pic18.c: 30: TRISCbits.RC6 = 0;
 16821  003842  9C94               	bcf	3988,6,c	;volatile
 16822                           
 16823                           ;usart_pic18.c: 31: TRISCbits.RC7 = 1;
 16824  003844  8E94               	bsf	3988,7,c	;volatile
 16825                           
 16826                           ;usart_pic18.c: 34: TXSTAbits.TX9=0;
 16827  003846  9CAC               	bcf	4012,6,c	;volatile
 16828                           
 16829                           ;usart_pic18.c: 35: TXSTAbits.TXEN=1;
 16830  003848  8AAC               	bsf	4012,5,c	;volatile
 16831                           
 16832                           ;usart_pic18.c: 36: TXSTAbits.SYNC=0;
 16833  00384A  98AC               	bcf	4012,4,c	;volatile
 16834                           
 16835                           ;usart_pic18.c: 37: TXSTAbits.BRGH=1;
 16836  00384C  84AC               	bsf	4012,2,c	;volatile
 16837                           
 16838                           ;usart_pic18.c: 40: RCSTAbits.SPEN=1;
 16839  00384E  8EAB               	bsf	4011,7,c	;volatile
 16840                           
 16841                           ;usart_pic18.c: 41: RCSTAbits.RX9=0;
 16842  003850  9CAB               	bcf	4011,6,c	;volatile
 16843                           
 16844                           ;usart_pic18.c: 42: RCSTAbits.CREN=1;
 16845  003852  88AB               	bsf	4011,4,c	;volatile
 16846                           
 16847                           ;usart_pic18.c: 43: RCSTAbits.ADDEN=0;
 16848  003854  96AB               	bcf	4011,3,c	;volatile
 16849                           
 16850                           ;usart_pic18.c: 46: RCIE=1;
 16851  003856  8A9D               	bsf	3997,5,c	;volatile
 16852                           
 16853                           ;usart_pic18.c: 47: PEIE=1;
 16854  003858  8CF2               	bsf	intcon,6,c	;volatile
 16855                           
 16856                           ;usart_pic18.c: 49: (INTCONbits.GIE = 1);
 16857  00385A  8EF2               	bsf	intcon,7,c	;volatile
 16858  00385C  0012               	return	
 16859  00385E  FFFF               	dw	65535	; errata NOP
 16860  003860                     __end_of_USARTInit:
 16861                           	opt stack 0
 16862                           tblptru	equ	0xFF8
 16863                           tblptrh	equ	0xFF7
 16864                           tblptrl	equ	0xFF6
 16865                           tablat	equ	0xFF5
 16866                           prodh	equ	0xFF4
 16867                           prodl	equ	0xFF3
 16868                           intcon	equ	0xFF2
 16869                           intcon2	equ	0xFF1
 16870                           postinc0	equ	0xFEE
 16871                           wreg	equ	0xFE8
 16872                           postinc1	equ	0xFE6
 16873                           postdec1	equ	0xFE5
 16874                           fsr1h	equ	0xFE2
 16875                           fsr1l	equ	0xFE1
 16876                           indf2	equ	0xFDF
 16877                           postinc2	equ	0xFDE
 16878                           postdec2	equ	0xFDD
 16879                           fsr2h	equ	0xFDA
 16880                           fsr2l	equ	0xFD9
 16881                           status	equ	0xFD8
 16882                           
 16883 ;; *************** function _Read_b_eep *****************
 16884 ;; Defined at:
 16885 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
 16886 ;; Parameters:    Size  Location     Type
 16887 ;;  badd            2   19[COMRAM] unsigned int 
 16888 ;; Auto vars:     Size  Location     Type
 16889 ;;		None
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  1    wreg      unsigned char 
 16892 ;; Registers used:
 16893 ;;		wreg, status,2
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16899 ;;      Params:         2       0       0       0       0       0       0
 16900 ;;      Locals:         0       0       0       0       0       0       0
 16901 ;;      Temps:          0       0       0       0       0       0       0
 16902 ;;      Totals:         2       0       0       0       0       0       0
 16903 ;;Total ram usage:        2 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; Hardware stack levels required when called:    2
 16906 ;; This function calls:
 16907 ;;		Nothing
 16908 ;; This function is called by:
 16909 ;;		_RTUInit
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           	psect	text80
 16914  007A7E                     __ptext80:
 16915                           	opt stack 0
 16916  007A7E                     _Read_b_eep:
 16917                           	opt stack 27
 16918                           
 16919                           ;incstack = 0
 16920  007A7E  FFFF               	dw	65535
 16921  007A80  C014  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16922  007A84  9CA6               	bcf	4006,6,c	;volatile
 16923  007A86  9EA6               	bcf	4006,7,c	;volatile
 16924  007A88  80A6               	bsf	4006,0,c	;volatile
 16925  007A8A  F000               	nop	
 16926  007A8C  F000               	nop	
 16927  007A8E  50A8               	movf	4008,w,c	;volatile
 16928  007A90  0012               	return	
 16929  007A92  FFFF               	dw	65535	; errata NOP
 16930  007A94                     __end_of_Read_b_eep:
 16931                           	opt stack 0
 16932                           tblptru	equ	0xFF8
 16933                           tblptrh	equ	0xFF7
 16934                           tblptrl	equ	0xFF6
 16935                           tablat	equ	0xFF5
 16936                           prodh	equ	0xFF4
 16937                           prodl	equ	0xFF3
 16938                           intcon	equ	0xFF2
 16939                           intcon2	equ	0xFF1
 16940                           postinc0	equ	0xFEE
 16941                           wreg	equ	0xFE8
 16942                           postinc1	equ	0xFE6
 16943                           postdec1	equ	0xFE5
 16944                           fsr1h	equ	0xFE2
 16945                           fsr1l	equ	0xFE1
 16946                           indf2	equ	0xFDF
 16947                           postinc2	equ	0xFDE
 16948                           postdec2	equ	0xFDD
 16949                           fsr2h	equ	0xFDA
 16950                           fsr2l	equ	0xFD9
 16951                           status	equ	0xFD8
 16952                           
 16953 ;; *************** function _OpenI2C *****************
 16954 ;; Defined at:
 16955 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_open.c"
 16956 ;; Parameters:    Size  Location     Type
 16957 ;;  sync_mode       1    wreg     unsigned char 
 16958 ;;  slew            1   19[COMRAM] unsigned char 
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;  sync_mode       1   20[COMRAM] unsigned char 
 16961 ;; Return value:  Size  Location     Type
 16962 ;;		None               void
 16963 ;; Registers used:
 16964 ;;		wreg, status,2, status,0
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16970 ;;      Params:         1       0       0       0       0       0       0
 16971 ;;      Locals:         1       0       0       0       0       0       0
 16972 ;;      Temps:          0       0       0       0       0       0       0
 16973 ;;      Totals:         2       0       0       0       0       0       0
 16974 ;;Total ram usage:        2 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    2
 16977 ;; This function calls:
 16978 ;;		Nothing
 16979 ;; This function is called by:
 16980 ;;		_RTUInit
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	text81
 16985  007AFA                     __ptext81:
 16986                           	opt stack 0
 16987  007AFA                     _OpenI2C:
 16988                           	opt stack 27
 16989                           
 16990                           ;incstack = 0
 16991  007AFA  FFFF               	dw	65535
 16992                           
 16993                           ;OpenI2C@sync_mode stored from wreg
 16994  007AFC  6E15               	movwf	OpenI2C@sync_mode,c
 16995  007AFE  0E3F               	movlw	63
 16996  007B00  16C7               	andwf	4039,f,c	;volatile
 16997  007B02  0E00               	movlw	0
 16998  007B04  6EC6               	movwf	4038,c	;volatile
 16999  007B06  0E00               	movlw	0
 17000  007B08  6EC5               	movwf	4037,c	;volatile
 17001  007B0A  5015               	movf	OpenI2C@sync_mode,w,c
 17002  007B0C  12C6               	iorwf	4038,f,c	;volatile
 17003  007B0E  5014               	movf	OpenI2C@slew,w,c
 17004  007B10  12C7               	iorwf	4039,f,c	;volatile
 17005  007B12  8694               	bsf	3988,3,c	;volatile
 17006  007B14  8894               	bsf	3988,4,c	;volatile
 17007  007B16  8AC6               	bsf	4038,5,c	;volatile
 17008  007B18  0012               	return	
 17009  007B1A  FFFF               	dw	65535	; errata NOP
 17010  007B1C                     __end_of_OpenI2C:
 17011                           	opt stack 0
 17012                           tblptru	equ	0xFF8
 17013                           tblptrh	equ	0xFF7
 17014                           tblptrl	equ	0xFF6
 17015                           tablat	equ	0xFF5
 17016                           prodh	equ	0xFF4
 17017                           prodl	equ	0xFF3
 17018                           intcon	equ	0xFF2
 17019                           intcon2	equ	0xFF1
 17020                           postinc0	equ	0xFEE
 17021                           wreg	equ	0xFE8
 17022                           postinc1	equ	0xFE6
 17023                           postdec1	equ	0xFE5
 17024                           fsr1h	equ	0xFE2
 17025                           fsr1l	equ	0xFE1
 17026                           indf2	equ	0xFDF
 17027                           postinc2	equ	0xFDE
 17028                           postdec2	equ	0xFDD
 17029                           fsr2h	equ	0xFDA
 17030                           fsr2l	equ	0xFD9
 17031                           status	equ	0xFD8
 17032                           
 17033 ;; *************** function _MyDelay *****************
 17034 ;; Defined at:
 17035 ;;		line 164 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\rtu.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;  ms              2   19[COMRAM] unsigned int 
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;		None
 17040 ;; Return value:  Size  Location     Type
 17041 ;;		None               void
 17042 ;; Registers used:
 17043 ;;		wreg, status,2, status,0
 17044 ;; Tracked objects:
 17045 ;;		On entry : 0/0
 17046 ;;		On exit  : 0/0
 17047 ;;		Unchanged: 0/0
 17048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17049 ;;      Params:         2       0       0       0       0       0       0
 17050 ;;      Locals:         0       0       0       0       0       0       0
 17051 ;;      Temps:          1       0       0       0       0       0       0
 17052 ;;      Totals:         3       0       0       0       0       0       0
 17053 ;;Total ram usage:        3 bytes
 17054 ;; Hardware stack levels used:    1
 17055 ;; Hardware stack levels required when called:    2
 17056 ;; This function calls:
 17057 ;;		Nothing
 17058 ;; This function is called by:
 17059 ;;		_Creat_Packet
 17060 ;;		_RTUInit
 17061 ;;		_beep
 17062 ;;		_main
 17063 ;;		_per_minute_reading
 17064 ;;		_per_second_reading
 17065 ;;		_rtc_setting
 17066 ;;		_data_to_center
 17067 ;;		_tx_packet
 17068 ;; This function uses a non-reentrant model
 17069 ;;
 17070                           
 17071                           	psect	text82
 17072  007B1C                     __ptext82:
 17073                           	opt stack 0
 17074  007B1C                     _MyDelay:
 17075                           	opt stack 25
 17076                           
 17077                           ;incstack = 0
 17078  007B1C  FFFF               	dw	65535
 17079                           
 17080                           ;rtu.c: 166: while(ms > 0)
 17081  007B1E  D00A               	goto	l755
 17082  007B20                     l8915:
 17083                           
 17084                           ;rtu.c: 167: {
 17085                           ;rtu.c: 168: _delay((unsigned long)((1)*(100000000/4000.0)));
 17086  007B20  0E19               	movlw	25
 17087  007B22  6E16               	movwf	??_MyDelay& (0+255),c
 17088  007B24  0E5D               	movlw	93
 17089  007B26                     u9197:
 17090  007B26  2EE8               	decfsz	wreg,f,c
 17091  007B28  D7FE               	goto	u9197
 17092  007B2A  2E16               	decfsz	??_MyDelay& (0+255),f,c
 17093  007B2C  D7FC               	goto	u9197
 17094                           
 17095                           ;rtu.c: 169: ms--;
 17096  007B2E  0614               	decf	MyDelay@ms,f,c
 17097  007B30  A0D8               	btfss	status,0,c
 17098  007B32  0615               	decf	MyDelay@ms+1,f,c
 17099  007B34                     l755:
 17100  007B34  5015               	movf	MyDelay@ms+1,w,c
 17101  007B36  1014               	iorwf	MyDelay@ms,w,c
 17102  007B38  B4D8               	btfsc	status,2,c
 17103  007B3A  0012               	return	
 17104  007B3C  FFFF               	dw	65535	; assembler added errata NOP
 17105  007B3E  D7F0               	goto	l8915
 17106  007B40  FFFF               	dw	65535	; errata NOP
 17107  007B42                     __end_of_MyDelay:
 17108                           	opt stack 0
 17109                           tblptru	equ	0xFF8
 17110                           tblptrh	equ	0xFF7
 17111                           tblptrl	equ	0xFF6
 17112                           tablat	equ	0xFF5
 17113                           prodh	equ	0xFF4
 17114                           prodl	equ	0xFF3
 17115                           intcon	equ	0xFF2
 17116                           intcon2	equ	0xFF1
 17117                           postinc0	equ	0xFEE
 17118                           wreg	equ	0xFE8
 17119                           postinc1	equ	0xFE6
 17120                           postdec1	equ	0xFE5
 17121                           fsr1h	equ	0xFE2
 17122                           fsr1l	equ	0xFE1
 17123                           indf2	equ	0xFDF
 17124                           postinc2	equ	0xFDE
 17125                           postdec2	equ	0xFDD
 17126                           fsr2h	equ	0xFDA
 17127                           fsr2l	equ	0xFD9
 17128                           status	equ	0xFD8
 17129                           
 17130 ;; *************** function _LCDInit *****************
 17131 ;; Defined at:
 17132 ;;		line 152 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 17133 ;; Parameters:    Size  Location     Type
 17134 ;;  style           1    wreg     unsigned char 
 17135 ;; Auto vars:     Size  Location     Type
 17136 ;;  style           1   29[COMRAM] unsigned char 
 17137 ;;  __i             1   30[COMRAM] unsigned char 
 17138 ;; Return value:  Size  Location     Type
 17139 ;;		None               void
 17140 ;; Registers used:
 17141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17142 ;; Tracked objects:
 17143 ;;		On entry : 0/0
 17144 ;;		On exit  : 0/0
 17145 ;;		Unchanged: 0/0
 17146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17147 ;;      Params:         0       0       0       0       0       0       0
 17148 ;;      Locals:         2       0       0       0       0       0       0
 17149 ;;      Temps:          1       0       0       0       0       0       0
 17150 ;;      Totals:         3       0       0       0       0       0       0
 17151 ;;Total ram usage:        3 bytes
 17152 ;; Hardware stack levels used:    1
 17153 ;; Hardware stack levels required when called:    4
 17154 ;; This function calls:
 17155 ;;		_LCDBusyLoop
 17156 ;;		_LCDByte
 17157 ;; This function is called by:
 17158 ;;		_RTUInit
 17159 ;; This function uses a non-reentrant model
 17160 ;;
 17161                           
 17162                           	psect	text83
 17163  0036D2                     __ptext83:
 17164                           	opt stack 0
 17165  0036D2                     _LCDInit:
 17166                           	opt stack 25
 17167                           
 17168                           ;incstack = 0
 17169  0036D2  FFFF               	dw	65535
 17170                           
 17171                           ;LCDInit@style stored from wreg
 17172  0036D4  6E1E               	movwf	LCDInit@style,c
 17173                           
 17174                           ;lcd_hd44780_pic18.c: 168: _delay((unsigned long)((30)*(10000000/4000.0)));
 17175  0036D6  0E4A               	movlw	74
 17176  0036D8  6E1D               	movwf	??_LCDInit& (0+255),c
 17177  0036DA  0E18               	movlw	24
 17178  0036DC                     u9207:
 17179  0036DC  2EE8               	decfsz	wreg,f,c
 17180  0036DE  D7FE               	goto	u9207
 17181  0036E0  2E1D               	decfsz	??_LCDInit& (0+255),f,c
 17182  0036E2  D7FC               	goto	u9207
 17183  0036E4  D000               	nop2	
 17184                           
 17185                           ;lcd_hd44780_pic18.c: 171: TRISB&=(~(0x0F<<4));
 17186  0036E6  0E0F               	movlw	15
 17187  0036E8  1693               	andwf	3987,f,c	;volatile
 17188                           
 17189                           ;lcd_hd44780_pic18.c: 173: TRISDbits.TRISD6=0;
 17190  0036EA  9C95               	bcf	3989,6,c	;volatile
 17191                           
 17192                           ;lcd_hd44780_pic18.c: 174: TRISDbits.TRISD2=0;
 17193  0036EC  9495               	bcf	3989,2,c	;volatile
 17194                           
 17195                           ;lcd_hd44780_pic18.c: 175: TRISDbits.TRISD3=0;
 17196  0036EE  9695               	bcf	3989,3,c	;volatile
 17197                           
 17198                           ;lcd_hd44780_pic18.c: 177: PORTB&=(~(0x0F<<4));
 17199  0036F0  0E0F               	movlw	15
 17200  0036F2  1681               	andwf	3969,f,c	;volatile
 17201                           
 17202                           ;lcd_hd44780_pic18.c: 179: (RD6=0);
 17203  0036F4  9C83               	bcf	3971,6,c	;volatile
 17204                           
 17205                           ;lcd_hd44780_pic18.c: 180: (RD3=0);
 17206  0036F6  9683               	bcf	3971,3,c	;volatile
 17207                           
 17208                           ;lcd_hd44780_pic18.c: 181: (RD2=0);
 17209  0036F8  9483               	bcf	3971,2,c	;volatile
 17210                           
 17211                           ;lcd_hd44780_pic18.c: 184: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17212  0036FA  F000               	nop	
 17213                           
 17214                           ;lcd_hd44780_pic18.c: 186: (RD6=1);
 17215  0036FC  8C83               	bsf	3971,6,c	;volatile
 17216                           
 17217                           ;lcd_hd44780_pic18.c: 187: PORTB|=((0b00000010)<<4);
 17218  0036FE  8A81               	bsf	3969,5,c	;volatile
 17219                           
 17220                           ;lcd_hd44780_pic18.c: 188: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17221  003700  D000               	nop2		;2 cycle nop
 17222                           
 17223                           ;lcd_hd44780_pic18.c: 189: (RD6=0);
 17224  003702  9C83               	bcf	3971,6,c	;volatile
 17225                           
 17226                           ;lcd_hd44780_pic18.c: 190: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17227  003704  D000               	nop2		;2 cycle nop
 17228                           
 17229                           ;lcd_hd44780_pic18.c: 193: LCDBusyLoop();
 17230  003706  ECD9  F01E         	call	_LCDBusyLoop	;wreg free
 17231                           
 17232                           ;lcd_hd44780_pic18.c: 198: (LCDByte(0b00101000,0));
 17233  00370A  0E00               	movlw	0
 17234  00370C  6E17               	movwf	LCDByte@isdata,c
 17235  00370E  0E28               	movlw	40
 17236  003710  EC54  F01E         	call	_LCDByte
 17237                           
 17238                           ;lcd_hd44780_pic18.c: 199: (LCDByte(0b00001100|style,0));
 17239  003714  0E00               	movlw	0
 17240  003716  6E17               	movwf	LCDByte@isdata,c
 17241  003718  501E               	movf	LCDInit@style,w,c
 17242  00371A  090C               	iorlw	12
 17243  00371C  EC54  F01E         	call	_LCDByte
 17244                           
 17245                           ;lcd_hd44780_pic18.c: 202: (LCDByte(0b01000000,0));
 17246  003720  0E00               	movlw	0
 17247  003722  6E17               	movwf	LCDByte@isdata,c
 17248  003724  0E40               	movlw	64
 17249  003726  EC54  F01E         	call	_LCDByte
 17250                           
 17251                           ;lcd_hd44780_pic18.c: 204: uint8_t __i;
 17252                           ;lcd_hd44780_pic18.c: 205: for(__i=0;__i<sizeof(__cgram);__i++)
 17253  00372A  0E00               	movlw	0
 17254  00372C  6E1F               	movwf	LCDInit@__i,c
 17255  00372E  D010               	goto	L29
 17256  003730                     l9563:
 17257                           
 17258                           ;lcd_hd44780_pic18.c: 206: (LCDByte(__cgram[__i],1));
 17259  003730  0E01               	movlw	1
 17260  003732  6E17               	movwf	LCDByte@isdata,c
 17261  003734  501F               	movf	LCDInit@__i,w,c
 17262  003736  0D01               	mullw	1
 17263  003738  0100               	movlb	0	; () banked
 17264  00373A  0EF6               	movlw	low ___cgram
 17265  00373C  24F3               	addwf	prodl,w,c
 17266  00373E  6ED9               	movwf	fsr2l,c
 17267  003740  0100               	movlb	0	; () banked
 17268  003742  0E00               	movlw	high ___cgram
 17269  003744  20F4               	addwfc	prodh,w,c
 17270  003746  6EDA               	movwf	fsr2h,c
 17271  003748  50DF               	movf	indf2,w,c
 17272  00374A  EC54  F01E         	call	_LCDByte
 17273  00374E  2A1F               	incf	LCDInit@__i,f,c
 17274  003750                     L29:
 17275  003750  0E07               	movlw	7
 17276  003752  641F               	cpfsgt	LCDInit@__i,c
 17277  003754  D7ED               	goto	l9563
 17278  003756  0012               	return	
 17279  003758  FFFF               	dw	65535	; errata NOP
 17280  00375A                     __end_of_LCDInit:
 17281                           	opt stack 0
 17282                           tblptru	equ	0xFF8
 17283                           tblptrh	equ	0xFF7
 17284                           tblptrl	equ	0xFF6
 17285                           tablat	equ	0xFF5
 17286                           prodh	equ	0xFF4
 17287                           prodl	equ	0xFF3
 17288                           intcon	equ	0xFF2
 17289                           intcon2	equ	0xFF1
 17290                           postinc0	equ	0xFEE
 17291                           wreg	equ	0xFE8
 17292                           postinc1	equ	0xFE6
 17293                           postdec1	equ	0xFE5
 17294                           fsr1h	equ	0xFE2
 17295                           fsr1l	equ	0xFE1
 17296                           indf2	equ	0xFDF
 17297                           postinc2	equ	0xFDE
 17298                           postdec2	equ	0xFDD
 17299                           fsr2h	equ	0xFDA
 17300                           fsr2l	equ	0xFD9
 17301                           status	equ	0xFD8
 17302                           
 17303 ;; *************** function _LCDByte *****************
 17304 ;; Defined at:
 17305 ;;		line 39 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;  c               1    wreg     unsigned char 
 17308 ;;  isdata          1   22[COMRAM] unsigned char 
 17309 ;; Auto vars:     Size  Location     Type
 17310 ;;  c               1   26[COMRAM] unsigned char 
 17311 ;;  temp            1   27[COMRAM] unsigned char 
 17312 ;;  ln              1   25[COMRAM] unsigned char 
 17313 ;;  hn              1   24[COMRAM] unsigned char 
 17314 ;; Return value:  Size  Location     Type
 17315 ;;		None               void
 17316 ;; Registers used:
 17317 ;;		wreg, status,2, status,0, cstack
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17323 ;;      Params:         1       0       0       0       0       0       0
 17324 ;;      Locals:         4       0       0       0       0       0       0
 17325 ;;      Temps:          1       0       0       0       0       0       0
 17326 ;;      Totals:         6       0       0       0       0       0       0
 17327 ;;Total ram usage:        6 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    3
 17330 ;; This function calls:
 17331 ;;		_LCDBusyLoop
 17332 ;; This function is called by:
 17333 ;;		_LCDInit
 17334 ;;		_LCDWriteString
 17335 ;;		_LCDWriteInt
 17336 ;;		_LCDGotoXY
 17337 ;;		_Eco_Test
 17338 ;;		_Eco_Replay
 17339 ;;		_Send_Packet
 17340 ;;		_Receive_Packet
 17341 ;;		_RTUInit
 17342 ;;		_main
 17343 ;;		_per_minute_reading
 17344 ;;		_per_second_reading
 17345 ;;		_rtc_setting
 17346 ;;		_data_to_center
 17347 ;;		_tx_packet
 17348 ;;		_DisplayReadings
 17349 ;;		_rtc_local_display
 17350 ;; This function uses a non-reentrant model
 17351 ;;
 17352                           
 17353                           	psect	text84
 17354  003CA8                     __ptext84:
 17355                           	opt stack 0
 17356  003CA8                     _LCDByte:
 17357                           	opt stack 23
 17358                           
 17359                           ;incstack = 0
 17360  003CA8  FFFF               	dw	65535
 17361                           
 17362                           ;LCDByte@c stored from wreg
 17363  003CAA  6E1B               	movwf	LCDByte@c,c
 17364                           
 17365                           ;lcd_hd44780_pic18.c: 48: uint8_t hn,ln;
 17366                           ;lcd_hd44780_pic18.c: 49: uint8_t temp;
 17367                           ;lcd_hd44780_pic18.c: 51: hn=c>>4;
 17368  003CAC  381B               	swapf	LCDByte@c,w,c
 17369  003CAE  0B0F               	andlw	15
 17370  003CB0  6E19               	movwf	LCDByte@hn,c
 17371                           
 17372                           ;lcd_hd44780_pic18.c: 52: ln=(c & 0x0F);
 17373  003CB2  501B               	movf	LCDByte@c,w,c
 17374  003CB4  0B0F               	andlw	15
 17375  003CB6  6E1A               	movwf	LCDByte@ln,c
 17376                           
 17377                           ;lcd_hd44780_pic18.c: 54: if(isdata==0)
 17378  003CB8  6617               	tstfsz	LCDByte@isdata,c
 17379  003CBA  D002               	goto	l21
 17380                           
 17381                           ;lcd_hd44780_pic18.c: 55: (RD2=0);
 17382  003CBC  9483               	bcf	3971,2,c	;volatile
 17383  003CBE  D001               	goto	l22
 17384  003CC0                     l21:
 17385                           
 17386                           ;lcd_hd44780_pic18.c: 56: else
 17387                           ;lcd_hd44780_pic18.c: 57: (RD2=1);
 17388  003CC0  8483               	bsf	3971,2,c	;volatile
 17389  003CC2                     l22:
 17390                           
 17391                           ;lcd_hd44780_pic18.c: 59: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17392  003CC2  F000               	nop	
 17393                           
 17394                           ;lcd_hd44780_pic18.c: 61: (RD6=1);
 17395  003CC4  8C83               	bsf	3971,6,c	;volatile
 17396                           
 17397                           ;lcd_hd44780_pic18.c: 65: temp=(PORTB & (~(0X0F<<4)))|((hn<<4));
 17398  003CC6  C019  F018         	movff	LCDByte@hn,??_LCDByte
 17399  003CCA  3A18               	swapf	??_LCDByte,f,c
 17400  003CCC  0EF0               	movlw	240
 17401  003CCE  1618               	andwf	??_LCDByte,f,c
 17402  003CD0  5081               	movf	3969,w,c	;volatile
 17403  003CD2  0B0F               	andlw	15
 17404  003CD4  1018               	iorwf	??_LCDByte,w,c
 17405  003CD6  6E1C               	movwf	LCDByte@temp,c
 17406                           
 17407                           ;lcd_hd44780_pic18.c: 66: PORTB=temp;
 17408  003CD8  C01C  FF81         	movff	LCDByte@temp,3969	;volatile
 17409                           
 17410                           ;lcd_hd44780_pic18.c: 68: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17411  003CDC  D000               	nop2		;2 cycle nop
 17412                           
 17413                           ;lcd_hd44780_pic18.c: 72: (RD6=0);
 17414  003CDE  9C83               	bcf	3971,6,c	;volatile
 17415                           
 17416                           ;lcd_hd44780_pic18.c: 74: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17417  003CE0  D000               	nop2		;2 cycle nop
 17418                           
 17419                           ;lcd_hd44780_pic18.c: 77: (RD6=1);
 17420  003CE2  8C83               	bsf	3971,6,c	;volatile
 17421                           
 17422                           ;lcd_hd44780_pic18.c: 79: temp=(PORTB & (~(0X0F<<4)))|((ln<<4));
 17423  003CE4  C01A  F018         	movff	LCDByte@ln,??_LCDByte
 17424  003CE8  3A18               	swapf	??_LCDByte,f,c
 17425  003CEA  0EF0               	movlw	240
 17426  003CEC  1618               	andwf	??_LCDByte,f,c
 17427  003CEE  5081               	movf	3969,w,c	;volatile
 17428  003CF0  0B0F               	andlw	15
 17429  003CF2  1018               	iorwf	??_LCDByte,w,c
 17430  003CF4  6E1C               	movwf	LCDByte@temp,c
 17431                           
 17432                           ;lcd_hd44780_pic18.c: 81: PORTB=temp;
 17433  003CF6  C01C  FF81         	movff	LCDByte@temp,3969	;volatile
 17434                           
 17435                           ;lcd_hd44780_pic18.c: 83: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17436  003CFA  D000               	nop2		;2 cycle nop
 17437                           
 17438                           ;lcd_hd44780_pic18.c: 87: (RD6=0);
 17439  003CFC  9C83               	bcf	3971,6,c	;volatile
 17440                           
 17441                           ;lcd_hd44780_pic18.c: 89: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17442  003CFE  D000               	nop2		;2 cycle nop
 17443                           
 17444                           ;lcd_hd44780_pic18.c: 91: LCDBusyLoop();
 17445  003D00  ECD9  F01E         	call	_LCDBusyLoop	;wreg free
 17446  003D04  0012               	return	
 17447  003D06  FFFF               	dw	65535	; errata NOP
 17448  003D08                     __end_of_LCDByte:
 17449                           	opt stack 0
 17450                           tblptru	equ	0xFF8
 17451                           tblptrh	equ	0xFF7
 17452                           tblptrl	equ	0xFF6
 17453                           tablat	equ	0xFF5
 17454                           prodh	equ	0xFF4
 17455                           prodl	equ	0xFF3
 17456                           intcon	equ	0xFF2
 17457                           intcon2	equ	0xFF1
 17458                           postinc0	equ	0xFEE
 17459                           wreg	equ	0xFE8
 17460                           postinc1	equ	0xFE6
 17461                           postdec1	equ	0xFE5
 17462                           fsr1h	equ	0xFE2
 17463                           fsr1l	equ	0xFE1
 17464                           indf2	equ	0xFDF
 17465                           postinc2	equ	0xFDE
 17466                           postdec2	equ	0xFDD
 17467                           fsr2h	equ	0xFDA
 17468                           fsr2l	equ	0xFD9
 17469                           status	equ	0xFD8
 17470                           
 17471 ;; *************** function _LCDBusyLoop *****************
 17472 ;; Defined at:
 17473 ;;		line 94 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\lcd_hd44780_pic18.c"
 17474 ;; Parameters:    Size  Location     Type
 17475 ;;		None
 17476 ;; Auto vars:     Size  Location     Type
 17477 ;;  status          1   21[COMRAM] unsigned char 
 17478 ;;  temp            1   20[COMRAM] unsigned char 
 17479 ;;  busy            1   19[COMRAM] unsigned char 
 17480 ;; Return value:  Size  Location     Type
 17481 ;;		None               void
 17482 ;; Registers used:
 17483 ;;		wreg, status,2, status,0
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17489 ;;      Params:         0       0       0       0       0       0       0
 17490 ;;      Locals:         3       0       0       0       0       0       0
 17491 ;;      Temps:          0       0       0       0       0       0       0
 17492 ;;      Totals:         3       0       0       0       0       0       0
 17493 ;;Total ram usage:        3 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:    2
 17496 ;; This function calls:
 17497 ;;		Nothing
 17498 ;; This function is called by:
 17499 ;;		_LCDByte
 17500 ;;		_LCDInit
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           	psect	text85
 17505  003DB2                     __ptext85:
 17506                           	opt stack 0
 17507  003DB2                     _LCDBusyLoop:
 17508                           	opt stack 23
 17509                           
 17510                           ;incstack = 0
 17511  003DB2  FFFF               	dw	65535
 17512                           
 17513                           ;lcd_hd44780_pic18.c: 98: uint8_t busy,status=0x00,temp;
 17514  003DB4  0E00               	movlw	0
 17515  003DB6  6E16               	movwf	LCDBusyLoop@status,c
 17516                           
 17517                           ;lcd_hd44780_pic18.c: 101: TRISB|=(0x0f<<4);
 17518  003DB8  0EF0               	movlw	240
 17519  003DBA  1293               	iorwf	3987,f,c	;volatile
 17520                           
 17521                           ;lcd_hd44780_pic18.c: 104: (RD3=1);
 17522  003DBC  8683               	bsf	3971,3,c	;volatile
 17523                           
 17524                           ;lcd_hd44780_pic18.c: 105: (RD2=0);
 17525  003DBE  9483               	bcf	3971,2,c	;volatile
 17526                           
 17527                           ;lcd_hd44780_pic18.c: 109: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17528  003DC0  F000               	nop	
 17529  003DC2                     l8215:
 17530                           
 17531                           ;lcd_hd44780_pic18.c: 113: {
 17532                           ;lcd_hd44780_pic18.c: 115: (RD6=1);
 17533  003DC2  8C83               	bsf	3971,6,c	;volatile
 17534                           
 17535                           ;lcd_hd44780_pic18.c: 118: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17536  003DC4  F000               	nop	
 17537                           
 17538                           ;lcd_hd44780_pic18.c: 120: status=(PORTB>>4);
 17539  003DC6  3881               	swapf	3969,w,c	;volatile
 17540  003DC8  0B0F               	andlw	15
 17541  003DCA  6E16               	movwf	LCDBusyLoop@status,c
 17542                           
 17543                           ;lcd_hd44780_pic18.c: 121: status=status<<4;
 17544  003DCC  3816               	swapf	LCDBusyLoop@status,w,c
 17545  003DCE  0BF0               	andlw	240
 17546  003DD0  6E16               	movwf	LCDBusyLoop@status,c
 17547                           
 17548                           ;lcd_hd44780_pic18.c: 123: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17549  003DD2  F000               	nop	
 17550                           
 17551                           ;lcd_hd44780_pic18.c: 126: (RD6=0);
 17552  003DD4  9C83               	bcf	3971,6,c	;volatile
 17553                           
 17554                           ;lcd_hd44780_pic18.c: 127: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17555  003DD6  D000               	nop2		;2 cycle nop
 17556                           
 17557                           ;lcd_hd44780_pic18.c: 129: (RD6=1);
 17558  003DD8  8C83               	bsf	3971,6,c	;volatile
 17559                           
 17560                           ;lcd_hd44780_pic18.c: 130: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17561  003DDA  F000               	nop	
 17562                           
 17563                           ;lcd_hd44780_pic18.c: 132: temp=(PORTB>>4);
 17564  003DDC  3881               	swapf	3969,w,c	;volatile
 17565  003DDE  0B0F               	andlw	15
 17566  003DE0  6E15               	movwf	LCDBusyLoop@temp,c
 17567                           
 17568                           ;lcd_hd44780_pic18.c: 133: temp&=0x0F;
 17569  003DE2  0E0F               	movlw	15
 17570  003DE4  1615               	andwf	LCDBusyLoop@temp,f,c
 17571                           
 17572                           ;lcd_hd44780_pic18.c: 135: status=status|temp;
 17573  003DE6  5016               	movf	LCDBusyLoop@status,w,c
 17574  003DE8  1015               	iorwf	LCDBusyLoop@temp,w,c
 17575  003DEA  6E16               	movwf	LCDBusyLoop@status,c
 17576                           
 17577                           ;lcd_hd44780_pic18.c: 137: busy=status & 0b10000000;
 17578  003DEC  5016               	movf	LCDBusyLoop@status,w,c
 17579  003DEE  0B80               	andlw	128
 17580  003DF0  6E14               	movwf	LCDBusyLoop@busy,c
 17581                           
 17582                           ;lcd_hd44780_pic18.c: 139: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 17583  003DF2  F000               	nop	
 17584                           
 17585                           ;lcd_hd44780_pic18.c: 141: (RD6=0);
 17586  003DF4  9C83               	bcf	3971,6,c	;volatile
 17587                           
 17588                           ;lcd_hd44780_pic18.c: 142: _delay((unsigned long)((1)*(10000000/4000000.0)));
 17589  003DF6  D000               	nop2		;2 cycle nop
 17590                           
 17591                           ;lcd_hd44780_pic18.c: 143: }while(busy);
 17592  003DF8  6614               	tstfsz	LCDBusyLoop@busy,c
 17593  003DFA  D7E3               	goto	l8215
 17594                           
 17595                           ;lcd_hd44780_pic18.c: 145: (RD3=0);
 17596  003DFC  9683               	bcf	3971,3,c	;volatile
 17597                           
 17598                           ;lcd_hd44780_pic18.c: 148: TRISB&=(~(0x0F<<4));
 17599  003DFE  0E0F               	movlw	15
 17600  003E00  1693               	andwf	3987,f,c	;volatile
 17601  003E02  0012               	return	
 17602  003E04  FFFF               	dw	65535	; errata NOP
 17603  003E06                     __end_of_LCDBusyLoop:
 17604                           	opt stack 0
 17605                           tblptru	equ	0xFF8
 17606                           tblptrh	equ	0xFF7
 17607                           tblptrl	equ	0xFF6
 17608                           tablat	equ	0xFF5
 17609                           prodh	equ	0xFF4
 17610                           prodl	equ	0xFF3
 17611                           intcon	equ	0xFF2
 17612                           intcon2	equ	0xFF1
 17613                           postinc0	equ	0xFEE
 17614                           wreg	equ	0xFE8
 17615                           postinc1	equ	0xFE6
 17616                           postdec1	equ	0xFE5
 17617                           fsr1h	equ	0xFE2
 17618                           fsr1l	equ	0xFE1
 17619                           indf2	equ	0xFDF
 17620                           postinc2	equ	0xFDE
 17621                           postdec2	equ	0xFDD
 17622                           fsr2h	equ	0xFDA
 17623                           fsr2l	equ	0xFD9
 17624                           status	equ	0xFD8
 17625                           
 17626 ;; *************** function _ISR *****************
 17627 ;; Defined at:
 17628 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\isr.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;		None               void
 17635 ;; Registers used:
 17636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17642 ;;      Params:         0       0       0       0       0       0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0
 17644 ;;      Temps:         14       0       0       0       0       0       0
 17645 ;;      Totals:        14       0       0       0       0       0       0
 17646 ;;Total ram usage:       14 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    1
 17649 ;; This function calls:
 17650 ;;		_SecondsInt
 17651 ;;		_USARTHandleRxInt
 17652 ;; This function is called by:
 17653 ;;		Interrupt level 2
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           	psect	intcode
 17658  000008                     __pintcode:
 17659                           	opt stack 0
 17660  000008                     _ISR:
 17661                           	opt stack 21
 17662                           
 17663                           ;incstack = 0
 17664  000008  FFFF               	dw	65535	; errata NOP
 17665  00000A  CFFA F006          	movff	pclath,??_ISR
 17666  00000E  CFFB F007          	movff	pclatu,??_ISR+1
 17667  000012  CFE9 F008          	movff	fsr0l,??_ISR+2
 17668  000016  CFEA F009          	movff	fsr0h,??_ISR+3
 17669  00001A  CFE1 F00A          	movff	fsr1l,??_ISR+4
 17670  00001E  CFE2 F00B          	movff	fsr1h,??_ISR+5
 17671  000022  CFD9 F00C          	movff	fsr2l,??_ISR+6
 17672  000026  CFDA F00D          	movff	fsr2h,??_ISR+7
 17673  00002A  CFF3 F00E          	movff	prodl,??_ISR+8
 17674  00002E  CFF4 F00F          	movff	prodh,??_ISR+9
 17675  000032  CFF6 F010          	movff	tblptrl,??_ISR+10
 17676  000036  CFF7 F011          	movff	tblptrh,??_ISR+11
 17677  00003A  CFF8 F012          	movff	tblptru,??_ISR+12
 17678  00003E  CFF5 F013          	movff	tablat,??_ISR+13
 17679                           
 17680                           ;isr.c: 9: if (RCIE && RCIF) {
 17681  000042  BA9D               	btfsc	3997,5,c	;volatile
 17682  000044  AA9E               	btfss	3998,5,c	;volatile
 17683  000046  D003               	goto	i2l339
 17684                           
 17685                           ;isr.c: 10: USARTHandleRxInt();
 17686  000048  ECAD  F01C         	call	_USARTHandleRxInt	;wreg free
 17687  00004C  D006               	goto	i2l340
 17688  00004E                     i2l339:
 17689                           
 17690                           ;isr.c: 12: }
 17691                           ;isr.c: 13: if(INT0IE && INT0IF) {
 17692  00004E  B8F2               	btfsc	intcon,4,c	;volatile
 17693  000050  A2F2               	btfss	intcon,1,c	;volatile
 17694  000052  D003               	goto	i2l340
 17695                           
 17696                           ;isr.c: 14: SecondsInt();
 17697  000054  EC6D  F03D         	call	_SecondsInt	;wreg free
 17698                           
 17699                           ;isr.c: 15: INT0IF = 0;
 17700  000058  92F2               	bcf	intcon,1,c	;volatile
 17701  00005A                     i2l340:
 17702  00005A  C013  FFF5         	movff	??_ISR+13,tablat
 17703  00005E  C012  FFF8         	movff	??_ISR+12,tblptru
 17704  000062  C011  FFF7         	movff	??_ISR+11,tblptrh
 17705  000066  C010  FFF6         	movff	??_ISR+10,tblptrl
 17706  00006A  C00F  FFF4         	movff	??_ISR+9,prodh
 17707  00006E  C00E  FFF3         	movff	??_ISR+8,prodl
 17708  000072  C00D  FFDA         	movff	??_ISR+7,fsr2h
 17709  000076  C00C  FFD9         	movff	??_ISR+6,fsr2l
 17710  00007A  C00B  FFE2         	movff	??_ISR+5,fsr1h
 17711  00007E  C00A  FFE1         	movff	??_ISR+4,fsr1l
 17712  000082  C009  FFEA         	movff	??_ISR+3,fsr0h
 17713  000086  C008  FFE9         	movff	??_ISR+2,fsr0l
 17714  00008A  C007  FFFB         	movff	??_ISR+1,pclatu
 17715  00008E  C006  FFFA         	movff	??_ISR,pclath
 17716  000092  0011               	retfie		f
 17717  000094  FFFF               	dw	65535	; errata NOP
 17718  000096                     __end_of_ISR:
 17719                           	opt stack 0
 17720                           pclatu	equ	0xFFB
 17721                           pclath	equ	0xFFA
 17722                           tblptru	equ	0xFF8
 17723                           tblptrh	equ	0xFF7
 17724                           tblptrl	equ	0xFF6
 17725                           tablat	equ	0xFF5
 17726                           prodh	equ	0xFF4
 17727                           prodl	equ	0xFF3
 17728                           intcon	equ	0xFF2
 17729                           intcon2	equ	0xFF1
 17730                           postinc0	equ	0xFEE
 17731                           fsr0h	equ	0xFEA
 17732                           fsr0l	equ	0xFE9
 17733                           wreg	equ	0xFE8
 17734                           postinc1	equ	0xFE6
 17735                           postdec1	equ	0xFE5
 17736                           fsr1h	equ	0xFE2
 17737                           fsr1l	equ	0xFE1
 17738                           indf2	equ	0xFDF
 17739                           postinc2	equ	0xFDE
 17740                           postdec2	equ	0xFDD
 17741                           fsr2h	equ	0xFDA
 17742                           fsr2l	equ	0xFD9
 17743                           status	equ	0xFD8
 17744                           
 17745 ;; *************** function _USARTHandleRxInt *****************
 17746 ;; Defined at:
 17747 ;;		line 76 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\usart_pic18.c"
 17748 ;; Parameters:    Size  Location     Type
 17749 ;;		None
 17750 ;; Auto vars:     Size  Location     Type
 17751 ;;  data            1    4[COMRAM] unsigned char 
 17752 ;; Return value:  Size  Location     Type
 17753 ;;		None               void
 17754 ;; Registers used:
 17755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17756 ;; Tracked objects:
 17757 ;;		On entry : 0/0
 17758 ;;		On exit  : 0/0
 17759 ;;		Unchanged: 0/0
 17760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17761 ;;      Params:         0       0       0       0       0       0       0
 17762 ;;      Locals:         1       0       0       0       0       0       0
 17763 ;;      Temps:          4       0       0       0       0       0       0
 17764 ;;      Totals:         5       0       0       0       0       0       0
 17765 ;;Total ram usage:        5 bytes
 17766 ;; Hardware stack levels used:    1
 17767 ;; This function calls:
 17768 ;;		Nothing
 17769 ;; This function is called by:
 17770 ;;		_ISR
 17771 ;; This function uses a non-reentrant model
 17772 ;;
 17773                           
 17774                           	psect	text87
 17775  00395A                     __ptext87:
 17776                           	opt stack 0
 17777  00395A                     _USARTHandleRxInt:
 17778                           	opt stack 21
 17779                           
 17780                           ;incstack = 0
 17781  00395A  FFFF               	dw	65535
 17782                           
 17783                           ;usart_pic18.c: 79: char data=RCREG;
 17784  00395C  CFAE F005          	movff	4014,USARTHandleRxInt@data	;volatile
 17785                           
 17786                           ;usart_pic18.c: 82: if(((UQEnd==128-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 17787  003960  5060               	movf	_UQEnd,w,c	;volatile
 17788  003962  0A7F               	xorlw	127
 17789  003964  A4D8               	btfss	status,2,c
 17790  003966  D003               	goto	i2l7167
 17791  003968  5061               	movf	_UQFront,w,c	;volatile
 17792  00396A  B4D8               	btfsc	status,2,c
 17793  00396C  D014               	goto	i2l7169
 17794  00396E                     i2l7167:
 17795  00396E  C061  F001         	movff	_UQFront,??_USARTHandleRxInt	;volatile
 17796  003972  6A02               	clrf	(??_USARTHandleRxInt+1)& (0+255),c
 17797  003974  BE01               	btfsc	??_USARTHandleRxInt& (0+255),7,c
 17798  003976  0602               	decf	(??_USARTHandleRxInt+1)& (0+255),f,c
 17799  003978  C060  F003         	movff	_UQEnd,??_USARTHandleRxInt+2	;volatile
 17800  00397C  6A04               	clrf	(??_USARTHandleRxInt+3)& (0+255),c
 17801  00397E  BE03               	btfsc	(??_USARTHandleRxInt+2)& (0+255),7,c
 17802  003980  0604               	decf	(??_USARTHandleRxInt+3)& (0+255),f,c
 17803  003982  0E01               	movlw	1
 17804  003984  2603               	addwf	??_USARTHandleRxInt+2,f,c
 17805  003986  0E00               	movlw	0
 17806  003988  2204               	addwfc	??_USARTHandleRxInt+3,f,c
 17807  00398A  5002               	movf	??_USARTHandleRxInt+1,w,c
 17808  00398C  1804               	xorwf	??_USARTHandleRxInt+3,w,c
 17809  00398E  E102               	bnz	i2u518_45
 17810  003990  5001               	movf	??_USARTHandleRxInt,w,c
 17811  003992  1803               	xorwf	??_USARTHandleRxInt+2,w,c
 17812  003994                     i2u518_45:
 17813  003994  B4D8               	btfsc	status,2,c
 17814  003996                     i2l7169:
 17815                           
 17816                           ;usart_pic18.c: 83: {
 17817                           ;usart_pic18.c: 85: UQFront++;
 17818  003996  2A61               	incf	_UQFront,f,c	;volatile
 17819                           
 17820                           ;usart_pic18.c: 87: }
 17821                           ;usart_pic18.c: 89: if(UQEnd==128-1)
 17822                           
 17823                           ;usart_pic18.c: 86: if(UQFront==128) UQFront=0;
 17824  003998  5060               	movf	_UQEnd,w,c	;volatile
 17825  00399A  0A7F               	xorlw	127
 17826  00399C  A4D8               	btfss	status,2,c
 17827  00399E  D003               	goto	i2l7177
 17828                           
 17829                           ;usart_pic18.c: 90: UQEnd=0;
 17830  0039A0  0E00               	movlw	0
 17831  0039A2  6E60               	movwf	_UQEnd,c	;volatile
 17832  0039A4  D001               	goto	i2l7179
 17833  0039A6                     i2l7177:
 17834                           
 17835                           ;usart_pic18.c: 91: else
 17836                           ;usart_pic18.c: 92: UQEnd++;
 17837  0039A6  2A60               	incf	_UQEnd,f,c	;volatile
 17838  0039A8                     i2l7179:
 17839                           
 17840                           ;usart_pic18.c: 94: URBuff[UQEnd]=data;
 17841  0039A8  5060               	movf	_UQEnd,w,c	;volatile
 17842  0039AA  0D01               	mullw	1
 17843  0039AC  0101               	movlb	1	; () banked
 17844  0039AE  0E80               	movlw	low _URBuff	;volatile
 17845  0039B0  24F3               	addwf	prodl,w,c
 17846  0039B2  6ED9               	movwf	fsr2l,c
 17847  0039B4  0101               	movlb	1	; () banked
 17848  0039B6  0E01               	movlw	high _URBuff	;volatile
 17849  0039B8  20F4               	addwfc	prodh,w,c
 17850  0039BA  6EDA               	movwf	fsr2h,c
 17851  0039BC  C005  FFDF         	movff	USARTHandleRxInt@data,indf2
 17852                           
 17853                           ; BSR set to: 1
 17854                           ;usart_pic18.c: 96: if(UQFront==-1) UQFront=0;
 17855  0039C0  2861               	incf	_UQFront,w,c	;volatile
 17856  0039C2  A4D8               	btfss	status,2,c
 17857  0039C4  D002               	goto	i2l841
 17858                           
 17859                           ; BSR set to: 1
 17860  0039C6  0E00               	movlw	0
 17861  0039C8  6E61               	movwf	_UQFront,c	;volatile
 17862  0039CA                     i2l841:
 17863                           
 17864                           ; BSR set to: 1
 17865  0039CA  0012               	return	
 17866  0039CC  FFFF               	dw	65535	; errata NOP
 17867  0039CE                     __end_of_USARTHandleRxInt:
 17868                           	opt stack 0
 17869                           pclatu	equ	0xFFB
 17870                           pclath	equ	0xFFA
 17871                           tblptru	equ	0xFF8
 17872                           tblptrh	equ	0xFF7
 17873                           tblptrl	equ	0xFF6
 17874                           tablat	equ	0xFF5
 17875                           prodh	equ	0xFF4
 17876                           prodl	equ	0xFF3
 17877                           intcon	equ	0xFF2
 17878                           intcon2	equ	0xFF1
 17879                           postinc0	equ	0xFEE
 17880                           fsr0h	equ	0xFEA
 17881                           fsr0l	equ	0xFE9
 17882                           wreg	equ	0xFE8
 17883                           postinc1	equ	0xFE6
 17884                           postdec1	equ	0xFE5
 17885                           fsr1h	equ	0xFE2
 17886                           fsr1l	equ	0xFE1
 17887                           indf2	equ	0xFDF
 17888                           postinc2	equ	0xFDE
 17889                           postdec2	equ	0xFDD
 17890                           fsr2h	equ	0xFDA
 17891                           fsr2l	equ	0xFD9
 17892                           status	equ	0xFD8
 17893                           
 17894 ;; *************** function _SecondsInt *****************
 17895 ;; Defined at:
 17896 ;;		line 173 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit\rtu.c"
 17897 ;; Parameters:    Size  Location     Type
 17898 ;;		None
 17899 ;; Auto vars:     Size  Location     Type
 17900 ;;		None
 17901 ;; Return value:  Size  Location     Type
 17902 ;;		None               void
 17903 ;; Registers used:
 17904 ;;		wreg, status,2, status,0
 17905 ;; Tracked objects:
 17906 ;;		On entry : 0/0
 17907 ;;		On exit  : 0/0
 17908 ;;		Unchanged: 0/0
 17909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17910 ;;      Params:         0       0       0       0       0       0       0
 17911 ;;      Locals:         0       0       0       0       0       0       0
 17912 ;;      Temps:          0       0       0       0       0       0       0
 17913 ;;      Totals:         0       0       0       0       0       0       0
 17914 ;;Total ram usage:        0 bytes
 17915 ;; Hardware stack levels used:    1
 17916 ;; This function calls:
 17917 ;;		Nothing
 17918 ;; This function is called by:
 17919 ;;		_ISR
 17920 ;; This function uses a non-reentrant model
 17921 ;;
 17922                           
 17923                           	psect	text88
 17924  007ADA                     __ptext88:
 17925                           	opt stack 0
 17926  007ADA                     _SecondsInt:
 17927                           	opt stack 21
 17928                           
 17929                           ; BSR set to: 1
 17930                           ;incstack = 0
 17931  007ADA  FFFF               	dw	65535
 17932                           
 17933                           ;rtu.c: 175: RC1 = ~RC1;
 17934  007ADC  7282               	btg	3970,1,c	;volatile
 17935                           
 17936                           ;rtu.c: 176: sec_flag = 1;
 17937  007ADE  0E01               	movlw	1
 17938  007AE0  6E6A               	movwf	_sec_flag,c
 17939                           
 17940                           ;rtu.c: 177: seconds++;
 17941  007AE2  2A6B               	incf	_seconds,f,c
 17942                           
 17943                           ;rtu.c: 178: if(seconds == 60)
 17944  007AE4  506B               	movf	_seconds,w,c
 17945  007AE6  0A3C               	xorlw	60
 17946  007AE8  A4D8               	btfss	status,2,c
 17947  007AEA  D005               	goto	i2l762
 17948                           
 17949                           ;rtu.c: 179: {
 17950                           ;rtu.c: 180: min_flag = 1;
 17951  007AEC  0E01               	movlw	1
 17952  007AEE  0100               	movlb	0	; () banked
 17953  007AF0  6FF5               	movwf	_min_flag& (0+255),b
 17954                           
 17955                           ;rtu.c: 181: seconds = 0;
 17956  007AF2  0E00               	movlw	0
 17957  007AF4  6E6B               	movwf	_seconds,c
 17958  007AF6                     i2l762:
 17959  007AF6  0012               	return	
 17960  007AF8  FFFF               	dw	65535	; errata NOP
 17961  007AFA                     __end_of_SecondsInt:
 17962                           	opt stack 0
 17963                           pclatu	equ	0xFFB
 17964                           pclath	equ	0xFFA
 17965                           tblptru	equ	0xFF8
 17966                           tblptrh	equ	0xFF7
 17967                           tblptrl	equ	0xFF6
 17968                           tablat	equ	0xFF5
 17969                           prodh	equ	0xFF4
 17970                           prodl	equ	0xFF3
 17971                           intcon	equ	0xFF2
 17972                           intcon2	equ	0xFF1
 17973                           postinc0	equ	0xFEE
 17974                           fsr0h	equ	0xFEA
 17975                           fsr0l	equ	0xFE9
 17976                           wreg	equ	0xFE8
 17977                           postinc1	equ	0xFE6
 17978                           postdec1	equ	0xFE5
 17979                           fsr1h	equ	0xFE2
 17980                           fsr1l	equ	0xFE1
 17981                           indf2	equ	0xFDF
 17982                           postinc2	equ	0xFDE
 17983                           postdec2	equ	0xFDD
 17984                           fsr2h	equ	0xFDA
 17985                           fsr2l	equ	0xFD9
 17986                           status	equ	0xFD8
 17987                           pclatu	equ	0xFFB
 17988                           pclath	equ	0xFFA
 17989                           tblptru	equ	0xFF8
 17990                           tblptrh	equ	0xFF7
 17991                           tblptrl	equ	0xFF6
 17992                           tablat	equ	0xFF5
 17993                           prodh	equ	0xFF4
 17994                           prodl	equ	0xFF3
 17995                           intcon	equ	0xFF2
 17996                           intcon2	equ	0xFF1
 17997                           postinc0	equ	0xFEE
 17998                           fsr0h	equ	0xFEA
 17999                           fsr0l	equ	0xFE9
 18000                           wreg	equ	0xFE8
 18001                           postinc1	equ	0xFE6
 18002                           postdec1	equ	0xFE5
 18003                           fsr1h	equ	0xFE2
 18004                           fsr1l	equ	0xFE1
 18005                           indf2	equ	0xFDF
 18006                           postinc2	equ	0xFDE
 18007                           postdec2	equ	0xFDD
 18008                           fsr2h	equ	0xFDA
 18009                           fsr2l	equ	0xFD9
 18010                           status	equ	0xFD8
 18011                           
 18012                           	psect	rparam
 18013  0000                     pclatu	equ	0xFFB
 18014                           pclath	equ	0xFFA
 18015                           tblptru	equ	0xFF8
 18016                           tblptrh	equ	0xFF7
 18017                           tblptrl	equ	0xFF6
 18018                           tablat	equ	0xFF5
 18019                           prodh	equ	0xFF4
 18020                           prodl	equ	0xFF3
 18021                           intcon	equ	0xFF2
 18022                           intcon2	equ	0xFF1
 18023                           postinc0	equ	0xFEE
 18024                           fsr0h	equ	0xFEA
 18025                           fsr0l	equ	0xFE9
 18026                           wreg	equ	0xFE8
 18027                           postinc1	equ	0xFE6
 18028                           postdec1	equ	0xFE5
 18029                           fsr1h	equ	0xFE2
 18030                           fsr1l	equ	0xFE1
 18031                           indf2	equ	0xFDF
 18032                           postinc2	equ	0xFDE
 18033                           postdec2	equ	0xFDD
 18034                           fsr2h	equ	0xFDA
 18035                           fsr2l	equ	0xFD9
 18036                           status	equ	0xFD8


Data Sizes:
    Strings     774
    Constant    57
    Data        8
    BSS         334
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     88     108
    BANK0           128     60     126
    BANK1           256      0     256
    BANK2           256      4       4
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    modf@iptr	PTR  size(2) Largest target is 3
		 -> float_to_int@integral(COMRAM[3]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_80(CODE[2]), STR_79(CODE[5]), STR_78(CODE[4]), STR_77(CODE[2]), 
		 -> STR_76(CODE[4]), STR_75(CODE[2]), STR_74(CODE[5]), STR_73(CODE[4]), 
		 -> STR_72(CODE[2]), STR_71(CODE[4]), STR_70(CODE[19]), STR_69(CODE[11]), 
		 -> STR_68(CODE[12]), STR_67(CODE[17]), STR_66(CODE[17]), STR_65(CODE[14]), 
		 -> STR_64(CODE[13]), STR_63(CODE[18]), STR_62(CODE[18]), STR_61(CODE[17]), 
		 -> STR_60(CODE[2]), STR_59(CODE[2]), STR_58(CODE[22]), STR_57(CODE[2]), 
		 -> STR_56(CODE[2]), STR_55(CODE[21]), STR_54(CODE[21]), STR_53(CODE[17]), 
		 -> STR_52(CODE[20]), STR_51(CODE[13]), STR_50(CODE[13]), STR_49(CODE[13]), 
		 -> STR_48(CODE[14]), STR_47(CODE[18]), STR_46(CODE[13]), STR_45(CODE[18]), 
		 -> STR_44(CODE[18]), STR_43(CODE[17]), STR_42(CODE[15]), STR_41(CODE[13]), 
		 -> STR_40(CODE[16]), STR_39(CODE[13]), STR_38(CODE[18]), STR_37(CODE[18]), 
		 -> STR_36(CODE[17]), STR_35(CODE[15]), STR_34(CODE[13]), STR_33(CODE[16]), 
		 -> STR_32(CODE[15]), STR_31(CODE[11]), STR_30(CODE[15]), STR_29(CODE[11]), 
		 -> STR_28(CODE[15]), STR_27(CODE[11]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[14]), STR_23(CODE[14]), STR_22(CODE[15]), STR_21(CODE[12]), 
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[18]), STR_17(CODE[17]), 
		 -> STR_16(CODE[15]), STR_15(CODE[18]), STR_14(CODE[23]), STR_13(CODE[17]), 
		 -> STR_12(CODE[20]), STR_11(CODE[11]), STR_10(CODE[17]), STR_9(CODE[12]), 
		 -> STR_8(CODE[16]), STR_7(CODE[18]), STR_6(CODE[14]), STR_5(CODE[17]), 
		 -> STR_4(CODE[9]), STR_3(CODE[16]), STR_2(CODE[9]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_local_display
    _rtc_setting->_tx_packet
    _Receive_Packet->_Eco_Replay
    _Eco_Replay->_LCDWriteString
    _Creat_RTC_Packet->_Calculate_CRC
    _write_packet_to_page->_rom_byte_write
    _rom_byte_write->_WriteI2C
    _Creat_Packet->_MyDelay
    _Add_Reading_To_Packet->_Calculate_CRC
    _get_current_readings->_float_to_int
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _float_to_int->_modf
    _modf->___ftadd
    ___ftneg->___ftmul
    ___attoft->___fttol
    ___lwtoft->___ftpack
    _DisplayReadings->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _data_to_center->_tx_packet
    _tx_packet->_Send_Packet
    _beep->_MyDelay
    _Send_Packet->_Eco_Test
    _Eco_Test->_LCDWriteString
    _LCDWriteString->_LCDByte
    _Check_Busy_Line->_USARTDataAvailable
    _USARTFlushBuffer->_USARTDataAvailable
    _USARTFlushBuffer->_USARTReadData
    _read_packet_from_page->_rom_byte_read
    _rom_byte_read->_WriteI2C
    _clear_rom->_WriteI2C
    _LCDGotoXY->_LCDByte
    _RTUInit->___ftadd
    _ds1307_set_date_time->_WriteI2C
    _ds1307_set_date_time->_bin2bcd
    _ds1307_init->_WriteI2C
    _ds1307_init->_bcd2bin
    _ds1307_init->_bin2bcd
    _ds1307_get_time->_WriteI2C
    _ds1307_get_time->_bcd2bin
    _ds1307_get_date->_WriteI2C
    _ds1307_get_date->_bcd2bin
    _WriteI2C->_IdleI2C
    ___lbtoft->___ftpack
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftadd->___ftneg
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in COMRAM

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_per_minute_reading
    _main->_per_second_reading
    _per_second_reading->_get_current_readings
    _per_minute_reading->_get_current_readings
    _local_display->_get_current_readings
    _get_current_readings->_voltage_to_hum
    _get_current_readings->_voltage_to_temp
    _voltage_to_temp->_pow
    _voltage_to_hum->_pow
    _pow->_exp

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_per_minute_reading
    _main->_per_second_reading

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 1440069
                                             59 BANK0      1     1      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            _MyDelay
                            _RTUInit
                               _beep
                     _data_to_center
                    _ds1307_get_time
                             _getkey
                      _local_display
                 _per_minute_reading
                 _per_second_reading
                        _rtc_setting
 ---------------------------------------------------------------------------------
 (1) _rtc_setting                                          5     5      0  142944
                                             47 COMRAM     5     5      0
                   _Creat_RTC_Packet
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            _MyDelay
                     _Receive_Packet
                        _Write_b_eep
                               _beep
                    _ds1307_get_time
               _ds1307_set_date_time
                          _tx_packet
 ---------------------------------------------------------------------------------
 (2) _Receive_Packet                                       6     6      0   35223
                                             36 COMRAM     6     6      0
                          _Check_CRC
                         _Eco_Replay
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _Eco_Replay                                           4     4      0   17321
                                             32 COMRAM     4     4      0
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _Check_CRC                                           15    15      0     473
                                             19 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (2) _Creat_RTC_Packet                                     7     7      0    4167
                                             31 COMRAM     7     7      0
                      _Calculate_CRC
                       _Clear_Packet
                       _Creat_Packet
 ---------------------------------------------------------------------------------
 (1) _per_second_reading                                   7     7      0  408268
                                             56 BANK0      3     3      0
                                              0 BANK2      4     4      0
              _Add_Reading_To_Packet
                       _Clear_Packet
                       _Creat_Packet
                    _DisplayReadings
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _MyDelay
                        _Write_b_eep
                               _beep
               _get_current_readings
              _read_packet_from_page
                          _tx_packet
               _write_packet_to_page
 ---------------------------------------------------------------------------------
 (1) _per_minute_reading                                   7     7      0  408268
                                             56 BANK0      3     3      0
                                              0 BANK2      4     4      0
              _Add_Reading_To_Packet
                       _Clear_Packet
                       _Creat_Packet
                    _DisplayReadings
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _MyDelay
                        _Write_b_eep
                               _beep
               _get_current_readings
              _read_packet_from_page
                          _tx_packet
               _write_packet_to_page
 ---------------------------------------------------------------------------------
 (2) _write_packet_to_page                                 9     7      2     864
                                             30 COMRAM     9     7      2
                     _rom_byte_write
 ---------------------------------------------------------------------------------
 (3) _rom_byte_write                                       8     5      3     500
                                             22 COMRAM     8     5      3
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _Creat_Packet                                         2     1      1    3787
                                             22 COMRAM     2     1      1
                            _MyDelay
                    _ds1307_get_time
 ---------------------------------------------------------------------------------
 (2) _Add_Reading_To_Packet                               22    14      8    1405
                                             31 COMRAM    22    14      8
                      _Calculate_CRC
 ---------------------------------------------------------------------------------
 (3) _Calculate_CRC                                       12    10      2     136
                                             19 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _local_display                                        1     1      0  308078
                                             87 COMRAM     1     1      0
                    _DisplayReadings
               _get_current_readings
 ---------------------------------------------------------------------------------
 (2) _get_current_readings                                19    19      0  273331
                                             41 BANK0     15    15      0
                            _BusyADC
                           _CloseADC
                         _ConvertADC
                            _OpenADC
                            _ReadADC
                         _SetChanADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                       _float_to_int
                     _voltage_to_hum
                    _voltage_to_temp
 ---------------------------------------------------------------------------------
 (3) _voltage_to_temp                                     18    15      3  119004
                                             23 BANK0     18    15      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
                                _pow
 ---------------------------------------------------------------------------------
 (3) _voltage_to_hum                                      18    15      3  119004
                                             23 BANK0     18    15      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6  103878
                                              6 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   33700
                                             73 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                 13    10      3   55605
                                             80 COMRAM     7     4      3
                                              0 BANK0      6     6      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     513
                                             73 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   14028
                                             61 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     630
                                             19 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    2046
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3014
                                             34 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   15461
                                             61 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     540
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    7393
                                             61 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4037
                                             46 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3020
                                             27 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2912
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _float_to_int                                        17    14      3   20278
                                             70 COMRAM    17    14      3
                            ___ftmul
                            ___fttol
                               _modf
 ---------------------------------------------------------------------------------
 (4) _modf                                                 9     4      5   11618
                                             61 COMRAM     9     4      5
                           ___attoft
                            ___ftadd
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     833
                                             19 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     504
                                             46 COMRAM     3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___attoft                                             4     1      3    2943
                                             34 COMRAM     4     1      3
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3072
                                             27 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _SetChanADC                                           2     2      0      31
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              2     0      2       0
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OpenADC                                              3     2      1     201
                                             19 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CloseADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayReadings                                      7     7      0   34707
                                             42 COMRAM     7     7      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteInt                                         14    11      3    9675
                                             28 COMRAM    14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     741
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     753
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _getkey                                               3     1      2     111
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _data_to_center                                       2     2      0   94196
                                             47 COMRAM     2     2      0
                       _Clear_Packet
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _MyDelay
                        _Write_b_eep
                               _beep
                          _clear_rom
              _read_packet_from_page
                          _tx_packet
 ---------------------------------------------------------------------------------
 (2) _tx_packet                                            2     2      0   59611
                                             45 COMRAM     2     2      0
                            _LCDByte
                     _LCDWriteString
                            _MyDelay
                        _Send_Packet
                               _beep
 ---------------------------------------------------------------------------------
 (3) _beep                                                 2     0      2    4146
                                             22 COMRAM     2     0      2
                            _MyDelay
 ---------------------------------------------------------------------------------
 (3) _Send_Packet                                          7     7      0   34975
                                             38 COMRAM     7     7      0
                           _Eco_Test
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _Eco_Test                                             6     6      0   17469
                                             32 COMRAM     6     6      0
                    _Check_Busy_Line
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      31
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       4     2      2   11750
                                             28 COMRAM     4     2      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _Check_Busy_Line                                      4     4      0     139
                                             20 COMRAM     4     4      0
                 _USARTDataAvailable
                   _USARTFlushBuffer
 ---------------------------------------------------------------------------------
 (4) _USARTFlushBuffer                                     0     0      0      34
                 _USARTDataAvailable
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (4) _USARTReadData                                        1     1      0      34
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _USARTDataAvailable                                   1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_packet_from_page                               10     8      2     657
                                             30 COMRAM    10     8      2
                      _rom_byte_read
 ---------------------------------------------------------------------------------
 (3) _rom_byte_read                                        8     6      2     275
                                             22 COMRAM     8     6      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _clear_rom                                            4     4      0     167
                                             22 COMRAM     4     4      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            2     1      1    7671
                                             28 COMRAM     2     1      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (3) _Clear_Packet                                         1     1      0     102
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTUInit                                              5     5      0   36126
                                             61 COMRAM     4     4      0
                            _LCDByte
                            _LCDInit
                            _MyDelay
                            _OpenI2C
                         _Read_b_eep
                          _USARTInit
                        _Write_b_eep
                            ___ftadd
                            ___ftmul
                           ___lbtoft
                    _ds1307_get_date
                    _ds1307_get_time
                        _ds1307_init
               _ds1307_set_date_time
 ---------------------------------------------------------------------------------
 (2) _ds1307_set_date_time                                 0     0      0     170
                            _IdleI2C
                           _WriteI2C
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (2) _ds1307_init                                          1     1      0     411
                                             22 COMRAM     1     1      0
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (3) _bin2bcd                                              3     3      0     139
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ds1307_get_time                                      0     0      0     164
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (2) _ds1307_get_date                                      0     0      0     164
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (3) _bcd2bin                                              3     3      0     133
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             2     2      0      31
                                             20 COMRAM     2     2      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2764
                                             27 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    7145
                                             31 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    7060
                                             49 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2733
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    1485
                                             19 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            4     2      2     108
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2    1494
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     139
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _MyDelay                                              3     1      2    3268
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              3     3      0    5639
                                             28 COMRAM     3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              6     5      1    5333
                                             22 COMRAM     6     5      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          3     3      0     176
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                 14    14      0      23
                                              5 COMRAM    14    14      0
                         _SecondsInt
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (10) _USARTHandleRxInt                                    5     5      0      23
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (10) _SecondsInt                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MyDelay
   _RTUInit
     _LCDByte
       _LCDBusyLoop
     _LCDInit
       _LCDBusyLoop
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _OpenI2C
     _Read_b_eep
     _USARTInit
     _Write_b_eep
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lbtoft
       ___ftpack
     _ds1307_get_date
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_get_time
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_init
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
       _bin2bcd
     _ds1307_set_date_time
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _bin2bcd
   _beep
     _MyDelay
   _data_to_center
     _Clear_Packet
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Write_b_eep
     _beep
       _MyDelay
     _clear_rom
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _read_packet_from_page
       _rom_byte_read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _beep
         _MyDelay
   _ds1307_get_time
     _IdleI2C
     _ReadI2C
     _WriteI2C
       _IdleI2C
     _bcd2bin
   _getkey
   _local_display
     _DisplayReadings
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _get_current_readings
       _BusyADC
       _CloseADC
       _ConvertADC
       _OpenADC
       _ReadADC
       _SetChanADC
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft
         ___ftpack
       _float_to_int
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
         _modf
           ___attoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
       _voltage_to_hum
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _voltage_to_temp
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
   _per_minute_reading
     _Add_Reading_To_Packet
       _Calculate_CRC
     _Clear_Packet
     _Creat_Packet
       _MyDelay
       _ds1307_get_time
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
         _bcd2bin
     _DisplayReadings
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Write_b_eep
     _beep
       _MyDelay
     _get_current_readings
       _BusyADC
       _CloseADC
       _ConvertADC
       _OpenADC
       _ReadADC
       _SetChanADC
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft
         ___ftpack
       _float_to_int
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
         _modf
           ___attoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
       _voltage_to_hum
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _voltage_to_temp
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _read_packet_from_page
       _rom_byte_read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _beep
         _MyDelay
     _write_packet_to_page
       _rom_byte_write
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _per_second_reading
     _Add_Reading_To_Packet
       _Calculate_CRC
     _Clear_Packet
     _Creat_Packet
       _MyDelay
       _ds1307_get_time
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
         _bcd2bin
     _DisplayReadings
       _LCDByte
         _LCDBusyLoop
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Write_b_eep
     _beep
       _MyDelay
     _get_current_readings
       _BusyADC
       _CloseADC
       _ConvertADC
       _OpenADC
       _ReadADC
       _SetChanADC
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft
         ___ftpack
       _float_to_int
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___fttol
         _modf
           ___attoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
       _voltage_to_hum
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _voltage_to_temp
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
     _read_packet_from_page
       _rom_byte_read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _beep
         _MyDelay
     _write_packet_to_page
       _rom_byte_write
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _rtc_setting
     _Creat_RTC_Packet
       _Calculate_CRC
       _Clear_Packet
       _Creat_Packet
         _MyDelay
         _ds1307_get_time
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
           _bcd2bin
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Receive_Packet
       _Check_CRC
       _Eco_Replay
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _USARTDataAvailable
       _USARTFlushBuffer
         _USARTDataAvailable
         _USARTReadData
       _USARTReadData
       _USARTWriteChar
     _Write_b_eep
     _beep
       _MyDelay
     _ds1307_get_time
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_set_date_time
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _bin2bcd
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _beep
         _MyDelay

 _ISR (ROOT)
   _SecondsInt
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      4       4       9        1.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3C      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     58      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1EE      15        0.0%
DATA                 0      0     1EE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 05 14:44:46 2016

          ?_get_current_readings 0001                     ?_LCDBusyLoop 0001  
                   ___altoft@exp 002B                                _c 0062  
              tx_packet@attempts 002E                      _SSPSTATbits 000FC7  
                  ___altoft@sign 002C                               l21 3CC0  
                             l22 3CC2                               l63 3F24  
                             l59 25F6                               l96 3B36  
                             l99 3B66                               _h1 00C6  
                             _h2 00C9                     ___awdiv@sign 0019  
                             _t1 00CC                               _t2 00CF  
                             _hr 0066                ??_Check_Busy_Line 0015  
            ___wmul@multiplicand 0016               USARTInit@baud_rate 0014  
                    __CFG_OSC$HS 000000                     ___ftadd@exp1 003D  
                   ___ftadd@exp2 003C                     ___ftadd@sign 003B  
                            l111 3AA0                              l105 3A60  
                            l114 3AA6                              l212 2FB6  
                            l108 3A86                              l221 3004  
                            l206 2F88                              l230 2F08  
                            l215 2FBC                              l224 3028  
                            l209 2FA2                              l233 2F72  
                            l242 32F0                              l218 2FE0  
                            l251 3324                              l172 3942  
                            l500 3E98                              l245 3308  
                            l165 38E6                              l405 1D6C  
                            l421 24E4                              l254 3332  
                            l239 32D6                              l263 3868  
                            l159 37DA                              l511 27E4  
                            l248 3316                              l272 38A4  
                            l257 3338                              l169 3940  
                            l266 3882                              l275 38B2  
                            l532 229C                              l524 21AA  
                            l269 3896                              l541 1604  
                            l278 38B8                              l542 16CA  
                            l519 2EBE                              l810 3842  
                            l539 1538                              l817 7A4E  
           ??_USARTDataAvailable 0014                              l498 3E8E  
                            l770 3C20                              l755 7B34  
                            l771 3C44                              l748 00C6  
                            l852 3EE0                              l772 3C28  
                            l845 3FD2                              l773 3C30  
                            l774 3C38                              l847 3FD0  
                            l775 3C40                              _RB1 007C09  
                            _RC0 007C10                              _RC1 007C11  
                            _RD0 007C18                              _RC2 007C12  
                            _RD1 007C19                              _RE0 007C20  
                            _RD2 007C1A                              _RE1 007C21  
                            _RD3 007C1B                              _RC5 007C15  
                            _RE2 007C22                              _RD4 007C1C  
                            _RD5 007C1D                              _RD6 007C1E  
                            _RD7 007C1F                              _ISR 0008  
                 ?_USARTReadData 0001                     __CFG_BOR$OFF 000000  
                            _day 0063                              _dow 0065  
                            _min 0067                              _exp 12DC  
                            _log 22A0                              _sec 0069  
                            _pow 1A38             __size_of_Write_b_eep 003C  
                   ___awmod@sign 0019                              prod 000FF3  
                            wreg 000FE8                ??_ds1307_get_date 0017  
        LCDWriteInt@field_length 001F                ??_ds1307_get_time 0017  
                __end_of_LCDByte 3D08                  __end_of_LCDInit 375A  
                   __CFG_LVP$OFF 000000                     ?_LCDWriteInt 001D  
                           ?_ISR 0001                      LCDByte@temp 001C  
                   ___ftdiv@cntr 0038                     ___ftdiv@sign 003D  
                   __CFG_WDT$OFF 000000                             l1214 3F50  
                           l1150 7A66                             l1082 0C96  
                           l1251 7C52                             l1252 7C54  
                           l1273 3B16                             l1177 7CB8  
                           l1276 3AE0                             l1285 3B0C  
                           l1702 2D30                             l1650 19A8  
                           l1635 18D0                             l1636 1A34  
                           l1670 2C28                             l1639 18FC  
                           l1682 29B6                             l1659 19C4  
                           l1667 2C58                             l1907 23C6  
                           l1692 7BF8                             l1676 348C  
                           l1845 1BD8                             l1598 30DA  
                           l1865 14E6                             l1849 1BCC  
                           l1868 13A4                             l1885 33F8  
                           l1877 26F8                             l1869 14DA  
                           l1879 26EC                             l1889 28CE  
                           l9001 1A96                             ?_exp 0051  
                           l9101 35AC                             l9013 1B46  
                           ?_log 004A                             l8215 3DC2  
                           l8311 34D8                             l9033 3104  
                           l9009 1B20                             l8331 190A  
                           l9131 258E                             l9123 257A  
                           l8181 305C                             l8325 18DE  
                           l8413 2946                             l9213 7B84  
                           l9045 313A                             l9061 316C  
                           l9133 25A2                             l9117 2534  
                           l8309 34CC                             l8191 30B8  
                           l8183 307A                             l8175 3044  
                           l8423 296E                             l9151 3EF4  
                           l9047 3142                             l9039 3124  
                           l9135 25C0                             l8353 195C  
                           l8417 2956                             l9209 7B74  
                           l9153 3EF8                             l8273 3EDE  
                           l8265 3EC4                             l8257 3EA8  
                           l9065 317A                             l9057 3162  
                           l9049 3146                             l9081 3566  
                           l9129 258A                             l8187 3090  
                           l8179 3052                             l8355 1966  
                           l8347 193A                             l8427 297E  
                           l8283 3FAA                             l9411 2248  
                           l8443 345E                             l8507 3392  
                           l9307 24E2                             l8189 30AE  
                           l8373 19E0                             l8365 1998  
                           l8357 196E                             l9149 3EF0  
                           l9157 3EFE                             l9421 2270  
                           l9093 3594                             l9085 3574  
                           l9077 354A                             l9325 2E38  
                           l8383 1A10                             l8367 19A2  
                           l8359 1976                             l9159 3F18  
                           l9087 357C                             l8439 342E  
                           l9271 3A04                             l9319 2E22  
                           l8393 28EE                             l9601 37D2  
                           l8289 3FCE                             l8713 329A  
                           l9417 2260                             l9089 3580  
                           l9097 359E                             l8481 2CE2  
                           l8449 348A                             l8641 2658  
                           l9259 7C6A                             l8555 7AAE  
                           l8715 32B0                             l8491 2D0A  
                           l8459 2C78                             l8811 3C50  
                           l8619 3E2C                             l8571 2BC4  
                           l9267 39DE                             l9275 23D6  
                           l9355 2EA6                             l8549 7A6C  
                           l9621 3928                             l8557 7AB2  
                           l8709 3278                             l8717 32B4  
                           l9437 229A                             l8805 3D8A  
                           l8477 2CD2                             l8813 3C5C  
                           l8565 2B9E                             l8653 2AE8  
                           l8645 2672                             l8637 264A  
                           l9293 247A                             l9277 23D8  
                           l8399 2914                             l9391 21EE  
                           l8495 2D20                             l8487 2CFA  
                           l8591 2C02                             l8655 2B6A  
                           l8831 22E8                             l8489 2D06  
                           l8673 284C                             l8825 22C2  
                           l9297 24A0                             l9563 3730  
                           l8915 7B20                             l8739 3AEC  
                           l8781 3E7E                             l8685 288A  
                           l8853 132E                             l9581 31E8  
                           ?_pow 0086                             l8775 3E66  
                           l8951 278C                             l8847 12F6  
                           l9575 31BE                             l9593 3794  
                           l8697 322E                             l8945 2774  
                           l8689 2898                             l8881 14B0  
                           l9905 1670                             l9921 16B2  
                           l8955 279C                             l8859 1360  
                           l9819 1D6A                             l9907 1674  
                           l9835 1522                             l8789 3E96  
                           l8973 27CC                             l9941 064C  
                           l9909 167A                             l9943 0650  
                           STR_1 7FC8                             STR_2 7FDB  
                           STR_3 7E79                             STR_4 7FD2  
                           l8995 1A74                             l9971 0732  
                           STR_5 7E47                             STR_6 7F1C  
                           STR_7 7DBD                             STR_8 7E89  
                           STR_9 7F90                             l9969 072E  
                           l9997 0810                             l9999 0814  
                     _Eco_Replay 2DFC                             u6131 28E4  
                           _PEIE 007F96                             u6221 2C6E  
                           u6310 33BA                             u6151 28FE  
                           u6160 2906                             u6240 2C96  
                           u7121 24F4                             _RCIE 007CED  
                           _RCIF 007CF5                             u6245 2C8E  
                           u6270 2CE8                             u6318 33BC  
                           u6361 2B94                             u7420 7A64  
                           u6381 2BAE                             u6445 263A  
                           u6525 287A                             u7325 24DA  
                           u6390 2BB6                             u9007 012A  
                           u5921 189A                             u9017 01EC  
                           u5905 34B2                             u6490 2816  
                           u5931 18AE                             u9107 0412  
                           u9027 0222                             u6820 14A4  
                           u9117 0428                             u9037 0238  
                           u6725 3D76                             u9207 36DC  
                           u9127 048E                             u9047 029E  
                           u7455 31A6                             u9137 04A4  
                           u9057 02B4                             u6745 22B4  
                           u6498 2818                             u9147 050A  
                           u9067 031A                             u7475 377E  
                           u9157 0520                             u9077 0330  
                           u6790 137A                             u9167 0586  
                           u9087 0396                             u9177 059C  
                           u9097 03AC                             u8617 0D4E  
                           u7915 3F5C                             u9187 2FD4  
                           u6795 1372                             u8707 1646  
                           u8627 0DB2                             u7916 3F5E  
                           u6796 137C                             u9197 7B26  
                           u8717 1680                             u8637 159E  
                           u6975 1AAE                             u8807 3B70  
                           u8727 2E30                             u8647 15AE  
                           u6985 1AFC                             u8817 0638  
                           u8737 2E5C                             u8657 15C8  
                           u8907 21C8                             u8827 071A  
                           u8747 2E6C                             u8667 15D8  
                           u8917 2204                             u8837 07FC  
                           u8757 2E84                             u8677 160C  
                           u8927 2214                             u8847 08DE  
                           u8767 11A2                             u8687 161C  
                           u8937 2258                             u8857 3BEE  
                           u8777 11BA                             u8697 1636  
                           u8947 273A                             u8867 1840  
                           u8787 0F7E                             u8957 274A  
                           u8877 1858                             u8797 0F96  
                           u8967 2784                             u8887 2198  
                           u8977 3E76                             u8897 21B8  
                           u8987 394C                             u8997 0114  
                           _Hum1 00EB                             _Hum2 00ED  
    __size_of_per_minute_reading 0236           __end_of_USARTWriteChar 7A5A  
                           _beep 7A94                float_to_int@value 0047  
                           _main 09C6                     ___ftpack@arg 0014  
                           _modf 3646               __size_of_LCDGotoXY 0044  
                   ___ftpack@exp 0017                             _year 006C  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr0l 000FE9                             fsr2h 000FDA  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                USARTReadData@data 0014  
                           exp@x 0051                             log@x 004A  
      __size_of_Creat_RTC_Packet 008E                             pclat 000FFA  
            _voltage_to_hum$2970 00A6              _voltage_to_hum$2967 009D  
            _voltage_to_hum$2968 00A0              _voltage_to_hum$2969 00A3  
                           pow@x 0086                             pow@y 0089  
                  Send_Packet@ts 0028                             prodh 000FF4  
                  ?_float_to_int 0047                             prodl 000FF3  
                __end_of_RTUInit 061A                             start 0096  
    __size_of_per_second_reading 0224                  __end_of_IdleI2C 7A7E  
                    getkey@msecs 0014                     rtc_setting@i 0034  
                   rtc_setting@s 0032                     ___ftmul@cntr 002D  
                   ___ftmul@sign 002E                  _voltage_to_temp 1EC2  
                __end_of_BusyADC 7A6A                  __end_of_ReadI2C 7C5E  
                __end_of_ReadADC 7A4A                  __end_of_MyDelay 7B42  
                          ??_ISR 0006                  __end_of_OpenI2C 7B1C  
                __end_of_OpenADC 7CBE                     ___fttol@exp1 0022  
                          ??_exp 0054                            ??_log 004D  
                   ___fttol@lval 001E                            ??_pow 0058  
                  ___attoft@sign 0026                ?_USARTHandleRxInt 0001  
           _DisplayReadings$1261 002E             _DisplayReadings$1267 002F  
                ??_rom_byte_read 0019                    __CFG_OSCS$OFF 000000  
                __end_of_bcd2bin 7B68                            l10201 2A34  
                          l10025 08F2                            l10203 2A36  
                          l10027 08F6                            l10213 2A58  
                          l11101 0C06                            l11013 09EA  
                          l10207 2A44                            l10127 1DAA  
                          l11015 09F2                            l10091 37EE  
                          l10403 3BFC                            l11051 0ABA  
                          l10093 37F2                            l10229 2A90  
                          l10157 1E50                            l10087 37E6  
                          l10415 3C14                            l11047 0A9A  
                          l11241 383A                            l10089 37EA  
                          l10097 37F8                            l10177 29C6  
                          l11235 381C                            l11091 0BC8  
                          l11083 0B94                            l11075 0B60  
                          l11067 0B2C                            l11059 0AF8  
                          l11237 3826                            l10277 016A  
                          l11239 3830                            l10295 01F2  
                          l10529 3FE2                            l10641 0DDE  
                          l10625 0D8E                            l10561 0C84  
                          l10467 172C                            l10459 1704  
                          l10539 3FF6                 bcd2bin@bcd_value 0015  
                          l10573 0CB4                            l10581 0CFA  
                          l10565 0C8C                            l10495 17B0  
                          l10399 3BE8                            l10673 0E78  
                          l10771 0E9C                            l10739 1230  
                          l10683 10E8                            l10837 100C  
                          l10781 0EBC                            l10765 12AE  
                          l10677 10D2                            l10863 108A  
                          l10695 1126                            l10793 0F02  
             Calculate_CRC@count 001F                            ?_beep 0017  
                          ?_main 0001                            ?_modf 003E  
                __end_of___awdiv 3186               ??_USARTHandleRxInt 0001  
                          _EEADR 000FA9                  __end_of___ftadd 1A38  
                          STR_10 7E58                            STR_11 7FBD  
                          STR_20 7FFC                            STR_12 7D4E  
                          STR_13 7CFE                            STR_21 7F78  
                          STR_22 7EC6                            STR_30 7EB7  
                          STR_14 7CF8                            STR_31 7FA7  
                          STR_23 7EF2                            STR_15 7DCF  
                          STR_32 7EA8                            STR_40 7E69  
                          STR_24 7F0E                            STR_16 7ED5  
                          STR_41 7F44                            STR_25 7FB2  
                          STR_33 7E69                            STR_17 7E14  
                          STR_42 7E99                            STR_26 7F5E  
                          STR_34 7F44                            STR_50 7F2A  
                          STR_18 7DAB                            STR_43 7E03  
                          STR_19 7FFC                            STR_27 7FA7  
                          STR_51 7F51                            STR_35 7E99  
                          STR_44 7D87                            STR_28 7EA8  
                          STR_36 7E03                            STR_52 7D3A  
                __end_of___awmod 35B8                            STR_45 7D99  
                          STR_29 7FA7                            STR_53 7E25  
                          STR_61 7DE1                            STR_37 7D87  
                          STR_46 7F37                            STR_62 7D87  
                          STR_38 7D99                            STR_70 7D62  
                          STR_54 7D25                            STR_55 7D25  
                          STR_63 7D99                            STR_71 7FEE  
                          STR_39 7F37                            STR_47 7D75  
                          STR_64 7F37                            STR_80 7FFA  
                          STR_72 7D85                            STR_56 7FFC  
                          STR_48 7EE4                            STR_57 7FFC  
                          STR_73 7FF6                            STR_49 7F6B  
                          STR_65 7F00                            STR_74 7FE4  
                          STR_66 7E36                            STR_58 7D0F  
                          STR_75 7FFA                            STR_67 7DF2  
                          STR_76 7FF2                            STR_68 7F84  
                          STR_77 7D85                            STR_69 7F9C  
                          STR_78 7FF6                            STR_79 7FE9  
                __end_of___ftdiv 2C5C                     LCDInit@style 001E  
                __end_of___ftneg 7C08                 USARTWriteChar@ch 0014  
                __end_of___ftmul 29BA                  ___awdiv@divisor 0016  
                __end_of___ftsub 3F9E                  __end_of___fttol 2D34  
                __end_of_bin2bcd 7B8E                            i2l340 005A  
                          i2l339 004E                            i2l841 39CA  
                          i2l762 7AF6                  ___awdiv@counter 0018  
                          _RCREG 000FAE                            _SPBRG 000FAF  
                          _PORTB 000F81                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
              rtc_setting@result 0033                            _TXREG 000FAD  
                          _UQEnd 0060                    __CFG_PWRT$OFF 000000  
                   ___lltoft@exp 0024                            _Temp1 00EF  
                          _Temp2 00F1             __end_of_Creat_Packet 3BE4  
                 Read_b_eep@badd 0014                    ___awtoft@sign 001F  
             float_to_int@points 004F           Write_b_eep@GIE_BIT_VAL 0017  
                          _floor 25FA                            _ldexp 27E8  
                          _frexp 3366                            _errno 00F3  
                          _month 0068                    ___ftpack@sign 0018  
                     _ConvertADC 7A22                            tablat 000FF5  
                          pow@yi 0093               __size_of_USARTInit 0082  
                ?_USARTWriteChar 0001                            status 000FD8  
 __size_of_read_packet_from_page 0084                   ??_float_to_int 004A  
               __end_of_Eco_Test 27E8    __end_of_read_packet_from_page 37DE  
                    exp@exponent 0083                    ??_ds1307_init 0017  
               __end_of_CloseADC 7A3C           ??_get_current_readings 0058  
                    ldexp@newexp 004D                  __initialization 3D08  
                    log@exponent 004D               __size_of_Check_CRC 011E  
                   __end_of_beep 7AAA                     __end_of_main 0C2A  
                   __end_of_modf 36D2                       _Read_b_eep 7A7E  
                  ??_Send_Packet 0027                   _data_to_center 16CE  
     Creat_RTC_Packet@packet_crc 0025                  ??_USARTReadData 0014  
                         ??_beep 0019                           ??_main 0059  
                  ___fttol@sign1 001D                           ??_modf 0043  
              __end_of_LCDGotoXY 3F28      Add_Reading_To_Packet@CRC_HI 0032  
                  __activetblptr 000002                    LCDByte@isdata 0017  
                      ??_LCDByte 0018                        ??_LCDInit 001D  
                     _SetChanADC 7AC2                 ??_rom_byte_write 001A  
           _voltage_to_temp$2963 009D             _voltage_to_temp$2964 00A0  
           _voltage_to_temp$2965 00A3             _voltage_to_temp$2966 00A6  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
                         ?_floor 003E                           ?_ldexp 004A  
                         ?_frexp 0014                 __end_of___altoft 3524  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
                         _EEDATA 000FA8                           _EECON2 000FA7  
               ___awdiv@dividend 0014                 __end_of___attoft 3DB2  
               __end_of_WriteI2C 3B1A                 __end_of___awtoft 3E52  
               __end_of___ftpack 30DE                 __end_of___lbtoft 7BB6  
                     _SecondsInt 7ADA               rtc_setting@mem_loc 0031  
                    ?_Eco_Replay 0001                        ??_RTUInit 003E  
               __end_of___lltoft 3CA8                           _PACKET 0100  
                         _INT0IE 007F94                           _INT0IF 007F91  
                    OpenI2C@slew 0014                           i2l7167 396E  
                         i2l7177 39A6                           i2l7169 3996  
                         i2l7179 39A8            __size_of_Clear_Packet 0030  
               __end_of___lwtoft 7BDE                        ??_IdleI2C 0014  
              ?_USARTFlushBuffer 0001          __end_of_voltage_to_temp 200C  
                         _SSPADD 000FC8                           _SSPBUF 000FC9  
                      ??_BusyADC 0014                 Check_Busy_Line@n 0018  
                      ??_ReadI2C 0014                        ??_ReadADC 0016  
 __size_of_Add_Reading_To_Packet 0194           __size_of_Calculate_CRC 0072  
                         _URBuff 0180    __end_of_Add_Reading_To_Packet 1D70  
                      ??_MyDelay 0016               DisplayReadings@dec 0031  
                  Clear_Packet@i 0014               ??_USARTFlushBuffer 0015  
                      ??_OpenI2C 0015                        ??_OpenADC 0015  
                 _LCDWriteString 322A                        ??_bcd2bin 0014  
                         ___ftge 33FC           __end_of_data_to_center 1888  
                         ___wmul 7C08                  Receive_Packet@n 0029  
                      ??___awdiv 0018                        ??___ftadd 0038  
                      ??___awmod 0018                        ??___ftdiv 0035  
                      ??___ftneg 0032                        ??___ftmul 0026  
                      ??___ftsub 0044                        ??___fttol 0018  
                      ??_bin2bcd 0014                           _device 0064  
              _Current_Read_Page 00E7                           _getkey 3BE4  
         __size_of_local_display 002A              __end_of_ds1307_init 3032  
           __size_of_LCDBusyLoop 0054                           clear_0 3D10  
                         clear_1 3D22                           clear_2 3D2E  
               ___awdiv@quotient 001A                  ___awmod@divisor 0016  
   __end_of_write_packet_to_page 322A                  ___awmod@counter 0018  
              __end_of_USARTInit 3860                           floor@i 0041  
                _DisplayReadings 1D70                           floor@x 003E  
          ___ftmul@f3_as_product 002A                     LCDWriteInt@i 0029  
                   LCDWriteInt@j 0027                  Send_Packet@data 002D  
                   __mediumconst 7CBE              __end_of_Send_Packet 22A0  
                   _Clear_Packet 7C5E                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
              __end_of_Check_CRC 24E8                      ?_ConvertADC 0001  
               __end_ofexp@coeff 7CDD                     ?_rtc_setting 0001  
           __size_of_LCDWriteInt 0112                 __end_oflog@coeff 7CF8  
                     __accesstop 0080          __end_of__initialization 3D54  
                     ___altoft@c 0023                       ___ftadd@f1 0032  
                     ___ftadd@f2 0035                       ___ftge@ff1 0014  
                     ___ftge@ff2 0017                 _Creat_RTC_Packet 35B8  
         __end_of_LCDWriteString 32CE                  _Check_Busy_Line 3E52  
                   eval_poly@res 0047                       ___ftdiv@f1 002F  
                     ___ftdiv@f2 0032                       ___ftdiv@f3 0039  
                     ___attoft@c 0023                        LCDByte@hn 0019  
                      LCDByte@ln 001A                   rtc_setting@atm 0030  
                     ___ftneg@f1 002F                       ___awtoft@c 001C  
                     ___lbtoft@c 001F                       ___ftmul@f1 0020  
                     ___ftmul@f2 0023                       ___ftsub@f1 003E  
                     ___ftsub@f2 0041                       ___fttol@f1 0014  
                 __pcstackCOMRAM 0001                     __pidataBANK0 7A2A  
                Check_CRC@CRC_HI 001B                  ?_data_to_center 0001  
             ds1307_init@seconds 0017                       ___lltoft@c 001C  
  get_current_readings@ADCResult 00B5                      ?_Read_b_eep 0014  
                  __end_of_floor 26FC                    __end_of_ldexp 28D2  
                  __end_of_frexp 33FC                  _ds1307_get_date 32CE  
                _ds1307_get_time 3860              __size_of_Eco_Replay 00C6  
                    _Current_Pos 005C               __size_of_clear_rom 007C  
                     ___lwtoft@c 001C            __size_of_Creat_Packet 0064  
                  _Calculate_CRC 39CE                      ?_SetChanADC 0001  
           __end_of_float_to_int 2DFC                        ?_Eco_Test 0001  
                      ?_CloseADC 0001    __size_of_ds1307_set_date_time 00BA  
                        ??_floor 0041                          ??_ldexp 004F  
            Receive_Packet@count 0028                          ??_frexp 0019  
                Check_CRC@length 0020              Receive_Packet@msecs 0026  
                    ?_SecondsInt 0001                    _local_display 3FD6  
   Add_Reading_To_Packet@CRC_LOW 0033                       __pbssBANK0 00BC  
                     __pbssBANK1 0100                     tx_packet@res 002F  
             __size_of_eval_poly 00E2                 ?_voltage_to_temp 0097  
                ?_LCDWriteString 001D                      _ds1307_init 2F7C  
        __size_of_Receive_Packet 01E4          __size_of_voltage_to_hum 014A  
                   _Creat_Packet 3B80                          ?___ftge 0014  
        __end_of_DisplayReadings 1EC2                          ?___wmul 0014  
                        ?_getkey 0014                        ?___altoft 0023  
                      ?___attoft 0023              __size_of_ConvertADC 0008  
                    _Send_Packet 2156                        ?_WriteI2C 0001  
                      ?___awtoft 001C                        ?___ftpack 0014  
                      ?___lbtoft 001C                    ??_Write_b_eep 0017  
                 ?_Calculate_CRC 0014                        ?___lltoft 001C  
                      ?___lwtoft 001C      __size_of_USARTDataAvailable 0048  
                        _LCDByte 3CA8                          _LCDInit 36D2  
                        _INTEDG0 007F8E                       ??_Eco_Test 0021  
               ??_USARTWriteChar 0014         per_minute_reading@result 0200  
                     ??_CloseADC 0014                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5       __end_of_per_minute_reading 10B8  
           float_to_int@decimals 004E                   ?_local_display 0001  
        __end_of_Check_Busy_Line 3E9C               USARTWriteInt@F3686 00C1  
                        _SSPSTAT 000FC7        __size_of_USARTHandleRxInt 0074  
              Check_Busy_Line@ms 0016                          _RTUInit 009A  
             __size_of_tx_packet 00E6              __size_of_Read_b_eep 0016  
                        _UQFront 0061                          _IdleI2C 7A6A  
     __end_of_per_second_reading 12DC                __end_of_clear_rom 395A  
                        _BusyADC 7A5A             _write_packet_to_page 3186  
                        _ReadI2C 7C32                          _ReadADC 7A3C  
                        _MyDelay 7B1C                          _OpenI2C 7AFA  
                        _OpenADC 7C8E                          __Hparam 0000  
            __size_of_SetChanADC 0018          __end_of_ds1307_get_date 3366  
                        __Lparam 0000          __end_of_ds1307_get_time 38DE  
           float_to_int@integral 0053                          _bcd2bin 7B42  
                        ___cgram 00F6                  __size_of___ftge 0094  
                        ___awdiv 30DE                          ___ftadd 1888  
                        ___awmod 3524                          ___ftdiv 2B82  
                        ___ftneg 7BDE                  __size_of___wmul 002A  
                        ___ftmul 28D2                          ___ftsub 3F64  
                        ___fttol 2C5C                          _bin2bcd 7B68  
                   Check_CRC@CRC 0021                       ??___altoft 0027  
                __size_of_getkey 0064                     Check_CRC@sum 001D  
            __size_of_SecondsInt 0020                       ??___attoft 0026  
                        __pcinit 3D08                       ??_WriteI2C 0015  
                     ??___awtoft 001F                       ??___ftpack 0019  
                     ??___lbtoft 001F                __end_of_eval_poly 2B82  
                        __ramtop 0600                 rom_byte_read@lsb 001D  
               rom_byte_read@msb 001C                       ??___lltoft 0020  
                        __ptext0 09C6                          __ptext1 0C2A  
                        __ptext2 14EA                          __ptext3 2DFC  
                        __ptext4 23CA                          __ptext5 35B8  
                        __ptext6 10B8                          beep@del 0017  
                        __ptext7 0E82                          __ptext8 3186  
                        __ptext9 3B1A            __end_of_rom_byte_read 3AB2  
                     ??___lwtoft 001F                     __size_of_ISR 008E  
                   __size_of_exp 020E                     __size_of_log 012A  
                 _Destination_ID 005E                     __size_of_pow 01A4  
               ___awmod@dividend 0014                          _seconds 006B  
           data_to_center@result 0030                        _LCDGotoXY 3EE4  
            __end_of_Write_b_eep 3F64                        Eco_Test@n 0026  
                 OpenADC@config2 0014             end_of_initialization 3D54  
                   ??_Eco_Replay 0021                          exp@sign 0085  
          ?_write_packet_to_page 001F                    __Lmediumconst 7CBE  
           __size_of_rtc_setting 0258                          pow@sign 0092  
               Send_Packet@count 002A            _read_packet_from_page 375A  
                      _RCSTAbits 000FAB    __size_of_get_current_readings 03AC  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE              voltage_to_temp@temp 009A  
               ?_DisplayReadings 0001                      bcd2bin@temp 0016  
          rom_byte_write@address 0017                  ??_Calculate_CRC 0016  
          __size_of_float_to_int 00C8                __end_of_tx_packet 2AA0  
      __size_of_USARTFlushBuffer 0018               __end_of_Eco_Replay 2EC2  
       __end_of_Creat_RTC_Packet 3646            __end_of_USARTReadData 3FD6  
              LCDWriteString@msg 001D                     Eco_Replay@ts 0022  
          Creat_RTC_Packet@crc_h 0023            Creat_RTC_Packet@crc_l 0024  
                      _USARTInit 37DE                        _TRISCbits 000F94  
                      _TRISDbits 000F95                  ??_local_display 0058  
                     ?_LCDGotoXY 001D                     Eco_Test@data 0023  
   read_packet_from_page@address 0026                 ?_Check_Busy_Line 0001  
                   ??_ConvertADC 0014                       _trig_temp1 00E1  
                     _trig_temp2 00E4     read_packet_from_page@page_no 001F  
                      _Check_CRC 23CA                       main@choice 00BB  
                     LCDInit@__i 001F                      ___ftdiv@exp 003C  
                      _TXSTAbits 000FAC                       LCDGotoXY@x 001E  
                     LCDGotoXY@y 001D                        MyDelay@ms 0014  
               ??_data_to_center 0030                     _float_to_int 2D34  
   get_current_readings@voltage1 00A9     get_current_readings@voltage2 00AC  
   get_current_readings@voltage3 00AF     get_current_readings@voltage4 00B2  
                   Send_Packet@n 002C                   _Receive_Packet 14EA  
               ?_ds1307_get_date 0001            _Add_Reading_To_Packet 1BDC  
                    ___ftmul@exp 0029                   _voltage_to_hum 200C  
               ?_ds1307_get_time 0001                    ??_LCDBusyLoop 0014  
                   ??_Read_b_eep 0016                   __end_of___ftge 3490  
               Check_CRC@CRC_LOW 001C                   __end_of___wmul 7C32  
per_minute_reading@reading_count 0203                   __end_of_getkey 3C48  
             __end_of_ConvertADC 7A2A                      _Write_b_eep 3F28  
       read_packet_from_page@lsb 0025         read_packet_from_page@msb 0024  
per_second_reading@reading_count 0203                       floor@expon 0044  
                   ??_SetChanADC 0014               _Current_Write_Page 00E9  
            start_initialization 3D08           float_to_int@fractional 0050  
                     ?_USARTInit 0014                       eval_poly@d 0041  
                     eval_poly@n 0043                       eval_poly@x 003E  
                    __end_of_ISR 0096                       ldexp@value 004A  
            bin2bcd@binary_value 0014                      __end_of_exp 14EA  
                    __end_of_log 23CA                      __end_of_pow 1BDC  
                  ??_LCDWriteInt 0020                __size_of_Eco_Test 00EC  
               WriteI2C@data_out 0016                 _USARTHandleRxInt 395A  
                   ??_SecondsInt 0001                 ??_LCDWriteString 001F  
              __size_of_CloseADC 000A           ??_write_packet_to_page 0021  
                     frexp@value 0014               __end_of_Read_b_eep 7A94  
                     ?_Check_CRC 0001          __size_of_rom_byte_write 0066  
         __end_of_Receive_Packet 16CE           ?_read_packet_from_page 001F  
         __end_of_voltage_to_hum 2156                    bin2bcd@retval 0015  
                   ?_ds1307_init 0001      write_packet_to_page@address 0025  
   __end_of_ds1307_set_date_time 2F7C               __end_of_SetChanADC 7ADA  
                       ??___ftge 001A                         ??___wmul 0018  
                  clear_rom@page 0018      write_packet_to_page@page_no 001F  
                    __pdataBANK0 00F6                    clear_rom@word 001A  
                       ??_getkey 0016                     ?_Send_Packet 0001  
           Receive_Packet@result 002A               __end_of_SecondsInt 7AFA  
            __end_of_LCDBusyLoop 3E06                __size_of___altoft 0094  
              __size_of___attoft 0054                __size_of_WriteI2C 0068  
                      _Source_ID 005F                         ?_LCDByte 0017  
              __size_of___awtoft 004C                         ?_LCDInit 0001  
              __size_of___ftpack 00AC                __size_of___lbtoft 0028  
              __size_of___lltoft 0060                      __pbssCOMRAM 0059  
                       LCDByte@c 001B                __size_of___lwtoft 0028  
                  __pcstackBANK0 0080                    __pcstackBANK2 0200  
                    ??_LCDGotoXY 001E              __end_of__stringdata 7FFE  
                       ?_RTUInit 0001                      bin2bcd@temp 0016  
                       ?_IdleI2C 0001                 LCDWriteInt@F3701 00BC  
       Add_Reading_To_Packet@CRC 0034                   Check_CRC@count 001F  
                       ?_BusyADC 0001                         ?_ReadI2C 0001  
                       ?_ReadADC 0014              __end_of_LCDWriteInt 25FA  
                ?_Receive_Packet 0001                         ?_MyDelay 0014  
                ?_voltage_to_hum 0097                         ?_OpenI2C 0014  
                       ?_OpenADC 0014           ?_Add_Reading_To_Packet 0020  
             _per_minute_reading 0E82                        _clear_rom 38DE  
                      __pintcode 0008                         ?_bcd2bin 0001  
                  __pmediumconst 7CBE             rom_byte_read@address 0017  
                       ?___awdiv 0014                         ?___ftadd 0032  
       __size_of_voltage_to_temp 014A                         ?___awmod 0014  
                       ?___ftdiv 002F                         ?___ftneg 002F  
                       ?___ftmul 0020                         ?___ftsub 003E  
                       ?___fttol 0014                         ?_bin2bcd 0001  
                    RTUInit@high 0040               _per_second_reading 10B8  
               _USARTFlushBuffer 7AAA       __end_of_USARTDataAvailable 3EE4  
            ?_per_minute_reading 0001        read_packet_from_page@data 0023  
            ?_per_second_reading 0001                        _eval_poly 2AA0  
                    ??_USARTInit 0016                  LCDBusyLoop@busy 0014  
             Creat_Packet@F_Code 0018                  LCDBusyLoop@temp 0015  
                 __size_of_floor 0102           data_to_center@attempts 0031  
                 __size_of_ldexp 00EA                   __size_of_frexp 0096  
      write_packet_to_page@count 0027             ??_per_minute_reading 00B8  
                    ??_Check_CRC 0014                   ___wmul@product 0018  
                  OpenADC@config 0016               voltage_to_hum@temp 009A  
                       _PIE1bits 000F9D             ??_per_second_reading 00B8  
                       _PIR1bits 000F9E                         i2u518_45 3994  
                     ?_clear_rom 0001                      _LCDBusyLoop 3DB2  
               LCDWriteString@cc 0020                      Eco_Replay@n 0024  
                     _ADCON0bits 000FC2                      __stringdata 7CF8  
              ___wmul@multiplier 0014                        _trig_hum1 00DB  
                      _trig_hum2 00DE                  Write_b_eep@badd 0014  
                Write_b_eep@bdat 0016                         _Data_End 005D  
              ?_Creat_RTC_Packet 0001                        _tx_packet 29BA  
                       _Eco_Test 26FC                       ?_eval_poly 003E  
                  ?_Clear_Packet 0001                 __size_of_LCDByte 0060  
               __size_of_LCDInit 0088     __end_of_get_current_readings 09C6  
             ??_Creat_RTC_Packet 0020                         _CloseADC 7A32  
           DisplayReadings@fract 0030             _ds1307_set_date_time 2EC2  
               Calculate_CRC@sum 001D                      _LCDWriteInt 24E8  
                      copy_data0 3D48            voltage_to_hum@voltage 0097  
                  ??_rtc_setting 0030          write_packet_to_page@lsb 0024  
        write_packet_to_page@msb 0023                 OpenI2C@sync_mode 0015  
               __size_of_RTUInit 0580                   local_display@s 0058  
                 _rom_byte_write 3B1A                 __size_of_IdleI2C 0014  
                      frexp@eptr 0017                       _EECON1bits 000FA6  
         voltage_to_temp@voltage 0097           __size_of_rom_byte_read 0072  
               __size_of_BusyADC 0010          __size_of_USARTWriteChar 0010  
               __size_of_ReadI2C 002C                 __size_of_ReadADC 000E  
          per_minute_reading@lsb 0202            per_minute_reading@msb 0201  
                       __Hrparam 0000                 __size_of_MyDelay 0026  
               __size_of_OpenI2C 0022                 __size_of_OpenADC 0030  
                       __Lrparam 0000            float_to_int@int_value 0056  
                      modf@value 003E             __size_of_ds1307_init 00B6  
               __size_of_bcd2bin 0026         __end_of_USARTHandleRxInt 39CE  
             rom_byte_write@byte 0019                 __size_of___awdiv 00A8  
               __size_of___ftadd 01B0                 __size_of___awmod 0094  
               __size_of___ftdiv 00DA                 __size_of___ftneg 002A  
                       ___altoft 3490                 __size_of___ftmul 00E8  
               __size_of___ftsub 003A                 __size_of___fttol 00D8  
               __size_of_bin2bcd 0026                LCDBusyLoop@status 0016  
                       ___attoft 3D5E                         _WriteI2C 3AB2  
                       ___awtoft 3E06                         ___ftpack 3032  
                       ___lbtoft 7B8E            __end_of_Calculate_CRC 3A40  
                   ?_Write_b_eep 0014                         ___lltoft 3C48  
                       ___lwtoft 7BB6             __size_of_Send_Packet 014A  
              ??_voltage_to_temp 0058                   ??_Clear_Packet 0014  
                       _exp$2973 0080          Add_Reading_To_Packet@h1 0022  
        Add_Reading_To_Packet@h2 0026          Add_Reading_To_Packet@t1 0020  
        Add_Reading_To_Packet@t2 0024         __size_of_DisplayReadings 0152  
                     ?_tx_packet 0001                rom_byte_read@data 001E  
          ?_ds1307_set_date_time 0001                         __ptext10 3B80  
                       __ptext11 1BDC                         __ptext20 27E8  
                       __ptext12 39CE                         __ptext21 25FA  
                       __ptext13 3FD6                         __ptext30 3C48  
                       __ptext22 3366                         __ptext14 061A  
                       __ptext31 2D34                         __ptext23 33FC  
                       __ptext15 1EC2                         __ptext40 7A22  
                       __ptext32 3646                         __ptext24 3490  
                       __ptext16 200C                         __ptext41 7A32  
                       __ptext33 2C5C                         __ptext25 2AA0  
                       __ptext17 1A38                         __ptext50 7A94  
                       __ptext42 7A5A                         __ptext34 7BDE  
                       __ptext26 7C08                         __ptext18 22A0  
                       __ptext51 2156                         __ptext43 1D70  
                       __ptext35 3D5E                         __ptext27 3F64  
                       __ptext19 12DC                         __ptext60 3A40  
                       __ptext52 26FC                         __ptext44 24E8  
                       __ptext36 7BB6                         __ptext28 2B82  
                       __ptext61 38DE                         __ptext53 7A4A  
                       __ptext45 3524                         __ptext37 7AC2  
                       __ptext29 3E06                         __ptext70 7B42  
                       __ptext62 3EE4                         __ptext54 322A  
                       __ptext46 30DE                         __ptext38 7A3C  
                       __ptext71 3AB2                         __ptext63 7C5E  
                       __ptext55 3E52                         __ptext47 3BE4  
                       __ptext39 7C8E                         __ptext80 7A7E  
                       __ptext72 7A6A                         __ptext64 009A  
                       __ptext56 7AAA                         __ptext48 16CE  
                       __ptext81 7AFA                         __ptext73 7C32  
                       __ptext65 2EC2                         __ptext57 3F9E  
                       __ptext49 29BA                         __ptext82 7B1C  
                       __ptext74 7B8E                         __ptext66 2F7C  
                       __ptext58 3E9C                         __ptext83 36D2  
                       __ptext75 28D2                         __ptext67 7B68  
                       __ptext59 375A                         __ptext84 3CA8  
                       __ptext76 1888                         __ptext68 3860  
                     RTUInit@adr 003E                         __ptext85 3DB2  
                       __ptext77 3032                         __ptext69 32CE  
                       __ptext78 3F28                         __ptext87 395A  
                       __ptext79 37DE                         __ptext88 7ADA  
                     RTUInit@low 0041            __end_of_local_display 4000  
                       _pow$2971 008C                         _pow$2972 008F  
         __end_of_rom_byte_write 3B80          ??_read_packet_from_page 0021  
                  __size_of_beep 0016                    __size_of_main 0264  
                  __size_of_modf 008C                         _min_flag 00F5  
           Creat_Packet@Readings 0017                         _sec_flag 006A  
         __size_of_USARTReadData 0038         __size_of_Check_Busy_Line 004A  
            __end_of_rtc_setting 0E82                      ??_clear_rom 0017  
                  ?_Creat_Packet 0017                       Eco_Test@re 0022  
                     Eco_Test@ts 0024         __size_of_ds1307_get_date 0098  
       __size_of_ds1307_get_time 007E                         exp@coeff 7CBF  
                       log@coeff 7CDD                    _rom_byte_read 3A40  
          get_current_readings@i 00B7                       _INTCONbits 000FF2  
                    ??_eval_poly 0045        Add_Reading_To_Packet@h1_h 002C  
      Add_Reading_To_Packet@h2_h 0030        Add_Reading_To_Packet@h1_l 002D  
      Add_Reading_To_Packet@h2_l 0031        Add_Reading_To_Packet@t1_h 002A  
      Add_Reading_To_Packet@t2_h 002E        Add_Reading_To_Packet@t1_l 002B  
      Add_Reading_To_Packet@t2_l 002F                         modf@iptr 0041  
              rom_byte_write@lsb 001E                rom_byte_write@msb 001D  
               ??_Receive_Packet 0025                 ??_voltage_to_hum 0058  
                       intlevel2 0006                  ?_rom_byte_write 0017  
       __end_of_USARTFlushBuffer 7AC2          ??_Add_Reading_To_Packet 0028  
                 LCDWriteInt@val 001D                   LCDWriteInt@str 0022  
  __size_of_write_packet_to_page 00A4                SetChanADC@channel 0015  
                 ??_Creat_Packet 0018                Send_Packet@result 002B  
           _get_current_readings 061A          __size_of_data_to_center 01BA  
                 ?_rom_byte_read 0017                      ??_tx_packet 002E  
                  _USARTReadData 3F9E           ??_ds1307_set_date_time 0017  
           USARTHandleRxInt@data 0005                      _SSPCON1bits 000FC6  
                    _SSPCON2bits 000FC5                     _thresh_temp1 0059  
                   _thresh_temp2 00D8               _USARTDataAvailable 3E9C  
              ??_DisplayReadings 002B       read_packet_from_page@count 0028  
                 Eco_Replay@data 0023                      _rtc_setting 0C2A  
                    _thresh_hum1 00D2                      _thresh_hum2 00D5  
            ?_USARTDataAvailable 0001                   _USARTWriteChar 7A4A  
       per_second_reading@result 0200             __end_of_Clear_Packet 7C8E  
          per_second_reading@lsb 0202            per_second_reading@msb 0201  
        __size_of_LCDWriteString 00A4  
