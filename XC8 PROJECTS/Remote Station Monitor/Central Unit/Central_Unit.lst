

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Jan 05 14:39:53 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  002374                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for ___cgram
    75  002374  0C                 	db	12
    76  002375  12                 	db	18
    77  002376  12                 	db	18
    78  002377  0C                 	db	12
    79  002378  00                 	db	0
    80  002379  00                 	db	0
    81  00237A  00                 	db	0
    82  00237B  00                 	db	0
    83                           
    84                           	psect	mediumconst
    85  007C78                     __pmediumconst:
    86                           	opt stack 0
    87  007C78  00                 	db	0
    88  007C79  00                 	db	0
    89  007C7A  80                 	db	128
    90  007C7B  3F                 	db	63
    91  007C7C  72                 	db	114
    92  007C7D  31                 	db	49
    93  007C7E  3F                 	db	63
    94  007C7F  FE                 	db	254
    95  007C80  75                 	db	117
    96  007C81  3E                 	db	62
    97  007C82  58                 	db	88
    98  007C83  63                 	db	99
    99  007C84  3D                 	db	61
   100  007C85  95                 	db	149
   101  007C86  1D                 	db	29
   102  007C87  3C                 	db	60
   103  007C88  C5                 	db	197
   104  007C89  AE                 	db	174
   105  007C8A  3A                 	db	58
   106  007C8B  79                 	db	121
   107  007C8C  21                 	db	33
   108  007C8D  39                 	db	57
   109  007C8E  94                 	db	148
   110  007C8F  80                 	db	128
   111  007C90  37                 	db	55
   112  007C91  93                 	db	147
   113  007C92  A7                 	db	167
   114  007C93  35                 	db	53
   115  007C94  56                 	db	86
   116  007C95  15                 	db	21
   117  007C96  34                 	db	52
   118  007C97                     __end_ofexp@coeff:
   119                           	opt stack 0
   120  007C97  00                 	db	0
   121  007C98  00                 	db	0
   122  007C99  00                 	db	0
   123  007C9A  00                 	db	0
   124  007C9B  80                 	db	128
   125  007C9C  3F                 	db	63
   126  007C9D  F0                 	db	240
   127  007C9E  FF                 	db	255
   128  007C9F  BE                 	db	190
   129  007CA0  E2                 	db	226
   130  007CA1  A9                 	db	169
   131  007CA2  3E                 	db	62
   132  007CA3  83                 	db	131
   133  007CA4  76                 	db	118
   134  007CA5  BE                 	db	190
   135  007CA6  AE                 	db	174
   136  007CA7  2B                 	db	43
   137  007CA8  3E                 	db	62
   138  007CA9  3C                 	db	60
   139  007CAA  C3                 	db	195
   140  007CAB  BD                 	db	189
   141  007CAC  D2                 	db	210
   142  007CAD  13                 	db	19
   143  007CAE  3D                 	db	61
   144  007CAF  78                 	db	120
   145  007CB0  D3                 	db	211
   146  007CB1  BB                 	db	187
   147  007CB2                     __end_oflog@coeff:
   148                           	opt stack 0
   149  0000                     _ADCON0	set	4034
   150  0000                     _ADCON0bits	set	4034
   151  0000                     _ADCON1	set	4033
   152  0000                     _ADRESH	set	4036
   153  0000                     _ADRESL	set	4035
   154  0000                     _EEADR	set	4009
   155  0000                     _EECON1bits	set	4006
   156  0000                     _EECON2	set	4007
   157  0000                     _EEDATA	set	4008
   158  0000                     _INTCONbits	set	4082
   159  0000                     _PIE1bits	set	3997
   160  0000                     _PIR1bits	set	3998
   161  0000                     _PORTB	set	3969
   162  0000                     _RCREG	set	4014
   163  0000                     _RCSTAbits	set	4011
   164  0000                     _SPBRG	set	4015
   165  0000                     _SSPADD	set	4040
   166  0000                     _SSPBUF	set	4041
   167  0000                     _SSPCON1	set	4038
   168  0000                     _SSPCON1bits	set	4038
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON2bits	set	4037
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _SSPSTATbits	set	4039
   173  0000                     _TRISA	set	3986
   174  0000                     _TRISB	set	3987
   175  0000                     _TRISC	set	3988
   176  0000                     _TRISCbits	set	3988
   177  0000                     _TRISD	set	3989
   178  0000                     _TRISDbits	set	3989
   179  0000                     _TRISE	set	3990
   180  0000                     _TXREG	set	4013
   181  0000                     _TXSTAbits	set	4012
   182  0000                     _INT0IE	set	32660
   183  0000                     _INT0IF	set	32657
   184  0000                     _INTEDG0	set	32654
   185  0000                     _PEIE	set	32662
   186  0000                     _RB1	set	31753
   187  0000                     _RC0	set	31760
   188  0000                     _RC1	set	31761
   189  0000                     _RC2	set	31762
   190  0000                     _RC5	set	31765
   191  0000                     _RCIE	set	31981
   192  0000                     _RCIF	set	31989
   193  0000                     _RD0	set	31768
   194  0000                     _RD1	set	31769
   195  0000                     _RD2	set	31770
   196  0000                     _RD3	set	31771
   197  0000                     _RD4	set	31772
   198  0000                     _RD5	set	31773
   199  0000                     _RD6	set	31774
   200  0000                     _RD7	set	31775
   201  0000                     _RE0	set	31776
   202  0000                     _RE1	set	31777
   203  0000                     _RE2	set	31778
   204  007CB2                     __stringdata:
   205                           	opt stack 0
   206  007CB2                     STR_14:
   207  007CB2  57                 	db	87	;'W'
   208  007CB3  52                 	db	82	;'R'
   209  007CB4  4F                 	db	79	;'O'
   210  007CB5  4E                 	db	78	;'N'
   211  007CB6  47                 	db	71	;'G'
   212  007CB7  20                 	db	32
   213  007CB8  50                 	db	80	;'P'
   214  007CB9  41                 	db	65	;'A'
   215  007CBA  43                 	db	67	;'C'
   216  007CBB  4B                 	db	75	;'K'
   217  007CBC  45                 	db	69	;'E'
   218  007CBD  54                 	db	84	;'T'
   219  007CBE  20                 	db	32
   220  007CBF  52                 	db	82	;'R'
   221  007CC0  45                 	db	69	;'E'
   222  007CC1  43                 	db	67	;'C'
   223  007CC2  45                 	db	69	;'E'
   224  007CC3  49                 	db	73	;'I'
   225  007CC4  56                 	db	86	;'V'
   226  007CC5  45                 	db	69	;'E'
   227  007CC6  44                 	db	68	;'D'
   228  007CC7  20                 	db	32
   229  007CC8  00                 	db	0
   230  007CC9                     STR_61:
   231  007CC9  55                 	db	85	;'U'
   232  007CCA  50                 	db	80	;'P'
   233  007CCB  44                 	db	68	;'D'
   234  007CCC  41                 	db	65	;'A'
   235  007CCD  54                 	db	84	;'T'
   236  007CCE  45                 	db	69	;'E'
   237  007CCF  20                 	db	32
   238  007CD0  43                 	db	67	;'C'
   239  007CD1  4F                 	db	79	;'O'
   240  007CD2  4D                 	db	77	;'M'
   241  007CD3  50                 	db	80	;'P'
   242  007CD4  4C                 	db	76	;'L'
   243  007CD5  45                 	db	69	;'E'
   244  007CD6  54                 	db	84	;'T'
   245  007CD7  45                 	db	69	;'E'
   246  007CD8  44                 	db	68	;'D'
   247  007CD9  2E                 	db	46
   248  007CDA  2E                 	db	46
   249  007CDB  2E                 	db	46
   250  007CDC  21                 	db	33
   251  007CDD  00                 	db	0
   252  007CDE                     STR_59:
   253  007CDE  55                 	db	85	;'U'
   254  007CDF  50                 	db	80	;'P'
   255  007CE0  44                 	db	68	;'D'
   256  007CE1  41                 	db	65	;'A'
   257  007CE2  54                 	db	84	;'T'
   258  007CE3  49                 	db	73	;'I'
   259  007CE4  4E                 	db	78	;'N'
   260  007CE5  47                 	db	71	;'G'
   261  007CE6  20                 	db	32
   262  007CE7  54                 	db	84	;'T'
   263  007CE8  48                 	db	72	;'H'
   264  007CE9  52                 	db	82	;'R'
   265  007CEA  45                 	db	69	;'E'
   266  007CEB  53                 	db	83	;'S'
   267  007CEC  48                 	db	72	;'H'
   268  007CED  4F                 	db	79	;'O'
   269  007CEE  4C                 	db	76	;'L'
   270  007CEF  44                 	db	68	;'D'
   271  007CF0  53                 	db	83	;'S'
   272  007CF1  00                 	db	0
   273  007CF2                     STR_12:
   274  007CF2  43                 	db	67	;'C'
   275  007CF3  48                 	db	72	;'H'
   276  007CF4  41                 	db	65	;'A'
   277  007CF5  52                 	db	82	;'R'
   278  007CF6  41                 	db	65	;'A'
   279  007CF7  43                 	db	67	;'C'
   280  007CF8  54                 	db	84	;'T'
   281  007CF9  45                 	db	69	;'E'
   282  007CFA  52                 	db	82	;'R'
   283  007CFB  20                 	db	32
   284  007CFC  52                 	db	82	;'R'
   285  007CFD  45                 	db	69	;'E'
   286  007CFE  43                 	db	67	;'C'
   287  007CFF  45                 	db	69	;'E'
   288  007D00  49                 	db	73	;'I'
   289  007D01  56                 	db	86	;'V'
   290  007D02  45                 	db	69	;'E'
   291  007D03  44                 	db	68	;'D'
   292  007D04  20                 	db	32
   293  007D05  00                 	db	0
   294  007D06                     STR_76:
   295  007D06  57                 	db	87	;'W'
   296  007D07  49                 	db	73	;'I'
   297  007D08  52                 	db	82	;'R'
   298  007D09  45                 	db	69	;'E'
   299  007D0A  4C                 	db	76	;'L'
   300  007D0B  45                 	db	69	;'E'
   301  007D0C  53                 	db	83	;'S'
   302  007D0D  53                 	db	83	;'S'
   303  007D0E  20                 	db	32
   304  007D0F  46                 	db	70	;'F'
   305  007D10  41                 	db	65	;'A'
   306  007D11  49                 	db	73	;'I'
   307  007D12  4C                 	db	76	;'L'
   308  007D13  44                 	db	68	;'D'
   309  007D14  2E                 	db	46
   310  007D15  2E                 	db	46
   311  007D16  2E                 	db	46
   312  007D17  21                 	db	33
   313  007D18  00                 	db	0
   314  007D19                     STR_54:
   315  007D19  52                 	db	82	;'R'
   316  007D1A  45                 	db	69	;'E'
   317  007D1B  51                 	db	81	;'Q'
   318  007D1C  55                 	db	85	;'U'
   319  007D1D  45                 	db	69	;'E'
   320  007D1E  53                 	db	83	;'S'
   321  007D1F  54                 	db	84	;'T'
   322  007D20  49                 	db	73	;'I'
   323  007D21  4E                 	db	78	;'N'
   324  007D22  47                 	db	71	;'G'
   325  007D23  20                 	db	32
   326  007D24  52                 	db	82	;'R'
   327  007D25  54                 	db	84	;'T'
   328  007D26  43                 	db	67	;'C'
   329  007D27  2E                 	db	46
   330  007D28  2E                 	db	46
   331  007D29  2E                 	db	46
   332  007D2A  00                 	db	0
   333  007D2B                     STR_66:
   334  007D2B  52                 	db	82	;'R'
   335  007D2C  45                 	db	69	;'E'
   336  007D2D  41                 	db	65	;'A'
   337  007D2E  44                 	db	68	;'D'
   338  007D2F  49                 	db	73	;'I'
   339  007D30  4E                 	db	78	;'N'
   340  007D31  47                 	db	71	;'G'
   341  007D32  20                 	db	32
   342  007D33  45                 	db	69	;'E'
   343  007D34  45                 	db	69	;'E'
   344  007D35  50                 	db	80	;'P'
   345  007D36  52                 	db	82	;'R'
   346  007D37  4F                 	db	79	;'O'
   347  007D38  4D                 	db	77	;'M'
   348  007D39  2E                 	db	46
   349  007D3A  2E                 	db	46
   350  007D3B  2E                 	db	46
   351  007D3C  00                 	db	0
   352  007D3D                     STR_41:
   353  007D3D  57                 	db	87	;'W'
   354  007D3E  52                 	db	82	;'R'
   355  007D3F  49                 	db	73	;'I'
   356  007D40  54                 	db	84	;'T'
   357  007D41  49                 	db	73	;'I'
   358  007D42  4E                 	db	78	;'N'
   359  007D43  47                 	db	71	;'G'
   360  007D44  20                 	db	32
   361  007D45  45                 	db	69	;'E'
   362  007D46  45                 	db	69	;'E'
   363  007D47  50                 	db	80	;'P'
   364  007D48  52                 	db	82	;'R'
   365  007D49  4F                 	db	79	;'O'
   366  007D4A  4D                 	db	77	;'M'
   367  007D4B  2E                 	db	46
   368  007D4C  2E                 	db	46
   369  007D4D  2E                 	db	46
   370  007D4E  00                 	db	0
   371  007D4F                     STR_18:
   372  007D4F  50                 	db	80	;'P'
   373  007D50  72                 	db	114	;'r'
   374  007D51  65                 	db	101	;'e'
   375  007D52  73                 	db	115	;'s'
   376  007D53  73                 	db	115	;'s'
   377  007D54  20                 	db	32
   378  007D55  61                 	db	97	;'a'
   379  007D56  20                 	db	32
   380  007D57  53                 	db	83	;'S'
   381  007D58  77                 	db	119	;'w'
   382  007D59  69                 	db	105	;'i'
   383  007D5A  74                 	db	116	;'t'
   384  007D5B  63                 	db	99	;'c'
   385  007D5C  68                 	db	104	;'h'
   386  007D5D  2E                 	db	46
   387  007D5E  2E                 	db	46
   388  007D5F  2E                 	db	46
   389  007D60  00                 	db	0
   390  007D61                     STR_7:
   391  007D61  45                 	db	69	;'E'
   392  007D62  43                 	db	67	;'C'
   393  007D63  4F                 	db	79	;'O'
   394  007D64  20                 	db	32
   395  007D65  4E                 	db	78	;'N'
   396  007D66  4F                 	db	79	;'O'
   397  007D67  54                 	db	84	;'T'
   398  007D68  20                 	db	32
   399  007D69  52                 	db	82	;'R'
   400  007D6A  45                 	db	69	;'E'
   401  007D6B  43                 	db	67	;'C'
   402  007D6C  45                 	db	69	;'E'
   403  007D6D  49                 	db	73	;'I'
   404  007D6E  56                 	db	86	;'V'
   405  007D6F  45                 	db	69	;'E'
   406  007D70  44                 	db	68	;'D'
   407  007D71  20                 	db	32
   408  007D72  00                 	db	0
   409  007D73                     STR_15:
   410  007D73  43                 	db	67	;'C'
   411  007D74  48                 	db	72	;'H'
   412  007D75  41                 	db	65	;'A'
   413  007D76  52                 	db	82	;'R'
   414  007D77  41                 	db	65	;'A'
   415  007D78  43                 	db	67	;'C'
   416  007D79  54                 	db	84	;'T'
   417  007D7A  45                 	db	69	;'E'
   418  007D7B  52                 	db	82	;'R'
   419  007D7C  20                 	db	32
   420  007D7D  54                 	db	84	;'T'
   421  007D7E  49                 	db	73	;'I'
   422  007D7F  4D                 	db	77	;'M'
   423  007D80  45                 	db	69	;'E'
   424  007D81  4F                 	db	79	;'O'
   425  007D82  55                 	db	85	;'U'
   426  007D83  54                 	db	84	;'T'
   427  007D84  00                 	db	0
   428  007D85  52                 	db	82	;'R'
   429  007D86  45                 	db	69	;'E'
   430  007D87  53                 	db	83	;'S'
   431  007D88  45                 	db	69	;'E'
   432  007D89  54                 	db	84	;'T'
   433  007D8A  20                 	db	32
   434  007D8B  43                 	db	67	;'C'
   435  007D8C  4F                 	db	79	;'O'
   436  007D8D  4D                 	db	77	;'M'
   437  007D8E  50                 	db	80	;'P'
   438  007D8F  4C                 	db	76	;'L'
   439  007D90  45                 	db	69	;'E'
   440  007D91  54                 	db	84	;'T'
   441  007D92  45                 	db	69	;'E'
   442  007D93  44                 	db	68	;'D'
   443  007D94  21                 	db	33
   444  007D95  00                 	db	0
   445  007D96                     STR_65:
   446  007D96  4E                 	db	78	;'N'
   447  007D97  4F                 	db	79	;'O'
   448  007D98  54                 	db	84	;'T'
   449  007D99  48                 	db	72	;'H'
   450  007D9A  49                 	db	73	;'I'
   451  007D9B  4E                 	db	78	;'N'
   452  007D9C  47                 	db	71	;'G'
   453  007D9D  20                 	db	32
   454  007D9E  54                 	db	84	;'T'
   455  007D9F  4F                 	db	79	;'O'
   456  007DA0  20                 	db	32
   457  007DA1  53                 	db	83	;'S'
   458  007DA2  45                 	db	69	;'E'
   459  007DA3  4E                 	db	78	;'N'
   460  007DA4  44                 	db	68	;'D'
   461  007DA5  21                 	db	33
   462  007DA6  00                 	db	0
   463  007DA7                     STR_71:
   464  007DA7  46                 	db	70	;'F'
   465  007DA8  4F                 	db	79	;'O'
   466  007DA9  52                 	db	82	;'R'
   467  007DAA  4D                 	db	77	;'M'
   468  007DAB  41                 	db	65	;'A'
   469  007DAC  54                 	db	84	;'T'
   470  007DAD  20                 	db	32
   471  007DAE  43                 	db	67	;'C'
   472  007DAF  4F                 	db	79	;'O'
   473  007DB0  4D                 	db	77	;'M'
   474  007DB1  50                 	db	80	;'P'
   475  007DB2  4C                 	db	76	;'L'
   476  007DB3  45                 	db	69	;'E'
   477  007DB4  54                 	db	84	;'T'
   478  007DB5  45                 	db	69	;'E'
   479  007DB6  21                 	db	33
   480  007DB7  00                 	db	0
   481  007DB8                     STR_33:
   482  007DB8  57                 	db	87	;'W'
   483  007DB9  41                 	db	65	;'A'
   484  007DBA  49                 	db	73	;'I'
   485  007DBB  54                 	db	84	;'T'
   486  007DBC  49                 	db	73	;'I'
   487  007DBD  4E                 	db	78	;'N'
   488  007DBE  47                 	db	71	;'G'
   489  007DBF  20                 	db	32
   490  007DC0  46                 	db	70	;'F'
   491  007DC1  4F                 	db	79	;'O'
   492  007DC2  52                 	db	82	;'R'
   493  007DC3  20                 	db	32
   494  007DC4  44                 	db	68	;'D'
   495  007DC5  41                 	db	65	;'A'
   496  007DC6  54                 	db	84	;'T'
   497  007DC7  41                 	db	65	;'A'
   498  007DC8  00                 	db	0
   499  007DC9                     STR_17:
   500  007DC9  57                 	db	87	;'W'
   501  007DCA  65                 	db	101	;'e'
   502  007DCB  6C                 	db	108	;'l'
   503  007DCC  63                 	db	99	;'c'
   504  007DCD  6F                 	db	111	;'o'
   505  007DCE  6D                 	db	109	;'m'
   506  007DCF  65                 	db	101	;'e'
   507  007DD0  20                 	db	32
   508  007DD1  74                 	db	116	;'t'
   509  007DD2  6F                 	db	111	;'o'
   510  007DD3  20                 	db	32
   511  007DD4  43                 	db	67	;'C'
   512  007DD5  45                 	db	69	;'E'
   513  007DD6  4E                 	db	78	;'N'
   514  007DD7  54                 	db	84	;'T'
   515  007DD8  52                 	db	82	;'R'
   516  007DD9  00                 	db	0
   517  007DDA                     STR_36:
   518  007DDA  53                 	db	83	;'S'
   519  007DDB  45                 	db	69	;'E'
   520  007DDC  4E                 	db	78	;'N'
   521  007DDD  44                 	db	68	;'D'
   522  007DDE  49                 	db	73	;'I'
   523  007DDF  4E                 	db	78	;'N'
   524  007DE0  47                 	db	71	;'G'
   525  007DE1  20                 	db	32
   526  007DE2  53                 	db	83	;'S'
   527  007DE3  45                 	db	69	;'E'
   528  007DE4  54                 	db	84	;'T'
   529  007DE5  54                 	db	84	;'T'
   530  007DE6  49                 	db	73	;'I'
   531  007DE7  4E                 	db	78	;'N'
   532  007DE8  47                 	db	71	;'G'
   533  007DE9  53                 	db	83	;'S'
   534  007DEA  00                 	db	0
   535  007DEB                     STR_60:
   536  007DEB  55                 	db	85	;'U'
   537  007DEC  50                 	db	80	;'P'
   538  007DED  44                 	db	68	;'D'
   539  007DEE  41                 	db	65	;'A'
   540  007DEF  54                 	db	84	;'T'
   541  007DF0  49                 	db	73	;'I'
   542  007DF1  4E                 	db	78	;'N'
   543  007DF2  47                 	db	71	;'G'
   544  007DF3  20                 	db	32
   545  007DF4  54                 	db	84	;'T'
   546  007DF5  52                 	db	82	;'R'
   547  007DF6  49                 	db	73	;'I'
   548  007DF7  47                 	db	71	;'G'
   549  007DF8  45                 	db	69	;'E'
   550  007DF9  52                 	db	82	;'R'
   551  007DFA  53                 	db	83	;'S'
   552  007DFB  00                 	db	0
   553  007DFC                     STR_70:
   554  007DFC  46                 	db	70	;'F'
   555  007DFD  4F                 	db	79	;'O'
   556  007DFE  52                 	db	82	;'R'
   557  007DFF  4D                 	db	77	;'M'
   558  007E00  41                 	db	65	;'A'
   559  007E01  54                 	db	84	;'T'
   560  007E02  49                 	db	73	;'I'
   561  007E03  4E                 	db	78	;'N'
   562  007E04  47                 	db	71	;'G'
   563  007E05  20                 	db	32
   564  007E06  4D                 	db	77	;'M'
   565  007E07  45                 	db	69	;'E'
   566  007E08  4D                 	db	77	;'M'
   567  007E09  4F                 	db	79	;'O'
   568  007E0A  52                 	db	82	;'R'
   569  007E0B  59                 	db	89	;'Y'
   570  007E0C  00                 	db	0
   571  007E0D  52                 	db	82	;'R'
   572  007E0E  45                 	db	69	;'E'
   573  007E0F  53                 	db	83	;'S'
   574  007E10  45                 	db	69	;'E'
   575  007E11  54                 	db	84	;'T'
   576  007E12  54                 	db	84	;'T'
   577  007E13  49                 	db	73	;'I'
   578  007E14  4E                 	db	78	;'N'
   579  007E15  47                 	db	71	;'G'
   580  007E16  20                 	db	32
   581  007E17  4D                 	db	77	;'M'
   582  007E18  45                 	db	69	;'E'
   583  007E19  4D                 	db	77	;'M'
   584  007E1A  4F                 	db	79	;'O'
   585  007E1B  52                 	db	82	;'R'
   586  007E1C  59                 	db	89	;'Y'
   587  007E1D  00                 	db	0
   588  007E1E                     STR_5:
   589  007E1E  57                 	db	87	;'W'
   590  007E1F  41                 	db	65	;'A'
   591  007E20  49                 	db	73	;'I'
   592  007E21  54                 	db	84	;'T'
   593  007E22  49                 	db	73	;'I'
   594  007E23  4E                 	db	78	;'N'
   595  007E24  47                 	db	71	;'G'
   596  007E25  20                 	db	32
   597  007E26  46                 	db	70	;'F'
   598  007E27  4F                 	db	79	;'O'
   599  007E28  52                 	db	82	;'R'
   600  007E29  20                 	db	32
   601  007E2A  45                 	db	69	;'E'
   602  007E2B  43                 	db	67	;'C'
   603  007E2C  4F                 	db	79	;'O'
   604  007E2D  20                 	db	32
   605  007E2E  00                 	db	0
   606  007E2F                     STR_10:
   607  007E2F  50                 	db	80	;'P'
   608  007E30  41                 	db	65	;'A'
   609  007E31  43                 	db	67	;'C'
   610  007E32  4B                 	db	75	;'K'
   611  007E33  45                 	db	69	;'E'
   612  007E34  54                 	db	84	;'T'
   613  007E35  20                 	db	32
   614  007E36  44                 	db	68	;'D'
   615  007E37  45                 	db	69	;'E'
   616  007E38  4C                 	db	76	;'L'
   617  007E39  49                 	db	73	;'I'
   618  007E3A  56                 	db	86	;'V'
   619  007E3B  45                 	db	69	;'E'
   620  007E3C  52                 	db	82	;'R'
   621  007E3D  45                 	db	69	;'E'
   622  007E3E  44                 	db	68	;'D'
   623  007E3F  00                 	db	0
   624  007E40                     STR_42:
   625  007E40  4D                 	db	77	;'M'
   626  007E41  45                 	db	69	;'E'
   627  007E42  4D                 	db	77	;'M'
   628  007E43  4F                 	db	79	;'O'
   629  007E44  52                 	db	82	;'R'
   630  007E45  59                 	db	89	;'Y'
   631  007E46  20                 	db	32
   632  007E47  46                 	db	70	;'F'
   633  007E48  55                 	db	85	;'U'
   634  007E49  4C                 	db	76	;'L'
   635  007E4A  4C                 	db	76	;'L'
   636  007E4B  2E                 	db	46
   637  007E4C  2E                 	db	46
   638  007E4D  2E                 	db	46
   639  007E4E  21                 	db	33
   640  007E4F  00                 	db	0
   641  007E50                     STR_67:
   642  007E50  54                 	db	84	;'T'
   643  007E51  52                 	db	82	;'R'
   644  007E52  41                 	db	65	;'A'
   645  007E53  4E                 	db	78	;'N'
   646  007E54  53                 	db	83	;'S'
   647  007E55  4D                 	db	77	;'M'
   648  007E56  49                 	db	73	;'I'
   649  007E57  54                 	db	84	;'T'
   650  007E58  54                 	db	84	;'T'
   651  007E59  49                 	db	73	;'I'
   652  007E5A  4E                 	db	78	;'N'
   653  007E5B  47                 	db	71	;'G'
   654  007E5C  2E                 	db	46
   655  007E5D  2E                 	db	46
   656  007E5E  2E                 	db	46
   657  007E5F  00                 	db	0
   658  007E60                     STR_39:
   659  007E60  50                 	db	80	;'P'
   660  007E61  41                 	db	65	;'A'
   661  007E62  43                 	db	67	;'C'
   662  007E63  4B                 	db	75	;'K'
   663  007E64  45                 	db	69	;'E'
   664  007E65  54                 	db	84	;'T'
   665  007E66  20                 	db	32
   666  007E67  52                 	db	82	;'R'
   667  007E68  45                 	db	69	;'E'
   668  007E69  43                 	db	67	;'C'
   669  007E6A  45                 	db	69	;'E'
   670  007E6B  49                 	db	73	;'I'
   671  007E6C  56                 	db	86	;'V'
   672  007E6D  45                 	db	69	;'E'
   673  007E6E  44                 	db	68	;'D'
   674  007E6F  00                 	db	0
   675  007E70                     STR_28:
   676  007E70  46                 	db	70	;'F'
   677  007E71  4F                 	db	79	;'O'
   678  007E72  52                 	db	82	;'R'
   679  007E73  20                 	db	32
   680  007E74  52                 	db	82	;'R'
   681  007E75  54                 	db	84	;'T'
   682  007E76  55                 	db	85	;'U'
   683  007E77  2E                 	db	46
   684  007E78  20                 	db	32
   685  007E79  50                 	db	80	;'P'
   686  007E7A  41                 	db	65	;'A'
   687  007E7B  43                 	db	67	;'C'
   688  007E7C  4B                 	db	75	;'K'
   689  007E7D  45                 	db	69	;'E'
   690  007E7E  54                 	db	84	;'T'
   691  007E7F  00                 	db	0
   692  007E80                     STR_24:
   693  007E80  41                 	db	65	;'A'
   694  007E81  4E                 	db	78	;'N'
   695  007E82  44                 	db	68	;'D'
   696  007E83  20                 	db	32
   697  007E84  52                 	db	82	;'R'
   698  007E85  54                 	db	84	;'T'
   699  007E86  43                 	db	67	;'C'
   700  007E87  20                 	db	32
   701  007E88  44                 	db	68	;'D'
   702  007E89  49                 	db	73	;'I'
   703  007E8A  53                 	db	83	;'S'
   704  007E8B  50                 	db	80	;'P'
   705  007E8C  4C                 	db	76	;'L'
   706  007E8D  41                 	db	65	;'A'
   707  007E8E  59                 	db	89	;'Y'
   708  007E8F  00                 	db	0
   709  007E90                     STR_3:
   710  007E90  45                 	db	69	;'E'
   711  007E91  43                 	db	67	;'C'
   712  007E92  4F                 	db	79	;'O'
   713  007E93  20                 	db	32
   714  007E94  53                 	db	83	;'S'
   715  007E95  55                 	db	85	;'U'
   716  007E96  43                 	db	67	;'C'
   717  007E97  43                 	db	67	;'C'
   718  007E98  45                 	db	69	;'E'
   719  007E99  53                 	db	83	;'S'
   720  007E9A  53                 	db	83	;'S'
   721  007E9B  46                 	db	70	;'F'
   722  007E9C  55                 	db	85	;'U'
   723  007E9D  4C                 	db	76	;'L'
   724  007E9E  20                 	db	32
   725  007E9F  00                 	db	0
   726  007EA0                     STR_8:
   727  007EA0  53                 	db	83	;'S'
   728  007EA1  45                 	db	69	;'E'
   729  007EA2  4E                 	db	78	;'N'
   730  007EA3  44                 	db	68	;'D'
   731  007EA4  49                 	db	73	;'I'
   732  007EA5  4E                 	db	78	;'N'
   733  007EA6  47                 	db	71	;'G'
   734  007EA7  20                 	db	32
   735  007EA8  50                 	db	80	;'P'
   736  007EA9  41                 	db	65	;'A'
   737  007EAA  43                 	db	67	;'C'
   738  007EAB  4B                 	db	75	;'K'
   739  007EAC  45                 	db	69	;'E'
   740  007EAD  54                 	db	84	;'T'
   741  007EAE  20                 	db	32
   742  007EAF  00                 	db	0
   743  007EB0                     STR_30:
   744  007EB0  46                 	db	70	;'F'
   745  007EB1  4F                 	db	79	;'O'
   746  007EB2  52                 	db	82	;'R'
   747  007EB3  20                 	db	32
   748  007EB4  46                 	db	70	;'F'
   749  007EB5  55                 	db	85	;'U'
   750  007EB6  54                 	db	84	;'T'
   751  007EB7  55                 	db	85	;'U'
   752  007EB8  52                 	db	82	;'R'
   753  007EB9  45                 	db	69	;'E'
   754  007EBA  20                 	db	32
   755  007EBB  55                 	db	85	;'U'
   756  007EBC  53                 	db	83	;'S'
   757  007EBD  45                 	db	69	;'E'
   758  007EBE  00                 	db	0
   759  007EBF                     STR_27:
   760  007EBF  4D                 	db	77	;'M'
   761  007EC0  4F                 	db	79	;'O'
   762  007EC1  44                 	db	68	;'D'
   763  007EC2  45                 	db	69	;'E'
   764  007EC3  20                 	db	32
   765  007EC4  3D                 	db	61	;'='
   766  007EC5  20                 	db	32
   767  007EC6  57                 	db	87	;'W'
   768  007EC7  41                 	db	65	;'A'
   769  007EC8  49                 	db	73	;'I'
   770  007EC9  54                 	db	84	;'T'
   771  007ECA  49                 	db	73	;'I'
   772  007ECB  4E                 	db	78	;'N'
   773  007ECC  47                 	db	71	;'G'
   774  007ECD  00                 	db	0
   775  007ECE                     STR_22:
   776  007ECE  44                 	db	68	;'D'
   777  007ECF  41                 	db	65	;'A'
   778  007ED0  54                 	db	84	;'T'
   779  007ED1  41                 	db	65	;'A'
   780  007ED2  20                 	db	32
   781  007ED3  54                 	db	84	;'T'
   782  007ED4  4F                 	db	79	;'O'
   783  007ED5  20                 	db	32
   784  007ED6  43                 	db	67	;'C'
   785  007ED7  45                 	db	69	;'E'
   786  007ED8  4E                 	db	78	;'N'
   787  007ED9  54                 	db	84	;'T'
   788  007EDA  45                 	db	69	;'E'
   789  007EDB  52                 	db	82	;'R'
   790  007EDC  00                 	db	0
   791  007EDD                     STR_29:
   792  007EDD  54                 	db	84	;'T'
   793  007EDE  48                 	db	72	;'H'
   794  007EDF  49                 	db	73	;'I'
   795  007EE0  53                 	db	83	;'S'
   796  007EE1  20                 	db	32
   797  007EE2  53                 	db	83	;'S'
   798  007EE3  57                 	db	87	;'W'
   799  007EE4  49                 	db	73	;'I'
   800  007EE5  54                 	db	84	;'T'
   801  007EE6  43                 	db	67	;'C'
   802  007EE7  48                 	db	72	;'H'
   803  007EE8  20                 	db	32
   804  007EE9  49                 	db	73	;'I'
   805  007EEA  53                 	db	83	;'S'
   806  007EEB  00                 	db	0
   807  007EEC                     STR_16:
   808  007EEC  50                 	db	80	;'P'
   809  007EED  41                 	db	65	;'A'
   810  007EEE  43                 	db	67	;'C'
   811  007EEF  4B                 	db	75	;'K'
   812  007EF0  45                 	db	69	;'E'
   813  007EF1  54                 	db	84	;'T'
   814  007EF2  20                 	db	32
   815  007EF3  54                 	db	84	;'T'
   816  007EF4  49                 	db	73	;'I'
   817  007EF5  4D                 	db	77	;'M'
   818  007EF6  45                 	db	69	;'E'
   819  007EF7  4F                 	db	79	;'O'
   820  007EF8  55                 	db	85	;'U'
   821  007EF9  54                 	db	84	;'T'
   822  007EFA  00                 	db	0
   823  007EFB                     STR_55:
   824  007EFB  52                 	db	82	;'R'
   825  007EFC  45                 	db	69	;'E'
   826  007EFD  51                 	db	81	;'Q'
   827  007EFE  55                 	db	85	;'U'
   828  007EFF  45                 	db	69	;'E'
   829  007F00  53                 	db	83	;'S'
   830  007F01  54                 	db	84	;'T'
   831  007F02  20                 	db	32
   832  007F03  53                 	db	83	;'S'
   833  007F04  45                 	db	69	;'E'
   834  007F05  4E                 	db	78	;'N'
   835  007F06  54                 	db	84	;'T'
   836  007F07  21                 	db	33
   837  007F08  00                 	db	0
   838  007F09                     STR_43:
   839  007F09  43                 	db	67	;'C'
   840  007F0A  4F                 	db	79	;'O'
   841  007F0B  4E                 	db	78	;'N'
   842  007F0C  4E                 	db	78	;'N'
   843  007F0D  45                 	db	69	;'E'
   844  007F0E  43                 	db	67	;'C'
   845  007F0F  54                 	db	84	;'T'
   846  007F10  20                 	db	32
   847  007F11  50                 	db	80	;'P'
   848  007F12  43                 	db	67	;'C'
   849  007F13  2E                 	db	46
   850  007F14  2E                 	db	46
   851  007F15  2E                 	db	46
   852  007F16  00                 	db	0
   853  007F17  52                 	db	82	;'R'
   854  007F18  45                 	db	69	;'E'
   855  007F19  53                 	db	83	;'S'
   856  007F1A  45                 	db	69	;'E'
   857  007F1B  54                 	db	84	;'T'
   858  007F1C  54                 	db	84	;'T'
   859  007F1D  49                 	db	73	;'I'
   860  007F1E  4E                 	db	78	;'N'
   861  007F1F  47                 	db	71	;'G'
   862  007F20  20                 	db	32
   863  007F21  52                 	db	82	;'R'
   864  007F22  54                 	db	84	;'T'
   865  007F23  43                 	db	67	;'C'
   866  007F24  00                 	db	0
   867  007F25                     STR_35:
   868  007F25  52                 	db	82	;'R'
   869  007F26  54                 	db	84	;'T'
   870  007F27  43                 	db	67	;'C'
   871  007F28  20                 	db	32
   872  007F29  52                 	db	82	;'R'
   873  007F2A  45                 	db	69	;'E'
   874  007F2B  51                 	db	81	;'Q'
   875  007F2C  2E                 	db	46
   876  007F2D  20                 	db	32
   877  007F2E  42                 	db	66	;'B'
   878  007F2F  59                 	db	89	;'Y'
   879  007F30  20                 	db	32
   880  007F31  58                 	db	88	;'X'
   881  007F32  00                 	db	0
   882  007F33                     STR_37:
   883  007F33  52                 	db	82	;'R'
   884  007F34  54                 	db	84	;'T'
   885  007F35  43                 	db	67	;'C'
   886  007F36  20                 	db	32
   887  007F37  52                 	db	82	;'R'
   888  007F38  45                 	db	69	;'E'
   889  007F39  51                 	db	81	;'Q'
   890  007F3A  2E                 	db	46
   891  007F3B  20                 	db	32
   892  007F3C  42                 	db	66	;'B'
   893  007F3D  59                 	db	89	;'Y'
   894  007F3E  20                 	db	32
   895  007F3F  59                 	db	89	;'Y'
   896  007F40  00                 	db	0
   897  007F41                     STR_23:
   898  007F41  4D                 	db	77	;'M'
   899  007F42  4F                 	db	79	;'O'
   900  007F43  44                 	db	68	;'D'
   901  007F44  45                 	db	69	;'E'
   902  007F45  20                 	db	32
   903  007F46  3D                 	db	61	;'='
   904  007F47  20                 	db	32
   905  007F48  4D                 	db	77	;'M'
   906  007F49  45                 	db	69	;'E'
   907  007F4A  4D                 	db	77	;'M'
   908  007F4B  4F                 	db	79	;'O'
   909  007F4C  52                 	db	82	;'R'
   910  007F4D  59                 	db	89	;'Y'
   911  007F4E  00                 	db	0
   912  007F4F                     STR_6:
   913  007F4F  45                 	db	69	;'E'
   914  007F50  43                 	db	67	;'C'
   915  007F51  4F                 	db	79	;'O'
   916  007F52  20                 	db	32
   917  007F53  52                 	db	82	;'R'
   918  007F54  45                 	db	69	;'E'
   919  007F55  43                 	db	67	;'C'
   920  007F56  45                 	db	69	;'E'
   921  007F57  49                 	db	73	;'I'
   922  007F58  56                 	db	86	;'V'
   923  007F59  45                 	db	69	;'E'
   924  007F5A  44                 	db	68	;'D'
   925  007F5B  20                 	db	32
   926  007F5C  00                 	db	0
   927  007F5D                     STR_58:
   928  007F5D  55                 	db	85	;'U'
   929  007F5E  50                 	db	80	;'P'
   930  007F5F  44                 	db	68	;'D'
   931  007F60  41                 	db	65	;'A'
   932  007F61  54                 	db	84	;'T'
   933  007F62  49                 	db	73	;'I'
   934  007F63  4E                 	db	78	;'N'
   935  007F64  47                 	db	71	;'G'
   936  007F65  20                 	db	32
   937  007F66  52                 	db	82	;'R'
   938  007F67  54                 	db	84	;'T'
   939  007F68  43                 	db	67	;'C'
   940  007F69  00                 	db	0
   941  007F6A                     STR_26:
   942  007F6A  52                 	db	82	;'R'
   943  007F6B  54                 	db	84	;'T'
   944  007F6C  43                 	db	67	;'C'
   945  007F6D  20                 	db	32
   946  007F6E  53                 	db	83	;'S'
   947  007F6F  45                 	db	69	;'E'
   948  007F70  54                 	db	84	;'T'
   949  007F71  54                 	db	84	;'T'
   950  007F72  49                 	db	73	;'I'
   951  007F73  4E                 	db	78	;'N'
   952  007F74  47                 	db	71	;'G'
   953  007F75  53                 	db	83	;'S'
   954  007F76  00                 	db	0
   955  007F77                     STR_56:
   956  007F77  53                 	db	83	;'S'
   957  007F78  45                 	db	69	;'E'
   958  007F79  54                 	db	84	;'T'
   959  007F7A  54                 	db	84	;'T'
   960  007F7B  49                 	db	73	;'I'
   961  007F7C  4E                 	db	78	;'N'
   962  007F7D  47                 	db	71	;'G'
   963  007F7E  53                 	db	83	;'S'
   964  007F7F  20                 	db	32
   965  007F80  4E                 	db	78	;'N'
   966  007F81  4F                 	db	79	;'O'
   967  007F82  54                 	db	84	;'T'
   968  007F83  00                 	db	0
   969  007F84                     STR_57:
   970  007F84  52                 	db	82	;'R'
   971  007F85  45                 	db	69	;'E'
   972  007F86  43                 	db	67	;'C'
   973  007F87  45                 	db	69	;'E'
   974  007F88  49                 	db	73	;'I'
   975  007F89  56                 	db	86	;'V'
   976  007F8A  45                 	db	69	;'E'
   977  007F8B  44                 	db	68	;'D'
   978  007F8C  2E                 	db	46
   979  007F8D  2E                 	db	46
   980  007F8E  2E                 	db	46
   981  007F8F  00                 	db	0
   982  007F90                     STR_21:
   983  007F90  4D                 	db	77	;'M'
   984  007F91  4F                 	db	79	;'O'
   985  007F92  44                 	db	68	;'D'
   986  007F93  45                 	db	69	;'E'
   987  007F94  20                 	db	32
   988  007F95  3D                 	db	61	;'='
   989  007F96  20                 	db	32
   990  007F97  53                 	db	83	;'S'
   991  007F98  45                 	db	69	;'E'
   992  007F99  4E                 	db	78	;'N'
   993  007F9A  44                 	db	68	;'D'
   994  007F9B  00                 	db	0
   995  007F9C                     STR_9:
   996  007F9C  50                 	db	80	;'P'
   997  007F9D  41                 	db	65	;'A'
   998  007F9E  43                 	db	67	;'C'
   999  007F9F  4B                 	db	75	;'K'
  1000  007FA0  45                 	db	69	;'E'
  1001  007FA1  54                 	db	84	;'T'
  1002  007FA2  20                 	db	32
  1003  007FA3  53                 	db	83	;'S'
  1004  007FA4  45                 	db	69	;'E'
  1005  007FA5  4E                 	db	78	;'N'
  1006  007FA6  54                 	db	84	;'T'
  1007  007FA7  00                 	db	0
  1008  007FA8                     STR_40:
  1009  007FA8  46                 	db	70	;'F'
  1010  007FA9  52                 	db	82	;'R'
  1011  007FAA  4F                 	db	79	;'O'
  1012  007FAB  4D                 	db	77	;'M'
  1013  007FAC  20                 	db	32
  1014  007FAD  52                 	db	82	;'R'
  1015  007FAE  54                 	db	84	;'T'
  1016  007FAF  55                 	db	85	;'U'
  1017  007FB0  2D                 	db	45
  1018  007FB1  31                 	db	49	;'1'
  1019  007FB2  00                 	db	0
  1020  007FB3                     STR_45:
  1021  007FB3  46                 	db	70	;'F'
  1022  007FB4  52                 	db	82	;'R'
  1023  007FB5  4F                 	db	79	;'O'
  1024  007FB6  4D                 	db	77	;'M'
  1025  007FB7  20                 	db	32
  1026  007FB8  52                 	db	82	;'R'
  1027  007FB9  54                 	db	84	;'T'
  1028  007FBA  55                 	db	85	;'U'
  1029  007FBB  2D                 	db	45
  1030  007FBC  32                 	db	50	;'2'
  1031  007FBD  00                 	db	0
  1032  007FBE                     STR_25:
  1033  007FBE  4D                 	db	77	;'M'
  1034  007FBF  4F                 	db	79	;'O'
  1035  007FC0  44                 	db	68	;'D'
  1036  007FC1  45                 	db	69	;'E'
  1037  007FC2  20                 	db	32
  1038  007FC3  3D                 	db	61	;'='
  1039  007FC4  20                 	db	32
  1040  007FC5  47                 	db	71	;'G'
  1041  007FC6  45                 	db	69	;'E'
  1042  007FC7  54                 	db	84	;'T'
  1043  007FC8  00                 	db	0
  1044  007FC9                     STR_11:
  1045  007FC9  47                 	db	71	;'G'
  1046  007FCA  4F                 	db	79	;'O'
  1047  007FCB  54                 	db	84	;'T'
  1048  007FCC  20                 	db	32
  1049  007FCD  41                 	db	65	;'A'
  1050  007FCE  4E                 	db	78	;'N'
  1051  007FCF  20                 	db	32
  1052  007FD0  45                 	db	69	;'E'
  1053  007FD1  43                 	db	67	;'C'
  1054  007FD2  4F                 	db	79	;'O'
  1055  007FD3  00                 	db	0
  1056  007FD4                     STR_1:
  1057  007FD4  4C                 	db	76	;'L'
  1058  007FD5  49                 	db	73	;'I'
  1059  007FD6  4E                 	db	78	;'N'
  1060  007FD7  45                 	db	69	;'E'
  1061  007FD8  20                 	db	32
  1062  007FD9  46                 	db	70	;'F'
  1063  007FDA  52                 	db	82	;'R'
  1064  007FDB  45                 	db	69	;'E'
  1065  007FDC  45                 	db	69	;'E'
  1066  007FDD  00                 	db	0
  1067  007FDE                     STR_4:
  1068  007FDE  45                 	db	69	;'E'
  1069  007FDF  43                 	db	67	;'C'
  1070  007FE0  4F                 	db	79	;'O'
  1071  007FE1  20                 	db	32
  1072  007FE2  46                 	db	70	;'F'
  1073  007FE3  41                 	db	65	;'A'
  1074  007FE4  49                 	db	73	;'I'
  1075  007FE5  4C                 	db	76	;'L'
  1076  007FE6  00                 	db	0
  1077  007FE7                     STR_2:
  1078  007FE7  45                 	db	69	;'E'
  1079  007FE8  43                 	db	67	;'C'
  1080  007FE9  4F                 	db	79	;'O'
  1081  007FEA  20                 	db	32
  1082  007FEB  53                 	db	83	;'S'
  1083  007FEC  45                 	db	69	;'E'
  1084  007FED  4E                 	db	78	;'N'
  1085  007FEE  54                 	db	84	;'T'
  1086  007FEF  00                 	db	0
  1087  007FF0                     STR_73:
  1088  007FF0  20                 	db	32
  1089  007FF1  4D                 	db	77	;'M'
  1090  007FF2  45                 	db	69	;'E'
  1091  007FF3  4D                 	db	77	;'M'
  1092  007FF4  32                 	db	50	;'2'
  1093  007FF5  3D                 	db	61	;'='
  1094  007FF6  00                 	db	0
  1095  007FF7                     STR_72:
  1096  007FF7  4D                 	db	77	;'M'
  1097  007FF8  45                 	db	69	;'E'
  1098  007FF9  4D                 	db	77	;'M'
  1099  007FFA  31                 	db	49	;'1'
  1100  007FFB  3D                 	db	61	;'='
  1101  007FFC  00                 	db	0
  1102  007FFD                     STR_19:
  1103  007FFD  3A                 	db	58	;':'
  1104  007FFE  00                 	db	0
  1105  007FFF                     __end_of__stringdata:
  1106                           	opt stack 0
  1107                           
  1108                           ; #config settings
  1109  007FFF  00                 	db	0	; dummy byte at the end
  1110  0000                     
  1111                           	psect	cinit
  1112  002066                     __pcinit:
  1113                           	opt stack 0
  1114  002066                     start_initialization:
  1115                           	opt stack 0
  1116  002066                     __initialization:
  1117                           	opt stack 0
  1118                           
  1119                           ; Clear objects allocated to BANK1 (128 bytes)
  1120  002066  EE01  F000         	lfsr	0,__pbssBANK1
  1121  00206A  0E80               	movlw	128
  1122  00206C                     clear_0:
  1123  00206C  6AEE               	clrf	postinc0,c
  1124  00206E  06E8               	decf	wreg,f,c
  1125  002070  E1FD               	bnz	clear_0
  1126                           
  1127                           ; Clear objects allocated to BANK0 (128 bytes)
  1128  002072  EE00  F080         	lfsr	0,__pbssBANK0
  1129  002076  0E80               	movlw	128
  1130  002078                     clear_1:
  1131  002078  6AEE               	clrf	postinc0,c
  1132  00207A  06E8               	decf	wreg,f,c
  1133  00207C  E1FD               	bnz	clear_1
  1134                           
  1135                           ; Clear objects allocated to COMRAM (53 bytes)
  1136  00207E  EE00  F001         	lfsr	0,__pbssCOMRAM
  1137  002082  0E35               	movlw	53
  1138  002084                     clear_2:
  1139  002084  6AEE               	clrf	postinc0,c
  1140  002086  06E8               	decf	wreg,f,c
  1141  002088  E1FD               	bnz	clear_2
  1142                           
  1143                           ; Initialize objects allocated to COMRAM (8 bytes)
  1144                           ; load TBLPTR registers with __pidataCOMRAM
  1145  00208A  0E74               	movlw	low __pidataCOMRAM
  1146  00208C  6EF6               	movwf	tblptrl,c
  1147  00208E  0E23               	movlw	high __pidataCOMRAM
  1148  002090  6EF7               	movwf	tblptrh,c
  1149  002092  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1150  002094  6EF8               	movwf	tblptru,c
  1151  002096  EE00  F065         	lfsr	0,__pdataCOMRAM
  1152  00209A  EE10 F008          	lfsr	1,8
  1153  00209E                     copy_data0:
  1154  00209E  0009               	tblrd		*+
  1155  0020A0  CFF5 FFEE          	movff	tablat,postinc0
  1156  0020A4  50E5               	movf	postdec1,w,c
  1157  0020A6  50E1               	movf	fsr1l,w,c
  1158  0020A8  E1FA               	bnz	copy_data0
  1159  0020AA                     end_of_initialization:
  1160                           	opt stack 0
  1161  0020AA                     __end_of__initialization:
  1162                           	opt stack 0
  1163  0020AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1164  0020AC  6EF8               	movwf	tblptru,c
  1165  0020AE  0100               	movlb	0
  1166  0020B0  EFDA  F001         	goto	_main	;jump to C main() function
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           
  1176                           	psect	bssCOMRAM
  1177  000001                     __pbssCOMRAM:
  1178                           	opt stack 0
  1179  000001                     LCDWriteInt@F3701:
  1180                           	opt stack 0
  1181  000001                     	ds	5
  1182  000006                     USARTWriteInt@F3686:
  1183                           	opt stack 0
  1184  000006                     	ds	5
  1185  00000B                     _Current_Read_Page:
  1186                           	opt stack 0
  1187  00000B                     	ds	2
  1188  00000D                     _Current_Write_Page:
  1189                           	opt stack 0
  1190  00000D                     	ds	2
  1191  00000F                     _Hum1:
  1192                           	opt stack 0
  1193  00000F                     	ds	2
  1194  000011                     _Hum2:
  1195                           	opt stack 0
  1196  000011                     	ds	2
  1197  000013                     _Read_Page1:
  1198                           	opt stack 0
  1199  000013                     	ds	2
  1200  000015                     _Read_Page2:
  1201                           	opt stack 0
  1202  000015                     	ds	2
  1203  000017                     _Temp1:
  1204                           	opt stack 0
  1205  000017                     	ds	2
  1206  000019                     _Temp2:
  1207                           	opt stack 0
  1208  000019                     	ds	2
  1209  00001B                     _Write_Page1:
  1210                           	opt stack 0
  1211  00001B                     	ds	2
  1212  00001D                     _Write_Page2:
  1213                           	opt stack 0
  1214  00001D                     	ds	2
  1215  00001F                     _errno:
  1216                           	opt stack 0
  1217  00001F                     	ds	2
  1218  000021                     _Current_Pos:
  1219                           	opt stack 0
  1220  000021                     	ds	1
  1221  000022                     _Data_End:
  1222                           	opt stack 0
  1223  000022                     	ds	1
  1224  000023                     _Destination_ID:
  1225                           	opt stack 0
  1226  000023                     	ds	1
  1227  000024                     _Destination_ID1:
  1228                           	opt stack 0
  1229  000024                     	ds	1
  1230  000025                     _Destination_ID2:
  1231                           	opt stack 0
  1232  000025                     	ds	1
  1233  000026                     _Master_ID:
  1234                           	opt stack 0
  1235  000026                     	ds	1
  1236  000027                     _Source_ID:
  1237                           	opt stack 0
  1238  000027                     	ds	1
  1239  000028                     _UQEnd:
  1240                           	opt stack 0
  1241  000028                     	ds	1
  1242  000029                     _UQFront:
  1243                           	opt stack 0
  1244  000029                     	ds	1
  1245  00002A                     _c:
  1246                           	opt stack 0
  1247  00002A                     	ds	1
  1248  00002B                     _day:
  1249                           	opt stack 0
  1250  00002B                     	ds	1
  1251  00002C                     _device:
  1252                           	opt stack 0
  1253  00002C                     	ds	1
  1254  00002D                     _dow:
  1255                           	opt stack 0
  1256  00002D                     	ds	1
  1257  00002E                     _hr:
  1258                           	opt stack 0
  1259  00002E                     	ds	1
  1260  00002F                     _min:
  1261                           	opt stack 0
  1262  00002F                     	ds	1
  1263  000030                     _min_flag:
  1264                           	opt stack 0
  1265  000030                     	ds	1
  1266  000031                     _month:
  1267                           	opt stack 0
  1268  000031                     	ds	1
  1269  000032                     _sec:
  1270                           	opt stack 0
  1271  000032                     	ds	1
  1272  000033                     _sec_flag:
  1273                           	opt stack 0
  1274  000033                     	ds	1
  1275  000034                     _seconds:
  1276                           	opt stack 0
  1277  000034                     	ds	1
  1278  000035                     _year:
  1279                           	opt stack 0
  1280  000035                     	ds	1
  1281                           tblptru	equ	0xFF8
  1282                           tblptrh	equ	0xFF7
  1283                           tblptrl	equ	0xFF6
  1284                           tablat	equ	0xFF5
  1285                           postinc0	equ	0xFEE
  1286                           wreg	equ	0xFE8
  1287                           postdec1	equ	0xFE5
  1288                           fsr1l	equ	0xFE1
  1289                           
  1290                           	psect	dataCOMRAM
  1291  000065                     __pdataCOMRAM:
  1292                           	opt stack 0
  1293  000065                     ___cgram:
  1294                           	opt stack 0
  1295  000065                     	ds	8
  1296                           tblptru	equ	0xFF8
  1297                           tblptrh	equ	0xFF7
  1298                           tblptrl	equ	0xFF6
  1299                           tablat	equ	0xFF5
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           postdec1	equ	0xFE5
  1303                           fsr1l	equ	0xFE1
  1304                           
  1305                           	psect	bssBANK0
  1306  000080                     __pbssBANK0:
  1307                           	opt stack 0
  1308  000080                     _PACKET:
  1309                           	opt stack 0
  1310  000080                     	ds	128
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1l	equ	0xFE1
  1319                           
  1320                           	psect	bssBANK1
  1321  000100                     __pbssBANK1:
  1322                           	opt stack 0
  1323  000100                     _URBuff:
  1324                           	opt stack 0
  1325  000100                     	ds	128
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1l	equ	0xFE1
  1334                           
  1335                           	psect	cstackBANK1
  1336  000180                     __pcstackBANK1:
  1337                           	opt stack 0
  1338  000180                     ??_getting_data:
  1339  000180                     rtc_setting@atm:
  1340                           	opt stack 0
  1341  000180                     data_to_center@msb:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x0
  1345  000180                     	ds	1
  1346  000181                     rtc_setting@mem_loc:
  1347                           	opt stack 0
  1348  000181                     data_to_center@lsb:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x1
  1352  000181                     	ds	1
  1353  000182                     rtc_setting@s:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x2
  1357  000182                     	ds	1
  1358  000183                     getting_data@result:
  1359                           	opt stack 0
  1360  000183                     rtc_setting@result:
  1361                           	opt stack 0
  1362                           
  1363                           ; 1 bytes @ 0x3
  1364  000183                     	ds	1
  1365  000184                     getting_data@msb:
  1366                           	opt stack 0
  1367  000184                     rtc_setting@i:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x4
  1371  000184                     	ds	1
  1372  000185                     getting_data@lsb:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x5
  1376  000185                     	ds	1
  1377  000186                     main@choice:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x6
  1381  000186                     	ds	1
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1l	equ	0xFE1
  1390                           
  1391                           	psect	cstackCOMRAM
  1392  000036                     __pcstackCOMRAM:
  1393                           	opt stack 0
  1394  000036                     ??_USARTHandleRxInt:
  1395  000036                     
  1396                           ; 1 bytes @ 0x0
  1397  000036                     	ds	4
  1398  00003A                     USARTHandleRxInt@data:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x4
  1402  00003A                     	ds	1
  1403  00003B                     ??_ISR:
  1404                           
  1405                           ; 0 bytes @ 0x5
  1406  00003B                     	ds	14
  1407  000049                     ??_USARTDataAvailable:
  1408  000049                     ??_Check_CRC:
  1409  000049                     ??_IdleI2C:
  1410  000049                     ??_ReadI2C:
  1411  000049                     ??_bcd2bin:
  1412  000049                     ?_Calculate_CRC:
  1413                           	opt stack 0
  1414  000049                     ?___awdiv:
  1415                           	opt stack 0
  1416  000049                     ?___awmod:
  1417                           	opt stack 0
  1418  000049                     LCDBusyLoop@busy:
  1419                           	opt stack 0
  1420  000049                     bin2bcd@binary_value:
  1421                           	opt stack 0
  1422  000049                     Creat_Packet@Readings:
  1423                           	opt stack 0
  1424  000049                     Clear_Packet@i:
  1425                           	opt stack 0
  1426  000049                     USARTWriteChar@ch:
  1427                           	opt stack 0
  1428  000049                     USARTReadData@data:
  1429                           	opt stack 0
  1430  000049                     OpenI2C@slew:
  1431                           	opt stack 0
  1432  000049                     MyDelay@ms:
  1433                           	opt stack 0
  1434  000049                     getkey@msecs:
  1435                           	opt stack 0
  1436  000049                     USARTInit@baud_rate:
  1437                           	opt stack 0
  1438  000049                     Read_b_eep@badd:
  1439                           	opt stack 0
  1440  000049                     Write_b_eep@badd:
  1441                           	opt stack 0
  1442  000049                     ___awdiv@dividend:
  1443                           	opt stack 0
  1444  000049                     ___awmod@dividend:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x13
  1448  000049                     	ds	1
  1449  00004A                     ??_WriteI2C:
  1450  00004A                     ??_Check_Busy_Line:
  1451  00004A                     LCDBusyLoop@temp:
  1452                           	opt stack 0
  1453  00004A                     bin2bcd@retval:
  1454                           	opt stack 0
  1455  00004A                     bcd2bin@bcd_value:
  1456                           	opt stack 0
  1457  00004A                     Creat_Packet@F_Code:
  1458                           	opt stack 0
  1459  00004A                     OpenI2C@sync_mode:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x14
  1463  00004A                     	ds	1
  1464  00004B                     ??_Calculate_CRC:
  1465  00004B                     ??_MyDelay:
  1466  00004B                     ??_USARTInit:
  1467  00004B                     ??_getkey:
  1468  00004B                     LCDBusyLoop@status:
  1469                           	opt stack 0
  1470  00004B                     bin2bcd@temp:
  1471                           	opt stack 0
  1472  00004B                     bcd2bin@temp:
  1473                           	opt stack 0
  1474  00004B                     Write_b_eep@bdat:
  1475                           	opt stack 0
  1476  00004B                     WriteI2C@data_out:
  1477                           	opt stack 0
  1478  00004B                     Check_Busy_Line@ms:
  1479                           	opt stack 0
  1480  00004B                     ___awdiv@divisor:
  1481                           	opt stack 0
  1482  00004B                     ___awmod@divisor:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x15
  1486  00004B                     	ds	1
  1487  00004C                     ??_clear_rom:
  1488  00004C                     LCDByte@isdata:
  1489                           	opt stack 0
  1490  00004C                     ds1307_init@seconds:
  1491                           	opt stack 0
  1492  00004C                     Write_b_eep@GIE_BIT_VAL:
  1493                           	opt stack 0
  1494  00004C                     rom_byte_write@address:
  1495                           	opt stack 0
  1496  00004C                     rom_byte_read@address:
  1497                           	opt stack 0
  1498  00004C                     beep@del:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x16
  1502  00004C                     	ds	1
  1503  00004D                     ??_LCDByte:
  1504  00004D                     Check_Busy_Line@n:
  1505                           	opt stack 0
  1506  00004D                     ___awdiv@counter:
  1507                           	opt stack 0
  1508  00004D                     ___awmod@counter:
  1509                           	opt stack 0
  1510  00004D                     clear_rom@page:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x17
  1514  00004D                     	ds	1
  1515  00004E                     ??_rom_byte_read:
  1516  00004E                     LCDByte@hn:
  1517                           	opt stack 0
  1518  00004E                     rom_byte_write@byte:
  1519                           	opt stack 0
  1520  00004E                     ___awdiv@sign:
  1521                           	opt stack 0
  1522  00004E                     ___awmod@sign:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x18
  1526  00004E                     	ds	1
  1527  00004F                     ??_rom_byte_write:
  1528  00004F                     LCDByte@ln:
  1529                           	opt stack 0
  1530  00004F                     clear_rom@word:
  1531                           	opt stack 0
  1532  00004F                     ___awdiv@quotient:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x19
  1536  00004F                     	ds	1
  1537  000050                     LCDByte@c:
  1538                           	opt stack 0
  1539  000050                     Check_CRC@CRC_HI:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x1A
  1543  000050                     	ds	1
  1544  000051                     LCDByte@temp:
  1545                           	opt stack 0
  1546  000051                     rom_byte_read@msb:
  1547                           	opt stack 0
  1548  000051                     Check_CRC@CRC_LOW:
  1549                           	opt stack 0
  1550                           
  1551                           ; 1 bytes @ 0x1B
  1552  000051                     	ds	1
  1553  000052                     ??_LCDInit:
  1554  000052                     LCDGotoXY@y:
  1555                           	opt stack 0
  1556  000052                     rom_byte_write@msb:
  1557                           	opt stack 0
  1558  000052                     rom_byte_read@lsb:
  1559                           	opt stack 0
  1560  000052                     LCDWriteString@msg:
  1561                           	opt stack 0
  1562  000052                     LCDWriteInt@val:
  1563                           	opt stack 0
  1564  000052                     Calculate_CRC@sum:
  1565                           	opt stack 0
  1566  000052                     Check_CRC@sum:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x1C
  1570  000052                     	ds	1
  1571  000053                     LCDInit@style:
  1572                           	opt stack 0
  1573  000053                     LCDGotoXY@x:
  1574                           	opt stack 0
  1575  000053                     rom_byte_write@lsb:
  1576                           	opt stack 0
  1577  000053                     rom_byte_read@data:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x1D
  1581  000053                     	ds	1
  1582  000054                     ??_LCDWriteString:
  1583  000054                     LCDInit@__i:
  1584                           	opt stack 0
  1585  000054                     LCDWriteInt@field_length:
  1586                           	opt stack 0
  1587  000054                     Calculate_CRC@count:
  1588                           	opt stack 0
  1589  000054                     Check_CRC@count:
  1590                           	opt stack 0
  1591  000054                     write_packet_to_page@page_no:
  1592                           	opt stack 0
  1593  000054                     read_packet_from_page@page_no:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x1E
  1597  000054                     	ds	1
  1598  000055                     ??_LCDWriteInt:
  1599  000055                     ??_Creat_RTC_Packet:
  1600  000055                     LCDWriteString@cc:
  1601                           	opt stack 0
  1602  000055                     Check_CRC@length:
  1603                           	opt stack 0
  1604  000055                     RTUInit@high:
  1605                           	opt stack 0
  1606                           
  1607                           ; 1 bytes @ 0x1F
  1608  000055                     	ds	1
  1609  000056                     ??_Eco_Test:
  1610  000056                     ??_Eco_Replay:
  1611  000056                     ??_write_packet_to_page:
  1612  000056                     ??_read_packet_from_page:
  1613  000056                     RTUInit@low:
  1614                           	opt stack 0
  1615  000056                     Check_CRC@CRC:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x20
  1619  000056                     	ds	1
  1620  000057                     Eco_Test@re:
  1621                           	opt stack 0
  1622  000057                     Eco_Replay@ts:
  1623                           	opt stack 0
  1624  000057                     RTUInit@adr:
  1625                           	opt stack 0
  1626  000057                     LCDWriteInt@str:
  1627                           	opt stack 0
  1628                           
  1629                           ; 5 bytes @ 0x21
  1630  000057                     	ds	1
  1631  000058                     Eco_Test@data:
  1632                           	opt stack 0
  1633  000058                     Eco_Replay@n:
  1634                           	opt stack 0
  1635  000058                     write_packet_to_page@msb:
  1636                           	opt stack 0
  1637  000058                     read_packet_from_page@data:
  1638                           	opt stack 0
  1639  000058                     Creat_RTC_Packet@crc_h:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0x22
  1643  000058                     	ds	1
  1644  000059                     Eco_Replay@data:
  1645                           	opt stack 0
  1646  000059                     write_packet_to_page@lsb:
  1647                           	opt stack 0
  1648  000059                     read_packet_from_page@msb:
  1649                           	opt stack 0
  1650  000059                     Creat_RTC_Packet@crc_l:
  1651                           	opt stack 0
  1652  000059                     Eco_Test@ts:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x23
  1656  000059                     	ds	1
  1657  00005A                     ??_Receive_Packet:
  1658  00005A                     read_packet_from_page@lsb:
  1659                           	opt stack 0
  1660  00005A                     Creat_RTC_Packet@id:
  1661                           	opt stack 0
  1662  00005A                     write_packet_to_page@address:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x24
  1666  00005A                     	ds	1
  1667  00005B                     Eco_Test@n:
  1668                           	opt stack 0
  1669  00005B                     Creat_RTC_Packet@mem_loc:
  1670                           	opt stack 0
  1671  00005B                     Receive_Packet@msecs:
  1672                           	opt stack 0
  1673  00005B                     read_packet_from_page@address:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x25
  1677  00005B                     	ds	1
  1678  00005C                     ??_Send_Packet:
  1679  00005C                     write_packet_to_page@count:
  1680                           	opt stack 0
  1681  00005C                     LCDWriteInt@j:
  1682                           	opt stack 0
  1683  00005C                     Creat_RTC_Packet@packet_crc:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x26
  1687  00005C                     	ds	1
  1688  00005D                     Receive_Packet@count:
  1689                           	opt stack 0
  1690  00005D                     read_packet_from_page@count:
  1691                           	opt stack 0
  1692  00005D                     Send_Packet@ts:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x27
  1696  00005D                     	ds	1
  1697  00005E                     Receive_Packet@n:
  1698                           	opt stack 0
  1699  00005E                     Creat_RTC_Packet@i:
  1700                           	opt stack 0
  1701  00005E                     LCDWriteInt@i:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x28
  1705  00005E                     	ds	1
  1706  00005F                     Send_Packet@count:
  1707                           	opt stack 0
  1708  00005F                     Receive_Packet@result:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x29
  1712  00005F                     	ds	1
  1713  000060                     Send_Packet@result:
  1714                           	opt stack 0
  1715  000060                     local_display@s:
  1716                           	opt stack 0
  1717                           
  1718                           ; 1 bytes @ 0x2A
  1719  000060                     	ds	1
  1720  000061                     Send_Packet@n:
  1721                           	opt stack 0
  1722                           
  1723                           ; 1 bytes @ 0x2B
  1724  000061                     	ds	1
  1725  000062                     Send_Packet@data:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x2C
  1729  000062                     	ds	1
  1730  000063                     tx_packet@attempts:
  1731                           	opt stack 0
  1732                           
  1733                           ; 1 bytes @ 0x2D
  1734  000063                     	ds	1
  1735  000064                     tx_packet@res:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x2E
  1739  000064                     	ds	1
  1740  000065                     tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1l	equ	0xFE1
  1748                           
  1749                           ; 0 bytes @ 0x2F
  1750 ;;
  1751 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1752 ;;
  1753 ;; *************** function _main *****************
  1754 ;; Defined at:
  1755 ;;		line 29 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  choice          1    6[BANK1 ] unsigned char 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;		None               void
  1762 ;; Registers used:
  1763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1769 ;;      Params:         0       0       0       0       0       0       0
  1770 ;;      Locals:         0       0       1       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0
  1772 ;;      Totals:         0       0       1       0       0       0       0
  1773 ;;Total ram usage:        1 bytes
  1774 ;; Hardware stack levels required when called:    9
  1775 ;; This function calls:
  1776 ;;		_LCDByte
  1777 ;;		_LCDGotoXY
  1778 ;;		_LCDWriteInt
  1779 ;;		_LCDWriteString
  1780 ;;		_MyDelay
  1781 ;;		_RTUInit
  1782 ;;		_beep
  1783 ;;		_data_to_center
  1784 ;;		_ds1307_get_time
  1785 ;;		_getkey
  1786 ;;		_getting_data
  1787 ;;		_local_display
  1788 ;;		_rtc_setting
  1789 ;; This function is called by:
  1790 ;;		Startup code after reset
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text0
  1795  0003B4                     __ptext0:
  1796                           	opt stack 0
  1797  0003B4                     _main:
  1798                           	opt stack 22
  1799                           
  1800                           ;incstack = 0
  1801  0003B4  FFFF               	dw	65535
  1802                           
  1803                           ;Test1.c: 31: unsigned char choice = 0;
  1804  0003B6  0E00               	movlw	0
  1805  0003B8  0101               	movlb	1	; () banked
  1806  0003BA  6F86               	movwf	main@choice& (0+255),b
  1807                           
  1808                           ; BSR set to: 1
  1809                           ;Test1.c: 32: RTUInit();
  1810  0003BC  EC22  F004         	call	_RTUInit	;wreg free
  1811                           
  1812                           ;Test1.c: 35: LCDWriteString("Welcome to CENTR");
  1813  0003C0  0E7D               	movlw	high STR_17
  1814  0003C2  6E53               	movwf	LCDWriteString@msg+1,c
  1815  0003C4  0EC9               	movlw	low STR_17
  1816  0003C6  6E52               	movwf	LCDWriteString@msg,c
  1817  0003C8  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1818                           
  1819                           ;Test1.c: 36: MyDelay(1000);
  1820  0003CC  0E03               	movlw	3
  1821  0003CE  6E4A               	movwf	MyDelay@ms+1,c
  1822  0003D0  0EE8               	movlw	232
  1823  0003D2  6E49               	movwf	MyDelay@ms,c
  1824  0003D4  EC53  F011         	call	_MyDelay	;wreg free
  1825  0003D8                     l7357:
  1826                           
  1827                           ;Test1.c: 38: {
  1828                           ;Test1.c: 39: choice = 0;
  1829  0003D8  0E00               	movlw	0
  1830  0003DA  0101               	movlb	1	; () banked
  1831  0003DC  6F86               	movwf	main@choice& (0+255),b
  1832                           
  1833                           ;Test1.c: 40: while(choice == 0)
  1834  0003DE  D054               	goto	l7391
  1835  0003E0                     l7359:
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;Test1.c: 41: {
  1839                           ;Test1.c: 42: choice = getkey(5);
  1840  0003E0  0E00               	movlw	0
  1841  0003E2  6E4A               	movwf	getkey@msecs+1,c
  1842  0003E4  0E05               	movlw	5
  1843  0003E6  6E49               	movwf	getkey@msecs,c
  1844  0003E8  EC7D  F00F         	call	_getkey	;wreg free
  1845  0003EC  0101               	movlb	1	; () banked
  1846  0003EE  6F86               	movwf	main@choice& (0+255),b
  1847                           
  1848                           ; BSR set to: 1
  1849                           ;Test1.c: 43: if(sec_flag == 1)
  1850  0003F0  0433               	decf	_sec_flag,w,c
  1851  0003F2  A4D8               	btfss	status,2,c
  1852  0003F4  D049               	goto	l7391
  1853                           
  1854                           ; BSR set to: 1
  1855                           ;Test1.c: 44: {
  1856                           ;Test1.c: 45: sec_flag = 0;
  1857  0003F6  0E00               	movlw	0
  1858  0003F8  6E33               	movwf	_sec_flag,c
  1859                           
  1860                           ; BSR set to: 1
  1861                           ;Test1.c: 46: ds1307_get_time();
  1862  0003FA  ECED  F00D         	call	_ds1307_get_time	;wreg free
  1863                           
  1864                           ;Test1.c: 48: (LCDByte(0b00000001,0));
  1865  0003FE  0E00               	movlw	0
  1866  000400  6E4C               	movwf	LCDByte@isdata,c
  1867  000402  0E01               	movlw	1
  1868  000404  ECAF  F00F         	call	_LCDByte
  1869                           
  1870                           ;Test1.c: 50: LCDWriteString("Press a Switch...");
  1871  000408  0E7D               	movlw	high STR_18
  1872  00040A  6E53               	movwf	LCDWriteString@msg+1,c
  1873  00040C  0E4F               	movlw	low STR_18
  1874  00040E  6E52               	movwf	LCDWriteString@msg,c
  1875  000410  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1876                           
  1877                           ;Test1.c: 51: LCDGotoXY(4,1);
  1878  000414  0E01               	movlw	1
  1879  000416  6E52               	movwf	LCDGotoXY@y,c
  1880  000418  0E04               	movlw	4
  1881  00041A  ECA3  F010         	call	_LCDGotoXY
  1882                           
  1883                           ;Test1.c: 52: LCDWriteInt(hr,2);
  1884  00041E  C02E  F052         	movff	_hr,LCDWriteInt@val
  1885  000422  6A53               	clrf	LCDWriteInt@val+1,c
  1886  000424  0E02               	movlw	2
  1887  000426  6E54               	movwf	LCDWriteInt@field_length,c
  1888  000428  EC52  F008         	call	_LCDWriteInt	;wreg free
  1889                           
  1890                           ;Test1.c: 53: LCDGotoXY(6,1);
  1891  00042C  0E01               	movlw	1
  1892  00042E  6E52               	movwf	LCDGotoXY@y,c
  1893  000430  0E06               	movlw	6
  1894  000432  ECA3  F010         	call	_LCDGotoXY
  1895                           
  1896                           ;Test1.c: 54: LCDWriteString(":");
  1897  000436  0E7F               	movlw	high STR_19
  1898  000438  6E53               	movwf	LCDWriteString@msg+1,c
  1899  00043A  0EFD               	movlw	low STR_19
  1900  00043C  6E52               	movwf	LCDWriteString@msg,c
  1901  00043E  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1902                           
  1903                           ;Test1.c: 55: LCDGotoXY(7,1);
  1904  000442  0E01               	movlw	1
  1905  000444  6E52               	movwf	LCDGotoXY@y,c
  1906  000446  0E07               	movlw	7
  1907  000448  ECA3  F010         	call	_LCDGotoXY
  1908                           
  1909                           ;Test1.c: 56: LCDWriteInt(min,2);
  1910  00044C  C02F  F052         	movff	_min,LCDWriteInt@val
  1911  000450  6A53               	clrf	LCDWriteInt@val+1,c
  1912  000452  0E02               	movlw	2
  1913  000454  6E54               	movwf	LCDWriteInt@field_length,c
  1914  000456  EC52  F008         	call	_LCDWriteInt	;wreg free
  1915                           
  1916                           ;Test1.c: 57: LCDGotoXY(9,1);
  1917  00045A  0E01               	movlw	1
  1918  00045C  6E52               	movwf	LCDGotoXY@y,c
  1919  00045E  0E09               	movlw	9
  1920  000460  ECA3  F010         	call	_LCDGotoXY
  1921                           
  1922                           ;Test1.c: 58: LCDWriteString(":");
  1923  000464  0E7F               	movlw	high STR_19
  1924  000466  6E53               	movwf	LCDWriteString@msg+1,c
  1925  000468  0EFD               	movlw	low STR_19
  1926  00046A  6E52               	movwf	LCDWriteString@msg,c
  1927  00046C  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1928                           
  1929                           ;Test1.c: 59: LCDGotoXY(10,1);
  1930  000470  0E01               	movlw	1
  1931  000472  6E52               	movwf	LCDGotoXY@y,c
  1932  000474  0E0A               	movlw	10
  1933  000476  ECA3  F010         	call	_LCDGotoXY
  1934                           
  1935                           ;Test1.c: 60: LCDWriteInt(sec,2);
  1936  00047A  C032  F052         	movff	_sec,LCDWriteInt@val
  1937  00047E  6A53               	clrf	LCDWriteInt@val+1,c
  1938  000480  0E02               	movlw	2
  1939  000482  6E54               	movwf	LCDWriteInt@field_length,c
  1940  000484  EC52  F008         	call	_LCDWriteInt	;wreg free
  1941  000488                     l7391:
  1942  000488  0101               	movlb	1	; () banked
  1943  00048A  5186               	movf	main@choice& (0+255),w,b
  1944  00048C  B4D8               	btfsc	status,2,c
  1945  00048E  D7A8               	goto	l7359
  1946                           
  1947                           ; BSR set to: 1
  1948                           ;Test1.c: 61: }
  1949                           ;Test1.c: 62: }
  1950                           ;Test1.c: 63: (LCDByte(0b00000001,0));
  1951                           
  1952                           ; BSR set to: 1
  1953  000490  0E00               	movlw	0
  1954  000492  6E4C               	movwf	LCDByte@isdata,c
  1955  000494  0E01               	movlw	1
  1956  000496  ECAF  F00F         	call	_LCDByte
  1957                           
  1958                           ;Test1.c: 64: beep(50);
  1959  00049A  0E00               	movlw	0
  1960  00049C  6E4D               	movwf	beep@del+1,c
  1961  00049E  0E32               	movlw	50
  1962  0004A0  6E4C               	movwf	beep@del,c
  1963  0004A2  EC92  F011         	call	_beep	;wreg free
  1964                           
  1965                           ;Test1.c: 65: switch(choice)
  1966  0004A6  D09F               	goto	l7445
  1967  0004A8                     l7395:
  1968                           
  1969                           ;Test1.c: 68: LCDWriteString("MODE = SEND");
  1970  0004A8  0E7F               	movlw	high STR_21
  1971  0004AA  6E53               	movwf	LCDWriteString@msg+1,c
  1972  0004AC  0E90               	movlw	low STR_21
  1973  0004AE  6E52               	movwf	LCDWriteString@msg,c
  1974  0004B0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1975                           
  1976                           ;Test1.c: 69: LCDGotoXY(0,1);
  1977  0004B4  0E01               	movlw	1
  1978  0004B6  6E52               	movwf	LCDGotoXY@y,c
  1979  0004B8  0E00               	movlw	0
  1980  0004BA  ECA3  F010         	call	_LCDGotoXY
  1981                           
  1982                           ;Test1.c: 70: LCDWriteString("DATA TO CENTER");
  1983  0004BE  0E7E               	movlw	high STR_22
  1984  0004C0  6E53               	movwf	LCDWriteString@msg+1,c
  1985  0004C2  0ECE               	movlw	low STR_22
  1986  0004C4  6E52               	movwf	LCDWriteString@msg,c
  1987  0004C6  ECF9  F00B         	call	_LCDWriteString	;wreg free
  1988                           
  1989                           ;Test1.c: 71: MyDelay(100);
  1990  0004CA  0E00               	movlw	0
  1991  0004CC  6E4A               	movwf	MyDelay@ms+1,c
  1992  0004CE  0E64               	movlw	100
  1993  0004D0  6E49               	movwf	MyDelay@ms,c
  1994  0004D2  EC53  F011         	call	_MyDelay	;wreg free
  1995                           
  1996                           ;Test1.c: 72: (LCDByte(0b00000001,0));
  1997  0004D6  0E00               	movlw	0
  1998  0004D8  6E4C               	movwf	LCDByte@isdata,c
  1999  0004DA  0E01               	movlw	1
  2000  0004DC  ECAF  F00F         	call	_LCDByte
  2001                           
  2002                           ;Test1.c: 73: data_to_center();
  2003  0004E0  EC2A  F005         	call	_data_to_center	;wreg free
  2004                           
  2005                           ;Test1.c: 74: break;
  2006  0004E4  D779               	goto	l7357
  2007  0004E6                     l7403:
  2008                           
  2009                           ;Test1.c: 76: LCDWriteString("MODE = MEMORY");
  2010  0004E6  0E7F               	movlw	high STR_23
  2011  0004E8  6E53               	movwf	LCDWriteString@msg+1,c
  2012  0004EA  0E41               	movlw	low STR_23
  2013  0004EC  6E52               	movwf	LCDWriteString@msg,c
  2014  0004EE  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2015                           
  2016                           ;Test1.c: 77: LCDGotoXY(0,1);
  2017  0004F2  0E01               	movlw	1
  2018  0004F4  6E52               	movwf	LCDGotoXY@y,c
  2019  0004F6  0E00               	movlw	0
  2020  0004F8  ECA3  F010         	call	_LCDGotoXY
  2021                           
  2022                           ;Test1.c: 78: LCDWriteString("AND RTC DISPLAY");
  2023  0004FC  0E7E               	movlw	high STR_24
  2024  0004FE  6E53               	movwf	LCDWriteString@msg+1,c
  2025  000500  0E80               	movlw	low STR_24
  2026  000502  6E52               	movwf	LCDWriteString@msg,c
  2027  000504  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2028                           
  2029                           ;Test1.c: 79: local_display();
  2030  000508  EC31  F00A         	call	_local_display	;wreg free
  2031                           
  2032                           ;Test1.c: 80: MyDelay(100);
  2033  00050C  0E00               	movlw	0
  2034  00050E  6E4A               	movwf	MyDelay@ms+1,c
  2035  000510  0E64               	movlw	100
  2036  000512  6E49               	movwf	MyDelay@ms,c
  2037  000514  EC53  F011         	call	_MyDelay	;wreg free
  2038                           
  2039                           ;Test1.c: 81: break;
  2040  000518  D75F               	goto	l7357
  2041  00051A                     l7413:
  2042                           
  2043                           ;Test1.c: 83: LCDWriteString("MODE = GET");
  2044  00051A  0E7F               	movlw	high STR_25
  2045  00051C  6E53               	movwf	LCDWriteString@msg+1,c
  2046  00051E  0EBE               	movlw	low STR_25
  2047  000520  6E52               	movwf	LCDWriteString@msg,c
  2048  000522  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2049                           
  2050                           ;Test1.c: 84: LCDGotoXY(0,1);
  2051  000526  0E01               	movlw	1
  2052  000528  6E52               	movwf	LCDGotoXY@y,c
  2053  00052A  0E00               	movlw	0
  2054  00052C  ECA3  F010         	call	_LCDGotoXY
  2055                           
  2056                           ;Test1.c: 85: LCDWriteString("RTC SETTINGS");
  2057  000530  0E7F               	movlw	high STR_26
  2058  000532  6E53               	movwf	LCDWriteString@msg+1,c
  2059  000534  0E6A               	movlw	low STR_26
  2060  000536  6E52               	movwf	LCDWriteString@msg,c
  2061  000538  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2062                           
  2063                           ;Test1.c: 86: MyDelay(100);
  2064  00053C  0E00               	movlw	0
  2065  00053E  6E4A               	movwf	MyDelay@ms+1,c
  2066  000540  0E64               	movlw	100
  2067  000542  6E49               	movwf	MyDelay@ms,c
  2068  000544  EC53  F011         	call	_MyDelay	;wreg free
  2069                           
  2070                           ;Test1.c: 87: rtc_setting();
  2071  000548  EC05  F003         	call	_rtc_setting	;wreg free
  2072                           
  2073                           ;Test1.c: 88: break;
  2074  00054C  D745               	goto	l7357
  2075  00054E                     l7421:
  2076                           
  2077                           ;Test1.c: 90: LCDWriteString("MODE = WAITING");
  2078  00054E  0E7E               	movlw	high STR_27
  2079  000550  6E53               	movwf	LCDWriteString@msg+1,c
  2080  000552  0EBF               	movlw	low STR_27
  2081  000554  6E52               	movwf	LCDWriteString@msg,c
  2082  000556  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2083                           
  2084                           ;Test1.c: 91: LCDGotoXY(0,1);
  2085  00055A  0E01               	movlw	1
  2086  00055C  6E52               	movwf	LCDGotoXY@y,c
  2087  00055E  0E00               	movlw	0
  2088  000560  ECA3  F010         	call	_LCDGotoXY
  2089                           
  2090                           ;Test1.c: 92: LCDWriteString("FOR RTU. PACKET");
  2091  000564  0E7E               	movlw	high STR_28
  2092  000566  6E53               	movwf	LCDWriteString@msg+1,c
  2093  000568  0E70               	movlw	low STR_28
  2094  00056A  6E52               	movwf	LCDWriteString@msg,c
  2095  00056C  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2096                           
  2097                           ;Test1.c: 93: MyDelay(100);
  2098  000570  0E00               	movlw	0
  2099  000572  6E4A               	movwf	MyDelay@ms+1,c
  2100  000574  0E64               	movlw	100
  2101  000576  6E49               	movwf	MyDelay@ms,c
  2102  000578  EC53  F011         	call	_MyDelay	;wreg free
  2103                           
  2104                           ;Test1.c: 94: getting_data();
  2105  00057C  EC4D  F000         	call	_getting_data	;wreg free
  2106                           
  2107                           ;Test1.c: 95: break;
  2108  000580  D72B               	goto	l7357
  2109  000582                     l7429:
  2110                           
  2111                           ;Test1.c: 97: LCDWriteString("THIS SWITCH IS");
  2112  000582  0E7E               	movlw	high STR_29
  2113  000584  6E53               	movwf	LCDWriteString@msg+1,c
  2114  000586  0EDD               	movlw	low STR_29
  2115  000588  6E52               	movwf	LCDWriteString@msg,c
  2116  00058A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2117                           
  2118                           ;Test1.c: 98: LCDGotoXY(0,1);
  2119  00058E  0E01               	movlw	1
  2120  000590  6E52               	movwf	LCDGotoXY@y,c
  2121  000592  0E00               	movlw	0
  2122  000594  ECA3  F010         	call	_LCDGotoXY
  2123                           
  2124                           ;Test1.c: 99: LCDWriteString("FOR FUTURE USE");
  2125  000598  0E7E               	movlw	high STR_30
  2126  00059A  6E53               	movwf	LCDWriteString@msg+1,c
  2127  00059C  0EB0               	movlw	low STR_30
  2128  00059E  6E52               	movwf	LCDWriteString@msg,c
  2129  0005A0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2130                           
  2131                           ;Test1.c: 100: MyDelay(100);
  2132  0005A4  0E00               	movlw	0
  2133  0005A6  6E4A               	movwf	MyDelay@ms+1,c
  2134  0005A8  0E64               	movlw	100
  2135  0005AA  6E49               	movwf	MyDelay@ms,c
  2136  0005AC  EC53  F011         	call	_MyDelay	;wreg free
  2137                           
  2138                           ;Test1.c: 102: break;
  2139  0005B0  D713               	goto	l7357
  2140  0005B2                     l7435:
  2141                           
  2142                           ;Test1.c: 104: LCDWriteString("MODE = WAITING");
  2143  0005B2  0E7E               	movlw	high STR_27
  2144  0005B4  6E53               	movwf	LCDWriteString@msg+1,c
  2145  0005B6  0EBF               	movlw	low STR_27
  2146  0005B8  6E52               	movwf	LCDWriteString@msg,c
  2147  0005BA  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2148                           
  2149                           ;Test1.c: 105: LCDGotoXY(0,1);
  2150  0005BE  0E01               	movlw	1
  2151  0005C0  6E52               	movwf	LCDGotoXY@y,c
  2152  0005C2  0E00               	movlw	0
  2153  0005C4  ECA3  F010         	call	_LCDGotoXY
  2154                           
  2155                           ;Test1.c: 106: LCDWriteString("FOR RTU. PACKET");
  2156  0005C8  0E7E               	movlw	high STR_28
  2157  0005CA  6E53               	movwf	LCDWriteString@msg+1,c
  2158  0005CC  0E70               	movlw	low STR_28
  2159  0005CE  6E52               	movwf	LCDWriteString@msg,c
  2160  0005D0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2161                           
  2162                           ;Test1.c: 107: MyDelay(100);
  2163  0005D4  0E00               	movlw	0
  2164  0005D6  6E4A               	movwf	MyDelay@ms+1,c
  2165  0005D8  0E64               	movlw	100
  2166  0005DA  6E49               	movwf	MyDelay@ms,c
  2167  0005DC  EC53  F011         	call	_MyDelay	;wreg free
  2168                           
  2169                           ;Test1.c: 108: getting_data();
  2170  0005E0  EC4D  F000         	call	_getting_data	;wreg free
  2171                           
  2172                           ;Test1.c: 109: break;
  2173  0005E4  D6F9               	goto	l7357
  2174  0005E6                     l7445:
  2175  0005E6  0101               	movlb	1	; () banked
  2176  0005E8  5186               	movf	main@choice& (0+255),w,b
  2177                           
  2178                           ; Switch size 1, requested type "space"
  2179                           ; Number of cases is 5, Range of values is 1 to 5
  2180                           ; switch strategies available:
  2181                           ; Name         Instructions Cycles
  2182                           ; simple_byte           16     9 (average)
  2183                           ;	Chosen strategy is simple_byte
  2184  0005EA  0A01               	xorlw	1	; case 1
  2185  0005EC  B4D8               	btfsc	status,2,c
  2186  0005EE  D75C               	goto	l7395
  2187  0005F0  0A03               	xorlw	3	; case 2
  2188  0005F2  B4D8               	btfsc	status,2,c
  2189  0005F4  D778               	goto	l7403
  2190  0005F6  0A01               	xorlw	1	; case 3
  2191  0005F8  B4D8               	btfsc	status,2,c
  2192  0005FA  D78F               	goto	l7413
  2193  0005FC  0A07               	xorlw	7	; case 4
  2194  0005FE  B4D8               	btfsc	status,2,c
  2195  000600  D7A6               	goto	l7421
  2196  000602  0A01               	xorlw	1	; case 5
  2197  000604  B4D8               	btfsc	status,2,c
  2198  000606  D7BD               	goto	l7429
  2199  000608  D7D4               	goto	l7435
  2200  00060A                     __end_of_main:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           postdec1	equ	0xFE5
  2209                           fsr1l	equ	0xFE1
  2210                           status	equ	0xFD8
  2211                           
  2212 ;; *************** function _rtc_setting *****************
  2213 ;; Defined at:
  2214 ;;		line 372 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  i               1    4[BANK1 ] unsigned char 
  2219 ;;  result          1    3[BANK1 ] unsigned char 
  2220 ;;  s               1    2[BANK1 ] unsigned char 
  2221 ;;  mem_loc         1    1[BANK1 ] unsigned char 
  2222 ;;  atm             1    0[BANK1 ] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:         0       0       0       0       0       0       0
  2233 ;;      Locals:         0       0       5       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0
  2235 ;;      Totals:         0       0       5       0       0       0       0
  2236 ;;Total ram usage:        5 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    8
  2239 ;; This function calls:
  2240 ;;		_Clear_Packet
  2241 ;;		_Creat_RTC_Packet
  2242 ;;		_LCDByte
  2243 ;;		_LCDGotoXY
  2244 ;;		_LCDWriteInt
  2245 ;;		_LCDWriteString
  2246 ;;		_MyDelay
  2247 ;;		_Receive_Packet
  2248 ;;		_Write_b_eep
  2249 ;;		_ds1307_get_time
  2250 ;;		_ds1307_set_date_time
  2251 ;;		_tx_packet
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text1
  2258  00060A                     __ptext1:
  2259                           	opt stack 0
  2260  00060A                     _rtc_setting:
  2261                           	opt stack 22
  2262                           
  2263                           ; BSR set to: 1
  2264                           ;incstack = 0
  2265  00060A  FFFF               	dw	65535
  2266                           
  2267                           ;Test1.c: 376: (LCDByte(0b00000001,0));
  2268  00060C  0E00               	movlw	0
  2269  00060E  6E4C               	movwf	LCDByte@isdata,c
  2270  000610  0E01               	movlw	1
  2271  000612  ECAF  F00F         	call	_LCDByte
  2272                           
  2273                           ;Test1.c: 377: LCDWriteString("REQUESTING RTC...");
  2274  000616  0E7D               	movlw	high STR_54
  2275  000618  6E53               	movwf	LCDWriteString@msg+1,c
  2276  00061A  0E19               	movlw	low STR_54
  2277  00061C  6E52               	movwf	LCDWriteString@msg,c
  2278  00061E  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2279                           
  2280                           ;Test1.c: 380: unsigned char result = 0x00;
  2281  000622  0E00               	movlw	0
  2282  000624  0101               	movlb	1	; () banked
  2283  000626  6F83               	movwf	rtc_setting@result& (0+255),b
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;Test1.c: 381: unsigned char atm = 0;
  2287  000628  0E00               	movlw	0
  2288  00062A  0101               	movlb	1	; () banked
  2289  00062C  6F80               	movwf	rtc_setting@atm& (0+255),b
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;Test1.c: 383: Clear_Packet();
  2293  00062E  ECFF  F010         	call	_Clear_Packet	;wreg free
  2294                           
  2295                           ;Test1.c: 384: Creat_RTC_Packet('x');
  2296  000632  0E78               	movlw	120
  2297  000634  EC51  F009         	call	_Creat_RTC_Packet
  2298                           
  2299                           ;Test1.c: 385: Destination_ID = Master_ID;
  2300  000638  C026  F023         	movff	_Master_ID,_Destination_ID
  2301                           
  2302                           ;Test1.c: 386: tx_packet();
  2303  00063C  ECE1  F00C         	call	_tx_packet	;wreg free
  2304                           
  2305                           ;Test1.c: 387: (LCDByte(0b00000001,0));
  2306  000640  0E00               	movlw	0
  2307  000642  6E4C               	movwf	LCDByte@isdata,c
  2308  000644  0E01               	movlw	1
  2309  000646  ECAF  F00F         	call	_LCDByte
  2310                           
  2311                           ;Test1.c: 388: LCDWriteString("REQUEST SENT!");
  2312  00064A  0E7E               	movlw	high STR_55
  2313  00064C  6E53               	movwf	LCDWriteString@msg+1,c
  2314  00064E  0EFB               	movlw	low STR_55
  2315  000650  6E52               	movwf	LCDWriteString@msg,c
  2316  000652  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2317                           
  2318                           ;Test1.c: 391: while(result == 0x00 && atm < 10)
  2319  000656  D006               	goto	l6971
  2320  000658                     l6967:
  2321                           
  2322                           ;Test1.c: 392: {
  2323                           ;Test1.c: 393: result = Receive_Packet();
  2324  000658  EC2C  F006         	call	_Receive_Packet	;wreg free
  2325  00065C  0101               	movlb	1	; () banked
  2326  00065E  6F83               	movwf	rtc_setting@result& (0+255),b
  2327                           
  2328                           ; BSR set to: 1
  2329                           ;Test1.c: 394: atm++;
  2330  000660  0101               	movlb	1	; () banked
  2331  000662  2B80               	incf	rtc_setting@atm& (0+255),f,b
  2332  000664                     l6971:
  2333  000664  0101               	movlb	1	; () banked
  2334  000666  6783               	tstfsz	rtc_setting@result& (0+255),b
  2335  000668  D004               	goto	l875
  2336                           
  2337                           ; BSR set to: 1
  2338  00066A  0E09               	movlw	9
  2339  00066C  0101               	movlb	1	; () banked
  2340  00066E  6580               	cpfsgt	rtc_setting@atm& (0+255),b
  2341  000670  D7F3               	goto	l6967
  2342  000672                     l875:
  2343                           
  2344                           ; BSR set to: 1
  2345                           ;Test1.c: 395: }
  2346                           ;Test1.c: 396: if(result == 0x00)
  2347  000672  0101               	movlb	1	; () banked
  2348  000674  6783               	tstfsz	rtc_setting@result& (0+255),b
  2349  000676  D023               	goto	l6983
  2350  000678                     l6975:
  2351                           
  2352                           ;Test1.c: 399: {
  2353                           ;Test1.c: 400: (LCDByte(0b00000001,0));
  2354  000678  0E00               	movlw	0
  2355  00067A  6E4C               	movwf	LCDByte@isdata,c
  2356  00067C  0E01               	movlw	1
  2357  00067E  ECAF  F00F         	call	_LCDByte
  2358                           
  2359                           ;Test1.c: 401: MyDelay(100);
  2360  000682  0E00               	movlw	0
  2361  000684  6E4A               	movwf	MyDelay@ms+1,c
  2362  000686  0E64               	movlw	100
  2363  000688  6E49               	movwf	MyDelay@ms,c
  2364  00068A  EC53  F011         	call	_MyDelay	;wreg free
  2365                           
  2366                           ;Test1.c: 402: LCDWriteString("SETTINGS NOT");
  2367  00068E  0E7F               	movlw	high STR_56
  2368  000690  6E53               	movwf	LCDWriteString@msg+1,c
  2369  000692  0E77               	movlw	low STR_56
  2370  000694  6E52               	movwf	LCDWriteString@msg,c
  2371  000696  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2372                           
  2373                           ;Test1.c: 403: LCDGotoXY(0,1);
  2374  00069A  0E01               	movlw	1
  2375  00069C  6E52               	movwf	LCDGotoXY@y,c
  2376  00069E  0E00               	movlw	0
  2377  0006A0  ECA3  F010         	call	_LCDGotoXY
  2378                           
  2379                           ;Test1.c: 404: LCDWriteString("RECEIVED...");
  2380  0006A4  0E7F               	movlw	high STR_57
  2381  0006A6  6E53               	movwf	LCDWriteString@msg+1,c
  2382  0006A8  0E84               	movlw	low STR_57
  2383  0006AA  6E52               	movwf	LCDWriteString@msg,c
  2384  0006AC  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2385                           
  2386                           ;Test1.c: 405: MyDelay(100);
  2387  0006B0  0E00               	movlw	0
  2388  0006B2  6E4A               	movwf	MyDelay@ms+1,c
  2389  0006B4  0E64               	movlw	100
  2390  0006B6  6E49               	movwf	MyDelay@ms,c
  2391  0006B8  EC53  F011         	call	_MyDelay	;wreg free
  2392  0006BC  D7DD               	goto	l6975
  2393  0006BE                     l6983:
  2394                           
  2395                           ;Test1.c: 406: }
  2396                           ;Test1.c: 407: }
  2397                           ;Test1.c: 409: (LCDByte(0b00000001,0));
  2398  0006BE  0E00               	movlw	0
  2399  0006C0  6E4C               	movwf	LCDByte@isdata,c
  2400  0006C2  0E01               	movlw	1
  2401  0006C4  ECAF  F00F         	call	_LCDByte
  2402                           
  2403                           ;Test1.c: 410: LCDWriteString("UPDATING RTC");
  2404  0006C8  0E7F               	movlw	high STR_58
  2405  0006CA  6E53               	movwf	LCDWriteString@msg+1,c
  2406  0006CC  0E5D               	movlw	low STR_58
  2407  0006CE  6E52               	movwf	LCDWriteString@msg,c
  2408  0006D0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2409                           
  2410                           ;Test1.c: 411: day = PACKET[8];
  2411  0006D4  C088  F02B         	movff	_PACKET+8,_day	;volatile
  2412                           
  2413                           ;Test1.c: 412: month = PACKET[7];
  2414  0006D8  C087  F031         	movff	_PACKET+7,_month	;volatile
  2415                           
  2416                           ;Test1.c: 413: year = PACKET[6];
  2417  0006DC  C086  F035         	movff	_PACKET+6,_year	;volatile
  2418                           
  2419                           ;Test1.c: 414: dow = PACKET[9];
  2420  0006E0  C089  F02D         	movff	_PACKET+9,_dow	;volatile
  2421                           
  2422                           ;Test1.c: 415: hr = PACKET[10];
  2423  0006E4  C08A  F02E         	movff	_PACKET+10,_hr	;volatile
  2424                           
  2425                           ;Test1.c: 416: min = PACKET[11];
  2426  0006E8  C08B  F02F         	movff	_PACKET+11,_min	;volatile
  2427                           
  2428                           ;Test1.c: 417: sec = PACKET[12];
  2429  0006EC  C08C  F032         	movff	_PACKET+12,_sec	;volatile
  2430                           
  2431                           ;Test1.c: 419: ds1307_set_date_time();
  2432  0006F0  EC9B  F00A         	call	_ds1307_set_date_time	;wreg free
  2433                           
  2434                           ;Test1.c: 420: MyDelay(100);
  2435  0006F4  0E00               	movlw	0
  2436  0006F6  6E4A               	movwf	MyDelay@ms+1,c
  2437  0006F8  0E64               	movlw	100
  2438  0006FA  6E49               	movwf	MyDelay@ms,c
  2439  0006FC  EC53  F011         	call	_MyDelay	;wreg free
  2440                           
  2441                           ;Test1.c: 423: (LCDByte(0b00000001,0));
  2442  000700  0E00               	movlw	0
  2443  000702  6E4C               	movwf	LCDByte@isdata,c
  2444  000704  0E01               	movlw	1
  2445  000706  ECAF  F00F         	call	_LCDByte
  2446                           
  2447                           ;Test1.c: 424: LCDWriteString("UPDATING THRESHOLDS");
  2448  00070A  0E7C               	movlw	high STR_59
  2449  00070C  6E53               	movwf	LCDWriteString@msg+1,c
  2450  00070E  0EDE               	movlw	low STR_59
  2451  000710  6E52               	movwf	LCDWriteString@msg,c
  2452  000712  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2453                           
  2454                           ;Test1.c: 425: LCDGotoXY(0,1);
  2455  000716  0E01               	movlw	1
  2456  000718  6E52               	movwf	LCDGotoXY@y,c
  2457  00071A  0E00               	movlw	0
  2458  00071C  ECA3  F010         	call	_LCDGotoXY
  2459                           
  2460                           ;Test1.c: 426: LCDWriteString("UPDATING TRIGERS");
  2461  000720  0E7D               	movlw	high STR_60
  2462  000722  6E53               	movwf	LCDWriteString@msg+1,c
  2463  000724  0EEB               	movlw	low STR_60
  2464  000726  6E52               	movwf	LCDWriteString@msg,c
  2465  000728  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2466                           
  2467                           ;Test1.c: 428: char mem_loc = 5;
  2468  00072C  0E05               	movlw	5
  2469  00072E  0101               	movlb	1	; () banked
  2470  000730  6F81               	movwf	rtc_setting@mem_loc& (0+255),b
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;Test1.c: 429: char i = 13;
  2474  000732  0E0D               	movlw	13
  2475  000734  0101               	movlb	1	; () banked
  2476  000736  6F84               	movwf	rtc_setting@i& (0+255),b
  2477                           
  2478                           ; BSR set to: 1
  2479                           ;Test1.c: 430: for(i = 13; i<(13+32);i++)
  2480  000738  0E0D               	movlw	13
  2481  00073A  0101               	movlb	1	; () banked
  2482  00073C  6F84               	movwf	rtc_setting@i& (0+255),b
  2483  00073E  D01B               	goto	L1
  2484  000740                     l7021:
  2485                           
  2486                           ; BSR set to: 1
  2487                           ;Test1.c: 431: {
  2488                           ;Test1.c: 432: Write_b_eep(mem_loc,PACKET[i]);
  2489  000740  0101               	movlb	1	; () banked
  2490  000742  C181  F049         	movff	rtc_setting@mem_loc,Write_b_eep@badd
  2491  000746  6A4A               	clrf	Write_b_eep@badd+1,c
  2492  000748  0101               	movlb	1	; () banked
  2493  00074A  5184               	movf	rtc_setting@i& (0+255),w,b
  2494  00074C  0D01               	mullw	1
  2495  00074E  0100               	movlb	0	; () banked
  2496  000750  0E80               	movlw	low _PACKET	;volatile
  2497  000752  24F3               	addwf	prodl,w,c
  2498  000754  6ED9               	movwf	fsr2l,c
  2499  000756  0100               	movlb	0	; () banked
  2500  000758  0E00               	movlw	high _PACKET	;volatile
  2501  00075A  20F4               	addwfc	prodh,w,c
  2502  00075C  6EDA               	movwf	fsr2h,c
  2503  00075E  50DF               	movf	indf2,w,c
  2504  000760  6E4B               	movwf	Write_b_eep@bdat,c
  2505  000762  ECC5  F010         	call	_Write_b_eep	;wreg free
  2506                           
  2507                           ;Test1.c: 433: _delay(50);
  2508  000766  0E0A               	movlw	10
  2509  000768                     u4857:
  2510  000768  F000               	nop	
  2511  00076A  2EE8               	decfsz	wreg,f,c
  2512  00076C  D7FD               	goto	u4857
  2513                           
  2514                           ;Test1.c: 434: mem_loc++;
  2515  00076E  0101               	movlb	1	; () banked
  2516  000770  2B81               	incf	rtc_setting@mem_loc& (0+255),f,b
  2517                           
  2518                           ; BSR set to: 1
  2519  000772  0101               	movlb	1	; () banked
  2520  000774  2B84               	incf	rtc_setting@i& (0+255),f,b
  2521  000776                     L1:
  2522                           
  2523                           ; BSR set to: 1
  2524  000776  0E2C               	movlw	44
  2525  000778  0101               	movlb	1	; () banked
  2526  00077A  6584               	cpfsgt	rtc_setting@i& (0+255),b
  2527  00077C  D7E1               	goto	l7021
  2528                           
  2529                           ; BSR set to: 1
  2530                           ;Test1.c: 435: }
  2531                           ;Test1.c: 437: (LCDByte(0b00000001,0));
  2532                           
  2533                           ; BSR set to: 1
  2534  00077E  0E00               	movlw	0
  2535  000780  6E4C               	movwf	LCDByte@isdata,c
  2536  000782  0E01               	movlw	1
  2537  000784  ECAF  F00F         	call	_LCDByte
  2538                           
  2539                           ;Test1.c: 438: LCDWriteString("UPDATE COMPLETED...!");
  2540  000788  0E7C               	movlw	high STR_61
  2541  00078A  6E53               	movwf	LCDWriteString@msg+1,c
  2542  00078C  0EC9               	movlw	low STR_61
  2543  00078E  6E52               	movwf	LCDWriteString@msg,c
  2544  000790  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2545                           
  2546                           ;Test1.c: 440: unsigned char s = 0;
  2547  000794  0E00               	movlw	0
  2548  000796  0101               	movlb	1	; () banked
  2549  000798  6F82               	movwf	rtc_setting@s& (0+255),b
  2550                           
  2551                           ;Test1.c: 441: while(s < 60)
  2552  00079A  D04E               	goto	l7069
  2553  00079C                     l7037:
  2554                           
  2555                           ; BSR set to: 1
  2556                           ;Test1.c: 442: {
  2557                           ;Test1.c: 443: if(sec_flag == 1)
  2558  00079C  0433               	decf	_sec_flag,w,c
  2559  00079E  A4D8               	btfss	status,2,c
  2560  0007A0  D04B               	goto	l7069
  2561                           
  2562                           ; BSR set to: 1
  2563                           ;Test1.c: 444: {
  2564                           ;Test1.c: 445: sec_flag = 0;
  2565  0007A2  0E00               	movlw	0
  2566  0007A4  6E33               	movwf	_sec_flag,c
  2567                           
  2568                           ; BSR set to: 1
  2569                           ;Test1.c: 446: s++;
  2570  0007A6  0101               	movlb	1	; () banked
  2571  0007A8  2B82               	incf	rtc_setting@s& (0+255),f,b
  2572                           
  2573                           ; BSR set to: 1
  2574                           ;Test1.c: 447: ds1307_get_time();
  2575  0007AA  ECED  F00D         	call	_ds1307_get_time	;wreg free
  2576                           
  2577                           ;Test1.c: 449: (LCDByte(0b00000001,0));
  2578  0007AE  0E00               	movlw	0
  2579  0007B0  6E4C               	movwf	LCDByte@isdata,c
  2580  0007B2  0E01               	movlw	1
  2581  0007B4  ECAF  F00F         	call	_LCDByte
  2582                           
  2583                           ;Test1.c: 451: LCDWriteString("UPDATE COMPLETED...!");
  2584  0007B8  0E7C               	movlw	high STR_61
  2585  0007BA  6E53               	movwf	LCDWriteString@msg+1,c
  2586  0007BC  0EC9               	movlw	low STR_61
  2587  0007BE  6E52               	movwf	LCDWriteString@msg,c
  2588  0007C0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2589                           
  2590                           ;Test1.c: 452: LCDGotoXY(4,1);
  2591  0007C4  0E01               	movlw	1
  2592  0007C6  6E52               	movwf	LCDGotoXY@y,c
  2593  0007C8  0E04               	movlw	4
  2594  0007CA  ECA3  F010         	call	_LCDGotoXY
  2595                           
  2596                           ;Test1.c: 453: LCDWriteInt(hr,2);
  2597  0007CE  C02E  F052         	movff	_hr,LCDWriteInt@val
  2598  0007D2  6A53               	clrf	LCDWriteInt@val+1,c
  2599  0007D4  0E02               	movlw	2
  2600  0007D6  6E54               	movwf	LCDWriteInt@field_length,c
  2601  0007D8  EC52  F008         	call	_LCDWriteInt	;wreg free
  2602                           
  2603                           ;Test1.c: 454: LCDGotoXY(6,1);
  2604  0007DC  0E01               	movlw	1
  2605  0007DE  6E52               	movwf	LCDGotoXY@y,c
  2606  0007E0  0E06               	movlw	6
  2607  0007E2  ECA3  F010         	call	_LCDGotoXY
  2608                           
  2609                           ;Test1.c: 455: LCDWriteString(":");
  2610  0007E6  0E7F               	movlw	high STR_19
  2611  0007E8  6E53               	movwf	LCDWriteString@msg+1,c
  2612  0007EA  0EFD               	movlw	low STR_19
  2613  0007EC  6E52               	movwf	LCDWriteString@msg,c
  2614  0007EE  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2615                           
  2616                           ;Test1.c: 456: LCDGotoXY(7,1);
  2617  0007F2  0E01               	movlw	1
  2618  0007F4  6E52               	movwf	LCDGotoXY@y,c
  2619  0007F6  0E07               	movlw	7
  2620  0007F8  ECA3  F010         	call	_LCDGotoXY
  2621                           
  2622                           ;Test1.c: 457: LCDWriteInt(min,2);
  2623  0007FC  C02F  F052         	movff	_min,LCDWriteInt@val
  2624  000800  6A53               	clrf	LCDWriteInt@val+1,c
  2625  000802  0E02               	movlw	2
  2626  000804  6E54               	movwf	LCDWriteInt@field_length,c
  2627  000806  EC52  F008         	call	_LCDWriteInt	;wreg free
  2628                           
  2629                           ;Test1.c: 458: LCDGotoXY(9,1);
  2630  00080A  0E01               	movlw	1
  2631  00080C  6E52               	movwf	LCDGotoXY@y,c
  2632  00080E  0E09               	movlw	9
  2633  000810  ECA3  F010         	call	_LCDGotoXY
  2634                           
  2635                           ;Test1.c: 459: LCDWriteString(":");
  2636  000814  0E7F               	movlw	high STR_19
  2637  000816  6E53               	movwf	LCDWriteString@msg+1,c
  2638  000818  0EFD               	movlw	low STR_19
  2639  00081A  6E52               	movwf	LCDWriteString@msg,c
  2640  00081C  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2641                           
  2642                           ;Test1.c: 460: LCDGotoXY(10,1);
  2643  000820  0E01               	movlw	1
  2644  000822  6E52               	movwf	LCDGotoXY@y,c
  2645  000824  0E0A               	movlw	10
  2646  000826  ECA3  F010         	call	_LCDGotoXY
  2647                           
  2648                           ;Test1.c: 461: LCDWriteInt(sec,2);
  2649  00082A  C032  F052         	movff	_sec,LCDWriteInt@val
  2650  00082E  6A53               	clrf	LCDWriteInt@val+1,c
  2651  000830  0E02               	movlw	2
  2652  000832  6E54               	movwf	LCDWriteInt@field_length,c
  2653  000834  EC52  F008         	call	_LCDWriteInt	;wreg free
  2654  000838                     l7069:
  2655  000838  0E3B               	movlw	59
  2656  00083A  0101               	movlb	1	; () banked
  2657  00083C  6582               	cpfsgt	rtc_setting@s& (0+255),b
  2658  00083E  D7AE               	goto	l7037
  2659                           
  2660                           ; BSR set to: 1
  2661                           
  2662                           ; BSR set to: 1
  2663                           ;Test1.c: 462: }
  2664                           ;Test1.c: 463: }
  2665                           ;Test1.c: 464: return;
  2666  000840  0012               	return	
  2667  000842  FFFF               	dw	65535	; errata NOP
  2668  000844                     __end_of_rtc_setting:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           indf2	equ	0xFDF
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _local_display *****************
  2686 ;; Defined at:
  2687 ;;		line 539 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  s               1   42[COMRAM] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;		None               void
  2694 ;; Registers used:
  2695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2701 ;;      Params:         0       0       0       0       0       0       0
  2702 ;;      Locals:         1       0       0       0       0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0
  2704 ;;      Totals:         1       0       0       0       0       0       0
  2705 ;;Total ram usage:        1 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    5
  2708 ;; This function calls:
  2709 ;;		_LCDByte
  2710 ;;		_LCDGotoXY
  2711 ;;		_LCDWriteInt
  2712 ;;		_LCDWriteString
  2713 ;; This function is called by:
  2714 ;;		_main
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text2
  2719  001462                     __ptext2:
  2720                           	opt stack 0
  2721  001462                     _local_display:
  2722                           	opt stack 25
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;incstack = 0
  2726  001462  FFFF               	dw	65535
  2727                           
  2728                           ;Test1.c: 541: (LCDByte(0b00000001,0));
  2729  001464  0E00               	movlw	0
  2730  001466  6E4C               	movwf	LCDByte@isdata,c
  2731  001468  0E01               	movlw	1
  2732  00146A  ECAF  F00F         	call	_LCDByte
  2733                           
  2734                           ;Test1.c: 542: LCDWriteString("MEM1=");
  2735  00146E  0E7F               	movlw	high STR_72
  2736  001470  6E53               	movwf	LCDWriteString@msg+1,c
  2737  001472  0EF7               	movlw	low STR_72
  2738  001474  6E52               	movwf	LCDWriteString@msg,c
  2739  001476  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2740                           
  2741                           ;Test1.c: 543: LCDWriteInt(Write_Page1,3);
  2742  00147A  C01B  F052         	movff	_Write_Page1,LCDWriteInt@val
  2743  00147E  C01C  F053         	movff	_Write_Page1+1,LCDWriteInt@val+1
  2744  001482  0E03               	movlw	3
  2745  001484  6E54               	movwf	LCDWriteInt@field_length,c
  2746  001486  EC52  F008         	call	_LCDWriteInt	;wreg free
  2747                           
  2748                           ;Test1.c: 544: LCDWriteString(" MEM2=");
  2749  00148A  0E7F               	movlw	high STR_73
  2750  00148C  6E53               	movwf	LCDWriteString@msg+1,c
  2751  00148E  0EF0               	movlw	low STR_73
  2752  001490  6E52               	movwf	LCDWriteString@msg,c
  2753  001492  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2754                           
  2755                           ;Test1.c: 545: LCDWriteInt(Write_Page2,3);
  2756  001496  C01D  F052         	movff	_Write_Page2,LCDWriteInt@val
  2757  00149A  C01E  F053         	movff	_Write_Page2+1,LCDWriteInt@val+1
  2758  00149E  0E03               	movlw	3
  2759  0014A0  6E54               	movwf	LCDWriteInt@field_length,c
  2760  0014A2  EC52  F008         	call	_LCDWriteInt	;wreg free
  2761                           
  2762                           ;Test1.c: 547: unsigned char s = 0;
  2763  0014A6  0E00               	movlw	0
  2764  0014A8  6E60               	movwf	local_display@s,c
  2765                           
  2766                           ;Test1.c: 548: while(s < 60)
  2767  0014AA  D040               	goto	l6945
  2768  0014AC                     l6919:
  2769                           
  2770                           ;Test1.c: 549: {
  2771                           ;Test1.c: 550: if(sec_flag == 1)
  2772  0014AC  0433               	decf	_sec_flag,w,c
  2773  0014AE  A4D8               	btfss	status,2,c
  2774  0014B0  D03D               	goto	l6945
  2775                           
  2776                           ;Test1.c: 551: {
  2777                           ;Test1.c: 552: sec_flag = 0;
  2778  0014B2  0E00               	movlw	0
  2779  0014B4  6E33               	movwf	_sec_flag,c
  2780                           
  2781                           ;Test1.c: 553: s++;
  2782  0014B6  2A60               	incf	local_display@s,f,c
  2783                           
  2784                           ;Test1.c: 554: LCDGotoXY(4,1);
  2785  0014B8  0E01               	movlw	1
  2786  0014BA  6E52               	movwf	LCDGotoXY@y,c
  2787  0014BC  0E04               	movlw	4
  2788  0014BE  ECA3  F010         	call	_LCDGotoXY
  2789                           
  2790                           ;Test1.c: 555: LCDWriteInt(hr,2);
  2791  0014C2  C02E  F052         	movff	_hr,LCDWriteInt@val
  2792  0014C6  6A53               	clrf	LCDWriteInt@val+1,c
  2793  0014C8  0E02               	movlw	2
  2794  0014CA  6E54               	movwf	LCDWriteInt@field_length,c
  2795  0014CC  EC52  F008         	call	_LCDWriteInt	;wreg free
  2796                           
  2797                           ;Test1.c: 556: LCDGotoXY(6,1);
  2798  0014D0  0E01               	movlw	1
  2799  0014D2  6E52               	movwf	LCDGotoXY@y,c
  2800  0014D4  0E06               	movlw	6
  2801  0014D6  ECA3  F010         	call	_LCDGotoXY
  2802                           
  2803                           ;Test1.c: 557: LCDWriteString(":");
  2804  0014DA  0E7F               	movlw	high STR_19
  2805  0014DC  6E53               	movwf	LCDWriteString@msg+1,c
  2806  0014DE  0EFD               	movlw	low STR_19
  2807  0014E0  6E52               	movwf	LCDWriteString@msg,c
  2808  0014E2  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2809                           
  2810                           ;Test1.c: 558: LCDGotoXY(7,1);
  2811  0014E6  0E01               	movlw	1
  2812  0014E8  6E52               	movwf	LCDGotoXY@y,c
  2813  0014EA  0E07               	movlw	7
  2814  0014EC  ECA3  F010         	call	_LCDGotoXY
  2815                           
  2816                           ;Test1.c: 559: LCDWriteInt(min,2);
  2817  0014F0  C02F  F052         	movff	_min,LCDWriteInt@val
  2818  0014F4  6A53               	clrf	LCDWriteInt@val+1,c
  2819  0014F6  0E02               	movlw	2
  2820  0014F8  6E54               	movwf	LCDWriteInt@field_length,c
  2821  0014FA  EC52  F008         	call	_LCDWriteInt	;wreg free
  2822                           
  2823                           ;Test1.c: 560: LCDGotoXY(9,1);
  2824  0014FE  0E01               	movlw	1
  2825  001500  6E52               	movwf	LCDGotoXY@y,c
  2826  001502  0E09               	movlw	9
  2827  001504  ECA3  F010         	call	_LCDGotoXY
  2828                           
  2829                           ;Test1.c: 561: LCDWriteString(":");
  2830  001508  0E7F               	movlw	high STR_19
  2831  00150A  6E53               	movwf	LCDWriteString@msg+1,c
  2832  00150C  0EFD               	movlw	low STR_19
  2833  00150E  6E52               	movwf	LCDWriteString@msg,c
  2834  001510  ECF9  F00B         	call	_LCDWriteString	;wreg free
  2835                           
  2836                           ;Test1.c: 562: LCDGotoXY(10,1);
  2837  001514  0E01               	movlw	1
  2838  001516  6E52               	movwf	LCDGotoXY@y,c
  2839  001518  0E0A               	movlw	10
  2840  00151A  ECA3  F010         	call	_LCDGotoXY
  2841                           
  2842                           ;Test1.c: 563: LCDWriteInt(sec,2);
  2843  00151E  C032  F052         	movff	_sec,LCDWriteInt@val
  2844  001522  6A53               	clrf	LCDWriteInt@val+1,c
  2845  001524  0E02               	movlw	2
  2846  001526  6E54               	movwf	LCDWriteInt@field_length,c
  2847  001528  EC52  F008         	call	_LCDWriteInt	;wreg free
  2848  00152C                     l6945:
  2849  00152C  0E3B               	movlw	59
  2850  00152E  6460               	cpfsgt	local_display@s,c
  2851  001530  D7BD               	goto	l6919
  2852                           
  2853                           ;Test1.c: 564: }
  2854                           ;Test1.c: 565: }
  2855                           ;Test1.c: 566: return;
  2856  001532  0012               	return	
  2857  001534  FFFF               	dw	65535	; errata NOP
  2858  001536                     __end_of_local_display:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           tblptrh	equ	0xFF7
  2862                           tblptrl	equ	0xFF6
  2863                           tablat	equ	0xFF5
  2864                           prodh	equ	0xFF4
  2865                           prodl	equ	0xFF3
  2866                           postinc0	equ	0xFEE
  2867                           wreg	equ	0xFE8
  2868                           postdec1	equ	0xFE5
  2869                           fsr1l	equ	0xFE1
  2870                           indf2	equ	0xFDF
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _LCDWriteInt *****************
  2876 ;; Defined at:
  2877 ;;		line 266 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  val             2   28[COMRAM] int 
  2880 ;;  field_length    1   30[COMRAM] char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  str             5   33[COMRAM] unsigned char [5]
  2883 ;;  i               2   40[COMRAM] int 
  2884 ;;  j               2   38[COMRAM] int 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;		None               void
  2887 ;; Registers used:
  2888 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2894 ;;      Params:         3       0       0       0       0       0       0
  2895 ;;      Locals:         9       0       0       0       0       0       0
  2896 ;;      Temps:          2       0       0       0       0       0       0
  2897 ;;      Totals:        14       0       0       0       0       0       0
  2898 ;;Total ram usage:       14 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    4
  2901 ;; This function calls:
  2902 ;;		_LCDByte
  2903 ;;		___awdiv
  2904 ;;		___awmod
  2905 ;; This function is called by:
  2906 ;;		_main
  2907 ;;		_rtc_setting
  2908 ;;		_local_display
  2909 ;;		_reset_unit
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text3
  2914  0010A4                     __ptext3:
  2915                           	opt stack 0
  2916  0010A4                     _LCDWriteInt:
  2917                           	opt stack 25
  2918                           
  2919                           ;incstack = 0
  2920  0010A4  FFFF               	dw	65535
  2921                           
  2922                           ;lcd_hd44780_pic18.c: 279: char str[5]={0,0,0,0,0};
  2923  0010A6  EE20  F001         	lfsr	2,LCDWriteInt@F3701
  2924  0010AA  EE10  F057         	lfsr	1,LCDWriteInt@str
  2925  0010AE  0E05               	movlw	5
  2926  0010B0                     u3641:
  2927  0010B0  CFDE FFE6          	movff	postinc2,postinc1
  2928  0010B4  2EE8               	decfsz	wreg,f,c
  2929  0010B6  D7FC               	goto	u3641
  2930                           
  2931                           ;lcd_hd44780_pic18.c: 280: int i=4,j=0;
  2932  0010B8  0E00               	movlw	0
  2933  0010BA  6E5F               	movwf	LCDWriteInt@i+1,c
  2934  0010BC  0E04               	movlw	4
  2935  0010BE  6E5E               	movwf	LCDWriteInt@i,c
  2936  0010C0  0E00               	movlw	0
  2937  0010C2  6E5D               	movwf	LCDWriteInt@j+1,c
  2938  0010C4  0E00               	movlw	0
  2939  0010C6  6E5C               	movwf	LCDWriteInt@j,c
  2940                           
  2941                           ;lcd_hd44780_pic18.c: 283: if(val<0)
  2942  0010C8  5053               	movf	LCDWriteInt@val+1,w,c
  2943  0010CA  0A80               	xorlw	128
  2944  0010CC  6EF3               	movwf	prodl,c
  2945  0010CE  0E80               	movlw	128
  2946  0010D0  5CF3               	subwf	prodl,w,c
  2947  0010D2  0E00               	movlw	0
  2948  0010D4  B4D8               	btfsc	status,2,c
  2949  0010D6  5C52               	subwf	LCDWriteInt@val,w,c
  2950  0010D8  B0D8               	btfsc	status,0,c
  2951  0010DA  D02D               	goto	l6275
  2952                           
  2953                           ;lcd_hd44780_pic18.c: 284: {
  2954                           ;lcd_hd44780_pic18.c: 285: (LCDByte('-',1));
  2955  0010DC  0E01               	movlw	1
  2956  0010DE  6E4C               	movwf	LCDByte@isdata,c
  2957  0010E0  0E2D               	movlw	45
  2958  0010E2  ECAF  F00F         	call	_LCDByte
  2959                           
  2960                           ;lcd_hd44780_pic18.c: 286: val=val*-1;
  2961  0010E6  6C52               	negf	LCDWriteInt@val,c
  2962  0010E8  1E53               	comf	LCDWriteInt@val+1,f,c
  2963  0010EA  B0D8               	btfsc	status,0,c
  2964  0010EC  2A53               	incf	LCDWriteInt@val+1,f,c
  2965  0010EE  D023               	goto	l6275
  2966  0010F0                     l6269:
  2967                           
  2968                           ;lcd_hd44780_pic18.c: 290: {
  2969                           ;lcd_hd44780_pic18.c: 291: str[i]=val%10;
  2970  0010F0  0E57               	movlw	low LCDWriteInt@str
  2971  0010F2  245E               	addwf	LCDWriteInt@i,w,c
  2972  0010F4  6ED9               	movwf	fsr2l,c
  2973  0010F6  0E00               	movlw	high LCDWriteInt@str
  2974  0010F8  205F               	addwfc	LCDWriteInt@i+1,w,c
  2975  0010FA  6EDA               	movwf	fsr2h,c
  2976  0010FC  C052  F049         	movff	LCDWriteInt@val,___awmod@dividend
  2977  001100  C053  F04A         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  2978  001104  0E00               	movlw	0
  2979  001106  6E4C               	movwf	___awmod@divisor+1,c
  2980  001108  0E0A               	movlw	10
  2981  00110A  6E4B               	movwf	___awmod@divisor,c
  2982  00110C  EC97  F00C         	call	___awmod	;wreg free
  2983  001110  5049               	movf	?___awmod,w,c
  2984  001112  6EDF               	movwf	indf2,c
  2985                           
  2986                           ;lcd_hd44780_pic18.c: 292: val=val/10;
  2987  001114  C052  F049         	movff	LCDWriteInt@val,___awdiv@dividend
  2988  001118  C053  F04A         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  2989  00111C  0E00               	movlw	0
  2990  00111E  6E4C               	movwf	___awdiv@divisor+1,c
  2991  001120  0E0A               	movlw	10
  2992  001122  6E4B               	movwf	___awdiv@divisor,c
  2993  001124  EC53  F00B         	call	___awdiv	;wreg free
  2994  001128  C049  F052         	movff	?___awdiv,LCDWriteInt@val
  2995  00112C  C04A  F053         	movff	?___awdiv+1,LCDWriteInt@val+1
  2996                           
  2997                           ;lcd_hd44780_pic18.c: 293: i--;
  2998  001130  065E               	decf	LCDWriteInt@i,f,c
  2999  001132  A0D8               	btfss	status,0,c
  3000  001134  065F               	decf	LCDWriteInt@i+1,f,c
  3001  001136                     l6275:
  3002  001136  5053               	movf	LCDWriteInt@val+1,w,c
  3003  001138  1052               	iorwf	LCDWriteInt@val,w,c
  3004  00113A  A4D8               	btfss	status,2,c
  3005  00113C  D7D9               	goto	l6269
  3006                           
  3007                           ;lcd_hd44780_pic18.c: 294: }
  3008                           ;lcd_hd44780_pic18.c: 295: if(field_length==-1)
  3009  00113E  2854               	incf	LCDWriteInt@field_length,w,c
  3010  001140  B4D8               	btfsc	status,2,c
  3011  001142  D003               	goto	l6283
  3012  001144  D00C               	goto	l6285
  3013  001146                     l6281:
  3014  001146  4A5C               	infsnz	LCDWriteInt@j,f,c
  3015  001148  2A5D               	incf	LCDWriteInt@j+1,f,c
  3016  00114A                     l6283:
  3017  00114A  0E57               	movlw	low LCDWriteInt@str
  3018  00114C  245C               	addwf	LCDWriteInt@j,w,c
  3019  00114E  6ED9               	movwf	fsr2l,c
  3020  001150  0E00               	movlw	high LCDWriteInt@str
  3021  001152  205D               	addwfc	LCDWriteInt@j+1,w,c
  3022  001154  6EDA               	movwf	fsr2h,c
  3023  001156  50DF               	movf	indf2,w,c
  3024  001158  A4D8               	btfss	status,2,c
  3025  00115A  D010               	goto	l6287
  3026  00115C  D7F4               	goto	l6281
  3027  00115E                     l6285:
  3028                           
  3029                           ;lcd_hd44780_pic18.c: 297: else
  3030                           ;lcd_hd44780_pic18.c: 298: j=5-field_length;
  3031  00115E  C054  F055         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  3032  001162  6A56               	clrf	(??_LCDWriteInt+1)& (0+255),c
  3033  001164  BE55               	btfsc	??_LCDWriteInt& (0+255),7,c
  3034  001166  0656               	decf	(??_LCDWriteInt+1)& (0+255),f,c
  3035  001168  1E55               	comf	??_LCDWriteInt,f,c
  3036  00116A  1E56               	comf	??_LCDWriteInt+1,f,c
  3037  00116C  4A55               	infsnz	??_LCDWriteInt,f,c
  3038  00116E  2A56               	incf	??_LCDWriteInt+1,f,c
  3039  001170  0E05               	movlw	5
  3040  001172  2455               	addwf	??_LCDWriteInt,w,c
  3041  001174  6E5C               	movwf	LCDWriteInt@j,c
  3042  001176  0E00               	movlw	0
  3043  001178  2056               	addwfc	??_LCDWriteInt+1,w,c
  3044  00117A  6E5D               	movwf	LCDWriteInt@j+1,c
  3045  00117C                     l6287:
  3046                           
  3047                           ;lcd_hd44780_pic18.c: 301: for(i=j;i<5;i++)
  3048  00117C  C05C  F05E         	movff	LCDWriteInt@j,LCDWriteInt@i
  3049  001180  C05D  F05F         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  3050  001184  505F               	movf	LCDWriteInt@i+1,w,c
  3051  001186  0A80               	xorlw	128
  3052  001188  0F80               	addlw	-128
  3053  00118A  0E05               	movlw	5
  3054  00118C  B4D8               	btfsc	status,2,c
  3055  00118E  5C5E               	subwf	LCDWriteInt@i,w,c
  3056  001190  B0D8               	btfsc	status,0,c
  3057  001192  D00F               	goto	l226
  3058                           
  3059                           ;lcd_hd44780_pic18.c: 302: {
  3060                           ;lcd_hd44780_pic18.c: 303: (LCDByte(48+str[i],1));
  3061  001194  0E01               	movlw	1
  3062  001196  6E4C               	movwf	LCDByte@isdata,c
  3063  001198  0E57               	movlw	low LCDWriteInt@str
  3064  00119A  245E               	addwf	LCDWriteInt@i,w,c
  3065  00119C  6ED9               	movwf	fsr2l,c
  3066  00119E  0E00               	movlw	high LCDWriteInt@str
  3067  0011A0  205F               	addwfc	LCDWriteInt@i+1,w,c
  3068  0011A2  6EDA               	movwf	fsr2h,c
  3069  0011A4  50DF               	movf	indf2,w,c
  3070  0011A6  0F30               	addlw	48
  3071  0011A8  ECAF  F00F         	call	_LCDByte
  3072  0011AC  4A5E               	infsnz	LCDWriteInt@i,f,c
  3073  0011AE  2A5F               	incf	LCDWriteInt@i+1,f,c
  3074  0011B0  D7E9               	goto	L2
  3075  0011B2                     l226:
  3076  0011B2  0012               	return	
  3077  0011B4  FFFF               	dw	65535	; errata NOP
  3078  0011B6                     __end_of_LCDWriteInt:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           postinc1	equ	0xFE6
  3089                           postdec1	equ	0xFE5
  3090                           fsr1l	equ	0xFE1
  3091                           indf2	equ	0xFDF
  3092                           postinc2	equ	0xFDE
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function ___awmod *****************
  3098 ;; Defined at:
  3099 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  dividend        2   19[COMRAM] int 
  3102 ;;  divisor         2   21[COMRAM] int 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  sign            1   24[COMRAM] unsigned char 
  3105 ;;  counter         1   23[COMRAM] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  2   19[COMRAM] int 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, prodl
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3115 ;;      Params:         4       0       0       0       0       0       0
  3116 ;;      Locals:         2       0       0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0
  3118 ;;      Totals:         6       0       0       0       0       0       0
  3119 ;;Total ram usage:        6 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    2
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_LCDWriteInt
  3126 ;;		_USARTWriteInt
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text4
  3131  00192E                     __ptext4:
  3132                           	opt stack 0
  3133  00192E                     ___awmod:
  3134                           	opt stack 26
  3135                           
  3136                           ;incstack = 0
  3137  00192E  FFFF               	dw	65535
  3138  001930  0E00               	movlw	0
  3139  001932  6E4E               	movwf	___awmod@sign,c
  3140  001934  504A               	movf	___awmod@dividend+1,w,c
  3141  001936  0A80               	xorlw	128
  3142  001938  6EF3               	movwf	prodl,c
  3143  00193A  0E80               	movlw	128
  3144  00193C  5CF3               	subwf	prodl,w,c
  3145  00193E  0E00               	movlw	0
  3146  001940  B4D8               	btfsc	status,2,c
  3147  001942  5C49               	subwf	___awmod@dividend,w,c
  3148  001944  B0D8               	btfsc	status,0,c
  3149  001946  D006               	goto	l6073
  3150  001948  6C49               	negf	___awmod@dividend,c
  3151  00194A  1E4A               	comf	___awmod@dividend+1,f,c
  3152  00194C  B0D8               	btfsc	status,0,c
  3153  00194E  2A4A               	incf	___awmod@dividend+1,f,c
  3154  001950  0E01               	movlw	1
  3155  001952  6E4E               	movwf	___awmod@sign,c
  3156  001954                     l6073:
  3157  001954  504C               	movf	___awmod@divisor+1,w,c
  3158  001956  0A80               	xorlw	128
  3159  001958  6EF3               	movwf	prodl,c
  3160  00195A  0E80               	movlw	128
  3161  00195C  5CF3               	subwf	prodl,w,c
  3162  00195E  0E00               	movlw	0
  3163  001960  B4D8               	btfsc	status,2,c
  3164  001962  5C4B               	subwf	___awmod@divisor,w,c
  3165  001964  B0D8               	btfsc	status,0,c
  3166  001966  D004               	goto	l6077
  3167  001968  6C4B               	negf	___awmod@divisor,c
  3168  00196A  1E4C               	comf	___awmod@divisor+1,f,c
  3169  00196C  B0D8               	btfsc	status,0,c
  3170  00196E  2A4C               	incf	___awmod@divisor+1,f,c
  3171  001970                     l6077:
  3172  001970  504C               	movf	___awmod@divisor+1,w,c
  3173  001972  104B               	iorwf	___awmod@divisor,w,c
  3174  001974  B4D8               	btfsc	status,2,c
  3175  001976  D018               	goto	l6093
  3176  001978  0E01               	movlw	1
  3177  00197A  6E4D               	movwf	___awmod@counter,c
  3178  00197C  D004               	goto	l6083
  3179  00197E                     l6081:
  3180  00197E  90D8               	bcf	status,0,c
  3181  001980  364B               	rlcf	___awmod@divisor,f,c
  3182  001982  364C               	rlcf	___awmod@divisor+1,f,c
  3183  001984  2A4D               	incf	___awmod@counter,f,c
  3184  001986                     l6083:
  3185  001986  AE4C               	btfss	___awmod@divisor+1,7,c
  3186  001988  D7FA               	goto	l6081
  3187  00198A                     l6085:
  3188  00198A  504B               	movf	___awmod@divisor,w,c
  3189  00198C  5C49               	subwf	___awmod@dividend,w,c
  3190  00198E  504C               	movf	___awmod@divisor+1,w,c
  3191  001990  584A               	subwfb	___awmod@dividend+1,w,c
  3192  001992  A0D8               	btfss	status,0,c
  3193  001994  D004               	goto	l6089
  3194  001996  504B               	movf	___awmod@divisor,w,c
  3195  001998  5E49               	subwf	___awmod@dividend,f,c
  3196  00199A  504C               	movf	___awmod@divisor+1,w,c
  3197  00199C  5A4A               	subwfb	___awmod@dividend+1,f,c
  3198  00199E                     l6089:
  3199  00199E  90D8               	bcf	status,0,c
  3200  0019A0  324C               	rrcf	___awmod@divisor+1,f,c
  3201  0019A2  324B               	rrcf	___awmod@divisor,f,c
  3202  0019A4  2E4D               	decfsz	___awmod@counter,f,c
  3203  0019A6  D7F1               	goto	l6085
  3204  0019A8                     l6093:
  3205  0019A8  504E               	movf	___awmod@sign,w,c
  3206  0019AA  B4D8               	btfsc	status,2,c
  3207  0019AC  D004               	goto	l6097
  3208  0019AE  6C49               	negf	___awmod@dividend,c
  3209  0019B0  1E4A               	comf	___awmod@dividend+1,f,c
  3210  0019B2  B0D8               	btfsc	status,0,c
  3211  0019B4  2A4A               	incf	___awmod@dividend+1,f,c
  3212  0019B6                     l6097:
  3213  0019B6  C049  F049         	movff	___awmod@dividend,?___awmod
  3214  0019BA  C04A  F04A         	movff	___awmod@dividend+1,?___awmod+1
  3215  0019BE  0012               	return	
  3216  0019C0  FFFF               	dw	65535	; errata NOP
  3217  0019C2                     __end_of___awmod:
  3218                           	opt stack 0
  3219                           tblptru	equ	0xFF8
  3220                           tblptrh	equ	0xFF7
  3221                           tblptrl	equ	0xFF6
  3222                           tablat	equ	0xFF5
  3223                           prodh	equ	0xFF4
  3224                           prodl	equ	0xFF3
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           postinc1	equ	0xFE6
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           fsr2h	equ	0xFDA
  3233                           fsr2l	equ	0xFD9
  3234                           status	equ	0xFD8
  3235                           
  3236 ;; *************** function ___awdiv *****************
  3237 ;; Defined at:
  3238 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  dividend        2   19[COMRAM] int 
  3241 ;;  divisor         2   21[COMRAM] int 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  quotient        2   25[COMRAM] int 
  3244 ;;  sign            1   24[COMRAM] unsigned char 
  3245 ;;  counter         1   23[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  2   19[COMRAM] int 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, prodl
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3255 ;;      Params:         4       0       0       0       0       0       0
  3256 ;;      Locals:         4       0       0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0
  3258 ;;      Totals:         8       0       0       0       0       0       0
  3259 ;;Total ram usage:        8 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    2
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_LCDWriteInt
  3266 ;;		_USARTWriteInt
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text5
  3271  0016A6                     __ptext5:
  3272                           	opt stack 0
  3273  0016A6                     ___awdiv:
  3274                           	opt stack 26
  3275                           
  3276                           ;incstack = 0
  3277  0016A6  FFFF               	dw	65535
  3278  0016A8  0E00               	movlw	0
  3279  0016AA  6E4E               	movwf	___awdiv@sign,c
  3280  0016AC  504C               	movf	___awdiv@divisor+1,w,c
  3281  0016AE  0A80               	xorlw	128
  3282  0016B0  6EF3               	movwf	prodl,c
  3283  0016B2  0E80               	movlw	128
  3284  0016B4  5CF3               	subwf	prodl,w,c
  3285  0016B6  0E00               	movlw	0
  3286  0016B8  B4D8               	btfsc	status,2,c
  3287  0016BA  5C4B               	subwf	___awdiv@divisor,w,c
  3288  0016BC  B0D8               	btfsc	status,0,c
  3289  0016BE  D006               	goto	l6029
  3290  0016C0  6C4B               	negf	___awdiv@divisor,c
  3291  0016C2  1E4C               	comf	___awdiv@divisor+1,f,c
  3292  0016C4  B0D8               	btfsc	status,0,c
  3293  0016C6  2A4C               	incf	___awdiv@divisor+1,f,c
  3294  0016C8  0E01               	movlw	1
  3295  0016CA  6E4E               	movwf	___awdiv@sign,c
  3296  0016CC                     l6029:
  3297  0016CC  504A               	movf	___awdiv@dividend+1,w,c
  3298  0016CE  0A80               	xorlw	128
  3299  0016D0  6EF3               	movwf	prodl,c
  3300  0016D2  0E80               	movlw	128
  3301  0016D4  5CF3               	subwf	prodl,w,c
  3302  0016D6  0E00               	movlw	0
  3303  0016D8  B4D8               	btfsc	status,2,c
  3304  0016DA  5C49               	subwf	___awdiv@dividend,w,c
  3305  0016DC  B0D8               	btfsc	status,0,c
  3306  0016DE  D006               	goto	l6035
  3307  0016E0  6C49               	negf	___awdiv@dividend,c
  3308  0016E2  1E4A               	comf	___awdiv@dividend+1,f,c
  3309  0016E4  B0D8               	btfsc	status,0,c
  3310  0016E6  2A4A               	incf	___awdiv@dividend+1,f,c
  3311  0016E8  0E01               	movlw	1
  3312  0016EA  1A4E               	xorwf	___awdiv@sign,f,c
  3313  0016EC                     l6035:
  3314  0016EC  0E00               	movlw	0
  3315  0016EE  6E50               	movwf	___awdiv@quotient+1,c
  3316  0016F0  0E00               	movlw	0
  3317  0016F2  6E4F               	movwf	___awdiv@quotient,c
  3318  0016F4  504C               	movf	___awdiv@divisor+1,w,c
  3319  0016F6  104B               	iorwf	___awdiv@divisor,w,c
  3320  0016F8  B4D8               	btfsc	status,2,c
  3321  0016FA  D01C               	goto	l6057
  3322  0016FC  0E01               	movlw	1
  3323  0016FE  6E4D               	movwf	___awdiv@counter,c
  3324  001700  D004               	goto	l6043
  3325  001702                     l6041:
  3326  001702  90D8               	bcf	status,0,c
  3327  001704  364B               	rlcf	___awdiv@divisor,f,c
  3328  001706  364C               	rlcf	___awdiv@divisor+1,f,c
  3329  001708  2A4D               	incf	___awdiv@counter,f,c
  3330  00170A                     l6043:
  3331  00170A  AE4C               	btfss	___awdiv@divisor+1,7,c
  3332  00170C  D7FA               	goto	l6041
  3333  00170E                     l6045:
  3334  00170E  90D8               	bcf	status,0,c
  3335  001710  364F               	rlcf	___awdiv@quotient,f,c
  3336  001712  3650               	rlcf	___awdiv@quotient+1,f,c
  3337  001714  504B               	movf	___awdiv@divisor,w,c
  3338  001716  5C49               	subwf	___awdiv@dividend,w,c
  3339  001718  504C               	movf	___awdiv@divisor+1,w,c
  3340  00171A  584A               	subwfb	___awdiv@dividend+1,w,c
  3341  00171C  A0D8               	btfss	status,0,c
  3342  00171E  D005               	goto	l6053
  3343  001720  504B               	movf	___awdiv@divisor,w,c
  3344  001722  5E49               	subwf	___awdiv@dividend,f,c
  3345  001724  504C               	movf	___awdiv@divisor+1,w,c
  3346  001726  5A4A               	subwfb	___awdiv@dividend+1,f,c
  3347  001728  804F               	bsf	___awdiv@quotient,0,c
  3348  00172A                     l6053:
  3349  00172A  90D8               	bcf	status,0,c
  3350  00172C  324C               	rrcf	___awdiv@divisor+1,f,c
  3351  00172E  324B               	rrcf	___awdiv@divisor,f,c
  3352  001730  2E4D               	decfsz	___awdiv@counter,f,c
  3353  001732  D7ED               	goto	l6045
  3354  001734                     l6057:
  3355  001734  504E               	movf	___awdiv@sign,w,c
  3356  001736  B4D8               	btfsc	status,2,c
  3357  001738  D004               	goto	l6061
  3358  00173A  6C4F               	negf	___awdiv@quotient,c
  3359  00173C  1E50               	comf	___awdiv@quotient+1,f,c
  3360  00173E  B0D8               	btfsc	status,0,c
  3361  001740  2A50               	incf	___awdiv@quotient+1,f,c
  3362  001742                     l6061:
  3363  001742  C04F  F049         	movff	___awdiv@quotient,?___awdiv
  3364  001746  C050  F04A         	movff	___awdiv@quotient+1,?___awdiv+1
  3365  00174A  0012               	return	
  3366  00174C  FFFF               	dw	65535	; errata NOP
  3367  00174E                     __end_of___awdiv:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           postinc1	equ	0xFE6
  3378                           postdec1	equ	0xFE5
  3379                           fsr1l	equ	0xFE1
  3380                           indf2	equ	0xFDF
  3381                           postinc2	equ	0xFDE
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _getting_data *****************
  3387 ;; Defined at:
  3388 ;;		line 115 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;		None
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  lsb             1    5[BANK1 ] unsigned char 
  3393 ;;  msb             1    4[BANK1 ] unsigned char 
  3394 ;;  result          1    3[BANK1 ] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3404 ;;      Params:         0       0       0       0       0       0       0
  3405 ;;      Locals:         0       0       3       0       0       0       0
  3406 ;;      Temps:          0       0       3       0       0       0       0
  3407 ;;      Totals:         0       0       6       0       0       0       0
  3408 ;;Total ram usage:        6 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    8
  3411 ;; This function calls:
  3412 ;;		_Clear_Packet
  3413 ;;		_Creat_RTC_Packet
  3414 ;;		_LCDByte
  3415 ;;		_LCDGotoXY
  3416 ;;		_LCDWriteString
  3417 ;;		_MyDelay
  3418 ;;		_Receive_Packet
  3419 ;;		_Write_b_eep
  3420 ;;		_tx_packet
  3421 ;;		_write_packet_to_page
  3422 ;; This function is called by:
  3423 ;;		_main
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text6
  3428  00009A                     __ptext6:
  3429                           	opt stack 0
  3430  00009A                     _getting_data:
  3431                           	opt stack 22
  3432                           
  3433                           ;incstack = 0
  3434  00009A  FFFF               	dw	65535
  3435                           
  3436                           ;Test1.c: 117: unsigned char result = 0, msb = 0, lsb = 0;
  3437  00009C  0E00               	movlw	0
  3438  00009E  0101               	movlb	1	; () banked
  3439  0000A0  6F83               	movwf	getting_data@result& (0+255),b
  3440  0000A2  0E00               	movlw	0
  3441  0000A4  0101               	movlb	1	; () banked
  3442  0000A6  6F84               	movwf	getting_data@msb& (0+255),b
  3443  0000A8  0E00               	movlw	0
  3444  0000AA  0101               	movlb	1	; () banked
  3445  0000AC  6F85               	movwf	getting_data@lsb& (0+255),b
  3446  0000AE                     l7073:
  3447                           
  3448                           ;Test1.c: 120: {
  3449                           ;Test1.c: 121: (LCDByte(0b00000001,0));
  3450  0000AE  0E00               	movlw	0
  3451  0000B0  6E4C               	movwf	LCDByte@isdata,c
  3452  0000B2  0E01               	movlw	1
  3453  0000B4  ECAF  F00F         	call	_LCDByte
  3454                           
  3455                           ;Test1.c: 122: LCDWriteString("WAITING FOR DATA");
  3456  0000B8  0E7D               	movlw	high STR_33
  3457  0000BA  6E53               	movwf	LCDWriteString@msg+1,c
  3458  0000BC  0EB8               	movlw	low STR_33
  3459  0000BE  6E52               	movwf	LCDWriteString@msg,c
  3460  0000C0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3461                           
  3462                           ;Test1.c: 124: result = 0x00;
  3463  0000C4  0E00               	movlw	0
  3464  0000C6  0101               	movlb	1	; () banked
  3465  0000C8  6F83               	movwf	getting_data@result& (0+255),b
  3466                           
  3467                           ;Test1.c: 126: while(result == 0x00)
  3468  0000CA  D011               	goto	l7085
  3469  0000CC                     l7079:
  3470                           
  3471                           ; BSR set to: 1
  3472                           ;Test1.c: 127: {
  3473                           ;Test1.c: 128: Clear_Packet();
  3474  0000CC  ECFF  F010         	call	_Clear_Packet	;wreg free
  3475                           
  3476                           ;Test1.c: 129: result = Receive_Packet();
  3477  0000D0  EC2C  F006         	call	_Receive_Packet	;wreg free
  3478  0000D4  0101               	movlb	1	; () banked
  3479  0000D6  6F83               	movwf	getting_data@result& (0+255),b
  3480                           
  3481                           ; BSR set to: 1
  3482                           ;Test1.c: 130: (LCDByte(0b00000001,0));
  3483  0000D8  0E00               	movlw	0
  3484  0000DA  6E4C               	movwf	LCDByte@isdata,c
  3485  0000DC  0E01               	movlw	1
  3486  0000DE  ECAF  F00F         	call	_LCDByte
  3487                           
  3488                           ;Test1.c: 131: LCDWriteString("WAITING FOR DATA");
  3489  0000E2  0E7D               	movlw	high STR_33
  3490  0000E4  6E53               	movwf	LCDWriteString@msg+1,c
  3491  0000E6  0EB8               	movlw	low STR_33
  3492  0000E8  6E52               	movwf	LCDWriteString@msg,c
  3493  0000EA  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3494  0000EE                     l7085:
  3495  0000EE  0101               	movlb	1	; () banked
  3496  0000F0  5183               	movf	getting_data@result& (0+255),w,b
  3497  0000F2  B4D8               	btfsc	status,2,c
  3498  0000F4  D7EB               	goto	l7079
  3499                           
  3500                           ; BSR set to: 1
  3501                           ;Test1.c: 132: }
  3502                           ;Test1.c: 135: if(PACKET[4] == 3 && PACKET[2] == 'x')
  3503                           
  3504                           ; BSR set to: 1
  3505  0000F6  0100               	movlb	0	; () banked
  3506  0000F8  5184               	movf	(_PACKET+4)& (0+255),w,b	;volatile
  3507  0000FA  0A03               	xorlw	3
  3508  0000FC  A4D8               	btfss	status,2,c
  3509  0000FE  D022               	goto	l7105
  3510                           
  3511                           ; BSR set to: 0
  3512  000100  0100               	movlb	0	; () banked
  3513  000102  5182               	movf	(_PACKET+2)& (0+255),w,b	;volatile
  3514  000104  0A78               	xorlw	120
  3515  000106  A4D8               	btfss	status,2,c
  3516  000108  D01D               	goto	l7105
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;Test1.c: 136: {
  3520                           ;Test1.c: 138: Destination_ID = PACKET[2];
  3521  00010A  C082  F023         	movff	_PACKET+2,_Destination_ID	;volatile
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;Test1.c: 139: (LCDByte(0b00000001,0));
  3525  00010E  0E00               	movlw	0
  3526  000110  6E4C               	movwf	LCDByte@isdata,c
  3527  000112  0E01               	movlw	1
  3528  000114  ECAF  F00F         	call	_LCDByte
  3529                           
  3530                           ;Test1.c: 140: LCDWriteString("RTC REQ. BY X");
  3531  000118  0E7F               	movlw	high STR_35
  3532  00011A  6E53               	movwf	LCDWriteString@msg+1,c
  3533  00011C  0E25               	movlw	low STR_35
  3534  00011E  6E52               	movwf	LCDWriteString@msg,c
  3535  000120  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3536                           
  3537                           ;Test1.c: 142: Creat_RTC_Packet('x');
  3538  000124  0E78               	movlw	120
  3539  000126  EC51  F009         	call	_Creat_RTC_Packet
  3540                           
  3541                           ;Test1.c: 143: LCDGotoXY(0,1);
  3542  00012A  0E01               	movlw	1
  3543  00012C  6E52               	movwf	LCDGotoXY@y,c
  3544  00012E  0E00               	movlw	0
  3545  000130  ECA3  F010         	call	_LCDGotoXY
  3546                           
  3547                           ;Test1.c: 144: LCDWriteString("SENDING SETTINGS");
  3548  000134  0E7D               	movlw	high STR_36
  3549  000136  6E53               	movwf	LCDWriteString@msg+1,c
  3550  000138  0EDA               	movlw	low STR_36
  3551  00013A  6E52               	movwf	LCDWriteString@msg,c
  3552  00013C  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3553                           
  3554                           ;Test1.c: 145: tx_packet();
  3555  000140  ECE1  F00C         	call	_tx_packet	;wreg free
  3556  000144                     l7105:
  3557                           
  3558                           ;Test1.c: 146: }
  3559                           ;Test1.c: 149: if(PACKET[4] == 3 && PACKET[2] == 'y')
  3560  000144  0100               	movlb	0	; () banked
  3561  000146  5184               	movf	(_PACKET+4)& (0+255),w,b	;volatile
  3562  000148  0A03               	xorlw	3
  3563  00014A  A4D8               	btfss	status,2,c
  3564  00014C  D022               	goto	l7123
  3565                           
  3566                           ; BSR set to: 0
  3567  00014E  0100               	movlb	0	; () banked
  3568  000150  5182               	movf	(_PACKET+2)& (0+255),w,b	;volatile
  3569  000152  0A79               	xorlw	121
  3570  000154  A4D8               	btfss	status,2,c
  3571  000156  D01D               	goto	l7123
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;Test1.c: 150: {
  3575                           ;Test1.c: 152: Destination_ID = PACKET[2];
  3576  000158  C082  F023         	movff	_PACKET+2,_Destination_ID	;volatile
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;Test1.c: 153: (LCDByte(0b00000001,0));
  3580  00015C  0E00               	movlw	0
  3581  00015E  6E4C               	movwf	LCDByte@isdata,c
  3582  000160  0E01               	movlw	1
  3583  000162  ECAF  F00F         	call	_LCDByte
  3584                           
  3585                           ;Test1.c: 154: LCDWriteString("RTC REQ. BY Y");
  3586  000166  0E7F               	movlw	high STR_37
  3587  000168  6E53               	movwf	LCDWriteString@msg+1,c
  3588  00016A  0E33               	movlw	low STR_37
  3589  00016C  6E52               	movwf	LCDWriteString@msg,c
  3590  00016E  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3591                           
  3592                           ;Test1.c: 156: Creat_RTC_Packet('y');
  3593  000172  0E79               	movlw	121
  3594  000174  EC51  F009         	call	_Creat_RTC_Packet
  3595                           
  3596                           ;Test1.c: 157: LCDGotoXY(0,1);
  3597  000178  0E01               	movlw	1
  3598  00017A  6E52               	movwf	LCDGotoXY@y,c
  3599  00017C  0E00               	movlw	0
  3600  00017E  ECA3  F010         	call	_LCDGotoXY
  3601                           
  3602                           ;Test1.c: 158: LCDWriteString("SENDING SETTINGS");
  3603  000182  0E7D               	movlw	high STR_36
  3604  000184  6E53               	movwf	LCDWriteString@msg+1,c
  3605  000186  0EDA               	movlw	low STR_36
  3606  000188  6E52               	movwf	LCDWriteString@msg,c
  3607  00018A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3608                           
  3609                           ;Test1.c: 159: tx_packet();
  3610  00018E  ECE1  F00C         	call	_tx_packet	;wreg free
  3611  000192                     l7123:
  3612                           
  3613                           ;Test1.c: 160: }
  3614                           ;Test1.c: 162: if(PACKET[4] != 3 && PACKET[2] == 'x')
  3615  000192  0100               	movlb	0	; () banked
  3616  000194  5184               	movf	(_PACKET+4)& (0+255),w,b	;volatile
  3617  000196  0A03               	xorlw	3
  3618  000198  B4D8               	btfsc	status,2,c
  3619  00019A  D083               	goto	l7165
  3620                           
  3621                           ; BSR set to: 0
  3622  00019C  0100               	movlb	0	; () banked
  3623  00019E  5182               	movf	(_PACKET+2)& (0+255),w,b	;volatile
  3624  0001A0  0A78               	xorlw	120
  3625  0001A2  A4D8               	btfss	status,2,c
  3626  0001A4  D07E               	goto	l7165
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;Test1.c: 163: {
  3630                           ;Test1.c: 164: (LCDByte(0b00000001,0));
  3631  0001A6  0E00               	movlw	0
  3632  0001A8  6E4C               	movwf	LCDByte@isdata,c
  3633  0001AA  0E01               	movlw	1
  3634  0001AC  ECAF  F00F         	call	_LCDByte
  3635                           
  3636                           ;Test1.c: 165: LCDWriteString("PACKET RECEIVED");
  3637  0001B0  0E7E               	movlw	high STR_39
  3638  0001B2  6E53               	movwf	LCDWriteString@msg+1,c
  3639  0001B4  0E60               	movlw	low STR_39
  3640  0001B6  6E52               	movwf	LCDWriteString@msg,c
  3641  0001B8  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3642                           
  3643                           ;Test1.c: 166: LCDGotoXY(0,1);
  3644  0001BC  0E01               	movlw	1
  3645  0001BE  6E52               	movwf	LCDGotoXY@y,c
  3646  0001C0  0E00               	movlw	0
  3647  0001C2  ECA3  F010         	call	_LCDGotoXY
  3648                           
  3649                           ;Test1.c: 167: LCDWriteString("FROM RTU-1");
  3650  0001C6  0E7F               	movlw	high STR_40
  3651  0001C8  6E53               	movwf	LCDWriteString@msg+1,c
  3652  0001CA  0EA8               	movlw	low STR_40
  3653  0001CC  6E52               	movwf	LCDWriteString@msg,c
  3654  0001CE  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3655                           
  3656                           ;Test1.c: 168: MyDelay(100);
  3657  0001D2  0E00               	movlw	0
  3658  0001D4  6E4A               	movwf	MyDelay@ms+1,c
  3659  0001D6  0E64               	movlw	100
  3660  0001D8  6E49               	movwf	MyDelay@ms,c
  3661  0001DA  EC53  F011         	call	_MyDelay	;wreg free
  3662                           
  3663                           ;Test1.c: 171: (LCDByte(0b00000001,0));
  3664  0001DE  0E00               	movlw	0
  3665  0001E0  6E4C               	movwf	LCDByte@isdata,c
  3666  0001E2  0E01               	movlw	1
  3667  0001E4  ECAF  F00F         	call	_LCDByte
  3668                           
  3669                           ;Test1.c: 172: LCDWriteString("WRITING EEPROM...");
  3670  0001E8  0E7D               	movlw	high STR_41
  3671  0001EA  6E53               	movwf	LCDWriteString@msg+1,c
  3672  0001EC  0E3D               	movlw	low STR_41
  3673  0001EE  6E52               	movwf	LCDWriteString@msg,c
  3674  0001F0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3675                           
  3676                           ;Test1.c: 173: device = 0xA0;
  3677  0001F4  0EA0               	movlw	160
  3678  0001F6  6E2C               	movwf	_device,c
  3679                           
  3680                           ;Test1.c: 174: write_packet_to_page(Write_Page1);
  3681  0001F8  C01B  F054         	movff	_Write_Page1,write_packet_to_page@page_no
  3682  0001FC  C01C  F055         	movff	_Write_Page1+1,write_packet_to_page@page_no+1
  3683  000200  ECA7  F00B         	call	_write_packet_to_page	;wreg free
  3684                           
  3685                           ;Test1.c: 175: Write_Page1++;
  3686  000204  4A1B               	infsnz	_Write_Page1,f,c
  3687  000206  2A1C               	incf	_Write_Page1+1,f,c
  3688                           
  3689                           ;Test1.c: 177: msb = Write_Page1 >> 8;
  3690  000208  C01C  F180         	movff	_Write_Page1+1,??_getting_data
  3691  00020C  C180  F181         	movff	??_getting_data,??_getting_data+1
  3692  000210  0101               	movlb	1	; () banked
  3693  000212  6B82               	clrf	(??_getting_data+2)& (0+255),b
  3694  000214  0101               	movlb	1	; () banked
  3695  000216  5181               	movf	(??_getting_data+1)& (0+255),w,b
  3696  000218  0101               	movlb	1	; () banked
  3697  00021A  6F84               	movwf	getting_data@msb& (0+255),b
  3698                           
  3699                           ; BSR set to: 1
  3700                           ;Test1.c: 178: lsb = Write_Page1 & 0x00FF;
  3701  00021C  C01B  F185         	movff	_Write_Page1,getting_data@lsb
  3702                           
  3703                           ; BSR set to: 1
  3704                           ;Test1.c: 180: Write_b_eep(0x00, msb);
  3705  000220  0E00               	movlw	0
  3706  000222  6E4A               	movwf	Write_b_eep@badd+1,c
  3707  000224  0E00               	movlw	0
  3708  000226  6E49               	movwf	Write_b_eep@badd,c
  3709  000228  C184  F04B         	movff	getting_data@msb,Write_b_eep@bdat
  3710  00022C  ECC5  F010         	call	_Write_b_eep	;wreg free
  3711                           
  3712                           ;Test1.c: 181: _delay(50);
  3713  000230  0E0A               	movlw	10
  3714  000232                     u4867:
  3715  000232  F000               	nop	
  3716  000234  2EE8               	decfsz	wreg,f,c
  3717  000236  D7FD               	goto	u4867
  3718                           
  3719                           ;Test1.c: 182: Write_b_eep(0x01, lsb);
  3720  000238  0E00               	movlw	0
  3721  00023A  6E4A               	movwf	Write_b_eep@badd+1,c
  3722  00023C  0E01               	movlw	1
  3723  00023E  6E49               	movwf	Write_b_eep@badd,c
  3724  000240  C185  F04B         	movff	getting_data@lsb,Write_b_eep@bdat
  3725  000244  ECC5  F010         	call	_Write_b_eep	;wreg free
  3726                           
  3727                           ;Test1.c: 183: _delay(50);
  3728  000248  0E0A               	movlw	10
  3729  00024A                     u4877:
  3730  00024A  F000               	nop	
  3731  00024C  2EE8               	decfsz	wreg,f,c
  3732  00024E  D7FD               	goto	u4877
  3733                           
  3734                           ;Test1.c: 185: if(Write_Page1 >= 4)
  3735  000250  0E04               	movlw	4
  3736  000252  5C1B               	subwf	_Write_Page1,w,c
  3737  000254  0E00               	movlw	0
  3738  000256  581C               	subwfb	_Write_Page1+1,w,c
  3739  000258  A0D8               	btfss	status,0,c
  3740  00025A  D023               	goto	l7165
  3741  00025C                     l7157:
  3742                           
  3743                           ;Test1.c: 188: {
  3744                           ;Test1.c: 189: (LCDByte(0b00000001,0));
  3745  00025C  0E00               	movlw	0
  3746  00025E  6E4C               	movwf	LCDByte@isdata,c
  3747  000260  0E01               	movlw	1
  3748  000262  ECAF  F00F         	call	_LCDByte
  3749                           
  3750                           ;Test1.c: 190: MyDelay(1000);
  3751  000266  0E03               	movlw	3
  3752  000268  6E4A               	movwf	MyDelay@ms+1,c
  3753  00026A  0EE8               	movlw	232
  3754  00026C  6E49               	movwf	MyDelay@ms,c
  3755  00026E  EC53  F011         	call	_MyDelay	;wreg free
  3756                           
  3757                           ;Test1.c: 191: LCDWriteString("MEMORY FULL...!");
  3758  000272  0E7E               	movlw	high STR_42
  3759  000274  6E53               	movwf	LCDWriteString@msg+1,c
  3760  000276  0E40               	movlw	low STR_42
  3761  000278  6E52               	movwf	LCDWriteString@msg,c
  3762  00027A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3763                           
  3764                           ;Test1.c: 192: LCDGotoXY(0,1);
  3765  00027E  0E01               	movlw	1
  3766  000280  6E52               	movwf	LCDGotoXY@y,c
  3767  000282  0E00               	movlw	0
  3768  000284  ECA3  F010         	call	_LCDGotoXY
  3769                           
  3770                           ;Test1.c: 193: LCDWriteString("CONNECT PC...");
  3771  000288  0E7F               	movlw	high STR_43
  3772  00028A  6E53               	movwf	LCDWriteString@msg+1,c
  3773  00028C  0E09               	movlw	low STR_43
  3774  00028E  6E52               	movwf	LCDWriteString@msg,c
  3775  000290  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3776                           
  3777                           ;Test1.c: 194: MyDelay(1000);
  3778  000294  0E03               	movlw	3
  3779  000296  6E4A               	movwf	MyDelay@ms+1,c
  3780  000298  0EE8               	movlw	232
  3781  00029A  6E49               	movwf	MyDelay@ms,c
  3782  00029C  EC53  F011         	call	_MyDelay	;wreg free
  3783  0002A0  D7DD               	goto	l7157
  3784  0002A2                     l7165:
  3785                           
  3786                           ;Test1.c: 195: }
  3787                           ;Test1.c: 196: }
  3788                           ;Test1.c: 197: }
  3789                           ;Test1.c: 198: if(PACKET[4] != 3 && PACKET[2] == 'y')
  3790  0002A2  0100               	movlb	0	; () banked
  3791  0002A4  5184               	movf	(_PACKET+4)& (0+255),w,b	;volatile
  3792  0002A6  0A03               	xorlw	3
  3793  0002A8  B4D8               	btfsc	status,2,c
  3794  0002AA  D701               	goto	l7073
  3795                           
  3796                           ; BSR set to: 0
  3797  0002AC  0100               	movlb	0	; () banked
  3798  0002AE  5182               	movf	(_PACKET+2)& (0+255),w,b	;volatile
  3799  0002B0  0A79               	xorlw	121
  3800  0002B2  A4D8               	btfss	status,2,c
  3801  0002B4  D6FC               	goto	l7073
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;Test1.c: 199: {
  3805                           ;Test1.c: 200: (LCDByte(0b00000001,0));
  3806  0002B6  0E00               	movlw	0
  3807  0002B8  6E4C               	movwf	LCDByte@isdata,c
  3808  0002BA  0E01               	movlw	1
  3809  0002BC  ECAF  F00F         	call	_LCDByte
  3810                           
  3811                           ;Test1.c: 201: LCDWriteString("PACKET RECEIVED");
  3812  0002C0  0E7E               	movlw	high STR_39
  3813  0002C2  6E53               	movwf	LCDWriteString@msg+1,c
  3814  0002C4  0E60               	movlw	low STR_39
  3815  0002C6  6E52               	movwf	LCDWriteString@msg,c
  3816  0002C8  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3817                           
  3818                           ;Test1.c: 202: LCDGotoXY(0,1);
  3819  0002CC  0E01               	movlw	1
  3820  0002CE  6E52               	movwf	LCDGotoXY@y,c
  3821  0002D0  0E00               	movlw	0
  3822  0002D2  ECA3  F010         	call	_LCDGotoXY
  3823                           
  3824                           ;Test1.c: 203: LCDWriteString("FROM RTU-2");
  3825  0002D6  0E7F               	movlw	high STR_45
  3826  0002D8  6E53               	movwf	LCDWriteString@msg+1,c
  3827  0002DA  0EB3               	movlw	low STR_45
  3828  0002DC  6E52               	movwf	LCDWriteString@msg,c
  3829  0002DE  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3830                           
  3831                           ;Test1.c: 204: MyDelay(100);
  3832  0002E2  0E00               	movlw	0
  3833  0002E4  6E4A               	movwf	MyDelay@ms+1,c
  3834  0002E6  0E64               	movlw	100
  3835  0002E8  6E49               	movwf	MyDelay@ms,c
  3836  0002EA  EC53  F011         	call	_MyDelay	;wreg free
  3837                           
  3838                           ;Test1.c: 207: (LCDByte(0b00000001,0));
  3839  0002EE  0E00               	movlw	0
  3840  0002F0  6E4C               	movwf	LCDByte@isdata,c
  3841  0002F2  0E01               	movlw	1
  3842  0002F4  ECAF  F00F         	call	_LCDByte
  3843                           
  3844                           ;Test1.c: 208: LCDWriteString("WRITING EEPROM...");
  3845  0002F8  0E7D               	movlw	high STR_41
  3846  0002FA  6E53               	movwf	LCDWriteString@msg+1,c
  3847  0002FC  0E3D               	movlw	low STR_41
  3848  0002FE  6E52               	movwf	LCDWriteString@msg,c
  3849  000300  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3850                           
  3851                           ;Test1.c: 209: device = 0xA2;
  3852  000304  0EA2               	movlw	162
  3853  000306  6E2C               	movwf	_device,c
  3854                           
  3855                           ;Test1.c: 210: write_packet_to_page(Write_Page2);
  3856  000308  C01D  F054         	movff	_Write_Page2,write_packet_to_page@page_no
  3857  00030C  C01E  F055         	movff	_Write_Page2+1,write_packet_to_page@page_no+1
  3858  000310  ECA7  F00B         	call	_write_packet_to_page	;wreg free
  3859                           
  3860                           ;Test1.c: 211: Write_Page2++;
  3861  000314  4A1D               	infsnz	_Write_Page2,f,c
  3862  000316  2A1E               	incf	_Write_Page2+1,f,c
  3863                           
  3864                           ;Test1.c: 213: msb = Write_Page2 >> 8;
  3865  000318  C01E  F180         	movff	_Write_Page2+1,??_getting_data
  3866  00031C  C180  F181         	movff	??_getting_data,??_getting_data+1
  3867  000320  0101               	movlb	1	; () banked
  3868  000322  6B82               	clrf	(??_getting_data+2)& (0+255),b
  3869  000324  0101               	movlb	1	; () banked
  3870  000326  5181               	movf	(??_getting_data+1)& (0+255),w,b
  3871  000328  0101               	movlb	1	; () banked
  3872  00032A  6F84               	movwf	getting_data@msb& (0+255),b
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;Test1.c: 214: lsb = Write_Page2 & 0x00FF;
  3876  00032C  C01D  F185         	movff	_Write_Page2,getting_data@lsb
  3877                           
  3878                           ; BSR set to: 1
  3879                           ;Test1.c: 216: Write_b_eep(0x02, msb);
  3880  000330  0E00               	movlw	0
  3881  000332  6E4A               	movwf	Write_b_eep@badd+1,c
  3882  000334  0E02               	movlw	2
  3883  000336  6E49               	movwf	Write_b_eep@badd,c
  3884  000338  C184  F04B         	movff	getting_data@msb,Write_b_eep@bdat
  3885  00033C  ECC5  F010         	call	_Write_b_eep	;wreg free
  3886                           
  3887                           ;Test1.c: 217: _delay(50);
  3888  000340  0E0A               	movlw	10
  3889  000342                     u4887:
  3890  000342  F000               	nop	
  3891  000344  2EE8               	decfsz	wreg,f,c
  3892  000346  D7FD               	goto	u4887
  3893                           
  3894                           ;Test1.c: 218: Write_b_eep(0x03, lsb);
  3895  000348  0E00               	movlw	0
  3896  00034A  6E4A               	movwf	Write_b_eep@badd+1,c
  3897  00034C  0E03               	movlw	3
  3898  00034E  6E49               	movwf	Write_b_eep@badd,c
  3899  000350  C185  F04B         	movff	getting_data@lsb,Write_b_eep@bdat
  3900  000354  ECC5  F010         	call	_Write_b_eep	;wreg free
  3901                           
  3902                           ;Test1.c: 219: _delay(50);
  3903  000358  0E0A               	movlw	10
  3904  00035A                     u4897:
  3905  00035A  F000               	nop	
  3906  00035C  2EE8               	decfsz	wreg,f,c
  3907  00035E  D7FD               	goto	u4897
  3908                           
  3909                           ;Test1.c: 221: if(Write_Page2 >= 4)
  3910  000360  0E04               	movlw	4
  3911  000362  5C1D               	subwf	_Write_Page2,w,c
  3912  000364  0E00               	movlw	0
  3913  000366  581E               	subwfb	_Write_Page2+1,w,c
  3914  000368  A0D8               	btfss	status,0,c
  3915  00036A  D6A1               	goto	l7073
  3916  00036C                     l7199:
  3917                           
  3918                           ;Test1.c: 224: {
  3919                           ;Test1.c: 225: (LCDByte(0b00000001,0));
  3920  00036C  0E00               	movlw	0
  3921  00036E  6E4C               	movwf	LCDByte@isdata,c
  3922  000370  0E01               	movlw	1
  3923  000372  ECAF  F00F         	call	_LCDByte
  3924                           
  3925                           ;Test1.c: 226: MyDelay(100);
  3926  000376  0E00               	movlw	0
  3927  000378  6E4A               	movwf	MyDelay@ms+1,c
  3928  00037A  0E64               	movlw	100
  3929  00037C  6E49               	movwf	MyDelay@ms,c
  3930  00037E  EC53  F011         	call	_MyDelay	;wreg free
  3931                           
  3932                           ;Test1.c: 227: LCDWriteString("MEMORY FULL...!");
  3933  000382  0E7E               	movlw	high STR_42
  3934  000384  6E53               	movwf	LCDWriteString@msg+1,c
  3935  000386  0E40               	movlw	low STR_42
  3936  000388  6E52               	movwf	LCDWriteString@msg,c
  3937  00038A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3938                           
  3939                           ;Test1.c: 228: LCDGotoXY(0,1);
  3940  00038E  0E01               	movlw	1
  3941  000390  6E52               	movwf	LCDGotoXY@y,c
  3942  000392  0E00               	movlw	0
  3943  000394  ECA3  F010         	call	_LCDGotoXY
  3944                           
  3945                           ;Test1.c: 229: LCDWriteString("CONNECT PC...");
  3946  000398  0E7F               	movlw	high STR_43
  3947  00039A  6E53               	movwf	LCDWriteString@msg+1,c
  3948  00039C  0E09               	movlw	low STR_43
  3949  00039E  6E52               	movwf	LCDWriteString@msg,c
  3950  0003A0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  3951                           
  3952                           ;Test1.c: 230: MyDelay(100);
  3953  0003A4  0E00               	movlw	0
  3954  0003A6  6E4A               	movwf	MyDelay@ms+1,c
  3955  0003A8  0E64               	movlw	100
  3956  0003AA  6E49               	movwf	MyDelay@ms,c
  3957  0003AC  EC53  F011         	call	_MyDelay	;wreg free
  3958  0003B0  D7DD               	goto	l7199
  3959  0003B2  FFFF               	dw	65535	; errata NOP
  3960  0003B4                     __end_of_getting_data:
  3961                           	opt stack 0
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           postinc1	equ	0xFE6
  3971                           postdec1	equ	0xFE5
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _write_packet_to_page *****************
  3980 ;; Defined at:
  3981 ;;		line 125 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myeeprom.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  page_no         2   30[COMRAM] unsigned int 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  address         2   36[COMRAM] unsigned int 
  3986 ;;  count           1   38[COMRAM] unsigned char 
  3987 ;;  lsb             1   35[COMRAM] unsigned char 
  3988 ;;  msb             1   34[COMRAM] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;		None               void
  3991 ;; Registers used:
  3992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3998 ;;      Params:         2       0       0       0       0       0       0
  3999 ;;      Locals:         5       0       0       0       0       0       0
  4000 ;;      Temps:          2       0       0       0       0       0       0
  4001 ;;      Totals:         9       0       0       0       0       0       0
  4002 ;;Total ram usage:        9 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    5
  4005 ;; This function calls:
  4006 ;;		_rom_byte_write
  4007 ;; This function is called by:
  4008 ;;		_getting_data
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text7
  4013  00174E                     __ptext7:
  4014                           	opt stack 0
  4015  00174E                     _write_packet_to_page:
  4016                           	opt stack 24
  4017                           
  4018                           ;incstack = 0
  4019  00174E  FFFF               	dw	65535
  4020                           
  4021                           ;myeeprom.c: 127: unsigned char count = 0;
  4022  001750  0E00               	movlw	0
  4023  001752  6E5C               	movwf	write_packet_to_page@count,c
  4024                           
  4025                           ;myeeprom.c: 128: unsigned char msb = 0, lsb = 0;
  4026  001754  0E00               	movlw	0
  4027  001756  6E58               	movwf	write_packet_to_page@msb,c
  4028  001758  0E00               	movlw	0
  4029  00175A  6E59               	movwf	write_packet_to_page@lsb,c
  4030                           
  4031                           ;myeeprom.c: 129: unsigned int address = 0;
  4032  00175C  0E00               	movlw	0
  4033  00175E  6E5B               	movwf	write_packet_to_page@address+1,c
  4034  001760  0E00               	movlw	0
  4035  001762  6E5A               	movwf	write_packet_to_page@address,c
  4036                           
  4037                           ;myeeprom.c: 131: address = page_no * 128;
  4038  001764  C054  F056         	movff	write_packet_to_page@page_no,??_write_packet_to_page
  4039  001768  C055  F057         	movff	write_packet_to_page@page_no+1,??_write_packet_to_page+1
  4040  00176C  0E07               	movlw	7
  4041  00176E                     u3725:
  4042  00176E  90D8               	bcf	status,0,c
  4043  001770  3656               	rlcf	??_write_packet_to_page,f,c
  4044  001772  3657               	rlcf	??_write_packet_to_page+1,f,c
  4045  001774  2EE8               	decfsz	wreg,f,c
  4046  001776  D7FB               	goto	u3725
  4047  001778  C056  F05A         	movff	??_write_packet_to_page,write_packet_to_page@address
  4048  00177C  C057  F05B         	movff	??_write_packet_to_page+1,write_packet_to_page@address+1
  4049                           
  4050                           ;myeeprom.c: 133: count = 0;
  4051  001780  0E00               	movlw	0
  4052  001782  6E5C               	movwf	write_packet_to_page@count,c
  4053                           
  4054                           ;myeeprom.c: 134: while(PACKET[count] != 0xEA)
  4055  001784  D015               	goto	l6327
  4056  001786                     l6321:
  4057                           
  4058                           ;myeeprom.c: 135: {
  4059                           ;myeeprom.c: 136: rom_byte_write(address,PACKET[count]);
  4060  001786  C05A  F04C         	movff	write_packet_to_page@address,rom_byte_write@address
  4061  00178A  C05B  F04D         	movff	write_packet_to_page@address+1,rom_byte_write@address+1
  4062  00178E  505C               	movf	write_packet_to_page@count,w,c
  4063  001790  0D01               	mullw	1
  4064  001792  0100               	movlb	0	; () banked
  4065  001794  0E80               	movlw	low _PACKET	;volatile
  4066  001796  24F3               	addwf	prodl,w,c
  4067  001798  6ED9               	movwf	fsr2l,c
  4068  00179A  0100               	movlb	0	; () banked
  4069  00179C  0E00               	movlw	high _PACKET	;volatile
  4070  00179E  20F4               	addwfc	prodh,w,c
  4071  0017A0  6EDA               	movwf	fsr2h,c
  4072  0017A2  50DF               	movf	indf2,w,c
  4073  0017A4  6E4E               	movwf	rom_byte_write@byte,c
  4074  0017A6  EC4A  F00F         	call	_rom_byte_write	;wreg free
  4075                           
  4076                           ;myeeprom.c: 137: count++;
  4077  0017AA  2A5C               	incf	write_packet_to_page@count,f,c
  4078                           
  4079                           ;myeeprom.c: 138: address++;
  4080  0017AC  4A5A               	infsnz	write_packet_to_page@address,f,c
  4081  0017AE  2A5B               	incf	write_packet_to_page@address+1,f,c
  4082  0017B0                     l6327:
  4083  0017B0  505C               	movf	write_packet_to_page@count,w,c
  4084  0017B2  0D01               	mullw	1
  4085  0017B4  0100               	movlb	0	; () banked
  4086  0017B6  0E80               	movlw	low _PACKET	;volatile
  4087  0017B8  24F3               	addwf	prodl,w,c
  4088  0017BA  6ED9               	movwf	fsr2l,c
  4089  0017BC  0100               	movlb	0	; () banked
  4090  0017BE  0E00               	movlw	high _PACKET	;volatile
  4091  0017C0  20F4               	addwfc	prodh,w,c
  4092  0017C2  6EDA               	movwf	fsr2h,c
  4093  0017C4  0EEA               	movlw	234
  4094  0017C6  62DF               	cpfseq	indf2,c
  4095  0017C8  D7DE               	goto	l6321
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;myeeprom.c: 139: }
  4099                           ;myeeprom.c: 140: rom_byte_write(address,PACKET[count]);
  4100                           
  4101                           ; BSR set to: 0
  4102  0017CA  C05A  F04C         	movff	write_packet_to_page@address,rom_byte_write@address
  4103  0017CE  C05B  F04D         	movff	write_packet_to_page@address+1,rom_byte_write@address+1
  4104  0017D2  505C               	movf	write_packet_to_page@count,w,c
  4105  0017D4  0D01               	mullw	1
  4106  0017D6  0100               	movlb	0	; () banked
  4107  0017D8  0E80               	movlw	low _PACKET	;volatile
  4108  0017DA  24F3               	addwf	prodl,w,c
  4109  0017DC  6ED9               	movwf	fsr2l,c
  4110  0017DE  0100               	movlb	0	; () banked
  4111  0017E0  0E00               	movlw	high _PACKET	;volatile
  4112  0017E2  20F4               	addwfc	prodh,w,c
  4113  0017E4  6EDA               	movwf	fsr2h,c
  4114  0017E6  50DF               	movf	indf2,w,c
  4115  0017E8  6E4E               	movwf	rom_byte_write@byte,c
  4116  0017EA  EC4A  F00F         	call	_rom_byte_write	;wreg free
  4117                           
  4118                           ;myeeprom.c: 142: return;
  4119  0017EE  0012               	return	
  4120  0017F0  FFFF               	dw	65535	; errata NOP
  4121  0017F2                     __end_of_write_packet_to_page:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           postinc0	equ	0xFEE
  4130                           wreg	equ	0xFE8
  4131                           postinc1	equ	0xFE6
  4132                           postdec1	equ	0xFE5
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _rom_byte_write *****************
  4141 ;; Defined at:
  4142 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myeeprom.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  address         2   22[COMRAM] unsigned int 
  4145 ;;  byte            1   24[COMRAM] unsigned char 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  lsb             1   29[COMRAM] unsigned char 
  4148 ;;  msb             1   28[COMRAM] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, status,2, status,0, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4158 ;;      Params:         3       0       0       0       0       0       0
  4159 ;;      Locals:         2       0       0       0       0       0       0
  4160 ;;      Temps:          3       0       0       0       0       0       0
  4161 ;;      Totals:         8       0       0       0       0       0       0
  4162 ;;Total ram usage:        8 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    4
  4165 ;; This function calls:
  4166 ;;		_IdleI2C
  4167 ;;		_WriteI2C
  4168 ;; This function is called by:
  4169 ;;		_write_packet_to_page
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text8
  4174  001E94                     __ptext8:
  4175                           	opt stack 0
  4176  001E94                     _rom_byte_write:
  4177                           	opt stack 24
  4178                           
  4179                           ;incstack = 0
  4180  001E94  FFFF               	dw	65535
  4181                           
  4182                           ;myeeprom.c: 9: unsigned char msb, lsb;
  4183                           ;myeeprom.c: 10: msb = address >> 8;
  4184  001E96  C04D  F04F         	movff	rom_byte_write@address+1,??_rom_byte_write
  4185  001E9A  C04F  F050         	movff	??_rom_byte_write,??_rom_byte_write+1
  4186  001E9E  6A51               	clrf	(??_rom_byte_write+2)& (0+255),c
  4187  001EA0  5050               	movf	??_rom_byte_write+1,w,c
  4188  001EA2  6E52               	movwf	rom_byte_write@msb,c
  4189                           
  4190                           ;myeeprom.c: 11: lsb = address & 0x00FF;
  4191  001EA4  C04C  F053         	movff	rom_byte_write@address,rom_byte_write@lsb
  4192                           
  4193                           ;myeeprom.c: 13: RE1 = 1;
  4194  001EA8  8284               	bsf	3972,1,c	;volatile
  4195                           
  4196                           ;myeeprom.c: 14: IdleI2C();
  4197  001EAA  ECA8  F011         	call	_IdleI2C	;wreg free
  4198                           
  4199                           ;myeeprom.c: 15: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4200  001EAE  80C5               	bsf	4037,0,c	;volatile
  4201  001EB0                     l263:
  4202  001EB0  B0C5               	btfsc	4037,0,c	;volatile
  4203  001EB2  D7FE               	goto	l263
  4204                           
  4205                           ;myeeprom.c: 16: WriteI2C(device & 0xFE);
  4206  001EB4  502C               	movf	_device,w,c
  4207  001EB6  0BFE               	andlw	254
  4208  001EB8  EC16  F00F         	call	_WriteI2C
  4209                           
  4210                           ;myeeprom.c: 17: IdleI2C();
  4211  001EBC  ECA8  F011         	call	_IdleI2C	;wreg free
  4212                           
  4213                           ;myeeprom.c: 18: WriteI2C(msb);
  4214  001EC0  5052               	movf	rom_byte_write@msb,w,c
  4215  001EC2  EC16  F00F         	call	_WriteI2C
  4216                           
  4217                           ;myeeprom.c: 19: IdleI2C();
  4218  001EC6  ECA8  F011         	call	_IdleI2C	;wreg free
  4219                           
  4220                           ;myeeprom.c: 20: WriteI2C(lsb);
  4221  001ECA  5053               	movf	rom_byte_write@lsb,w,c
  4222  001ECC  EC16  F00F         	call	_WriteI2C
  4223                           
  4224                           ;myeeprom.c: 21: IdleI2C();
  4225  001ED0  ECA8  F011         	call	_IdleI2C	;wreg free
  4226                           
  4227                           ;myeeprom.c: 22: WriteI2C(byte);
  4228  001ED4  504E               	movf	rom_byte_write@byte,w,c
  4229  001ED6  EC16  F00F         	call	_WriteI2C
  4230                           
  4231                           ;myeeprom.c: 23: IdleI2C();
  4232  001EDA  ECA8  F011         	call	_IdleI2C	;wreg free
  4233                           
  4234                           ;myeeprom.c: 24: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4235  001EDE  84C5               	bsf	4037,2,c	;volatile
  4236  001EE0                     l266:
  4237  001EE0  B4C5               	btfsc	4037,2,c	;volatile
  4238  001EE2  D7FE               	goto	l266
  4239                           
  4240                           ;myeeprom.c: 25: _delay(100000);
  4241  001EE4  0E62               	movlw	98
  4242  001EE6  6E4F               	movwf	??_rom_byte_write& (0+255),c
  4243  001EE8  0E76               	movlw	118
  4244  001EEA                     u4907:
  4245  001EEA  2EE8               	decfsz	wreg,f,c
  4246  001EEC  D7FE               	goto	u4907
  4247  001EEE  2E4F               	decfsz	??_rom_byte_write& (0+255),f,c
  4248  001EF0  D7FC               	goto	u4907
  4249  001EF2  D000               	nop2	
  4250                           
  4251                           ;myeeprom.c: 26: RE1 = 0;
  4252  001EF4  9284               	bcf	3972,1,c	;volatile
  4253  001EF6  0012               	return	
  4254  001EF8  FFFF               	dw	65535	; errata NOP
  4255  001EFA                     __end_of_rom_byte_write:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           postinc1	equ	0xFE6
  4266                           postdec1	equ	0xFE5
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _Receive_Packet *****************
  4275 ;; Defined at:
  4276 ;;		line 201 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\communication.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  n               1   40[COMRAM] unsigned char 
  4281 ;;  msecs           2   37[COMRAM] int 
  4282 ;;  result          1   41[COMRAM] unsigned char 
  4283 ;;  count           1   39[COMRAM] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      unsigned char 
  4286 ;; Registers used:
  4287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4293 ;;      Params:         0       0       0       0       0       0       0
  4294 ;;      Locals:         5       0       0       0       0       0       0
  4295 ;;      Temps:          1       0       0       0       0       0       0
  4296 ;;      Totals:         6       0       0       0       0       0       0
  4297 ;;Total ram usage:        6 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    6
  4300 ;; This function calls:
  4301 ;;		_Check_CRC
  4302 ;;		_Eco_Replay
  4303 ;;		_LCDByte
  4304 ;;		_LCDWriteString
  4305 ;;		_USARTDataAvailable
  4306 ;;		_USARTFlushBuffer
  4307 ;;		_USARTReadData
  4308 ;;		_USARTWriteChar
  4309 ;; This function is called by:
  4310 ;;		_getting_data
  4311 ;;		_rtc_setting
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text9
  4316  000C58                     __ptext9:
  4317                           	opt stack 0
  4318  000C58                     _Receive_Packet:
  4319                           	opt stack 23
  4320                           
  4321                           ;incstack = 0
  4322  000C58  FFFF               	dw	65535
  4323                           
  4324                           ;communication.c: 203: unsigned char count = 0, result = 0;
  4325  000C5A  0E00               	movlw	0
  4326  000C5C  6E5D               	movwf	Receive_Packet@count,c
  4327  000C5E  0E00               	movlw	0
  4328  000C60  6E5F               	movwf	Receive_Packet@result,c
  4329                           
  4330                           ;communication.c: 204: int msecs = 0;
  4331  000C62  0E00               	movlw	0
  4332  000C64  6E5C               	movwf	Receive_Packet@msecs+1,c
  4333  000C66  0E00               	movlw	0
  4334  000C68  6E5B               	movwf	Receive_Packet@msecs,c
  4335                           
  4336                           ;communication.c: 207: result = Eco_Replay();
  4337  000C6A  ECC6  F009         	call	_Eco_Replay	;wreg free
  4338  000C6E  6E5F               	movwf	Receive_Packet@result,c
  4339                           
  4340                           ;communication.c: 209: if(result == 0x01)
  4341  000C70  045F               	decf	Receive_Packet@result,w,c
  4342  000C72  A4D8               	btfss	status,2,c
  4343  000C74  D0D5               	goto	l6199
  4344                           
  4345                           ;communication.c: 210: {
  4346                           ;communication.c: 211: (LCDByte(0b00000001,0));
  4347  000C76  0E00               	movlw	0
  4348  000C78  6E4C               	movwf	LCDByte@isdata,c
  4349  000C7A  0E01               	movlw	1
  4350  000C7C  ECAF  F00F         	call	_LCDByte
  4351                           
  4352                           ;communication.c: 212: LCDWriteString("GOT AN ECO");
  4353  000C80  0E7F               	movlw	high STR_11
  4354  000C82  6E53               	movwf	LCDWriteString@msg+1,c
  4355  000C84  0EC9               	movlw	low STR_11
  4356  000C86  6E52               	movwf	LCDWriteString@msg,c
  4357  000C88  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4358                           
  4359                           ;communication.c: 214: USARTFlushBuffer();
  4360  000C8C  EC86  F011         	call	_USARTFlushBuffer	;wreg free
  4361  000C90                     l6113:
  4362                           
  4363                           ;communication.c: 217: {
  4364                           ;communication.c: 219: uint8_t n= USARTDataAvailable();
  4365  000C90  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  4366  000C94  6E5E               	movwf	Receive_Packet@n,c
  4367                           
  4368                           ;communication.c: 222: if(n!=0)
  4369  000C96  505E               	movf	Receive_Packet@n,w,c
  4370  000C98  B4D8               	btfsc	status,2,c
  4371  000C9A  D0A6               	goto	l6187
  4372                           
  4373                           ;communication.c: 223: {
  4374                           ;communication.c: 224: msecs = 0;
  4375  000C9C  0E00               	movlw	0
  4376  000C9E  6E5C               	movwf	Receive_Packet@msecs+1,c
  4377  000CA0  0E00               	movlw	0
  4378  000CA2  6E5B               	movwf	Receive_Packet@msecs,c
  4379                           
  4380                           ;communication.c: 225: while(n > 0)
  4381  000CA4  D09E               	goto	l6185
  4382  000CA6                     l112:
  4383                           
  4384                           ;communication.c: 226: {
  4385                           ;communication.c: 227: RC0 = 1;
  4386  000CA6  8082               	bsf	3970,0,c	;volatile
  4387                           
  4388                           ;communication.c: 228: PACKET[count] = USARTReadData();
  4389  000CA8  ECE3  F010         	call	_USARTReadData	;wreg free
  4390  000CAC  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4391  000CAE  505D               	movf	Receive_Packet@count,w,c
  4392  000CB0  0D01               	mullw	1
  4393  000CB2  0100               	movlb	0	; () banked
  4394  000CB4  0E80               	movlw	low _PACKET	;volatile
  4395  000CB6  24F3               	addwf	prodl,w,c
  4396  000CB8  6ED9               	movwf	fsr2l,c
  4397  000CBA  0100               	movlb	0	; () banked
  4398  000CBC  0E00               	movlw	high _PACKET	;volatile
  4399  000CBE  20F4               	addwfc	prodh,w,c
  4400  000CC0  6EDA               	movwf	fsr2h,c
  4401  000CC2  C05A  FFDF         	movff	??_Receive_Packet,indf2
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;communication.c: 229: RC0 = 0;
  4405  000CC6  9082               	bcf	3970,0,c	;volatile
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;communication.c: 230: (LCDByte(0b00000001,0));
  4409  000CC8  0E00               	movlw	0
  4410  000CCA  6E4C               	movwf	LCDByte@isdata,c
  4411  000CCC  0E01               	movlw	1
  4412  000CCE  ECAF  F00F         	call	_LCDByte
  4413                           
  4414                           ;communication.c: 231: LCDWriteString("CHARACTER RECEIVED ");
  4415  000CD2  0E7C               	movlw	high STR_12
  4416  000CD4  6E53               	movwf	LCDWriteString@msg+1,c
  4417  000CD6  0EF2               	movlw	low STR_12
  4418  000CD8  6E52               	movwf	LCDWriteString@msg,c
  4419  000CDA  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4420                           
  4421                           ;communication.c: 232: if(PACKET[count] == 0xEA)
  4422  000CDE  505D               	movf	Receive_Packet@count,w,c
  4423  000CE0  0D01               	mullw	1
  4424  000CE2  0100               	movlb	0	; () banked
  4425  000CE4  0E80               	movlw	low _PACKET	;volatile
  4426  000CE6  24F3               	addwf	prodl,w,c
  4427  000CE8  6ED9               	movwf	fsr2l,c
  4428  000CEA  0100               	movlb	0	; () banked
  4429  000CEC  0E00               	movlw	high _PACKET	;volatile
  4430  000CEE  20F4               	addwfc	prodh,w,c
  4431  000CF0  6EDA               	movwf	fsr2h,c
  4432  000CF2  0EEA               	movlw	234
  4433  000CF4  62DF               	cpfseq	indf2,c
  4434  000CF6  D073               	goto	l6183
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;communication.c: 233: {
  4438                           ;communication.c: 235: result = Check_CRC();
  4439  000CF8  ECC3  F007         	call	_Check_CRC	;wreg free
  4440  000CFC  6E5F               	movwf	Receive_Packet@result,c
  4441                           
  4442                           ;communication.c: 236: if(result == 1)
  4443  000CFE  045F               	decf	Receive_Packet@result,w,c
  4444  000D00  A4D8               	btfss	status,2,c
  4445  000D02  D037               	goto	l114
  4446                           
  4447                           ;communication.c: 237: {
  4448                           ;communication.c: 238: RE2 = 1;
  4449  000D04  8484               	bsf	3972,2,c	;volatile
  4450                           
  4451                           ;communication.c: 239: _delay((unsigned long)((5)*(100000000/4000.0)));
  4452  000D06  0E7A               	movlw	122
  4453  000D08  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4454  000D0A  0ED4               	movlw	212
  4455  000D0C                     u4917:
  4456  000D0C  2EE8               	decfsz	wreg,f,c
  4457  000D0E  D7FE               	goto	u4917
  4458  000D10  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4459  000D12  D7FC               	goto	u4917
  4460  000D14  D000               	nop2	
  4461                           
  4462                           ;communication.c: 240: _delay((unsigned long)((5)*(100000000/4000.0)));
  4463  000D16  0E7A               	movlw	122
  4464  000D18  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4465  000D1A  0ED4               	movlw	212
  4466  000D1C                     u4927:
  4467  000D1C  2EE8               	decfsz	wreg,f,c
  4468  000D1E  D7FE               	goto	u4927
  4469  000D20  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4470  000D22  D7FC               	goto	u4927
  4471  000D24  D000               	nop2	
  4472                           
  4473                           ;communication.c: 241: USARTWriteChar(49);
  4474  000D26  0E31               	movlw	49
  4475  000D28  ECB2  F011         	call	_USARTWriteChar
  4476                           
  4477                           ;communication.c: 242: RE2 = 0;
  4478  000D2C  9484               	bcf	3972,2,c	;volatile
  4479                           
  4480                           ;communication.c: 243: RE2 = 1;
  4481  000D2E  8484               	bsf	3972,2,c	;volatile
  4482                           
  4483                           ;communication.c: 244: _delay((unsigned long)((5)*(100000000/4000.0)));
  4484  000D30  0E7A               	movlw	122
  4485  000D32  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4486  000D34  0ED4               	movlw	212
  4487  000D36                     u4937:
  4488  000D36  2EE8               	decfsz	wreg,f,c
  4489  000D38  D7FE               	goto	u4937
  4490  000D3A  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4491  000D3C  D7FC               	goto	u4937
  4492  000D3E  D000               	nop2	
  4493                           
  4494                           ;communication.c: 245: _delay((unsigned long)((5)*(100000000/4000.0)));
  4495  000D40  0E7A               	movlw	122
  4496  000D42  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4497  000D44  0ED4               	movlw	212
  4498  000D46                     u4947:
  4499  000D46  2EE8               	decfsz	wreg,f,c
  4500  000D48  D7FE               	goto	u4947
  4501  000D4A  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4502  000D4C  D7FC               	goto	u4947
  4503  000D4E  D000               	nop2	
  4504                           
  4505                           ;communication.c: 246: USARTWriteChar(49);
  4506  000D50  0E31               	movlw	49
  4507  000D52  ECB2  F011         	call	_USARTWriteChar
  4508                           
  4509                           ;communication.c: 247: RE2 = 0;
  4510  000D56  9484               	bcf	3972,2,c	;volatile
  4511                           
  4512                           ;communication.c: 248: (LCDByte(0b00000001,0));
  4513  000D58  0E00               	movlw	0
  4514  000D5A  6E4C               	movwf	LCDByte@isdata,c
  4515  000D5C  0E01               	movlw	1
  4516  000D5E  ECAF  F00F         	call	_LCDByte
  4517                           
  4518                           ;communication.c: 249: LCDWriteString("PACKET RECEIVED ");
  4519  000D62  0E7C               	movlw	high (STR_14+6)
  4520  000D64  6E53               	movwf	LCDWriteString@msg+1,c
  4521  000D66  0EB8               	movlw	low (STR_14+6)
  4522  000D68  6E52               	movwf	LCDWriteString@msg,c
  4523  000D6A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4524                           
  4525                           ;communication.c: 250: return 0x01;
  4526  000D6E  0E01               	movlw	1
  4527  000D70  D063               	goto	l115
  4528  000D72                     l114:
  4529                           
  4530                           ;communication.c: 251: }
  4531                           ;communication.c: 252: RE2 = 1;
  4532  000D72  8484               	bsf	3972,2,c	;volatile
  4533                           
  4534                           ;communication.c: 253: _delay((unsigned long)((5)*(100000000/4000.0)));
  4535  000D74  0E7A               	movlw	122
  4536  000D76  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4537  000D78  0ED4               	movlw	212
  4538  000D7A                     u4957:
  4539  000D7A  2EE8               	decfsz	wreg,f,c
  4540  000D7C  D7FE               	goto	u4957
  4541  000D7E  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4542  000D80  D7FC               	goto	u4957
  4543  000D82  D000               	nop2	
  4544                           
  4545                           ;communication.c: 254: _delay((unsigned long)((5)*(100000000/4000.0)));
  4546  000D84  0E7A               	movlw	122
  4547  000D86  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4548  000D88  0ED4               	movlw	212
  4549  000D8A                     u4967:
  4550  000D8A  2EE8               	decfsz	wreg,f,c
  4551  000D8C  D7FE               	goto	u4967
  4552  000D8E  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4553  000D90  D7FC               	goto	u4967
  4554  000D92  D000               	nop2	
  4555                           
  4556                           ;communication.c: 255: USARTWriteChar(48);
  4557  000D94  0E30               	movlw	48
  4558  000D96  ECB2  F011         	call	_USARTWriteChar
  4559                           
  4560                           ;communication.c: 256: RE2 = 0;
  4561  000D9A  9484               	bcf	3972,2,c	;volatile
  4562                           
  4563                           ;communication.c: 257: RE2 = 1;
  4564  000D9C  8484               	bsf	3972,2,c	;volatile
  4565                           
  4566                           ;communication.c: 258: _delay((unsigned long)((5)*(100000000/4000.0)));
  4567  000D9E  0E7A               	movlw	122
  4568  000DA0  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4569  000DA2  0ED4               	movlw	212
  4570  000DA4                     u4977:
  4571  000DA4  2EE8               	decfsz	wreg,f,c
  4572  000DA6  D7FE               	goto	u4977
  4573  000DA8  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4574  000DAA  D7FC               	goto	u4977
  4575  000DAC  D000               	nop2	
  4576                           
  4577                           ;communication.c: 259: _delay((unsigned long)((5)*(100000000/4000.0)));
  4578  000DAE  0E7A               	movlw	122
  4579  000DB0  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4580  000DB2  0ED4               	movlw	212
  4581  000DB4                     u4987:
  4582  000DB4  2EE8               	decfsz	wreg,f,c
  4583  000DB6  D7FE               	goto	u4987
  4584  000DB8  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4585  000DBA  D7FC               	goto	u4987
  4586  000DBC  D000               	nop2	
  4587                           
  4588                           ;communication.c: 260: USARTWriteChar(48);
  4589  000DBE  0E30               	movlw	48
  4590  000DC0  ECB2  F011         	call	_USARTWriteChar
  4591                           
  4592                           ;communication.c: 261: RE2 = 0;
  4593  000DC4  9484               	bcf	3972,2,c	;volatile
  4594                           
  4595                           ;communication.c: 262: (LCDByte(0b00000001,0));
  4596  000DC6  0E00               	movlw	0
  4597  000DC8  6E4C               	movwf	LCDByte@isdata,c
  4598  000DCA  0E01               	movlw	1
  4599  000DCC  ECAF  F00F         	call	_LCDByte
  4600                           
  4601                           ;communication.c: 263: LCDWriteString("WRONG PACKET RECEIVED ");
  4602  000DD0  0E7C               	movlw	high STR_14
  4603  000DD2  6E53               	movwf	LCDWriteString@msg+1,c
  4604  000DD4  0EB2               	movlw	low STR_14
  4605  000DD6  6E52               	movwf	LCDWriteString@msg,c
  4606  000DD8  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4607  000DDC  D02C               	goto	L4
  4608  000DDE                     l6183:
  4609                           
  4610                           ;communication.c: 265: }
  4611                           ;communication.c: 266: n--;
  4612  000DDE  065E               	decf	Receive_Packet@n,f,c
  4613                           
  4614                           ;communication.c: 267: count++;
  4615  000DE0  2A5D               	incf	Receive_Packet@count,f,c
  4616  000DE2                     l6185:
  4617  000DE2  665E               	tstfsz	Receive_Packet@n,c
  4618  000DE4  D760               	goto	l112
  4619  000DE6  D754               	goto	l6113
  4620  000DE8                     l6187:
  4621                           
  4622                           ;communication.c: 270: else
  4623                           ;communication.c: 271: {
  4624                           ;communication.c: 272: _delay((unsigned long)((1)*(100000000/4000.0)));
  4625  000DE8  0E19               	movlw	25
  4626  000DEA  6E5A               	movwf	??_Receive_Packet& (0+255),c
  4627  000DEC  0E5D               	movlw	93
  4628  000DEE                     u4997:
  4629  000DEE  2EE8               	decfsz	wreg,f,c
  4630  000DF0  D7FE               	goto	u4997
  4631  000DF2  2E5A               	decfsz	??_Receive_Packet& (0+255),f,c
  4632  000DF4  D7FC               	goto	u4997
  4633                           
  4634                           ;communication.c: 273: msecs++;
  4635  000DF6  4A5B               	infsnz	Receive_Packet@msecs,f,c
  4636  000DF8  2A5C               	incf	Receive_Packet@msecs+1,f,c
  4637                           
  4638                           ;communication.c: 274: if(msecs == 2000)
  4639  000DFA  505C               	movf	Receive_Packet@msecs+1,w,c
  4640  000DFC  0A07               	xorlw	7
  4641  000DFE  0ED0               	movlw	208
  4642  000E00  B4D8               	btfsc	status,2,c
  4643  000E02  185B               	xorwf	Receive_Packet@msecs,w,c
  4644  000E04  A4D8               	btfss	status,2,c
  4645  000E06  D744               	goto	l6113
  4646                           
  4647                           ;communication.c: 275: {
  4648                           ;communication.c: 277: (LCDByte(0b00000001,0));
  4649  000E08  0E00               	movlw	0
  4650  000E0A  6E4C               	movwf	LCDByte@isdata,c
  4651  000E0C  0E01               	movlw	1
  4652  000E0E  ECAF  F00F         	call	_LCDByte
  4653                           
  4654                           ;communication.c: 278: LCDWriteString("CHARACTER TIMEOUT");
  4655  000E12  0E7D               	movlw	high STR_15
  4656  000E14  6E53               	movwf	LCDWriteString@msg+1,c
  4657  000E16  0E73               	movlw	low STR_15
  4658  000E18  6E52               	movwf	LCDWriteString@msg,c
  4659  000E1A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4660  000E1E  D00B               	goto	L4
  4661  000E20                     l6199:
  4662                           
  4663                           ;communication.c: 280: }
  4664                           ;communication.c: 281: }
  4665                           ;communication.c: 282: }
  4666                           ;communication.c: 283: }
  4667                           ;communication.c: 284: (LCDByte(0b00000001,0));
  4668  000E20  0E00               	movlw	0
  4669  000E22  6E4C               	movwf	LCDByte@isdata,c
  4670  000E24  0E01               	movlw	1
  4671  000E26  ECAF  F00F         	call	_LCDByte
  4672                           
  4673                           ;communication.c: 285: LCDWriteString("PACKET TIMEOUT");
  4674  000E2A  0E7E               	movlw	high STR_16
  4675  000E2C  6E53               	movwf	LCDWriteString@msg+1,c
  4676  000E2E  0EEC               	movlw	low STR_16
  4677  000E30  6E52               	movwf	LCDWriteString@msg,c
  4678  000E32  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4679  000E36                     L4:
  4680                           
  4681                           ;communication.c: 286: return 0x00;
  4682  000E36  0E00               	movlw	0
  4683  000E38                     l115:
  4684  000E38  0012               	return	
  4685  000E3A  FFFF               	dw	65535	; errata NOP
  4686  000E3C                     __end_of_Receive_Packet:
  4687                           	opt stack 0
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postinc1	equ	0xFE6
  4697                           postdec1	equ	0xFE5
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           postinc2	equ	0xFDE
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _Eco_Replay *****************
  4706 ;; Defined at:
  4707 ;;		line 84 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\communication.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  data            1   35[COMRAM] unsigned char 
  4712 ;;  n               1   34[COMRAM] unsigned char 
  4713 ;;  ts              1   33[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  1    wreg      unsigned char 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         0       0       0       0       0       0       0
  4724 ;;      Locals:         3       0       0       0       0       0       0
  4725 ;;      Temps:          1       0       0       0       0       0       0
  4726 ;;      Totals:         4       0       0       0       0       0       0
  4727 ;;Total ram usage:        4 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    5
  4730 ;; This function calls:
  4731 ;;		_LCDByte
  4732 ;;		_LCDWriteString
  4733 ;;		_USARTDataAvailable
  4734 ;;		_USARTFlushBuffer
  4735 ;;		_USARTReadData
  4736 ;;		_USARTWriteChar
  4737 ;; This function is called by:
  4738 ;;		_Receive_Packet
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text10
  4743  00138C                     __ptext10:
  4744                           	opt stack 0
  4745  00138C                     _Eco_Replay:
  4746                           	opt stack 23
  4747                           
  4748                           ;incstack = 0
  4749  00138C  FFFF               	dw	65535
  4750                           
  4751                           ;communication.c: 86: uint8_t n = 0;
  4752  00138E  0E00               	movlw	0
  4753  001390  6E58               	movwf	Eco_Replay@n,c
  4754                           
  4755                           ;communication.c: 87: unsigned char ts = 0;
  4756  001392  0E00               	movlw	0
  4757  001394  6E57               	movwf	Eco_Replay@ts,c
  4758                           
  4759                           ;communication.c: 90: USARTFlushBuffer();
  4760  001396  EC86  F011         	call	_USARTFlushBuffer	;wreg free
  4761                           
  4762                           ;communication.c: 92: (LCDByte(0b00000001,0));
  4763  00139A  0E00               	movlw	0
  4764  00139C  6E4C               	movwf	LCDByte@isdata,c
  4765  00139E  0E01               	movlw	1
  4766  0013A0  ECAF  F00F         	call	_LCDByte
  4767                           
  4768                           ;communication.c: 93: LCDWriteString("WAITING FOR ECO ");
  4769  0013A4  0E7E               	movlw	high STR_5
  4770  0013A6  6E53               	movwf	LCDWriteString@msg+1,c
  4771  0013A8  0E1E               	movlw	low STR_5
  4772  0013AA  6E52               	movwf	LCDWriteString@msg,c
  4773  0013AC  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4774                           
  4775                           ;communication.c: 96: while(n == 0 && ts < 10000)
  4776  0013B0  D00B               	goto	l5737
  4777  0013B2                     l5731:
  4778                           
  4779                           ;communication.c: 97: {
  4780                           ;communication.c: 99: n = USARTDataAvailable();
  4781  0013B2  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  4782  0013B6  6E58               	movwf	Eco_Replay@n,c
  4783                           
  4784                           ;communication.c: 100: ts++;
  4785  0013B8  2A57               	incf	Eco_Replay@ts,f,c
  4786                           
  4787                           ;communication.c: 101: _delay((unsigned long)((1)*(100000000/4000.0)));
  4788  0013BA  0E19               	movlw	25
  4789  0013BC  6E56               	movwf	??_Eco_Replay& (0+255),c
  4790  0013BE  0E5D               	movlw	93
  4791  0013C0                     u5007:
  4792  0013C0  2EE8               	decfsz	wreg,f,c
  4793  0013C2  D7FE               	goto	u5007
  4794  0013C4  2E56               	decfsz	??_Eco_Replay& (0+255),f,c
  4795  0013C6  D7FC               	goto	u5007
  4796  0013C8                     l5737:
  4797  0013C8  5058               	movf	Eco_Replay@n,w,c
  4798  0013CA  B4D8               	btfsc	status,2,c
  4799  0013CC  D7F2               	goto	l5731
  4800                           
  4801                           ;communication.c: 102: }
  4802                           ;communication.c: 105: if(n!=0)
  4803  0013CE  5058               	movf	Eco_Replay@n,w,c
  4804  0013D0  B4D8               	btfsc	status,2,c
  4805  0013D2  D039               	goto	l5769
  4806                           
  4807                           ;communication.c: 106: {
  4808                           ;communication.c: 108: RC0 = 1;
  4809  0013D4  8082               	bsf	3970,0,c	;volatile
  4810                           
  4811                           ;communication.c: 109: unsigned char data=USARTReadData();
  4812  0013D6  ECE3  F010         	call	_USARTReadData	;wreg free
  4813  0013DA  6E59               	movwf	Eco_Replay@data,c
  4814                           
  4815                           ;communication.c: 110: RC0 = 0;
  4816  0013DC  9082               	bcf	3970,0,c	;volatile
  4817                           
  4818                           ;communication.c: 111: if(data == Destination_ID1 || data == Destination_ID2 || data == 
      +                          Master_ID)
  4819  0013DE  5059               	movf	Eco_Replay@data,w,c
  4820  0013E0  1824               	xorwf	_Destination_ID1,w,c
  4821  0013E2  B4D8               	btfsc	status,2,c
  4822  0013E4  D007               	goto	l91
  4823  0013E6  5059               	movf	Eco_Replay@data,w,c
  4824  0013E8  1825               	xorwf	_Destination_ID2,w,c
  4825  0013EA  B4D8               	btfsc	status,2,c
  4826  0013EC  D003               	goto	l91
  4827  0013EE  5026               	movf	_Master_ID,w,c
  4828  0013F0  6259               	cpfseq	Eco_Replay@data,c
  4829  0013F2  D029               	goto	l5769
  4830  0013F4                     l91:
  4831                           
  4832                           ;communication.c: 112: {
  4833                           ;communication.c: 113: RE2 = 1;
  4834  0013F4  8484               	bsf	3972,2,c	;volatile
  4835                           
  4836                           ;communication.c: 114: _delay((unsigned long)((5)*(100000000/4000.0)));
  4837  0013F6  0E7A               	movlw	122
  4838  0013F8  6E56               	movwf	??_Eco_Replay& (0+255),c
  4839  0013FA  0ED4               	movlw	212
  4840  0013FC                     u5017:
  4841  0013FC  2EE8               	decfsz	wreg,f,c
  4842  0013FE  D7FE               	goto	u5017
  4843  001400  2E56               	decfsz	??_Eco_Replay& (0+255),f,c
  4844  001402  D7FC               	goto	u5017
  4845  001404  D000               	nop2	
  4846                           
  4847                           ;communication.c: 115: _delay((unsigned long)((5)*(100000000/4000.0)));
  4848  001406  0E7A               	movlw	122
  4849  001408  6E56               	movwf	??_Eco_Replay& (0+255),c
  4850  00140A  0ED4               	movlw	212
  4851  00140C                     u5027:
  4852  00140C  2EE8               	decfsz	wreg,f,c
  4853  00140E  D7FE               	goto	u5027
  4854  001410  2E56               	decfsz	??_Eco_Replay& (0+255),f,c
  4855  001412  D7FC               	goto	u5027
  4856  001414  D000               	nop2	
  4857                           
  4858                           ;communication.c: 116: USARTWriteChar(data);
  4859  001416  5059               	movf	Eco_Replay@data,w,c
  4860  001418  ECB2  F011         	call	_USARTWriteChar
  4861                           
  4862                           ;communication.c: 117: RE2 = 0;
  4863  00141C  9484               	bcf	3972,2,c	;volatile
  4864                           
  4865                           ;communication.c: 118: _delay((unsigned long)((1)*(100000000/4000.0)));
  4866  00141E  0E19               	movlw	25
  4867  001420  6E56               	movwf	??_Eco_Replay& (0+255),c
  4868  001422  0E5D               	movlw	93
  4869  001424                     u5037:
  4870  001424  2EE8               	decfsz	wreg,f,c
  4871  001426  D7FE               	goto	u5037
  4872  001428  2E56               	decfsz	??_Eco_Replay& (0+255),f,c
  4873  00142A  D7FC               	goto	u5037
  4874                           
  4875                           ;communication.c: 120: (LCDByte(0b00000001,0));
  4876  00142C  0E00               	movlw	0
  4877  00142E  6E4C               	movwf	LCDByte@isdata,c
  4878  001430  0E01               	movlw	1
  4879  001432  ECAF  F00F         	call	_LCDByte
  4880                           
  4881                           ;communication.c: 121: LCDWriteString("ECO RECEIVED ");
  4882  001436  0E7F               	movlw	high STR_6
  4883  001438  6E53               	movwf	LCDWriteString@msg+1,c
  4884  00143A  0E4F               	movlw	low STR_6
  4885  00143C  6E52               	movwf	LCDWriteString@msg,c
  4886  00143E  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4887                           
  4888                           ;communication.c: 122: return 0x01;
  4889  001442  0E01               	movlw	1
  4890  001444  D00C               	goto	l92
  4891  001446                     l5769:
  4892                           
  4893                           ;communication.c: 123: }
  4894                           ;communication.c: 124: }
  4895                           ;communication.c: 126: (LCDByte(0b00000001,0));
  4896  001446  0E00               	movlw	0
  4897  001448  6E4C               	movwf	LCDByte@isdata,c
  4898  00144A  0E01               	movlw	1
  4899  00144C  ECAF  F00F         	call	_LCDByte
  4900                           
  4901                           ;communication.c: 127: LCDWriteString("ECO NOT RECEIVED ");
  4902  001450  0E7D               	movlw	high STR_7
  4903  001452  6E53               	movwf	LCDWriteString@msg+1,c
  4904  001454  0E61               	movlw	low STR_7
  4905  001456  6E52               	movwf	LCDWriteString@msg,c
  4906  001458  ECF9  F00B         	call	_LCDWriteString	;wreg free
  4907                           
  4908                           ;communication.c: 128: return 0x00;
  4909  00145C  0E00               	movlw	0
  4910  00145E                     l92:
  4911  00145E  0012               	return	
  4912  001460  FFFF               	dw	65535	; errata NOP
  4913  001462                     __end_of_Eco_Replay:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           postinc1	equ	0xFE6
  4924                           postdec1	equ	0xFE5
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8
  4931                           
  4932 ;; *************** function _Check_CRC *****************
  4933 ;; Defined at:
  4934 ;;		line 128 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\packet.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  CRC             2   32[COMRAM] int 
  4939 ;;  sum             2   28[COMRAM] int 
  4940 ;;  length          1   31[COMRAM] unsigned char 
  4941 ;;  count           1   30[COMRAM] unsigned char 
  4942 ;;  CRC_LOW         1   27[COMRAM] unsigned char 
  4943 ;;  CRC_HI          1   26[COMRAM] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      unsigned char 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4953 ;;      Params:         0       0       0       0       0       0       0
  4954 ;;      Locals:         8       0       0       0       0       0       0
  4955 ;;      Temps:          7       0       0       0       0       0       0
  4956 ;;      Totals:        15       0       0       0       0       0       0
  4957 ;;Total ram usage:       15 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    2
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_Receive_Packet
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text11
  4968  000F86                     __ptext11:
  4969                           	opt stack 0
  4970  000F86                     _Check_CRC:
  4971                           	opt stack 26
  4972                           
  4973                           ;incstack = 0
  4974  000F86  FFFF               	dw	65535
  4975                           
  4976                           ;packet.c: 130: char count = 0, length = 0, CRC_HI, CRC_LOW;
  4977  000F88  0E00               	movlw	0
  4978  000F8A  6E54               	movwf	Check_CRC@count,c
  4979  000F8C  0E00               	movlw	0
  4980  000F8E  6E55               	movwf	Check_CRC@length,c
  4981                           
  4982                           ;packet.c: 131: int sum, CRC;
  4983                           ;packet.c: 134: while(PACKET[length] != 0xEA)
  4984  000F90  D001               	goto	l5859
  4985  000F92                     l5857:
  4986                           
  4987                           ;packet.c: 135: length++;
  4988  000F92  2A55               	incf	Check_CRC@length,f,c
  4989  000F94                     l5859:
  4990  000F94  5055               	movf	Check_CRC@length,w,c
  4991  000F96  0D01               	mullw	1
  4992  000F98  0100               	movlb	0	; () banked
  4993  000F9A  0E80               	movlw	low _PACKET	;volatile
  4994  000F9C  24F3               	addwf	prodl,w,c
  4995  000F9E  6ED9               	movwf	fsr2l,c
  4996  000FA0  0100               	movlb	0	; () banked
  4997  000FA2  0E00               	movlw	high _PACKET	;volatile
  4998  000FA4  20F4               	addwfc	prodh,w,c
  4999  000FA6  6EDA               	movwf	fsr2h,c
  5000  000FA8  0EEA               	movlw	234
  5001  000FAA  62DF               	cpfseq	indf2,c
  5002  000FAC  D7F2               	goto	l5857
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;packet.c: 137: CRC_LOW = PACKET[length - 1];
  5006                           
  5007                           ; BSR set to: 0
  5008  000FAE  0EFF               	movlw	255
  5009  000FB0  6E49               	movwf	??_Check_CRC& (0+255),c
  5010  000FB2  0EFF               	movlw	255
  5011  000FB4  6E4A               	movwf	(??_Check_CRC+1)& (0+255),c
  5012  000FB6  5055               	movf	Check_CRC@length,w,c
  5013  000FB8  6E4B               	movwf	(??_Check_CRC+2)& (0+255),c
  5014  000FBA  6A4C               	clrf	(??_Check_CRC+3)& (0+255),c
  5015  000FBC  5049               	movf	??_Check_CRC,w,c
  5016  000FBE  264B               	addwf	??_Check_CRC+2,f,c
  5017  000FC0  504A               	movf	??_Check_CRC+1,w,c
  5018  000FC2  224C               	addwfc	??_Check_CRC+3,f,c
  5019  000FC4  0100               	movlb	0	; () banked
  5020  000FC6  0E80               	movlw	low _PACKET	;volatile
  5021  000FC8  244B               	addwf	??_Check_CRC+2,w,c
  5022  000FCA  6ED9               	movwf	fsr2l,c
  5023  000FCC  0100               	movlb	0	; () banked
  5024  000FCE  0E00               	movlw	high _PACKET	;volatile
  5025  000FD0  204C               	addwfc	??_Check_CRC+3,w,c
  5026  000FD2  6EDA               	movwf	fsr2h,c
  5027  000FD4  50DF               	movf	indf2,w,c
  5028  000FD6  6E51               	movwf	Check_CRC@CRC_LOW,c
  5029                           
  5030                           ;packet.c: 138: CRC_HI = PACKET[length - 2];
  5031  000FD8  0EFE               	movlw	254
  5032  000FDA  6E49               	movwf	??_Check_CRC& (0+255),c
  5033  000FDC  0EFF               	movlw	255
  5034  000FDE  6E4A               	movwf	(??_Check_CRC+1)& (0+255),c
  5035  000FE0  5055               	movf	Check_CRC@length,w,c
  5036  000FE2  6E4B               	movwf	(??_Check_CRC+2)& (0+255),c
  5037  000FE4  6A4C               	clrf	(??_Check_CRC+3)& (0+255),c
  5038  000FE6  5049               	movf	??_Check_CRC,w,c
  5039  000FE8  264B               	addwf	??_Check_CRC+2,f,c
  5040  000FEA  504A               	movf	??_Check_CRC+1,w,c
  5041  000FEC  224C               	addwfc	??_Check_CRC+3,f,c
  5042  000FEE  0100               	movlb	0	; () banked
  5043  000FF0  0E80               	movlw	low _PACKET	;volatile
  5044  000FF2  244B               	addwf	??_Check_CRC+2,w,c
  5045  000FF4  6ED9               	movwf	fsr2l,c
  5046  000FF6  0100               	movlb	0	; () banked
  5047  000FF8  0E00               	movlw	high _PACKET	;volatile
  5048  000FFA  204C               	addwfc	??_Check_CRC+3,w,c
  5049  000FFC  6EDA               	movwf	fsr2h,c
  5050  000FFE  50DF               	movf	indf2,w,c
  5051  001000  6E50               	movwf	Check_CRC@CRC_HI,c
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;packet.c: 139: CRC = 0x0000;
  5055  001002  0E00               	movlw	0
  5056  001004  6E57               	movwf	Check_CRC@CRC+1,c
  5057  001006  0E00               	movlw	0
  5058  001008  6E56               	movwf	Check_CRC@CRC,c
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;packet.c: 140: CRC = CRC + CRC_HI;
  5062  00100A  5050               	movf	Check_CRC@CRC_HI,w,c
  5063  00100C  2456               	addwf	Check_CRC@CRC,w,c
  5064  00100E  6E56               	movwf	Check_CRC@CRC,c
  5065  001010  0E00               	movlw	0
  5066  001012  2057               	addwfc	Check_CRC@CRC+1,w,c
  5067  001014  6E57               	movwf	Check_CRC@CRC+1,c
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;packet.c: 141: CRC = CRC << 8;
  5071  001016  5056               	movf	Check_CRC@CRC,w,c
  5072  001018  6E57               	movwf	Check_CRC@CRC+1,c
  5073  00101A  6A56               	clrf	Check_CRC@CRC,c
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;packet.c: 142: CRC = CRC + CRC_LOW;
  5077  00101C  5051               	movf	Check_CRC@CRC_LOW,w,c
  5078  00101E  2456               	addwf	Check_CRC@CRC,w,c
  5079  001020  6E56               	movwf	Check_CRC@CRC,c
  5080  001022  0E00               	movlw	0
  5081  001024  2057               	addwfc	Check_CRC@CRC+1,w,c
  5082  001026  6E57               	movwf	Check_CRC@CRC+1,c
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;packet.c: 144: sum = 0;
  5086  001028  0E00               	movlw	0
  5087  00102A  6E53               	movwf	Check_CRC@sum+1,c
  5088  00102C  0E00               	movlw	0
  5089  00102E  6E52               	movwf	Check_CRC@sum,c
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;packet.c: 146: for(count = 0; count < length - 2; count++)
  5093  001030  0E00               	movlw	0
  5094  001032  6E54               	movwf	Check_CRC@count,c
  5095  001034  D013               	goto	l5879
  5096  001036                     l5875:
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;packet.c: 147: sum = sum + PACKET[count];
  5100  001036  5054               	movf	Check_CRC@count,w,c
  5101  001038  0D01               	mullw	1
  5102  00103A  0100               	movlb	0	; () banked
  5103  00103C  0E80               	movlw	low _PACKET	;volatile
  5104  00103E  24F3               	addwf	prodl,w,c
  5105  001040  6ED9               	movwf	fsr2l,c
  5106  001042  0100               	movlb	0	; () banked
  5107  001044  0E00               	movlw	high _PACKET	;volatile
  5108  001046  20F4               	addwfc	prodh,w,c
  5109  001048  6EDA               	movwf	fsr2h,c
  5110  00104A  50DF               	movf	indf2,w,c
  5111  00104C  6E49               	movwf	??_Check_CRC& (0+255),c
  5112  00104E  5049               	movf	??_Check_CRC,w,c
  5113  001050  2452               	addwf	Check_CRC@sum,w,c
  5114  001052  6E52               	movwf	Check_CRC@sum,c
  5115  001054  0E00               	movlw	0
  5116  001056  2053               	addwfc	Check_CRC@sum+1,w,c
  5117  001058  6E53               	movwf	Check_CRC@sum+1,c
  5118                           
  5119                           ; BSR set to: 0
  5120  00105A  2A54               	incf	Check_CRC@count,f,c
  5121  00105C                     l5879:
  5122                           
  5123                           ; BSR set to: 0
  5124  00105C  0EFE               	movlw	254
  5125  00105E  6E49               	movwf	??_Check_CRC& (0+255),c
  5126  001060  0EFF               	movlw	255
  5127  001062  6E4A               	movwf	(??_Check_CRC+1)& (0+255),c
  5128  001064  5055               	movf	Check_CRC@length,w,c
  5129  001066  6E4B               	movwf	(??_Check_CRC+2)& (0+255),c
  5130  001068  6A4C               	clrf	(??_Check_CRC+3)& (0+255),c
  5131  00106A  5049               	movf	??_Check_CRC,w,c
  5132  00106C  264B               	addwf	??_Check_CRC+2,f,c
  5133  00106E  504A               	movf	??_Check_CRC+1,w,c
  5134  001070  224C               	addwfc	??_Check_CRC+3,f,c
  5135  001072  5054               	movf	Check_CRC@count,w,c
  5136  001074  6E4D               	movwf	(??_Check_CRC+4)& (0+255),c
  5137  001076  6A4E               	clrf	(??_Check_CRC+5)& (0+255),c
  5138  001078  504E               	movf	??_Check_CRC+5,w,c
  5139  00107A  0A80               	xorlw	128
  5140  00107C  6E4F               	movwf	(??_Check_CRC+6)& (0+255),c
  5141  00107E  504B               	movf	??_Check_CRC+2,w,c
  5142  001080  5C4D               	subwf	??_Check_CRC+4,w,c
  5143  001082  504C               	movf	??_Check_CRC+3,w,c
  5144  001084  0A80               	xorlw	128
  5145  001086  584F               	subwfb	(??_Check_CRC+6)& (0+255),w,c
  5146  001088  A0D8               	btfss	status,0,c
  5147  00108A  D7D5               	goto	l5875
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;packet.c: 149: if(sum == CRC)
  5151                           
  5152                           ; BSR set to: 0
  5153  00108C  5057               	movf	Check_CRC@CRC+1,w,c
  5154  00108E  1853               	xorwf	Check_CRC@sum+1,w,c
  5155  001090  E102               	bnz	u3325
  5156  001092  5056               	movf	Check_CRC@CRC,w,c
  5157  001094  1852               	xorwf	Check_CRC@sum,w,c
  5158  001096                     u3325:
  5159  001096  A4D8               	btfss	status,2,c
  5160  001098  D002               	goto	l5889
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;packet.c: 150: return 1;
  5164  00109A  0E01               	movlw	1
  5165  00109C  D001               	goto	l541
  5166  00109E                     l5889:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;packet.c: 151: else
  5170                           ;packet.c: 152: return 0;
  5171  00109E  0E00               	movlw	0
  5172  0010A0                     l541:
  5173                           
  5174                           ; BSR set to: 0
  5175  0010A0  0012               	return	
  5176  0010A2  FFFF               	dw	65535	; errata NOP
  5177  0010A4                     __end_of_Check_CRC:
  5178                           	opt stack 0
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           postinc0	equ	0xFEE
  5186                           wreg	equ	0xFE8
  5187                           postinc1	equ	0xFE6
  5188                           postdec1	equ	0xFE5
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _LCDGotoXY *****************
  5197 ;; Defined at:
  5198 ;;		line 311 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  x               1    wreg     unsigned char 
  5201 ;;  y               1   28[COMRAM] unsigned char 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  x               1   29[COMRAM] unsigned char 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;		None               void
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5213 ;;      Params:         1       0       0       0       0       0       0
  5214 ;;      Locals:         1       0       0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0
  5216 ;;      Totals:         2       0       0       0       0       0       0
  5217 ;;Total ram usage:        2 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    4
  5220 ;; This function calls:
  5221 ;;		_LCDByte
  5222 ;; This function is called by:
  5223 ;;		_main
  5224 ;;		_getting_data
  5225 ;;		_rtc_setting
  5226 ;;		_local_display
  5227 ;;		_reset_unit
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text12
  5232  002146                     __ptext12:
  5233                           	opt stack 0
  5234  002146                     _LCDGotoXY:
  5235                           	opt stack 25
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;incstack = 0
  5239  002146  FFFF               	dw	65535
  5240                           
  5241                           ;LCDGotoXY@x stored from wreg
  5242  002148  6E53               	movwf	LCDGotoXY@x,c
  5243                           
  5244                           ;lcd_hd44780_pic18.c: 313: if(x>=20) return;
  5245  00214A  0E13               	movlw	19
  5246  00214C  6453               	cpfsgt	LCDGotoXY@x,c
  5247  00214E  D008               	goto	l6309
  5248  002150  D01A               	goto	l230
  5249  002152                     l6301:
  5250                           
  5251                           ;lcd_hd44780_pic18.c: 322: x|=0b01000000;
  5252  002152  8C53               	bsf	LCDGotoXY@x,6,c
  5253                           
  5254                           ;lcd_hd44780_pic18.c: 323: break;
  5255  002154  D012               	goto	l6311
  5256  002156                     l6303:
  5257                           
  5258                           ;lcd_hd44780_pic18.c: 325: x+=0x14;
  5259  002156  0E14               	movlw	20
  5260  002158  D001               	goto	L5
  5261  00215A                     l6305:
  5262                           
  5263                           ;lcd_hd44780_pic18.c: 328: x+=0x54;
  5264  00215A  0E54               	movlw	84
  5265  00215C                     L5:
  5266  00215C  2653               	addwf	LCDGotoXY@x,f,c
  5267                           
  5268                           ;lcd_hd44780_pic18.c: 329: break;
  5269  00215E  D00D               	goto	l6311
  5270  002160                     l6309:
  5271  002160  5052               	movf	LCDGotoXY@y,w,c
  5272                           
  5273                           ; Switch size 1, requested type "space"
  5274                           ; Number of cases is 4, Range of values is 0 to 3
  5275                           ; switch strategies available:
  5276                           ; Name         Instructions Cycles
  5277                           ; simple_byte           13     7 (average)
  5278                           ;	Chosen strategy is simple_byte
  5279  002162  0A00               	xorlw	0	; case 0
  5280  002164  B4D8               	btfsc	status,2,c
  5281  002166  D009               	goto	l6311
  5282  002168  0A01               	xorlw	1	; case 1
  5283  00216A  B4D8               	btfsc	status,2,c
  5284  00216C  D7F2               	goto	l6301
  5285  00216E  0A03               	xorlw	3	; case 2
  5286  002170  B4D8               	btfsc	status,2,c
  5287  002172  D7F1               	goto	l6303
  5288  002174  0A01               	xorlw	1	; case 3
  5289  002176  B4D8               	btfsc	status,2,c
  5290  002178  D7F0               	goto	l6305
  5291  00217A                     l6311:
  5292                           
  5293                           ;lcd_hd44780_pic18.c: 352: x|=0b10000000;
  5294  00217A  8E53               	bsf	LCDGotoXY@x,7,c
  5295                           
  5296                           ;lcd_hd44780_pic18.c: 353: (LCDByte(x,0));
  5297  00217C  0E00               	movlw	0
  5298  00217E  6E4C               	movwf	LCDByte@isdata,c
  5299  002180  5053               	movf	LCDGotoXY@x,w,c
  5300  002182  ECAF  F00F         	call	_LCDByte
  5301  002186                     l230:
  5302  002186  0012               	return	
  5303  002188  FFFF               	dw	65535	; errata NOP
  5304  00218A                     __end_of_LCDGotoXY:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           postinc0	equ	0xFEE
  5313                           wreg	equ	0xFE8
  5314                           postinc1	equ	0xFE6
  5315                           postdec1	equ	0xFE5
  5316                           fsr1l	equ	0xFE1
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _Creat_RTC_Packet *****************
  5324 ;; Defined at:
  5325 ;;		line 31 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\packet.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;  id              1    wreg     unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  id              1   36[COMRAM] unsigned char 
  5330 ;;  packet_crc      2   38[COMRAM] unsigned int 
  5331 ;;  i               1   40[COMRAM] unsigned char 
  5332 ;;  mem_loc         1   37[COMRAM] unsigned char 
  5333 ;;  crc_l           1   35[COMRAM] unsigned char 
  5334 ;;  crc_h           1   34[COMRAM] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5344 ;;      Params:         0       0       0       0       0       0       0
  5345 ;;      Locals:         7       0       0       0       0       0       0
  5346 ;;      Temps:          3       0       0       0       0       0       0
  5347 ;;      Totals:        10       0       0       0       0       0       0
  5348 ;;Total ram usage:       10 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    3
  5351 ;; This function calls:
  5352 ;;		_Calculate_CRC
  5353 ;;		_Clear_Packet
  5354 ;;		_Creat_Packet
  5355 ;;		_Read_b_eep
  5356 ;; This function is called by:
  5357 ;;		_getting_data
  5358 ;;		_rtc_setting
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text13
  5363  0012A2                     __ptext13:
  5364                           	opt stack 0
  5365  0012A2                     _Creat_RTC_Packet:
  5366                           	opt stack 26
  5367                           
  5368                           ;incstack = 0
  5369  0012A2  FFFF               	dw	65535
  5370                           
  5371                           ;Creat_RTC_Packet@id stored from wreg
  5372  0012A4  6E5A               	movwf	Creat_RTC_Packet@id,c
  5373                           
  5374                           ;packet.c: 33: unsigned char mem_loc = 0;
  5375  0012A6  0E00               	movlw	0
  5376  0012A8  6E5B               	movwf	Creat_RTC_Packet@mem_loc,c
  5377                           
  5378                           ;packet.c: 35: Clear_Packet();
  5379  0012AA  ECFF  F010         	call	_Clear_Packet	;wreg free
  5380                           
  5381                           ;packet.c: 36: Creat_Packet(3, 2);
  5382  0012AE  0E02               	movlw	2
  5383  0012B0  6E49               	movwf	Creat_Packet@Readings,c
  5384  0012B2  0E03               	movlw	3
  5385  0012B4  ECDF  F00F         	call	_Creat_Packet
  5386                           
  5387                           ;packet.c: 38: if(id == 'x')
  5388  0012B8  505A               	movf	Creat_RTC_Packet@id,w,c
  5389  0012BA  0A78               	xorlw	120
  5390  0012BC  A4D8               	btfss	status,2,c
  5391  0012BE  D002               	goto	l6515
  5392                           
  5393                           ;packet.c: 39: mem_loc = 5;
  5394  0012C0  0E05               	movlw	5
  5395  0012C2  6E5B               	movwf	Creat_RTC_Packet@mem_loc,c
  5396  0012C4                     l6515:
  5397                           
  5398                           ;packet.c: 40: if(id == 'y')
  5399  0012C4  505A               	movf	Creat_RTC_Packet@id,w,c
  5400  0012C6  0A79               	xorlw	121
  5401  0012C8  A4D8               	btfss	status,2,c
  5402  0012CA  D002               	goto	l518
  5403                           
  5404                           ;packet.c: 41: mem_loc = 21;
  5405  0012CC  0E15               	movlw	21
  5406  0012CE  6E5B               	movwf	Creat_RTC_Packet@mem_loc,c
  5407  0012D0                     l518:
  5408                           
  5409                           ;packet.c: 43: char i = 0;
  5410  0012D0  0E00               	movlw	0
  5411  0012D2  6E5E               	movwf	Creat_RTC_Packet@i,c
  5412                           
  5413                           ;packet.c: 44: for(i = 0; i < 16; i++)
  5414  0012D4  0E00               	movlw	0
  5415  0012D6  6E5E               	movwf	Creat_RTC_Packet@i,c
  5416  0012D8  D017               	goto	L6
  5417  0012DA                     l6523:
  5418                           
  5419                           ;packet.c: 45: {
  5420                           ;packet.c: 46: PACKET[Current_Pos] = (unsigned char)Read_b_eep(mem_loc);
  5421  0012DA  5021               	movf	_Current_Pos,w,c	;volatile
  5422  0012DC  0D01               	mullw	1
  5423  0012DE  0100               	movlb	0	; () banked
  5424  0012E0  0E80               	movlw	low _PACKET	;volatile
  5425  0012E2  24F3               	addwf	prodl,w,c
  5426  0012E4  6ED9               	movwf	fsr2l,c
  5427  0012E6  0100               	movlb	0	; () banked
  5428  0012E8  0E00               	movlw	high _PACKET	;volatile
  5429  0012EA  20F4               	addwfc	prodh,w,c
  5430  0012EC  6EDA               	movwf	fsr2h,c
  5431  0012EE  C05B  F049         	movff	Creat_RTC_Packet@mem_loc,Read_b_eep@badd
  5432  0012F2  6A4A               	clrf	Read_b_eep@badd+1,c
  5433  0012F4  EC9D  F011         	call	_Read_b_eep	;wreg free
  5434  0012F8  6EDF               	movwf	indf2,c
  5435                           
  5436                           ;packet.c: 47: _delay(50);
  5437  0012FA  0E0A               	movlw	10
  5438  0012FC                     u5047:
  5439  0012FC  F000               	nop	
  5440  0012FE  2EE8               	decfsz	wreg,f,c
  5441  001300  D7FD               	goto	u5047
  5442                           
  5443                           ;packet.c: 48: Current_Pos++;
  5444  001302  2A21               	incf	_Current_Pos,f,c	;volatile
  5445                           
  5446                           ;packet.c: 49: mem_loc++;
  5447  001304  2A5B               	incf	Creat_RTC_Packet@mem_loc,f,c
  5448  001306  2A5E               	incf	Creat_RTC_Packet@i,f,c
  5449  001308                     L6:
  5450  001308  0E0F               	movlw	15
  5451  00130A  645E               	cpfsgt	Creat_RTC_Packet@i,c
  5452  00130C  D7E6               	goto	l6523
  5453                           
  5454                           ;packet.c: 50: }
  5455                           ;packet.c: 52: unsigned int packet_crc = 0;
  5456  00130E  0E00               	movlw	0
  5457  001310  6E5D               	movwf	Creat_RTC_Packet@packet_crc+1,c
  5458  001312  0E00               	movlw	0
  5459  001314  6E5C               	movwf	Creat_RTC_Packet@packet_crc,c
  5460                           
  5461                           ;packet.c: 53: unsigned char crc_h = 0, crc_l = 0;
  5462  001316  0E00               	movlw	0
  5463  001318  6E58               	movwf	Creat_RTC_Packet@crc_h,c
  5464  00131A  0E00               	movlw	0
  5465  00131C  6E59               	movwf	Creat_RTC_Packet@crc_l,c
  5466                           
  5467                           ;packet.c: 55: packet_crc = Calculate_CRC();
  5468  00131E  ECA4  F00E         	call	_Calculate_CRC	;wreg free
  5469  001322  C049  F05C         	movff	?_Calculate_CRC,Creat_RTC_Packet@packet_crc
  5470  001326  C04A  F05D         	movff	?_Calculate_CRC+1,Creat_RTC_Packet@packet_crc+1
  5471                           
  5472                           ;packet.c: 56: crc_h = packet_crc >> 8;
  5473  00132A  C05D  F055         	movff	Creat_RTC_Packet@packet_crc+1,??_Creat_RTC_Packet
  5474  00132E  C055  F056         	movff	??_Creat_RTC_Packet,??_Creat_RTC_Packet+1
  5475  001332  6A57               	clrf	(??_Creat_RTC_Packet+2)& (0+255),c
  5476  001334  5056               	movf	??_Creat_RTC_Packet+1,w,c
  5477  001336  6E58               	movwf	Creat_RTC_Packet@crc_h,c
  5478                           
  5479                           ;packet.c: 57: crc_l = packet_crc & 0x00FF;
  5480  001338  C05C  F059         	movff	Creat_RTC_Packet@packet_crc,Creat_RTC_Packet@crc_l
  5481                           
  5482                           ;packet.c: 59: PACKET[Current_Pos] = crc_h;
  5483  00133C  5021               	movf	_Current_Pos,w,c	;volatile
  5484  00133E  0D01               	mullw	1
  5485  001340  0100               	movlb	0	; () banked
  5486  001342  0E80               	movlw	low _PACKET	;volatile
  5487  001344  24F3               	addwf	prodl,w,c
  5488  001346  6ED9               	movwf	fsr2l,c
  5489  001348  0100               	movlb	0	; () banked
  5490  00134A  0E00               	movlw	high _PACKET	;volatile
  5491  00134C  20F4               	addwfc	prodh,w,c
  5492  00134E  6EDA               	movwf	fsr2h,c
  5493  001350  C058  FFDF         	movff	Creat_RTC_Packet@crc_h,indf2
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;packet.c: 60: Current_Pos++;
  5497  001354  2A21               	incf	_Current_Pos,f,c	;volatile
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;packet.c: 61: PACKET[Current_Pos] = crc_l;
  5501  001356  5021               	movf	_Current_Pos,w,c	;volatile
  5502  001358  0D01               	mullw	1
  5503  00135A  0100               	movlb	0	; () banked
  5504  00135C  0E80               	movlw	low _PACKET	;volatile
  5505  00135E  24F3               	addwf	prodl,w,c
  5506  001360  6ED9               	movwf	fsr2l,c
  5507  001362  0100               	movlb	0	; () banked
  5508  001364  0E00               	movlw	high _PACKET	;volatile
  5509  001366  20F4               	addwfc	prodh,w,c
  5510  001368  6EDA               	movwf	fsr2h,c
  5511  00136A  C059  FFDF         	movff	Creat_RTC_Packet@crc_l,indf2
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;packet.c: 62: Current_Pos++;
  5515  00136E  2A21               	incf	_Current_Pos,f,c	;volatile
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;packet.c: 63: PACKET[Current_Pos] = 0xEA;
  5519  001370  5021               	movf	_Current_Pos,w,c	;volatile
  5520  001372  0D01               	mullw	1
  5521  001374  0100               	movlb	0	; () banked
  5522  001376  0E80               	movlw	low _PACKET	;volatile
  5523  001378  24F3               	addwf	prodl,w,c
  5524  00137A  6ED9               	movwf	fsr2l,c
  5525  00137C  0100               	movlb	0	; () banked
  5526  00137E  0E00               	movlw	high _PACKET	;volatile
  5527  001380  20F4               	addwfc	prodh,w,c
  5528  001382  6EDA               	movwf	fsr2h,c
  5529  001384  0EEA               	movlw	234
  5530  001386  6EDF               	movwf	indf2,c
  5531                           
  5532                           ; BSR set to: 0
  5533  001388  0012               	return	
  5534  00138A  FFFF               	dw	65535	; errata NOP
  5535  00138C                     __end_of_Creat_RTC_Packet:
  5536                           	opt stack 0
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           postinc1	equ	0xFE6
  5546                           postdec1	equ	0xFE5
  5547                           fsr1l	equ	0xFE1
  5548                           indf2	equ	0xFDF
  5549                           postinc2	equ	0xFDE
  5550                           fsr2h	equ	0xFDA
  5551                           fsr2l	equ	0xFD9
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _Creat_Packet *****************
  5555 ;; Defined at:
  5556 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\packet.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  F_Code          1    wreg     unsigned char 
  5559 ;;  Readings        1   19[COMRAM] unsigned char 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  F_Code          1   20[COMRAM] unsigned char 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;		None               void
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0, prodl, prodh
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5571 ;;      Params:         1       0       0       0       0       0       0
  5572 ;;      Locals:         1       0       0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0
  5574 ;;      Totals:         2       0       0       0       0       0       0
  5575 ;;Total ram usage:        2 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    2
  5578 ;; This function calls:
  5579 ;;		Nothing
  5580 ;; This function is called by:
  5581 ;;		_Creat_RTC_Packet
  5582 ;; This function uses a non-reentrant model
  5583 ;;
  5584                           
  5585                           	psect	text14
  5586  001FBE                     __ptext14:
  5587                           	opt stack 0
  5588  001FBE                     _Creat_Packet:
  5589                           	opt stack 26
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;incstack = 0
  5593  001FBE  FFFF               	dw	65535
  5594                           
  5595                           ;Creat_Packet@F_Code stored from wreg
  5596  001FC0  6E4A               	movwf	Creat_Packet@F_Code,c
  5597                           
  5598                           ;packet.c: 9: PACKET[0] = 0xFA;
  5599  001FC2  0EFA               	movlw	250
  5600  001FC4  0100               	movlb	0	; () banked
  5601  001FC6  6F80               	movwf	_PACKET& (0+255),b	;volatile
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;packet.c: 10: PACKET[1] = (Readings * 8) + 16;
  5605  001FC8  5049               	movf	Creat_Packet@Readings,w,c
  5606  001FCA  0D08               	mullw	8
  5607  001FCC  50F3               	movf	prodl,w,c
  5608  001FCE  0F10               	addlw	16
  5609  001FD0  0100               	movlb	0	; () banked
  5610  001FD2  6F81               	movwf	(_PACKET+1)& (0+255),b	;volatile
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;packet.c: 11: PACKET[2] = Source_ID;
  5614  001FD4  C027  F082         	movff	_Source_ID,_PACKET+2	;volatile
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;packet.c: 12: PACKET[3] = Destination_ID;
  5618  001FD8  C023  F083         	movff	_Destination_ID,_PACKET+3	;volatile
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;packet.c: 13: PACKET[4] = F_Code;
  5622  001FDC  C04A  F084         	movff	Creat_Packet@F_Code,_PACKET+4	;volatile
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;packet.c: 14: PACKET[5] = Readings;
  5626  001FE0  C049  F085         	movff	Creat_Packet@Readings,_PACKET+5	;volatile
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;packet.c: 19: PACKET[6] = year;
  5630  001FE4  C035  F086         	movff	_year,_PACKET+6	;volatile
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;packet.c: 20: PACKET[7] = month;
  5634  001FE8  C031  F087         	movff	_month,_PACKET+7	;volatile
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;packet.c: 21: PACKET[8] = day;
  5638  001FEC  C02B  F088         	movff	_day,_PACKET+8	;volatile
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;packet.c: 22: PACKET[9] = dow;
  5642  001FF0  C02D  F089         	movff	_dow,_PACKET+9	;volatile
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;packet.c: 23: PACKET[10] = hr;
  5646  001FF4  C02E  F08A         	movff	_hr,_PACKET+10	;volatile
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;packet.c: 24: PACKET[11] = min;
  5650  001FF8  C02F  F08B         	movff	_min,_PACKET+11	;volatile
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;packet.c: 25: PACKET[12] = sec;
  5654  001FFC  C032  F08C         	movff	_sec,_PACKET+12	;volatile
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;packet.c: 27: Current_Pos = 13;
  5658  002000  0E0D               	movlw	13
  5659  002002  6E21               	movwf	_Current_Pos,c	;volatile
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;packet.c: 28: Data_End = Readings * 8 + 13;
  5663  002004  5049               	movf	Creat_Packet@Readings,w,c
  5664  002006  0D08               	mullw	8
  5665  002008  50F3               	movf	prodl,w,c
  5666  00200A  0F0D               	addlw	13
  5667  00200C  6E22               	movwf	_Data_End,c	;volatile
  5668                           
  5669                           ; BSR set to: 0
  5670  00200E  0012               	return	
  5671  002010  FFFF               	dw	65535	; errata NOP
  5672  002012                     __end_of_Creat_Packet:
  5673                           	opt stack 0
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           postinc1	equ	0xFE6
  5683                           postdec1	equ	0xFE5
  5684                           fsr1l	equ	0xFE1
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _Calculate_CRC *****************
  5692 ;; Defined at:
  5693 ;;		line 118 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\packet.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;		None
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  sum             2   28[COMRAM] int 
  5698 ;;  count           1   30[COMRAM] unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  2   19[COMRAM] int 
  5701 ;; Registers used:
  5702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         2       0       0       0       0       0       0
  5709 ;;      Locals:         3       0       0       0       0       0       0
  5710 ;;      Temps:          7       0       0       0       0       0       0
  5711 ;;      Totals:        12       0       0       0       0       0       0
  5712 ;;Total ram usage:       12 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    2
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_Creat_RTC_Packet
  5719 ;;		_Add_Reading_To_Packet
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text15
  5724  001D48                     __ptext15:
  5725                           	opt stack 0
  5726  001D48                     _Calculate_CRC:
  5727                           	opt stack 26
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;incstack = 0
  5731  001D48  FFFF               	dw	65535
  5732                           
  5733                           ;packet.c: 120: char count;
  5734                           ;packet.c: 121: int sum = 0;
  5735  001D4A  0E00               	movlw	0
  5736  001D4C  6E53               	movwf	Calculate_CRC@sum+1,c
  5737  001D4E  0E00               	movlw	0
  5738  001D50  6E52               	movwf	Calculate_CRC@sum,c
  5739                           
  5740                           ;packet.c: 123: for(count = 0; count <= Data_End - 1; count++)
  5741  001D52  0E00               	movlw	0
  5742  001D54  6E54               	movwf	Calculate_CRC@count,c
  5743  001D56  D013               	goto	l6013
  5744  001D58                     l6009:
  5745                           
  5746                           ;packet.c: 124: sum = sum + PACKET[count];
  5747  001D58  5054               	movf	Calculate_CRC@count,w,c
  5748  001D5A  0D01               	mullw	1
  5749  001D5C  0100               	movlb	0	; () banked
  5750  001D5E  0E80               	movlw	low _PACKET	;volatile
  5751  001D60  24F3               	addwf	prodl,w,c
  5752  001D62  6ED9               	movwf	fsr2l,c
  5753  001D64  0100               	movlb	0	; () banked
  5754  001D66  0E00               	movlw	high _PACKET	;volatile
  5755  001D68  20F4               	addwfc	prodh,w,c
  5756  001D6A  6EDA               	movwf	fsr2h,c
  5757  001D6C  50DF               	movf	indf2,w,c
  5758  001D6E  6E4B               	movwf	??_Calculate_CRC& (0+255),c
  5759  001D70  504B               	movf	??_Calculate_CRC,w,c
  5760  001D72  2452               	addwf	Calculate_CRC@sum,w,c
  5761  001D74  6E52               	movwf	Calculate_CRC@sum,c
  5762  001D76  0E00               	movlw	0
  5763  001D78  2053               	addwfc	Calculate_CRC@sum+1,w,c
  5764  001D7A  6E53               	movwf	Calculate_CRC@sum+1,c
  5765                           
  5766                           ; BSR set to: 0
  5767  001D7C  2A54               	incf	Calculate_CRC@count,f,c
  5768  001D7E                     l6013:
  5769  001D7E  5054               	movf	Calculate_CRC@count,w,c
  5770  001D80  6E4B               	movwf	??_Calculate_CRC& (0+255),c
  5771  001D82  6A4C               	clrf	(??_Calculate_CRC+1)& (0+255),c
  5772  001D84  0EFF               	movlw	255
  5773  001D86  6E4D               	movwf	(??_Calculate_CRC+2)& (0+255),c
  5774  001D88  0EFF               	movlw	255
  5775  001D8A  6E4E               	movwf	(??_Calculate_CRC+3)& (0+255),c
  5776  001D8C  5022               	movf	_Data_End,w,c	;volatile
  5777  001D8E  6E4F               	movwf	(??_Calculate_CRC+4)& (0+255),c
  5778  001D90  6A50               	clrf	(??_Calculate_CRC+5)& (0+255),c
  5779  001D92  504D               	movf	??_Calculate_CRC+2,w,c
  5780  001D94  264F               	addwf	??_Calculate_CRC+4,f,c
  5781  001D96  504E               	movf	??_Calculate_CRC+3,w,c
  5782  001D98  2250               	addwfc	??_Calculate_CRC+5,f,c
  5783  001D9A  5050               	movf	??_Calculate_CRC+5,w,c
  5784  001D9C  0A80               	xorlw	128
  5785  001D9E  6E51               	movwf	(??_Calculate_CRC+6)& (0+255),c
  5786  001DA0  504B               	movf	??_Calculate_CRC,w,c
  5787  001DA2  5C4F               	subwf	??_Calculate_CRC+4,w,c
  5788  001DA4  504C               	movf	??_Calculate_CRC+1,w,c
  5789  001DA6  0A80               	xorlw	128
  5790  001DA8  5851               	subwfb	(??_Calculate_CRC+6)& (0+255),w,c
  5791  001DAA  B0D8               	btfsc	status,0,c
  5792  001DAC  D7D5               	goto	l6009
  5793                           
  5794                           ;packet.c: 125: return sum;
  5795  001DAE  C052  F049         	movff	Calculate_CRC@sum,?_Calculate_CRC
  5796  001DB2  C053  F04A         	movff	Calculate_CRC@sum+1,?_Calculate_CRC+1
  5797  001DB6  0012               	return	
  5798  001DB8  FFFF               	dw	65535	; errata NOP
  5799  001DBA                     __end_of_Calculate_CRC:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           postinc0	equ	0xFEE
  5808                           wreg	equ	0xFE8
  5809                           postinc1	equ	0xFE6
  5810                           postdec1	equ	0xFE5
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function _getkey *****************
  5819 ;; Defined at:
  5820 ;;		line 160 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\rtu.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  msecs           2   19[COMRAM] unsigned int 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      unsigned char 
  5827 ;; Registers used:
  5828 ;;		wreg, status,2, status,0
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5834 ;;      Params:         2       0       0       0       0       0       0
  5835 ;;      Locals:         0       0       0       0       0       0       0
  5836 ;;      Temps:          1       0       0       0       0       0       0
  5837 ;;      Totals:         3       0       0       0       0       0       0
  5838 ;;Total ram usage:        3 bytes
  5839 ;; Hardware stack levels used:    1
  5840 ;; Hardware stack levels required when called:    2
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text16
  5849  001EFA                     __ptext16:
  5850                           	opt stack 0
  5851  001EFA                     _getkey:
  5852                           	opt stack 28
  5853                           
  5854                           ;incstack = 0
  5855  001EFA  FFFF               	dw	65535
  5856                           
  5857                           ;rtu.c: 163: while(RD5 == 0 && RD4 == 0 && RC5 == 0 && RD0 == 0 && RD1 == 0 && msecs > 0
      +                          )
  5858  001EFC  D00A               	goto	l6757
  5859  001EFE                     l6753:
  5860                           
  5861                           ;rtu.c: 164: {
  5862                           ;rtu.c: 165: _delay((unsigned long)((1)*(100000000/4000.0)));
  5863  001EFE  0E19               	movlw	25
  5864  001F00  6E4B               	movwf	??_getkey& (0+255),c
  5865  001F02  0E5D               	movlw	93
  5866  001F04                     u5057:
  5867  001F04  2EE8               	decfsz	wreg,f,c
  5868  001F06  D7FE               	goto	u5057
  5869  001F08  2E4B               	decfsz	??_getkey& (0+255),f,c
  5870  001F0A  D7FC               	goto	u5057
  5871                           
  5872                           ;rtu.c: 166: msecs--;
  5873  001F0C  0649               	decf	getkey@msecs,f,c
  5874  001F0E  A0D8               	btfss	status,0,c
  5875  001F10  064A               	decf	getkey@msecs+1,f,c
  5876  001F12                     l6757:
  5877  001F12  AA83               	btfss	3971,5,c	;volatile
  5878  001F14  B883               	btfsc	3971,4,c	;volatile
  5879  001F16  D009               	goto	l6769
  5880  001F18  AA82               	btfss	3970,5,c	;volatile
  5881  001F1A  B083               	btfsc	3971,0,c	;volatile
  5882  001F1C  D006               	goto	l6769
  5883  001F1E  B283               	btfsc	3971,1,c	;volatile
  5884  001F20  D004               	goto	l6769
  5885  001F22  504A               	movf	getkey@msecs+1,w,c
  5886  001F24  1049               	iorwf	getkey@msecs,w,c
  5887  001F26  A4D8               	btfss	status,2,c
  5888  001F28  D7EA               	goto	l6753
  5889  001F2A                     l6769:
  5890                           
  5891                           ;rtu.c: 167: }
  5892                           ;rtu.c: 169: if(msecs <= 0)
  5893  001F2A  504A               	movf	getkey@msecs+1,w,c
  5894  001F2C  1049               	iorwf	getkey@msecs,w,c
  5895  001F2E  A4D8               	btfss	status,2,c
  5896  001F30  D002               	goto	l695
  5897                           
  5898                           ;rtu.c: 170: return 0;
  5899  001F32  0E00               	movlw	0
  5900  001F34  D012               	goto	l696
  5901  001F36                     l695:
  5902                           
  5903                           ;rtu.c: 171: if(RD5 == 1)
  5904  001F36  AA83               	btfss	3971,5,c	;volatile
  5905  001F38  D002               	goto	l697
  5906                           
  5907                           ;rtu.c: 172: return 1;
  5908  001F3A  0E01               	movlw	1
  5909  001F3C  D00E               	goto	l696
  5910  001F3E                     l697:
  5911                           
  5912                           ;rtu.c: 173: if(RD4 == 1)
  5913  001F3E  A883               	btfss	3971,4,c	;volatile
  5914  001F40  D002               	goto	l698
  5915                           
  5916                           ;rtu.c: 174: return 2;
  5917  001F42  0E02               	movlw	2
  5918  001F44  D00A               	goto	l696
  5919  001F46                     l698:
  5920                           
  5921                           ;rtu.c: 175: if(RC5 == 1)
  5922  001F46  AA82               	btfss	3970,5,c	;volatile
  5923  001F48  D002               	goto	l699
  5924                           
  5925                           ;rtu.c: 176: return 3;
  5926  001F4A  0E03               	movlw	3
  5927  001F4C  D006               	goto	l696
  5928  001F4E                     l699:
  5929                           
  5930                           ;rtu.c: 177: if(RD0 == 1)
  5931  001F4E  A083               	btfss	3971,0,c	;volatile
  5932  001F50  D002               	goto	l700
  5933                           
  5934                           ;rtu.c: 178: return 4;
  5935  001F52  0E04               	movlw	4
  5936  001F54  D002               	goto	l696
  5937  001F56                     l700:
  5938                           
  5939                           ;rtu.c: 179: if(RD1 == 1)
  5940  001F56  B283               	btfsc	3971,1,c	;volatile
  5941                           
  5942                           ;rtu.c: 180: return 5;
  5943  001F58  0E05               	movlw	5
  5944  001F5A                     l696:
  5945  001F5A  0012               	return	
  5946  001F5C  FFFF               	dw	65535	; errata NOP
  5947  001F5E                     __end_of_getkey:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           postinc0	equ	0xFEE
  5956                           wreg	equ	0xFE8
  5957                           postinc1	equ	0xFE6
  5958                           postdec1	equ	0xFE5
  5959                           fsr1l	equ	0xFE1
  5960                           indf2	equ	0xFDF
  5961                           postinc2	equ	0xFDE
  5962                           fsr2h	equ	0xFDA
  5963                           fsr2l	equ	0xFD9
  5964                           status	equ	0xFD8
  5965                           
  5966 ;; *************** function _data_to_center *****************
  5967 ;; Defined at:
  5968 ;;		line 467 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  5969 ;; Parameters:    Size  Location     Type
  5970 ;;		None
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  lsb             1    1[BANK1 ] unsigned char 
  5973 ;;  msb             1    0[BANK1 ] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;		None               void
  5976 ;; Registers used:
  5977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5983 ;;      Params:         0       0       0       0       0       0       0
  5984 ;;      Locals:         0       0       2       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0
  5986 ;;      Totals:         0       0       2       0       0       0       0
  5987 ;;Total ram usage:        2 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    8
  5990 ;; This function calls:
  5991 ;;		_Clear_Packet
  5992 ;;		_LCDByte
  5993 ;;		_LCDWriteString
  5994 ;;		_MyDelay
  5995 ;;		_Write_b_eep
  5996 ;;		_clear_rom
  5997 ;;		_read_packet_from_page
  5998 ;;		_tx_packet
  5999 ;; This function is called by:
  6000 ;;		_main
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text17
  6005  000A54                     __ptext17:
  6006                           	opt stack 0
  6007  000A54                     _data_to_center:
  6008                           	opt stack 22
  6009                           
  6010                           ;incstack = 0
  6011  000A54  FFFF               	dw	65535
  6012                           
  6013                           ;Test1.c: 469: unsigned char msb = 0, lsb = 0;
  6014  000A56  0E00               	movlw	0
  6015  000A58  0101               	movlb	1	; () banked
  6016  000A5A  6F80               	movwf	data_to_center@msb& (0+255),b
  6017  000A5C  0E00               	movlw	0
  6018  000A5E  0101               	movlb	1	; () banked
  6019  000A60  6F81               	movwf	data_to_center@lsb& (0+255),b
  6020                           
  6021                           ; BSR set to: 1
  6022                           ;Test1.c: 473: if(Write_Page1 == 0 && Write_Page2 == 0)
  6023  000A62  501C               	movf	_Write_Page1+1,w,c
  6024  000A64  101B               	iorwf	_Write_Page1,w,c
  6025  000A66  A4D8               	btfss	status,2,c
  6026  000A68  D015               	goto	l6813
  6027                           
  6028                           ; BSR set to: 1
  6029  000A6A  501E               	movf	_Write_Page2+1,w,c
  6030  000A6C  101D               	iorwf	_Write_Page2,w,c
  6031  000A6E  A4D8               	btfss	status,2,c
  6032  000A70  D011               	goto	l6813
  6033                           
  6034                           ; BSR set to: 1
  6035                           ;Test1.c: 474: {
  6036                           ;Test1.c: 475: (LCDByte(0b00000001,0));
  6037  000A72  0E00               	movlw	0
  6038  000A74  6E4C               	movwf	LCDByte@isdata,c
  6039  000A76  0E01               	movlw	1
  6040  000A78  ECAF  F00F         	call	_LCDByte
  6041                           
  6042                           ;Test1.c: 476: LCDWriteString("NOTHING TO SEND!");
  6043  000A7C  0E7D               	movlw	high STR_65
  6044  000A7E  6E53               	movwf	LCDWriteString@msg+1,c
  6045  000A80  0E96               	movlw	low STR_65
  6046  000A82  6E52               	movwf	LCDWriteString@msg,c
  6047  000A84  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6048                           
  6049                           ;Test1.c: 477: MyDelay(1000);
  6050  000A88  0E03               	movlw	3
  6051  000A8A  6E4A               	movwf	MyDelay@ms+1,c
  6052  000A8C  0EE8               	movlw	232
  6053  000A8E  6E49               	movwf	MyDelay@ms,c
  6054  000A90  EC53  F011         	call	_MyDelay	;wreg free
  6055  000A94                     l6813:
  6056                           
  6057                           ;Test1.c: 478: }
  6058                           ;Test1.c: 479: if(Write_Page1 != 0)
  6059  000A94  501C               	movf	_Write_Page1+1,w,c
  6060  000A96  101B               	iorwf	_Write_Page1,w,c
  6061  000A98  B4D8               	btfsc	status,2,c
  6062  000A9A  D051               	goto	l6847
  6063                           
  6064                           ;Test1.c: 480: {
  6065                           ;Test1.c: 481: device = 0xA0;
  6066  000A9C  0EA0               	movlw	160
  6067  000A9E  6E2C               	movwf	_device,c
  6068                           
  6069                           ;Test1.c: 482: for(Current_Read_Page = 0; Current_Read_Page < Write_Page1; Current_Read_
      +                          Page++)
  6070  000AA0  0E00               	movlw	0
  6071  000AA2  6E0C               	movwf	_Current_Read_Page+1,c	;volatile
  6072  000AA4  0E00               	movlw	0
  6073  000AA6  6E0B               	movwf	_Current_Read_Page,c	;volatile
  6074  000AA8  D028               	goto	l6835
  6075  000AAA                     l6817:
  6076                           
  6077                           ;Test1.c: 483: {
  6078                           ;Test1.c: 484: Clear_Packet();
  6079  000AAA  ECFF  F010         	call	_Clear_Packet	;wreg free
  6080                           
  6081                           ;Test1.c: 485: (LCDByte(0b00000001,0));
  6082  000AAE  0E00               	movlw	0
  6083  000AB0  6E4C               	movwf	LCDByte@isdata,c
  6084  000AB2  0E01               	movlw	1
  6085  000AB4  ECAF  F00F         	call	_LCDByte
  6086                           
  6087                           ;Test1.c: 486: LCDWriteString("READING EEPROM...");
  6088  000AB8  0E7D               	movlw	high STR_66
  6089  000ABA  6E53               	movwf	LCDWriteString@msg+1,c
  6090  000ABC  0E2B               	movlw	low STR_66
  6091  000ABE  6E52               	movwf	LCDWriteString@msg,c
  6092  000AC0  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6093                           
  6094                           ;Test1.c: 487: read_packet_from_page(Current_Read_Page);
  6095  000AC4  C00B  F054         	movff	_Current_Read_Page,read_packet_from_page@page_no	;volatile
  6096  000AC8  C00C  F055         	movff	_Current_Read_Page+1,read_packet_from_page@page_no+1	;volatile
  6097  000ACC  EC28  F00D         	call	_read_packet_from_page	;wreg free
  6098                           
  6099                           ;Test1.c: 488: MyDelay(10);
  6100  000AD0  0E00               	movlw	0
  6101  000AD2  6E4A               	movwf	MyDelay@ms+1,c
  6102  000AD4  0E0A               	movlw	10
  6103  000AD6  6E49               	movwf	MyDelay@ms,c
  6104  000AD8  EC53  F011         	call	_MyDelay	;wreg free
  6105                           
  6106                           ;Test1.c: 489: (LCDByte(0b00000001,0));
  6107  000ADC  0E00               	movlw	0
  6108  000ADE  6E4C               	movwf	LCDByte@isdata,c
  6109  000AE0  0E01               	movlw	1
  6110  000AE2  ECAF  F00F         	call	_LCDByte
  6111                           
  6112                           ;Test1.c: 490: LCDWriteString("TRANSMITTING...");
  6113  000AE6  0E7E               	movlw	high STR_67
  6114  000AE8  6E53               	movwf	LCDWriteString@msg+1,c
  6115  000AEA  0E50               	movlw	low STR_67
  6116  000AEC  6E52               	movwf	LCDWriteString@msg,c
  6117  000AEE  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6118                           
  6119                           ;Test1.c: 491: tx_packet();
  6120  000AF2  ECE1  F00C         	call	_tx_packet	;wreg free
  6121  000AF6  4A0B               	infsnz	_Current_Read_Page,f,c	;volatile
  6122  000AF8  2A0C               	incf	_Current_Read_Page+1,f,c	;volatile
  6123  000AFA                     l6835:
  6124  000AFA  501B               	movf	_Write_Page1,w,c
  6125  000AFC  5C0B               	subwf	_Current_Read_Page,w,c	;volatile
  6126  000AFE  501C               	movf	_Write_Page1+1,w,c
  6127  000B00  580C               	subwfb	_Current_Read_Page+1,w,c	;volatile
  6128  000B02  A0D8               	btfss	status,0,c
  6129  000B04  D7D2               	goto	l6817
  6130                           
  6131                           ;Test1.c: 492: }
  6132                           ;Test1.c: 493: Write_Page1 = 0;
  6133  000B06  0E00               	movlw	0
  6134  000B08  6E1C               	movwf	_Write_Page1+1,c
  6135  000B0A  0E00               	movlw	0
  6136  000B0C  6E1B               	movwf	_Write_Page1,c
  6137                           
  6138                           ;Test1.c: 495: Write_b_eep(0x00, 0x00);
  6139  000B0E  0E00               	movlw	0
  6140  000B10  6E4A               	movwf	Write_b_eep@badd+1,c
  6141  000B12  0E00               	movlw	0
  6142  000B14  6E49               	movwf	Write_b_eep@badd,c
  6143  000B16  0E00               	movlw	0
  6144  000B18  6E4B               	movwf	Write_b_eep@bdat,c
  6145  000B1A  ECC5  F010         	call	_Write_b_eep	;wreg free
  6146                           
  6147                           ;Test1.c: 496: _delay(50);
  6148  000B1E  0E0A               	movlw	10
  6149  000B20                     u5067:
  6150  000B20  F000               	nop	
  6151  000B22  2EE8               	decfsz	wreg,f,c
  6152  000B24  D7FD               	goto	u5067
  6153                           
  6154                           ;Test1.c: 497: Write_b_eep(0x01, 0x00);
  6155  000B26  0E00               	movlw	0
  6156  000B28  6E4A               	movwf	Write_b_eep@badd+1,c
  6157  000B2A  0E01               	movlw	1
  6158  000B2C  6E49               	movwf	Write_b_eep@badd,c
  6159  000B2E  0E00               	movlw	0
  6160  000B30  6E4B               	movwf	Write_b_eep@bdat,c
  6161  000B32  ECC5  F010         	call	_Write_b_eep	;wreg free
  6162                           
  6163                           ;Test1.c: 498: _delay(50);
  6164  000B36  0E0A               	movlw	10
  6165  000B38                     u5077:
  6166  000B38  F000               	nop	
  6167  000B3A  2EE8               	decfsz	wreg,f,c
  6168  000B3C  D7FD               	goto	u5077
  6169  000B3E                     l6847:
  6170                           
  6171                           ;Test1.c: 499: }
  6172                           ;Test1.c: 500: if(Write_Page2 != 0)
  6173  000B3E  501E               	movf	_Write_Page2+1,w,c
  6174  000B40  101D               	iorwf	_Write_Page2,w,c
  6175  000B42  B4D8               	btfsc	status,2,c
  6176  000B44  D051               	goto	l6881
  6177                           
  6178                           ;Test1.c: 501: {
  6179                           ;Test1.c: 502: device = 0xA2;
  6180  000B46  0EA2               	movlw	162
  6181  000B48  6E2C               	movwf	_device,c
  6182                           
  6183                           ;Test1.c: 503: for(Current_Read_Page = 0; Current_Read_Page < Write_Page2; Current_Read_
      +                          Page++)
  6184  000B4A  0E00               	movlw	0
  6185  000B4C  6E0C               	movwf	_Current_Read_Page+1,c	;volatile
  6186  000B4E  0E00               	movlw	0
  6187  000B50  6E0B               	movwf	_Current_Read_Page,c	;volatile
  6188  000B52  D028               	goto	l6869
  6189  000B54                     l6851:
  6190                           
  6191                           ;Test1.c: 504: {
  6192                           ;Test1.c: 505: Clear_Packet();
  6193  000B54  ECFF  F010         	call	_Clear_Packet	;wreg free
  6194                           
  6195                           ;Test1.c: 506: (LCDByte(0b00000001,0));
  6196  000B58  0E00               	movlw	0
  6197  000B5A  6E4C               	movwf	LCDByte@isdata,c
  6198  000B5C  0E01               	movlw	1
  6199  000B5E  ECAF  F00F         	call	_LCDByte
  6200                           
  6201                           ;Test1.c: 507: LCDWriteString("READING EEPROM...");
  6202  000B62  0E7D               	movlw	high STR_66
  6203  000B64  6E53               	movwf	LCDWriteString@msg+1,c
  6204  000B66  0E2B               	movlw	low STR_66
  6205  000B68  6E52               	movwf	LCDWriteString@msg,c
  6206  000B6A  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6207                           
  6208                           ;Test1.c: 508: read_packet_from_page(Current_Read_Page);
  6209  000B6E  C00B  F054         	movff	_Current_Read_Page,read_packet_from_page@page_no	;volatile
  6210  000B72  C00C  F055         	movff	_Current_Read_Page+1,read_packet_from_page@page_no+1	;volatile
  6211  000B76  EC28  F00D         	call	_read_packet_from_page	;wreg free
  6212                           
  6213                           ;Test1.c: 509: MyDelay(10);
  6214  000B7A  0E00               	movlw	0
  6215  000B7C  6E4A               	movwf	MyDelay@ms+1,c
  6216  000B7E  0E0A               	movlw	10
  6217  000B80  6E49               	movwf	MyDelay@ms,c
  6218  000B82  EC53  F011         	call	_MyDelay	;wreg free
  6219                           
  6220                           ;Test1.c: 510: (LCDByte(0b00000001,0));
  6221  000B86  0E00               	movlw	0
  6222  000B88  6E4C               	movwf	LCDByte@isdata,c
  6223  000B8A  0E01               	movlw	1
  6224  000B8C  ECAF  F00F         	call	_LCDByte
  6225                           
  6226                           ;Test1.c: 511: LCDWriteString("TRANSMITTING...");
  6227  000B90  0E7E               	movlw	high STR_67
  6228  000B92  6E53               	movwf	LCDWriteString@msg+1,c
  6229  000B94  0E50               	movlw	low STR_67
  6230  000B96  6E52               	movwf	LCDWriteString@msg,c
  6231  000B98  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6232                           
  6233                           ;Test1.c: 512: tx_packet();
  6234  000B9C  ECE1  F00C         	call	_tx_packet	;wreg free
  6235  000BA0  4A0B               	infsnz	_Current_Read_Page,f,c	;volatile
  6236  000BA2  2A0C               	incf	_Current_Read_Page+1,f,c	;volatile
  6237  000BA4                     l6869:
  6238  000BA4  501D               	movf	_Write_Page2,w,c
  6239  000BA6  5C0B               	subwf	_Current_Read_Page,w,c	;volatile
  6240  000BA8  501E               	movf	_Write_Page2+1,w,c
  6241  000BAA  580C               	subwfb	_Current_Read_Page+1,w,c	;volatile
  6242  000BAC  A0D8               	btfss	status,0,c
  6243  000BAE  D7D2               	goto	l6851
  6244                           
  6245                           ;Test1.c: 513: }
  6246                           ;Test1.c: 514: Write_Page2 = 0;
  6247  000BB0  0E00               	movlw	0
  6248  000BB2  6E1E               	movwf	_Write_Page2+1,c
  6249  000BB4  0E00               	movlw	0
  6250  000BB6  6E1D               	movwf	_Write_Page2,c
  6251                           
  6252                           ;Test1.c: 516: Write_b_eep(0x02, 0x00);
  6253  000BB8  0E00               	movlw	0
  6254  000BBA  6E4A               	movwf	Write_b_eep@badd+1,c
  6255  000BBC  0E02               	movlw	2
  6256  000BBE  6E49               	movwf	Write_b_eep@badd,c
  6257  000BC0  0E00               	movlw	0
  6258  000BC2  6E4B               	movwf	Write_b_eep@bdat,c
  6259  000BC4  ECC5  F010         	call	_Write_b_eep	;wreg free
  6260                           
  6261                           ;Test1.c: 517: _delay(50);
  6262  000BC8  0E0A               	movlw	10
  6263  000BCA                     u5087:
  6264  000BCA  F000               	nop	
  6265  000BCC  2EE8               	decfsz	wreg,f,c
  6266  000BCE  D7FD               	goto	u5087
  6267                           
  6268                           ;Test1.c: 518: Write_b_eep(0x03, 0x00);
  6269  000BD0  0E00               	movlw	0
  6270  000BD2  6E4A               	movwf	Write_b_eep@badd+1,c
  6271  000BD4  0E03               	movlw	3
  6272  000BD6  6E49               	movwf	Write_b_eep@badd,c
  6273  000BD8  0E00               	movlw	0
  6274  000BDA  6E4B               	movwf	Write_b_eep@bdat,c
  6275  000BDC  ECC5  F010         	call	_Write_b_eep	;wreg free
  6276                           
  6277                           ;Test1.c: 519: _delay(50);
  6278  000BE0  0E0A               	movlw	10
  6279  000BE2                     u5097:
  6280  000BE2  F000               	nop	
  6281  000BE4  2EE8               	decfsz	wreg,f,c
  6282  000BE6  D7FD               	goto	u5097
  6283  000BE8                     l6881:
  6284                           
  6285                           ;Test1.c: 520: }
  6286                           ;Test1.c: 521: (LCDByte(0b00000001,0));
  6287  000BE8  0E00               	movlw	0
  6288  000BEA  6E4C               	movwf	LCDByte@isdata,c
  6289  000BEC  0E01               	movlw	1
  6290  000BEE  ECAF  F00F         	call	_LCDByte
  6291                           
  6292                           ;Test1.c: 522: LCDWriteString("FORMATING MEMORY");
  6293  000BF2  0E7D               	movlw	high STR_70
  6294  000BF4  6E53               	movwf	LCDWriteString@msg+1,c
  6295  000BF6  0EFC               	movlw	low STR_70
  6296  000BF8  6E52               	movwf	LCDWriteString@msg,c
  6297  000BFA  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6298                           
  6299                           ;Test1.c: 523: MyDelay(1000);
  6300  000BFE  0E03               	movlw	3
  6301  000C00  6E4A               	movwf	MyDelay@ms+1,c
  6302  000C02  0EE8               	movlw	232
  6303  000C04  6E49               	movwf	MyDelay@ms,c
  6304  000C06  EC53  F011         	call	_MyDelay	;wreg free
  6305                           
  6306                           ;Test1.c: 526: device = 0xA0;
  6307  000C0A  0EA0               	movlw	160
  6308  000C0C  6E2C               	movwf	_device,c
  6309                           
  6310                           ;Test1.c: 527: clear_rom();
  6311  000C0E  EC2C  F00E         	call	_clear_rom	;wreg free
  6312                           
  6313                           ;Test1.c: 528: MyDelay(1);
  6314  000C12  0E00               	movlw	0
  6315  000C14  6E4A               	movwf	MyDelay@ms+1,c
  6316  000C16  0E01               	movlw	1
  6317  000C18  6E49               	movwf	MyDelay@ms,c
  6318  000C1A  EC53  F011         	call	_MyDelay	;wreg free
  6319                           
  6320                           ;Test1.c: 529: device = 0xA2;
  6321  000C1E  0EA2               	movlw	162
  6322  000C20  6E2C               	movwf	_device,c
  6323                           
  6324                           ;Test1.c: 530: clear_rom();
  6325  000C22  EC2C  F00E         	call	_clear_rom	;wreg free
  6326                           
  6327                           ;Test1.c: 531: MyDelay(1);
  6328  000C26  0E00               	movlw	0
  6329  000C28  6E4A               	movwf	MyDelay@ms+1,c
  6330  000C2A  0E01               	movlw	1
  6331  000C2C  6E49               	movwf	MyDelay@ms,c
  6332  000C2E  EC53  F011         	call	_MyDelay	;wreg free
  6333                           
  6334                           ;Test1.c: 533: (LCDByte(0b00000001,0));
  6335  000C32  0E00               	movlw	0
  6336  000C34  6E4C               	movwf	LCDByte@isdata,c
  6337  000C36  0E01               	movlw	1
  6338  000C38  ECAF  F00F         	call	_LCDByte
  6339                           
  6340                           ;Test1.c: 534: LCDWriteString("FORMAT COMPLETE!");
  6341  000C3C  0E7D               	movlw	high STR_71
  6342  000C3E  6E53               	movwf	LCDWriteString@msg+1,c
  6343  000C40  0EA7               	movlw	low STR_71
  6344  000C42  6E52               	movwf	LCDWriteString@msg,c
  6345  000C44  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6346                           
  6347                           ;Test1.c: 535: MyDelay(1000);
  6348  000C48  0E03               	movlw	3
  6349  000C4A  6E4A               	movwf	MyDelay@ms+1,c
  6350  000C4C  0EE8               	movlw	232
  6351  000C4E  6E49               	movwf	MyDelay@ms,c
  6352  000C50  EC53  F011         	call	_MyDelay	;wreg free
  6353                           
  6354                           ;Test1.c: 536: return;
  6355  000C54  0012               	return	
  6356  000C56  FFFF               	dw	65535	; errata NOP
  6357  000C58                     __end_of_data_to_center:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           postinc0	equ	0xFEE
  6366                           wreg	equ	0xFE8
  6367                           postinc1	equ	0xFE6
  6368                           postdec1	equ	0xFE5
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _tx_packet *****************
  6377 ;; Defined at:
  6378 ;;		line 569 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\Test1.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  res             1   46[COMRAM] unsigned char 
  6383 ;;  attempts        1   45[COMRAM] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6393 ;;      Params:         0       0       0       0       0       0       0
  6394 ;;      Locals:         2       0       0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0
  6396 ;;      Totals:         2       0       0       0       0       0       0
  6397 ;;Total ram usage:        2 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    7
  6400 ;; This function calls:
  6401 ;;		_LCDByte
  6402 ;;		_LCDWriteString
  6403 ;;		_MyDelay
  6404 ;;		_Send_Packet
  6405 ;; This function is called by:
  6406 ;;		_getting_data
  6407 ;;		_rtc_setting
  6408 ;;		_data_to_center
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text18
  6413  0019C2                     __ptext18:
  6414                           	opt stack 0
  6415  0019C2                     _tx_packet:
  6416                           	opt stack 22
  6417                           
  6418                           ;incstack = 0
  6419  0019C2  FFFF               	dw	65535
  6420                           
  6421                           ;Test1.c: 571: unsigned char attempts = 0;
  6422  0019C4  0E00               	movlw	0
  6423  0019C6  6E63               	movwf	tx_packet@attempts,c
  6424                           
  6425                           ;Test1.c: 572: unsigned char res = 48;
  6426  0019C8  0E30               	movlw	48
  6427  0019CA  6E64               	movwf	tx_packet@res,c
  6428                           
  6429                           ;Test1.c: 573: while(res == 48 && attempts < 10)
  6430  0019CC  D00E               	goto	l6629
  6431  0019CE                     l6619:
  6432                           
  6433                           ;Test1.c: 574: {
  6434                           ;Test1.c: 575: res = Send_Packet();
  6435  0019CE  EC1E  F007         	call	_Send_Packet	;wreg free
  6436  0019D2  6E64               	movwf	tx_packet@res,c
  6437                           
  6438                           ;Test1.c: 576: if(res == 0x00)
  6439  0019D4  6664               	tstfsz	tx_packet@res,c
  6440  0019D6  D008               	goto	l6627
  6441                           
  6442                           ;Test1.c: 577: {
  6443                           ;Test1.c: 578: MyDelay(5000);
  6444  0019D8  0E13               	movlw	19
  6445  0019DA  6E4A               	movwf	MyDelay@ms+1,c
  6446  0019DC  0E88               	movlw	136
  6447  0019DE  6E49               	movwf	MyDelay@ms,c
  6448  0019E0  EC53  F011         	call	_MyDelay	;wreg free
  6449                           
  6450                           ;Test1.c: 579: res = 48;
  6451  0019E4  0E30               	movlw	48
  6452  0019E6  6E64               	movwf	tx_packet@res,c
  6453  0019E8                     l6627:
  6454                           
  6455                           ;Test1.c: 580: }
  6456                           ;Test1.c: 581: attempts++;
  6457  0019E8  2A63               	incf	tx_packet@attempts,f,c
  6458  0019EA                     l6629:
  6459  0019EA  5064               	movf	tx_packet@res,w,c
  6460  0019EC  0A30               	xorlw	48
  6461  0019EE  A4D8               	btfss	status,2,c
  6462  0019F0  D003               	goto	l6633
  6463  0019F2  0E09               	movlw	9
  6464  0019F4  6463               	cpfsgt	tx_packet@attempts,c
  6465  0019F6  D7EB               	goto	l6619
  6466  0019F8                     l6633:
  6467                           
  6468                           ;Test1.c: 582: }
  6469                           ;Test1.c: 583: if(res != 49)
  6470  0019F8  5064               	movf	tx_packet@res,w,c
  6471  0019FA  0A31               	xorlw	49
  6472  0019FC  B4D8               	btfsc	status,2,c
  6473  0019FE  D020               	goto	l6651
  6474                           
  6475                           ;Test1.c: 584: {
  6476                           ;Test1.c: 587: (LCDByte(0b00000001,0));
  6477  001A00  0E00               	movlw	0
  6478  001A02  6E4C               	movwf	LCDByte@isdata,c
  6479  001A04  0E01               	movlw	1
  6480  001A06  ECAF  F00F         	call	_LCDByte
  6481                           
  6482                           ;Test1.c: 588: RD7 = 1;
  6483  001A0A  8E83               	bsf	3971,7,c	;volatile
  6484  001A0C                     l6639:
  6485                           
  6486                           ;Test1.c: 590: {
  6487                           ;Test1.c: 591: LCDWriteString("WIRELESS FAILD...!");
  6488  001A0C  0E7D               	movlw	high STR_76
  6489  001A0E  6E53               	movwf	LCDWriteString@msg+1,c
  6490  001A10  0E06               	movlw	low STR_76
  6491  001A12  6E52               	movwf	LCDWriteString@msg,c
  6492  001A14  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6493                           
  6494                           ;Test1.c: 592: RE0 = 1;
  6495  001A18  8084               	bsf	3972,0,c	;volatile
  6496                           
  6497                           ;Test1.c: 593: MyDelay(100);
  6498  001A1A  0E00               	movlw	0
  6499  001A1C  6E4A               	movwf	MyDelay@ms+1,c
  6500  001A1E  0E64               	movlw	100
  6501  001A20  6E49               	movwf	MyDelay@ms,c
  6502  001A22  EC53  F011         	call	_MyDelay	;wreg free
  6503                           
  6504                           ;Test1.c: 594: (LCDByte(0b00000001,0));
  6505  001A26  0E00               	movlw	0
  6506  001A28  6E4C               	movwf	LCDByte@isdata,c
  6507  001A2A  0E01               	movlw	1
  6508  001A2C  ECAF  F00F         	call	_LCDByte
  6509                           
  6510                           ;Test1.c: 595: RE0 = 0;
  6511  001A30  9084               	bcf	3972,0,c	;volatile
  6512                           
  6513                           ;Test1.c: 596: MyDelay(100);
  6514  001A32  0E00               	movlw	0
  6515  001A34  6E4A               	movwf	MyDelay@ms+1,c
  6516  001A36  0E64               	movlw	100
  6517  001A38  6E49               	movwf	MyDelay@ms,c
  6518  001A3A  EC53  F011         	call	_MyDelay	;wreg free
  6519  001A3E  D7E6               	goto	l6639
  6520  001A40                     l6651:
  6521                           
  6522                           ;Test1.c: 597: }
  6523                           ;Test1.c: 598: }
  6524                           ;Test1.c: 599: MyDelay(50);
  6525  001A40  0E00               	movlw	0
  6526  001A42  6E4A               	movwf	MyDelay@ms+1,c
  6527  001A44  0E32               	movlw	50
  6528  001A46  6E49               	movwf	MyDelay@ms,c
  6529  001A48  EC53  F011         	call	_MyDelay	;wreg free
  6530  001A4C  0012               	return	
  6531  001A4E  FFFF               	dw	65535	; errata NOP
  6532  001A50                     __end_of_tx_packet:
  6533                           	opt stack 0
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodh	equ	0xFF4
  6539                           prodl	equ	0xFF3
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           postinc1	equ	0xFE6
  6543                           postdec1	equ	0xFE5
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _Send_Packet *****************
  6552 ;; Defined at:
  6553 ;;		line 131 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\communication.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  ts              2   39[COMRAM] unsigned int 
  6558 ;;  data            1   44[COMRAM] unsigned char 
  6559 ;;  n               1   43[COMRAM] unsigned char 
  6560 ;;  result          1   42[COMRAM] unsigned char 
  6561 ;;  count           1   41[COMRAM] unsigned char 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      unsigned char 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6571 ;;      Params:         0       0       0       0       0       0       0
  6572 ;;      Locals:         6       0       0       0       0       0       0
  6573 ;;      Temps:          1       0       0       0       0       0       0
  6574 ;;      Totals:         7       0       0       0       0       0       0
  6575 ;;Total ram usage:        7 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    6
  6578 ;; This function calls:
  6579 ;;		_Eco_Test
  6580 ;;		_LCDByte
  6581 ;;		_LCDWriteString
  6582 ;;		_USARTDataAvailable
  6583 ;;		_USARTFlushBuffer
  6584 ;;		_USARTReadData
  6585 ;;		_USARTWriteChar
  6586 ;; This function is called by:
  6587 ;;		_tx_packet
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text19
  6592  000E3C                     __ptext19:
  6593                           	opt stack 0
  6594  000E3C                     _Send_Packet:
  6595                           	opt stack 22
  6596                           
  6597                           ;incstack = 0
  6598  000E3C  FFFF               	dw	65535
  6599                           
  6600                           ;communication.c: 134: unsigned char result = 0;
  6601  000E3E  0E00               	movlw	0
  6602  000E40  6E60               	movwf	Send_Packet@result,c
  6603                           
  6604                           ;communication.c: 135: unsigned char count = 0, data = 0, n = 0;
  6605  000E42  0E00               	movlw	0
  6606  000E44  6E5F               	movwf	Send_Packet@count,c
  6607  000E46  0E00               	movlw	0
  6608  000E48  6E62               	movwf	Send_Packet@data,c
  6609  000E4A  0E00               	movlw	0
  6610  000E4C  6E61               	movwf	Send_Packet@n,c
  6611                           
  6612                           ;communication.c: 136: unsigned int ts = 0;
  6613  000E4E  0E00               	movlw	0
  6614  000E50  6E5E               	movwf	Send_Packet@ts+1,c
  6615  000E52  0E00               	movlw	0
  6616  000E54  6E5D               	movwf	Send_Packet@ts,c
  6617                           
  6618                           ;communication.c: 138: result = Eco_Test();
  6619  000E56  ECDB  F008         	call	_Eco_Test	;wreg free
  6620  000E5A  6E60               	movwf	Send_Packet@result,c
  6621                           
  6622                           ;communication.c: 140: if(result == 0x01)
  6623  000E5C  0460               	decf	Send_Packet@result,w,c
  6624  000E5E  A4D8               	btfss	status,2,c
  6625  000E60  D08F               	goto	l5851
  6626                           
  6627                           ;communication.c: 141: {
  6628                           ;communication.c: 145: (LCDByte(0b00000001,0));
  6629  000E62  0E00               	movlw	0
  6630  000E64  6E4C               	movwf	LCDByte@isdata,c
  6631  000E66  0E01               	movlw	1
  6632  000E68  ECAF  F00F         	call	_LCDByte
  6633                           
  6634                           ;communication.c: 146: LCDWriteString("SENDING PACKET ");
  6635  000E6C  0E7E               	movlw	high STR_8
  6636  000E6E  6E53               	movwf	LCDWriteString@msg+1,c
  6637  000E70  0EA0               	movlw	low STR_8
  6638  000E72  6E52               	movwf	LCDWriteString@msg,c
  6639  000E74  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6640                           
  6641                           ;communication.c: 147: _delay((unsigned long)((1)*(100000000/4000.0)));
  6642  000E78  0E19               	movlw	25
  6643  000E7A  6E5C               	movwf	??_Send_Packet& (0+255),c
  6644  000E7C  0E5D               	movlw	93
  6645  000E7E                     u5107:
  6646  000E7E  2EE8               	decfsz	wreg,f,c
  6647  000E80  D7FE               	goto	u5107
  6648  000E82  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6649  000E84  D7FC               	goto	u5107
  6650                           
  6651                           ;communication.c: 148: count = 0;
  6652  000E86  0E00               	movlw	0
  6653  000E88  6E5F               	movwf	Send_Packet@count,c
  6654                           
  6655                           ;communication.c: 149: data = PACKET[0];
  6656  000E8A  C080  F062         	movff	_PACKET,Send_Packet@data	;volatile
  6657                           
  6658                           ;communication.c: 150: while(data != 0xEA)
  6659  000E8E  D022               	goto	l5805
  6660  000E90                     l97:
  6661                           
  6662                           ;communication.c: 151: {
  6663                           ;communication.c: 152: RE2 = 1;
  6664  000E90  8484               	bsf	3972,2,c	;volatile
  6665                           
  6666                           ;communication.c: 153: USARTWriteChar(data);
  6667  000E92  5062               	movf	Send_Packet@data,w,c
  6668  000E94  ECB2  F011         	call	_USARTWriteChar
  6669                           
  6670                           ;communication.c: 154: _delay((unsigned long)((5)*(100000000/4000.0)));
  6671  000E98  0E7A               	movlw	122
  6672  000E9A  6E5C               	movwf	??_Send_Packet& (0+255),c
  6673  000E9C  0ED4               	movlw	212
  6674  000E9E                     u5117:
  6675  000E9E  2EE8               	decfsz	wreg,f,c
  6676  000EA0  D7FE               	goto	u5117
  6677  000EA2  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6678  000EA4  D7FC               	goto	u5117
  6679  000EA6  D000               	nop2	
  6680                           
  6681                           ;communication.c: 155: _delay((unsigned long)((5)*(100000000/4000.0)));
  6682  000EA8  0E7A               	movlw	122
  6683  000EAA  6E5C               	movwf	??_Send_Packet& (0+255),c
  6684  000EAC  0ED4               	movlw	212
  6685  000EAE                     u5127:
  6686  000EAE  2EE8               	decfsz	wreg,f,c
  6687  000EB0  D7FE               	goto	u5127
  6688  000EB2  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6689  000EB4  D7FC               	goto	u5127
  6690  000EB6  D000               	nop2	
  6691                           
  6692                           ;communication.c: 156: RE2 = 0;
  6693  000EB8  9484               	bcf	3972,2,c	;volatile
  6694                           
  6695                           ;communication.c: 157: count++;
  6696  000EBA  2A5F               	incf	Send_Packet@count,f,c
  6697                           
  6698                           ;communication.c: 158: data = PACKET[count];
  6699  000EBC  505F               	movf	Send_Packet@count,w,c
  6700  000EBE  0D01               	mullw	1
  6701  000EC0  0100               	movlb	0	; () banked
  6702  000EC2  0E80               	movlw	low _PACKET	;volatile
  6703  000EC4  24F3               	addwf	prodl,w,c
  6704  000EC6  6ED9               	movwf	fsr2l,c
  6705  000EC8  0100               	movlb	0	; () banked
  6706  000ECA  0E00               	movlw	high _PACKET	;volatile
  6707  000ECC  20F4               	addwfc	prodh,w,c
  6708  000ECE  6EDA               	movwf	fsr2h,c
  6709  000ED0  50DF               	movf	indf2,w,c
  6710  000ED2  6E62               	movwf	Send_Packet@data,c
  6711  000ED4                     l5805:
  6712  000ED4  5062               	movf	Send_Packet@data,w,c
  6713  000ED6  0AEA               	xorlw	234
  6714  000ED8  A4D8               	btfss	status,2,c
  6715  000EDA  D7DA               	goto	l97
  6716                           
  6717                           ;communication.c: 159: }
  6718                           ;communication.c: 161: RE2 = 1;
  6719  000EDC  8484               	bsf	3972,2,c	;volatile
  6720                           
  6721                           ;communication.c: 162: USARTWriteChar(data);
  6722  000EDE  5062               	movf	Send_Packet@data,w,c
  6723  000EE0  ECB2  F011         	call	_USARTWriteChar
  6724                           
  6725                           ;communication.c: 163: _delay((unsigned long)((5)*(100000000/4000.0)));
  6726  000EE4  0E7A               	movlw	122
  6727  000EE6  6E5C               	movwf	??_Send_Packet& (0+255),c
  6728  000EE8  0ED4               	movlw	212
  6729  000EEA                     u5137:
  6730  000EEA  2EE8               	decfsz	wreg,f,c
  6731  000EEC  D7FE               	goto	u5137
  6732  000EEE  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6733  000EF0  D7FC               	goto	u5137
  6734  000EF2  D000               	nop2	
  6735                           
  6736                           ;communication.c: 164: _delay((unsigned long)((5)*(100000000/4000.0)));
  6737  000EF4  0E7A               	movlw	122
  6738  000EF6  6E5C               	movwf	??_Send_Packet& (0+255),c
  6739  000EF8  0ED4               	movlw	212
  6740  000EFA                     u5147:
  6741  000EFA  2EE8               	decfsz	wreg,f,c
  6742  000EFC  D7FE               	goto	u5147
  6743  000EFE  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6744  000F00  D7FC               	goto	u5147
  6745  000F02  D000               	nop2	
  6746                           
  6747                           ;communication.c: 165: RE2 = 0;
  6748  000F04  9484               	bcf	3972,2,c	;volatile
  6749                           
  6750                           ;communication.c: 166: (LCDByte(0b00000001,0));
  6751  000F06  0E00               	movlw	0
  6752  000F08  6E4C               	movwf	LCDByte@isdata,c
  6753  000F0A  0E01               	movlw	1
  6754  000F0C  ECAF  F00F         	call	_LCDByte
  6755                           
  6756                           ;communication.c: 167: LCDWriteString("PACKET SENT");
  6757  000F10  0E7F               	movlw	high STR_9
  6758  000F12  6E53               	movwf	LCDWriteString@msg+1,c
  6759  000F14  0E9C               	movlw	low STR_9
  6760  000F16  6E52               	movwf	LCDWriteString@msg,c
  6761  000F18  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6762                           
  6763                           ;communication.c: 169: n = 0;
  6764  000F1C  0E00               	movlw	0
  6765  000F1E  6E61               	movwf	Send_Packet@n,c
  6766                           
  6767                           ;communication.c: 170: ts = 0;
  6768  000F20  0E00               	movlw	0
  6769  000F22  6E5E               	movwf	Send_Packet@ts+1,c
  6770  000F24  0E00               	movlw	0
  6771  000F26  6E5D               	movwf	Send_Packet@ts,c
  6772                           
  6773                           ;communication.c: 172: USARTFlushBuffer();
  6774  000F28  EC86  F011         	call	_USARTFlushBuffer	;wreg free
  6775                           
  6776                           ;communication.c: 174: while(n == 0 && ts < 2000)
  6777  000F2C  D00C               	goto	l5831
  6778  000F2E                     l5825:
  6779                           
  6780                           ;communication.c: 175: {
  6781                           ;communication.c: 177: n = USARTDataAvailable();
  6782  000F2E  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  6783  000F32  6E61               	movwf	Send_Packet@n,c
  6784                           
  6785                           ;communication.c: 178: ts++;
  6786  000F34  4A5D               	infsnz	Send_Packet@ts,f,c
  6787  000F36  2A5E               	incf	Send_Packet@ts+1,f,c
  6788                           
  6789                           ;communication.c: 179: _delay((unsigned long)((1)*(100000000/4000.0)));
  6790  000F38  0E19               	movlw	25
  6791  000F3A  6E5C               	movwf	??_Send_Packet& (0+255),c
  6792  000F3C  0E5D               	movlw	93
  6793  000F3E                     u5157:
  6794  000F3E  2EE8               	decfsz	wreg,f,c
  6795  000F40  D7FE               	goto	u5157
  6796  000F42  2E5C               	decfsz	??_Send_Packet& (0+255),f,c
  6797  000F44  D7FC               	goto	u5157
  6798  000F46                     l5831:
  6799  000F46  6661               	tstfsz	Send_Packet@n,c
  6800  000F48  D006               	goto	l5835
  6801  000F4A  0ED0               	movlw	208
  6802  000F4C  5C5D               	subwf	Send_Packet@ts,w,c
  6803  000F4E  0E07               	movlw	7
  6804  000F50  585E               	subwfb	Send_Packet@ts+1,w,c
  6805  000F52  A0D8               	btfss	status,0,c
  6806  000F54  D7EC               	goto	l5825
  6807  000F56                     l5835:
  6808                           
  6809                           ;communication.c: 180: }
  6810                           ;communication.c: 186: if(n!=0)
  6811  000F56  5061               	movf	Send_Packet@n,w,c
  6812  000F58  B4D8               	btfsc	status,2,c
  6813  000F5A  D012               	goto	l5851
  6814                           
  6815                           ;communication.c: 187: {
  6816                           ;communication.c: 190: RC0 = 1;
  6817  000F5C  8082               	bsf	3970,0,c	;volatile
  6818                           
  6819                           ;communication.c: 191: result=USARTReadData();
  6820  000F5E  ECE3  F010         	call	_USARTReadData	;wreg free
  6821  000F62  6E60               	movwf	Send_Packet@result,c
  6822                           
  6823                           ;communication.c: 192: RC0 = 0;
  6824  000F64  9082               	bcf	3970,0,c	;volatile
  6825                           
  6826                           ;communication.c: 193: (LCDByte(0b00000001,0));
  6827  000F66  0E00               	movlw	0
  6828  000F68  6E4C               	movwf	LCDByte@isdata,c
  6829  000F6A  0E01               	movlw	1
  6830  000F6C  ECAF  F00F         	call	_LCDByte
  6831                           
  6832                           ;communication.c: 194: LCDWriteString("PACKET DELIVERED");
  6833  000F70  0E7E               	movlw	high STR_10
  6834  000F72  6E53               	movwf	LCDWriteString@msg+1,c
  6835  000F74  0E2F               	movlw	low STR_10
  6836  000F76  6E52               	movwf	LCDWriteString@msg,c
  6837  000F78  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6838                           
  6839                           ;communication.c: 195: return result;
  6840  000F7C  5060               	movf	Send_Packet@result,w,c
  6841  000F7E  D001               	goto	l105
  6842  000F80                     l5851:
  6843                           
  6844                           ;communication.c: 196: }
  6845                           ;communication.c: 197: }
  6846                           ;communication.c: 198: return 0;
  6847  000F80  0E00               	movlw	0
  6848  000F82                     l105:
  6849  000F82  0012               	return	
  6850  000F84  FFFF               	dw	65535	; errata NOP
  6851  000F86                     __end_of_Send_Packet:
  6852                           	opt stack 0
  6853                           tblptru	equ	0xFF8
  6854                           tblptrh	equ	0xFF7
  6855                           tblptrl	equ	0xFF6
  6856                           tablat	equ	0xFF5
  6857                           prodh	equ	0xFF4
  6858                           prodl	equ	0xFF3
  6859                           postinc0	equ	0xFEE
  6860                           wreg	equ	0xFE8
  6861                           postinc1	equ	0xFE6
  6862                           postdec1	equ	0xFE5
  6863                           fsr1l	equ	0xFE1
  6864                           indf2	equ	0xFDF
  6865                           postinc2	equ	0xFDE
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _Eco_Test *****************
  6871 ;; Defined at:
  6872 ;;		line 30 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\communication.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  data            1   34[COMRAM] unsigned char 
  6877 ;;  ts              2   35[COMRAM] unsigned int 
  6878 ;;  n               1   37[COMRAM] unsigned char 
  6879 ;;  re              1   33[COMRAM] unsigned char 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      unsigned char 
  6882 ;; Registers used:
  6883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6889 ;;      Params:         0       0       0       0       0       0       0
  6890 ;;      Locals:         5       0       0       0       0       0       0
  6891 ;;      Temps:          1       0       0       0       0       0       0
  6892 ;;      Totals:         6       0       0       0       0       0       0
  6893 ;;Total ram usage:        6 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    5
  6896 ;; This function calls:
  6897 ;;		_Check_Busy_Line
  6898 ;;		_LCDByte
  6899 ;;		_LCDWriteString
  6900 ;;		_USARTDataAvailable
  6901 ;;		_USARTFlushBuffer
  6902 ;;		_USARTReadData
  6903 ;;		_USARTWriteChar
  6904 ;; This function is called by:
  6905 ;;		_Send_Packet
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text20
  6910  0011B6                     __ptext20:
  6911                           	opt stack 0
  6912  0011B6                     _Eco_Test:
  6913                           	opt stack 22
  6914                           
  6915                           ;incstack = 0
  6916  0011B6  FFFF               	dw	65535
  6917                           
  6918                           ;communication.c: 32: uint8_t n = 0;
  6919  0011B8  0E00               	movlw	0
  6920  0011BA  6E5B               	movwf	Eco_Test@n,c
  6921                           
  6922                           ;communication.c: 33: unsigned int ts = 0;
  6923  0011BC  0E00               	movlw	0
  6924  0011BE  6E5A               	movwf	Eco_Test@ts+1,c
  6925  0011C0  0E00               	movlw	0
  6926  0011C2  6E59               	movwf	Eco_Test@ts,c
  6927                           
  6928                           ;communication.c: 34: unsigned char re = 0;
  6929  0011C4  0E00               	movlw	0
  6930  0011C6  6E57               	movwf	Eco_Test@re,c
  6931                           
  6932                           ;communication.c: 36: re = Check_Busy_Line();
  6933  0011C8  EC5A  F010         	call	_Check_Busy_Line	;wreg free
  6934  0011CC  6E57               	movwf	Eco_Test@re,c
  6935                           
  6936                           ;communication.c: 37: if(re = 0x01)
  6937  0011CE  0E01               	movlw	1
  6938  0011D0  6E57               	movwf	Eco_Test@re,c
  6939                           
  6940                           ;communication.c: 38: {
  6941                           ;communication.c: 39: (LCDByte(0b00000001,0));
  6942  0011D2  0E00               	movlw	0
  6943  0011D4  6E4C               	movwf	LCDByte@isdata,c
  6944  0011D6  0E01               	movlw	1
  6945  0011D8  ECAF  F00F         	call	_LCDByte
  6946                           
  6947                           ;communication.c: 40: LCDWriteString("LINE FREE");
  6948  0011DC  0E7F               	movlw	high STR_1
  6949  0011DE  6E53               	movwf	LCDWriteString@msg+1,c
  6950  0011E0  0ED4               	movlw	low STR_1
  6951  0011E2  6E52               	movwf	LCDWriteString@msg,c
  6952  0011E4  ECF9  F00B         	call	_LCDWriteString	;wreg free
  6953                           
  6954                           ;communication.c: 42: USARTFlushBuffer();
  6955  0011E8  EC86  F011         	call	_USARTFlushBuffer	;wreg free
  6956                           
  6957                           ;communication.c: 45: RE2 = 1;
  6958  0011EC  8484               	bsf	3972,2,c	;volatile
  6959                           
  6960                           ;communication.c: 46: _delay((unsigned long)((5)*(100000000/4000.0)));
  6961  0011EE  0E7A               	movlw	122
  6962  0011F0  6E56               	movwf	??_Eco_Test& (0+255),c
  6963  0011F2  0ED4               	movlw	212
  6964  0011F4                     u5167:
  6965  0011F4  2EE8               	decfsz	wreg,f,c
  6966  0011F6  D7FE               	goto	u5167
  6967  0011F8  2E56               	decfsz	??_Eco_Test& (0+255),f,c
  6968  0011FA  D7FC               	goto	u5167
  6969  0011FC  D000               	nop2	
  6970                           
  6971                           ;communication.c: 47: _delay((unsigned long)((5)*(100000000/4000.0)));
  6972  0011FE  0E7A               	movlw	122
  6973  001200  6E56               	movwf	??_Eco_Test& (0+255),c
  6974  001202  0ED4               	movlw	212
  6975  001204                     u5177:
  6976  001204  2EE8               	decfsz	wreg,f,c
  6977  001206  D7FE               	goto	u5177
  6978  001208  2E56               	decfsz	??_Eco_Test& (0+255),f,c
  6979  00120A  D7FC               	goto	u5177
  6980  00120C  D000               	nop2	
  6981                           
  6982                           ;communication.c: 48: USARTWriteChar(Source_ID);
  6983  00120E  5027               	movf	_Source_ID,w,c
  6984  001210  ECB2  F011         	call	_USARTWriteChar
  6985                           
  6986                           ;communication.c: 49: RE2 = 0;
  6987  001214  9484               	bcf	3972,2,c	;volatile
  6988                           
  6989                           ;communication.c: 51: (LCDByte(0b00000001,0));
  6990  001216  0E00               	movlw	0
  6991  001218  6E4C               	movwf	LCDByte@isdata,c
  6992  00121A  0E01               	movlw	1
  6993  00121C  ECAF  F00F         	call	_LCDByte
  6994                           
  6995                           ;communication.c: 52: LCDWriteString("ECO SENT");
  6996  001220  0E7F               	movlw	high STR_2
  6997  001222  6E53               	movwf	LCDWriteString@msg+1,c
  6998  001224  0EE7               	movlw	low STR_2
  6999  001226  6E52               	movwf	LCDWriteString@msg,c
  7000  001228  ECF9  F00B         	call	_LCDWriteString	;wreg free
  7001                           
  7002                           ;communication.c: 55: while(n == 0 && ts < 2000)
  7003  00122C  D00C               	goto	l5653
  7004  00122E                     l5647:
  7005                           
  7006                           ;communication.c: 56: {
  7007                           ;communication.c: 58: n = USARTDataAvailable();
  7008  00122E  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  7009  001232  6E5B               	movwf	Eco_Test@n,c
  7010                           
  7011                           ;communication.c: 59: ts++;
  7012  001234  4A59               	infsnz	Eco_Test@ts,f,c
  7013  001236  2A5A               	incf	Eco_Test@ts+1,f,c
  7014                           
  7015                           ;communication.c: 60: _delay((unsigned long)((1)*(100000000/4000.0)));
  7016  001238  0E19               	movlw	25
  7017  00123A  6E56               	movwf	??_Eco_Test& (0+255),c
  7018  00123C  0E5D               	movlw	93
  7019  00123E                     u5187:
  7020  00123E  2EE8               	decfsz	wreg,f,c
  7021  001240  D7FE               	goto	u5187
  7022  001242  2E56               	decfsz	??_Eco_Test& (0+255),f,c
  7023  001244  D7FC               	goto	u5187
  7024  001246                     l5653:
  7025  001246  665B               	tstfsz	Eco_Test@n,c
  7026  001248  D006               	goto	l5657
  7027  00124A  0ED0               	movlw	208
  7028  00124C  5C59               	subwf	Eco_Test@ts,w,c
  7029  00124E  0E07               	movlw	7
  7030  001250  585A               	subwfb	Eco_Test@ts+1,w,c
  7031  001252  A0D8               	btfss	status,0,c
  7032  001254  D7EC               	goto	l5647
  7033  001256                     l5657:
  7034                           
  7035                           ;communication.c: 61: }
  7036                           ;communication.c: 64: if(n!=0)
  7037  001256  505B               	movf	Eco_Test@n,w,c
  7038  001258  B4D8               	btfsc	status,2,c
  7039  00125A  D015               	goto	l5675
  7040                           
  7041                           ;communication.c: 65: {
  7042                           ;communication.c: 67: RC0 = 1;
  7043  00125C  8082               	bsf	3970,0,c	;volatile
  7044                           
  7045                           ;communication.c: 68: unsigned char data=USARTReadData();
  7046  00125E  ECE3  F010         	call	_USARTReadData	;wreg free
  7047  001262  6E58               	movwf	Eco_Test@data,c
  7048                           
  7049                           ;communication.c: 69: RC0 = 0;
  7050  001264  9082               	bcf	3970,0,c	;volatile
  7051                           
  7052                           ;communication.c: 70: if(data == Source_ID)
  7053  001266  5027               	movf	_Source_ID,w,c
  7054  001268  6258               	cpfseq	Eco_Test@data,c
  7055  00126A  D00D               	goto	l5675
  7056                           
  7057                           ;communication.c: 71: {
  7058                           ;communication.c: 72: (LCDByte(0b00000001,0));
  7059  00126C  0E00               	movlw	0
  7060  00126E  6E4C               	movwf	LCDByte@isdata,c
  7061  001270  0E01               	movlw	1
  7062  001272  ECAF  F00F         	call	_LCDByte
  7063                           
  7064                           ;communication.c: 73: LCDWriteString("ECO SUCCESSFUL ");
  7065  001276  0E7E               	movlw	high STR_3
  7066  001278  6E53               	movwf	LCDWriteString@msg+1,c
  7067  00127A  0E90               	movlw	low STR_3
  7068  00127C  6E52               	movwf	LCDWriteString@msg,c
  7069  00127E  ECF9  F00B         	call	_LCDWriteString	;wreg free
  7070                           
  7071                           ;communication.c: 74: return 0x01;
  7072  001282  0E01               	movlw	1
  7073  001284  D00C               	goto	l82
  7074  001286                     l5675:
  7075                           
  7076                           ;communication.c: 75: }
  7077                           ;communication.c: 76: }
  7078                           ;communication.c: 77: }
  7079                           ;communication.c: 79: (LCDByte(0b00000001,0));
  7080  001286  0E00               	movlw	0
  7081  001288  6E4C               	movwf	LCDByte@isdata,c
  7082  00128A  0E01               	movlw	1
  7083  00128C  ECAF  F00F         	call	_LCDByte
  7084                           
  7085                           ;communication.c: 80: LCDWriteString("ECO FAIL");
  7086  001290  0E7F               	movlw	high STR_4
  7087  001292  6E53               	movwf	LCDWriteString@msg+1,c
  7088  001294  0EDE               	movlw	low STR_4
  7089  001296  6E52               	movwf	LCDWriteString@msg,c
  7090  001298  ECF9  F00B         	call	_LCDWriteString	;wreg free
  7091                           
  7092                           ;communication.c: 81: return 0x00;
  7093  00129C  0E00               	movlw	0
  7094  00129E                     l82:
  7095  00129E  0012               	return	
  7096  0012A0  FFFF               	dw	65535	; errata NOP
  7097  0012A2                     __end_of_Eco_Test:
  7098                           	opt stack 0
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           prodh	equ	0xFF4
  7104                           prodl	equ	0xFF3
  7105                           postinc0	equ	0xFEE
  7106                           wreg	equ	0xFE8
  7107                           postinc1	equ	0xFE6
  7108                           postdec1	equ	0xFE5
  7109                           fsr1l	equ	0xFE1
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _USARTWriteChar *****************
  7117 ;; Defined at:
  7118 ;;		line 52 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  ch              1    wreg     unsigned char 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  ch              1   19[COMRAM] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7132 ;;      Params:         0       0       0       0       0       0       0
  7133 ;;      Locals:         1       0       0       0       0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0
  7135 ;;      Totals:         1       0       0       0       0       0       0
  7136 ;;Total ram usage:        1 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    2
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_Eco_Test
  7143 ;;		_Eco_Replay
  7144 ;;		_Send_Packet
  7145 ;;		_Receive_Packet
  7146 ;;		_USARTWriteString
  7147 ;;		_USARTWriteLine
  7148 ;;		_USARTWriteInt
  7149 ;;		_USARTGotoNewLine
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text21
  7154  002364                     __ptext21:
  7155                           	opt stack 0
  7156  002364                     _USARTWriteChar:
  7157                           	opt stack 25
  7158                           
  7159                           ;incstack = 0
  7160  002364  FFFF               	dw	65535
  7161                           
  7162                           ;USARTWriteChar@ch stored from wreg
  7163  002366  6E49               	movwf	USARTWriteChar@ch,c
  7164  002368                     l956:
  7165  002368  A89E               	btfss	3998,4,c	;volatile
  7166  00236A  D7FE               	goto	l956
  7167                           
  7168                           ;usart_pic18.c: 56: TXREG=ch;
  7169  00236C  C049  FFAD         	movff	USARTWriteChar@ch,4013	;volatile
  7170  002370  0012               	return	
  7171  002372  FFFF               	dw	65535	; errata NOP
  7172  002374                     __end_of_USARTWriteChar:
  7173                           	opt stack 0
  7174                           tblptru	equ	0xFF8
  7175                           tblptrh	equ	0xFF7
  7176                           tblptrl	equ	0xFF6
  7177                           tablat	equ	0xFF5
  7178                           prodh	equ	0xFF4
  7179                           prodl	equ	0xFF3
  7180                           postinc0	equ	0xFEE
  7181                           wreg	equ	0xFE8
  7182                           postinc1	equ	0xFE6
  7183                           postdec1	equ	0xFE5
  7184                           fsr1l	equ	0xFE1
  7185                           indf2	equ	0xFDF
  7186                           postinc2	equ	0xFDE
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _LCDWriteString *****************
  7192 ;; Defined at:
  7193 ;;		line 210 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  msg             2   28[COMRAM] PTR const unsigned char 
  7196 ;;		 -> STR_76(19), STR_75(2), STR_74(2), STR_73(7), 
  7197 ;;		 -> STR_72(6), STR_71(17), STR_70(17), STR_69(16), 
  7198 ;;		 -> STR_68(18), STR_67(16), STR_66(18), STR_65(17), 
  7199 ;;		 -> STR_64(2), STR_63(2), STR_62(21), STR_61(21), 
  7200 ;;		 -> STR_60(17), STR_59(20), STR_58(13), STR_57(12), 
  7201 ;;		 -> STR_56(13), STR_55(14), STR_54(18), STR_53(2), 
  7202 ;;		 -> STR_52(2), STR_51(17), STR_50(14), STR_49(17), 
  7203 ;;		 -> STR_48(14), STR_47(16), STR_46(18), STR_45(11), 
  7204 ;;		 -> STR_44(16), STR_43(14), STR_42(16), STR_41(18), 
  7205 ;;		 -> STR_40(11), STR_39(16), STR_38(17), STR_37(14), 
  7206 ;;		 -> STR_36(17), STR_35(14), STR_34(17), STR_33(17), 
  7207 ;;		 -> STR_32(16), STR_31(15), STR_30(15), STR_29(15), 
  7208 ;;		 -> STR_28(16), STR_27(15), STR_26(13), STR_25(11), 
  7209 ;;		 -> STR_24(16), STR_23(14), STR_22(15), STR_21(12), 
  7210 ;;		 -> STR_20(2), STR_19(2), STR_18(18), STR_17(17), 
  7211 ;;		 -> STR_16(15), STR_15(18), STR_14(23), STR_13(17), 
  7212 ;;		 -> STR_12(20), STR_11(11), STR_10(17), STR_9(12), 
  7213 ;;		 -> STR_8(16), STR_7(18), STR_6(14), STR_5(17), 
  7214 ;;		 -> STR_4(9), STR_3(16), STR_2(9), STR_1(10), 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  cc              1   31[COMRAM] char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;		None               void
  7219 ;; Registers used:
  7220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7226 ;;      Params:         2       0       0       0       0       0       0
  7227 ;;      Locals:         1       0       0       0       0       0       0
  7228 ;;      Temps:          1       0       0       0       0       0       0
  7229 ;;      Totals:         4       0       0       0       0       0       0
  7230 ;;Total ram usage:        4 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    4
  7233 ;; This function calls:
  7234 ;;		_LCDByte
  7235 ;; This function is called by:
  7236 ;;		_Eco_Test
  7237 ;;		_Eco_Replay
  7238 ;;		_Send_Packet
  7239 ;;		_Receive_Packet
  7240 ;;		_main
  7241 ;;		_getting_data
  7242 ;;		_rtc_setting
  7243 ;;		_data_to_center
  7244 ;;		_local_display
  7245 ;;		_tx_packet
  7246 ;;		_reset_unit
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text22
  7251  0017F2                     __ptext22:
  7252                           	opt stack 0
  7253  0017F2                     _LCDWriteString:
  7254                           	opt stack 23
  7255                           
  7256                           ;incstack = 0
  7257  0017F2  FFFF               	dw	65535
  7258                           
  7259                           ;lcd_hd44780_pic18.c: 240: while(*msg!='\0')
  7260  0017F4  D043               	goto	l5609
  7261  0017F6                     l5589:
  7262                           
  7263                           ;lcd_hd44780_pic18.c: 241: {
  7264                           ;lcd_hd44780_pic18.c: 243: if(*msg=='%')
  7265  0017F6  C052  FFF6         	movff	LCDWriteString@msg,tblptrl
  7266  0017FA  C053  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  7267  0017FE                     	if	0	;tblptru may be non-zero
  7268  0017FE                     	endif
  7269  0017FE                     	if	0	;tblptru may be non-zero
  7270  0017FE                     	endif
  7271  0017FE  0008               	tblrd		*
  7272  001800  FFFF               	dw	65535	; errata NOP
  7273  001802  50F5               	movf	tablat,w,c
  7274  001804  0A25               	xorlw	37
  7275  001806  A4D8               	btfss	status,2,c
  7276  001808  D02C               	goto	l5605
  7277                           
  7278                           ;lcd_hd44780_pic18.c: 244: {
  7279                           ;lcd_hd44780_pic18.c: 245: msg++;
  7280  00180A  4A52               	infsnz	LCDWriteString@msg,f,c
  7281  00180C  2A53               	incf	LCDWriteString@msg+1,f,c
  7282                           
  7283                           ;lcd_hd44780_pic18.c: 246: int8_t cc=*msg-'0';
  7284  00180E  C052  FFF6         	movff	LCDWriteString@msg,tblptrl
  7285  001812  C053  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  7286  001816                     	if	0	;tblptru may be non-zero
  7287  001816                     	endif
  7288  001816                     	if	0	;tblptru may be non-zero
  7289  001816                     	endif
  7290  001816  0008               	tblrd		*
  7291  001818  FFFF               	dw	65535	; errata NOP
  7292  00181A  50F5               	movf	tablat,w,c
  7293  00181C  0FD0               	addlw	208
  7294  00181E  6E55               	movwf	LCDWriteString@cc,c
  7295                           
  7296                           ;lcd_hd44780_pic18.c: 248: if(cc>=0 && cc<=7)
  7297  001820  BE55               	btfsc	LCDWriteString@cc,7,c
  7298  001822  D00E               	goto	l5601
  7299  001824  5055               	movf	LCDWriteString@cc,w,c
  7300  001826  0A80               	xorlw	128
  7301  001828  6E54               	movwf	??_LCDWriteString& (0+255),c
  7302  00182A  0E08               	movlw	8
  7303  00182C  0A80               	xorlw	128
  7304  00182E  5C54               	subwf	??_LCDWriteString,w,c
  7305  001830  B0D8               	btfsc	status,0,c
  7306  001832  D006               	goto	l5601
  7307                           
  7308                           ;lcd_hd44780_pic18.c: 249: {
  7309                           ;lcd_hd44780_pic18.c: 250: (LCDByte(cc,1));
  7310  001834  0E01               	movlw	1
  7311  001836  6E4C               	movwf	LCDByte@isdata,c
  7312  001838  5055               	movf	LCDWriteString@cc,w,c
  7313  00183A  ECAF  F00F         	call	_LCDByte
  7314                           
  7315                           ;lcd_hd44780_pic18.c: 251: }
  7316  00183E  D01C               	goto	l5607
  7317  001840                     l5601:
  7318                           
  7319                           ;lcd_hd44780_pic18.c: 252: else
  7320                           ;lcd_hd44780_pic18.c: 253: {
  7321                           ;lcd_hd44780_pic18.c: 254: (LCDByte('%',1));
  7322  001840  0E01               	movlw	1
  7323  001842  6E4C               	movwf	LCDByte@isdata,c
  7324  001844  0E25               	movlw	37
  7325  001846  ECAF  F00F         	call	_LCDByte
  7326                           
  7327                           ;lcd_hd44780_pic18.c: 255: (LCDByte(*msg,1));
  7328  00184A  0E01               	movlw	1
  7329  00184C  6E4C               	movwf	LCDByte@isdata,c
  7330  00184E  C052  FFF6         	movff	LCDWriteString@msg,tblptrl
  7331  001852  C053  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  7332  001856                     	if	0	;tblptru may be non-zero
  7333  001856                     	endif
  7334  001856                     	if	0	;tblptru may be non-zero
  7335  001856                     	endif
  7336  001856  0008               	tblrd		*
  7337  001858  FFFF               	dw	65535	; errata NOP
  7338  00185A  50F5               	movf	tablat,w,c
  7339  00185C  ECAF  F00F         	call	_LCDByte
  7340  001860  D00B               	goto	l5607
  7341  001862                     l5605:
  7342                           
  7343                           ;lcd_hd44780_pic18.c: 258: else
  7344                           ;lcd_hd44780_pic18.c: 259: {
  7345                           ;lcd_hd44780_pic18.c: 260: (LCDByte(*msg,1));
  7346  001862  0E01               	movlw	1
  7347  001864  6E4C               	movwf	LCDByte@isdata,c
  7348  001866  C052  FFF6         	movff	LCDWriteString@msg,tblptrl
  7349  00186A  C053  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  7350  00186E                     	if	0	;tblptru may be non-zero
  7351  00186E                     	endif
  7352  00186E                     	if	0	;tblptru may be non-zero
  7353  00186E                     	endif
  7354  00186E  0008               	tblrd		*
  7355  001870  FFFF               	dw	65535	; errata NOP
  7356  001872  50F5               	movf	tablat,w,c
  7357  001874  ECAF  F00F         	call	_LCDByte
  7358  001878                     l5607:
  7359                           
  7360                           ;lcd_hd44780_pic18.c: 261: }
  7361                           ;lcd_hd44780_pic18.c: 262: msg++;
  7362  001878  4A52               	infsnz	LCDWriteString@msg,f,c
  7363  00187A  2A53               	incf	LCDWriteString@msg+1,f,c
  7364  00187C                     l5609:
  7365  00187C  C052  FFF6         	movff	LCDWriteString@msg,tblptrl
  7366  001880  C053  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  7367  001884                     	if	0	;tblptru may be non-zero
  7368  001884                     	endif
  7369  001884                     	if	0	;tblptru may be non-zero
  7370  001884                     	endif
  7371  001884  0008               	tblrd		*
  7372  001886  FFFF               	dw	65535	; errata NOP
  7373  001888  50F5               	movf	tablat,w,c
  7374  00188A  0900               	iorlw	0
  7375  00188C  B4D8               	btfsc	status,2,c
  7376  00188E  0012               	return	
  7377  001890  FFFF               	dw	65535	; assembler added errata NOP
  7378  001892  D7B1               	goto	l5589
  7379  001894  FFFF               	dw	65535	; errata NOP
  7380  001896                     __end_of_LCDWriteString:
  7381                           	opt stack 0
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           postinc0	equ	0xFEE
  7389                           wreg	equ	0xFE8
  7390                           postinc1	equ	0xFE6
  7391                           postdec1	equ	0xFE5
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _Check_Busy_Line *****************
  7400 ;; Defined at:
  7401 ;;		line 12 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\communication.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;  ms              2   21[COMRAM] unsigned int 
  7406 ;;  n               1   23[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      unsigned char 
  7409 ;; Registers used:
  7410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7416 ;;      Params:         0       0       0       0       0       0       0
  7417 ;;      Locals:         3       0       0       0       0       0       0
  7418 ;;      Temps:          1       0       0       0       0       0       0
  7419 ;;      Totals:         4       0       0       0       0       0       0
  7420 ;;Total ram usage:        4 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    4
  7423 ;; This function calls:
  7424 ;;		_USARTDataAvailable
  7425 ;;		_USARTFlushBuffer
  7426 ;; This function is called by:
  7427 ;;		_Eco_Test
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text23
  7432  0020B4                     __ptext23:
  7433                           	opt stack 0
  7434  0020B4                     _Check_Busy_Line:
  7435                           	opt stack 22
  7436                           
  7437                           ;incstack = 0
  7438  0020B4  FFFF               	dw	65535
  7439                           
  7440                           ;communication.c: 14: USARTFlushBuffer();
  7441  0020B6  EC86  F011         	call	_USARTFlushBuffer	;wreg free
  7442                           
  7443                           ;communication.c: 15: unsigned int ms = 0;
  7444  0020BA  0E00               	movlw	0
  7445  0020BC  6E4C               	movwf	Check_Busy_Line@ms+1,c
  7446  0020BE  0E00               	movlw	0
  7447  0020C0  6E4B               	movwf	Check_Busy_Line@ms,c
  7448                           
  7449                           ;communication.c: 16: uint8_t n = 0;
  7450  0020C2  0E00               	movlw	0
  7451  0020C4  6E4D               	movwf	Check_Busy_Line@n,c
  7452                           
  7453                           ;communication.c: 18: while(n == 0 && ms < 2500)
  7454  0020C6  D00C               	goto	l5575
  7455  0020C8                     l5569:
  7456                           
  7457                           ;communication.c: 19: {
  7458                           ;communication.c: 21: n = USARTDataAvailable();
  7459  0020C8  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  7460  0020CC  6E4D               	movwf	Check_Busy_Line@n,c
  7461                           
  7462                           ;communication.c: 22: ms++;
  7463  0020CE  4A4B               	infsnz	Check_Busy_Line@ms,f,c
  7464  0020D0  2A4C               	incf	Check_Busy_Line@ms+1,f,c
  7465                           
  7466                           ;communication.c: 23: _delay((unsigned long)((1)*(100000000/4000.0)));
  7467  0020D2  0E19               	movlw	25
  7468  0020D4  6E4A               	movwf	??_Check_Busy_Line& (0+255),c
  7469  0020D6  0E5D               	movlw	93
  7470  0020D8                     u5197:
  7471  0020D8  2EE8               	decfsz	wreg,f,c
  7472  0020DA  D7FE               	goto	u5197
  7473  0020DC  2E4A               	decfsz	??_Check_Busy_Line& (0+255),f,c
  7474  0020DE  D7FC               	goto	u5197
  7475  0020E0                     l5575:
  7476  0020E0  664D               	tstfsz	Check_Busy_Line@n,c
  7477  0020E2  D006               	goto	l69
  7478  0020E4  0EC4               	movlw	196
  7479  0020E6  5C4B               	subwf	Check_Busy_Line@ms,w,c
  7480  0020E8  0E09               	movlw	9
  7481  0020EA  584C               	subwfb	Check_Busy_Line@ms+1,w,c
  7482  0020EC  A0D8               	btfss	status,0,c
  7483  0020EE  D7EC               	goto	l5569
  7484  0020F0                     l69:
  7485                           
  7486                           ;communication.c: 24: }
  7487                           ;communication.c: 25: if(n == 0)
  7488  0020F0  664D               	tstfsz	Check_Busy_Line@n,c
  7489  0020F2  D002               	goto	l5583
  7490                           
  7491                           ;communication.c: 26: return 0x01;
  7492  0020F4  0E01               	movlw	1
  7493  0020F6  D001               	goto	l71
  7494  0020F8                     l5583:
  7495                           
  7496                           ;communication.c: 27: return 0x00;
  7497  0020F8  0E00               	movlw	0
  7498  0020FA                     l71:
  7499  0020FA  0012               	return	
  7500  0020FC  FFFF               	dw	65535	; errata NOP
  7501  0020FE                     __end_of_Check_Busy_Line:
  7502                           	opt stack 0
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           postinc0	equ	0xFEE
  7510                           wreg	equ	0xFE8
  7511                           postinc1	equ	0xFE6
  7512                           postdec1	equ	0xFE5
  7513                           fsr1l	equ	0xFE1
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function _USARTFlushBuffer *****************
  7521 ;; Defined at:
  7522 ;;		line 192 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;		None               void
  7529 ;; Registers used:
  7530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7536 ;;      Params:         0       0       0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0
  7539 ;;      Totals:         0       0       0       0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:    3
  7543 ;; This function calls:
  7544 ;;		_USARTDataAvailable
  7545 ;;		_USARTReadData
  7546 ;; This function is called by:
  7547 ;;		_Check_Busy_Line
  7548 ;;		_Eco_Test
  7549 ;;		_Eco_Replay
  7550 ;;		_Send_Packet
  7551 ;;		_Receive_Packet
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text24
  7556  00230C                     __ptext24:
  7557                           	opt stack 0
  7558  00230C                     _USARTFlushBuffer:
  7559                           	opt stack 24
  7560                           
  7561                           ;incstack = 0
  7562  00230C  FFFF               	dw	65535
  7563                           
  7564                           ;usart_pic18.c: 194: while(USARTDataAvailable()>0)
  7565  00230E  D002               	goto	l5533
  7566  002310                     l5531:
  7567                           
  7568                           ;usart_pic18.c: 195: {
  7569                           ;usart_pic18.c: 196: USARTReadData();
  7570  002310  ECE3  F010         	call	_USARTReadData	;wreg free
  7571  002314                     l5533:
  7572  002314  EC7F  F010         	call	_USARTDataAvailable	;wreg free
  7573  002318  0900               	iorlw	0
  7574  00231A  B4D8               	btfsc	status,2,c
  7575  00231C  0012               	return	
  7576  00231E  FFFF               	dw	65535	; assembler added errata NOP
  7577  002320  D7F7               	goto	l5531
  7578  002322  FFFF               	dw	65535	; errata NOP
  7579  002324                     __end_of_USARTFlushBuffer:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           postinc0	equ	0xFEE
  7588                           wreg	equ	0xFE8
  7589                           postinc1	equ	0xFE6
  7590                           postdec1	equ	0xFE5
  7591                           fsr1l	equ	0xFE1
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _USARTReadData *****************
  7599 ;; Defined at:
  7600 ;;		line 100 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;		None
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  data            1   19[COMRAM] unsigned char 
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  1    wreg      unsigned char 
  7607 ;; Registers used:
  7608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7614 ;;      Params:         0       0       0       0       0       0       0
  7615 ;;      Locals:         1       0       0       0       0       0       0
  7616 ;;      Temps:          0       0       0       0       0       0       0
  7617 ;;      Totals:         1       0       0       0       0       0       0
  7618 ;;Total ram usage:        1 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; Hardware stack levels required when called:    2
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_Eco_Test
  7625 ;;		_Eco_Replay
  7626 ;;		_Send_Packet
  7627 ;;		_Receive_Packet
  7628 ;;		_USARTFlushBuffer
  7629 ;;		_USARTReadBuffer
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text25
  7634  0021C6                     __ptext25:
  7635                           	opt stack 0
  7636  0021C6                     _USARTReadData:
  7637                           	opt stack 25
  7638                           
  7639                           ;incstack = 0
  7640  0021C6  FFFF               	dw	65535
  7641                           
  7642                           ;usart_pic18.c: 102: char data;
  7643                           ;usart_pic18.c: 105: if(UQFront==-1)
  7644  0021C8  2829               	incf	_UQFront,w,c	;volatile
  7645  0021CA  A4D8               	btfss	status,2,c
  7646  0021CC  D002               	goto	l5471
  7647                           
  7648                           ;usart_pic18.c: 106: return 0;
  7649  0021CE  0E00               	movlw	0
  7650  0021D0  D014               	goto	l984
  7651  0021D2                     l5471:
  7652                           
  7653                           ;usart_pic18.c: 108: data=URBuff[UQFront];
  7654  0021D2  5029               	movf	_UQFront,w,c	;volatile
  7655  0021D4  0D01               	mullw	1
  7656  0021D6  0101               	movlb	1	; () banked
  7657  0021D8  0E00               	movlw	low _URBuff	;volatile
  7658  0021DA  24F3               	addwf	prodl,w,c
  7659  0021DC  6ED9               	movwf	fsr2l,c
  7660  0021DE  0101               	movlb	1	; () banked
  7661  0021E0  0E01               	movlw	high _URBuff	;volatile
  7662  0021E2  20F4               	addwfc	prodh,w,c
  7663  0021E4  6EDA               	movwf	fsr2h,c
  7664  0021E6  50DF               	movf	indf2,w,c
  7665  0021E8  6E49               	movwf	USARTReadData@data,c
  7666                           
  7667                           ; BSR set to: 1
  7668                           ;usart_pic18.c: 110: if(UQFront==UQEnd)
  7669  0021EA  5028               	movf	_UQEnd,w,c	;volatile
  7670  0021EC  6229               	cpfseq	_UQFront,c	;volatile
  7671  0021EE  D003               	goto	l5477
  7672                           
  7673                           ; BSR set to: 1
  7674                           ;usart_pic18.c: 111: {
  7675                           ;usart_pic18.c: 114: UQFront=UQEnd=-1;
  7676  0021F0  6828               	setf	_UQEnd,c	;volatile
  7677  0021F2  6829               	setf	_UQFront,c	;volatile
  7678                           
  7679                           ;usart_pic18.c: 115: }
  7680  0021F4  D001               	goto	l986
  7681  0021F6                     l5477:
  7682                           
  7683                           ; BSR set to: 1
  7684                           ;usart_pic18.c: 116: else
  7685                           ;usart_pic18.c: 117: {
  7686                           ;usart_pic18.c: 118: UQFront++;
  7687  0021F6  2A29               	incf	_UQFront,f,c	;volatile
  7688  0021F8                     l986:
  7689                           
  7690                           ; BSR set to: 1
  7691                           ;usart_pic18.c: 122: }
  7692                           ;usart_pic18.c: 124: return data;
  7693  0021F8  5049               	movf	USARTReadData@data,w,c
  7694  0021FA                     l984:
  7695  0021FA  0012               	return	
  7696  0021FC  FFFF               	dw	65535	; errata NOP
  7697  0021FE                     __end_of_USARTReadData:
  7698                           	opt stack 0
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postinc1	equ	0xFE6
  7708                           postdec1	equ	0xFE5
  7709                           fsr1l	equ	0xFE1
  7710                           indf2	equ	0xFDF
  7711                           postinc2	equ	0xFDE
  7712                           fsr2h	equ	0xFDA
  7713                           fsr2l	equ	0xFD9
  7714                           status	equ	0xFD8
  7715                           
  7716 ;; *************** function _USARTDataAvailable *****************
  7717 ;; Defined at:
  7718 ;;		line 127 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
  7719 ;; Parameters:    Size  Location     Type
  7720 ;;		None
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;                  1    wreg      unsigned char 
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7732 ;;      Params:         0       0       0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0
  7734 ;;      Temps:          1       0       0       0       0       0       0
  7735 ;;      Totals:         1       0       0       0       0       0       0
  7736 ;;Total ram usage:        1 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    2
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_Check_Busy_Line
  7743 ;;		_Eco_Test
  7744 ;;		_Eco_Replay
  7745 ;;		_Send_Packet
  7746 ;;		_Receive_Packet
  7747 ;;		_USARTFlushBuffer
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text26
  7752  0020FE                     __ptext26:
  7753                           	opt stack 0
  7754  0020FE                     _USARTDataAvailable:
  7755                           	opt stack 24
  7756                           
  7757                           ;incstack = 0
  7758  0020FE  FFFF               	dw	65535
  7759                           
  7760                           ;usart_pic18.c: 129: if(UQFront==-1) return 0;
  7761  002100  2829               	incf	_UQFront,w,c	;volatile
  7762  002102  A4D8               	btfss	status,2,c
  7763  002104  D002               	goto	l5445
  7764  002106  0E00               	movlw	0
  7765  002108  D01C               	goto	l991
  7766  00210A                     l5445:
  7767                           
  7768                           ;usart_pic18.c: 130: if(UQFront<UQEnd)
  7769  00210A  5029               	movf	_UQFront,w,c	;volatile
  7770  00210C  0A80               	xorlw	128
  7771  00210E  6E49               	movwf	??_USARTDataAvailable& (0+255),c
  7772  002110  5028               	movf	_UQEnd,w,c	;volatile
  7773  002112  0A80               	xorlw	128
  7774  002114  5C49               	subwf	??_USARTDataAvailable,w,c
  7775  002116  B0D8               	btfsc	status,0,c
  7776  002118  D006               	goto	l5453
  7777                           
  7778                           ;usart_pic18.c: 131: return(UQEnd-UQFront+1);
  7779  00211A  5029               	movf	_UQFront,w,c	;volatile
  7780  00211C  0800               	sublw	0
  7781  00211E  2428               	addwf	_UQEnd,w,c	;volatile
  7782  002120  6E49               	movwf	??_USARTDataAvailable& (0+255),c
  7783  002122  2849               	incf	??_USARTDataAvailable,w,c
  7784  002124  D00E               	goto	l991
  7785  002126                     l5453:
  7786                           
  7787                           ;usart_pic18.c: 132: else if(UQFront>UQEnd)
  7788  002126  5028               	movf	_UQEnd,w,c	;volatile
  7789  002128  0A80               	xorlw	128
  7790  00212A  6E49               	movwf	??_USARTDataAvailable& (0+255),c
  7791  00212C  5029               	movf	_UQFront,w,c	;volatile
  7792  00212E  0A80               	xorlw	128
  7793  002130  5C49               	subwf	??_USARTDataAvailable,w,c
  7794  002132  B0D8               	btfsc	status,0,c
  7795  002134  D005               	goto	l5461
  7796                           
  7797                           ;usart_pic18.c: 133: return (128-UQFront+UQEnd+1);
  7798  002136  5029               	movf	_UQFront,w,c	;volatile
  7799  002138  0800               	sublw	0
  7800  00213A  2428               	addwf	_UQEnd,w,c	;volatile
  7801  00213C  0F81               	addlw	129
  7802  00213E  D001               	goto	l991
  7803  002140                     l5461:
  7804                           
  7805                           ;usart_pic18.c: 134: else
  7806                           ;usart_pic18.c: 135: return 1;
  7807  002140  0E01               	movlw	1
  7808  002142                     l991:
  7809  002142  0012               	return	
  7810  002144  FFFF               	dw	65535	; errata NOP
  7811  002146                     __end_of_USARTDataAvailable:
  7812                           	opt stack 0
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postinc1	equ	0xFE6
  7822                           postdec1	equ	0xFE5
  7823                           fsr1l	equ	0xFE1
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _read_packet_from_page *****************
  7831 ;; Defined at:
  7832 ;;		line 145 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myeeprom.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  page_no         2   30[COMRAM] unsigned int 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  address         2   37[COMRAM] unsigned int 
  7837 ;;  count           1   39[COMRAM] unsigned char 
  7838 ;;  lsb             1   36[COMRAM] unsigned char 
  7839 ;;  msb             1   35[COMRAM] unsigned char 
  7840 ;;  data            1   34[COMRAM] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;		None               void
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7850 ;;      Params:         2       0       0       0       0       0       0
  7851 ;;      Locals:         6       0       0       0       0       0       0
  7852 ;;      Temps:          2       0       0       0       0       0       0
  7853 ;;      Totals:        10       0       0       0       0       0       0
  7854 ;;Total ram usage:       10 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    5
  7857 ;; This function calls:
  7858 ;;		_rom_byte_read
  7859 ;; This function is called by:
  7860 ;;		_data_to_center
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text27
  7865  001A50                     __ptext27:
  7866                           	opt stack 0
  7867  001A50                     _read_packet_from_page:
  7868                           	opt stack 24
  7869                           
  7870                           ;incstack = 0
  7871  001A50  FFFF               	dw	65535
  7872                           
  7873                           ;myeeprom.c: 147: unsigned char count = 0, data = 0;
  7874  001A52  0E00               	movlw	0
  7875  001A54  6E5D               	movwf	read_packet_from_page@count,c
  7876  001A56  0E00               	movlw	0
  7877  001A58  6E58               	movwf	read_packet_from_page@data,c
  7878                           
  7879                           ;myeeprom.c: 148: unsigned char msb = 0, lsb = 0;
  7880  001A5A  0E00               	movlw	0
  7881  001A5C  6E59               	movwf	read_packet_from_page@msb,c
  7882  001A5E  0E00               	movlw	0
  7883  001A60  6E5A               	movwf	read_packet_from_page@lsb,c
  7884                           
  7885                           ;myeeprom.c: 149: unsigned int address = 0;
  7886  001A62  0E00               	movlw	0
  7887  001A64  6E5C               	movwf	read_packet_from_page@address+1,c
  7888  001A66  0E00               	movlw	0
  7889  001A68  6E5B               	movwf	read_packet_from_page@address,c
  7890                           
  7891                           ;myeeprom.c: 151: address = page_no * 128;
  7892  001A6A  C054  F056         	movff	read_packet_from_page@page_no,??_read_packet_from_page
  7893  001A6E  C055  F057         	movff	read_packet_from_page@page_no+1,??_read_packet_from_page+1
  7894  001A72  0E07               	movlw	7
  7895  001A74                     u3745:
  7896  001A74  90D8               	bcf	status,0,c
  7897  001A76  3656               	rlcf	??_read_packet_from_page,f,c
  7898  001A78  3657               	rlcf	??_read_packet_from_page+1,f,c
  7899  001A7A  2EE8               	decfsz	wreg,f,c
  7900  001A7C  D7FB               	goto	u3745
  7901  001A7E  C056  F05B         	movff	??_read_packet_from_page,read_packet_from_page@address
  7902  001A82  C057  F05C         	movff	??_read_packet_from_page+1,read_packet_from_page@address+1
  7903                           
  7904                           ;myeeprom.c: 154: count = 0;
  7905  001A86  0E00               	movlw	0
  7906  001A88  6E5D               	movwf	read_packet_from_page@count,c
  7907  001A8A                     l6339:
  7908                           
  7909                           ;myeeprom.c: 156: {
  7910                           ;myeeprom.c: 157: PACKET[count] = rom_byte_read(address);
  7911  001A8A  505D               	movf	read_packet_from_page@count,w,c
  7912  001A8C  0D01               	mullw	1
  7913  001A8E  0100               	movlb	0	; () banked
  7914  001A90  0E80               	movlw	low _PACKET	;volatile
  7915  001A92  24F3               	addwf	prodl,w,c
  7916  001A94  6ED9               	movwf	fsr2l,c
  7917  001A96  0100               	movlb	0	; () banked
  7918  001A98  0E00               	movlw	high _PACKET	;volatile
  7919  001A9A  20F4               	addwfc	prodh,w,c
  7920  001A9C  6EDA               	movwf	fsr2h,c
  7921  001A9E  C05B  F04C         	movff	read_packet_from_page@address,rom_byte_read@address
  7922  001AA2  C05C  F04D         	movff	read_packet_from_page@address+1,rom_byte_read@address+1
  7923  001AA6  ECDD  F00E         	call	_rom_byte_read	;wreg free
  7924  001AAA  6EDF               	movwf	indf2,c
  7925                           
  7926                           ;myeeprom.c: 158: if(PACKET[count] == 0xEA)
  7927  001AAC  505D               	movf	read_packet_from_page@count,w,c
  7928  001AAE  0D01               	mullw	1
  7929  001AB0  0100               	movlb	0	; () banked
  7930  001AB2  0E80               	movlw	low _PACKET	;volatile
  7931  001AB4  24F3               	addwf	prodl,w,c
  7932  001AB6  6ED9               	movwf	fsr2l,c
  7933  001AB8  0100               	movlb	0	; () banked
  7934  001ABA  0E00               	movlw	high _PACKET	;volatile
  7935  001ABC  20F4               	addwfc	prodh,w,c
  7936  001ABE  6EDA               	movwf	fsr2h,c
  7937  001AC0  0EEA               	movlw	234
  7938  001AC2  62DF               	cpfseq	indf2,c
  7939  001AC4  D001               	goto	l6347
  7940  001AC6  D004               	goto	l326
  7941  001AC8                     l6347:
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;myeeprom.c: 162: else
  7945                           ;myeeprom.c: 163: {
  7946                           ;myeeprom.c: 164: address++;
  7947  001AC8  4A5B               	infsnz	read_packet_from_page@address,f,c
  7948  001ACA  2A5C               	incf	read_packet_from_page@address+1,f,c
  7949                           
  7950                           ;myeeprom.c: 165: count++;
  7951  001ACC  2A5D               	incf	read_packet_from_page@count,f,c
  7952  001ACE  D7DD               	goto	l6339
  7953  001AD0                     l326:
  7954                           
  7955                           ; BSR set to: 0
  7956  001AD0  0012               	return	
  7957  001AD2  FFFF               	dw	65535	; errata NOP
  7958  001AD4                     __end_of_read_packet_from_page:
  7959                           	opt stack 0
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           postinc0	equ	0xFEE
  7967                           wreg	equ	0xFE8
  7968                           postinc1	equ	0xFE6
  7969                           postdec1	equ	0xFE5
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           fsr2h	equ	0xFDA
  7974                           fsr2l	equ	0xFD9
  7975                           status	equ	0xFD8
  7976                           
  7977 ;; *************** function _rom_byte_read *****************
  7978 ;; Defined at:
  7979 ;;		line 29 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myeeprom.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  address         2   22[COMRAM] unsigned int 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  data            1   29[COMRAM] unsigned char 
  7984 ;;  lsb             1   28[COMRAM] unsigned char 
  7985 ;;  msb             1   27[COMRAM] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      unsigned char 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7995 ;;      Params:         2       0       0       0       0       0       0
  7996 ;;      Locals:         3       0       0       0       0       0       0
  7997 ;;      Temps:          3       0       0       0       0       0       0
  7998 ;;      Totals:         8       0       0       0       0       0       0
  7999 ;;Total ram usage:        8 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    4
  8002 ;; This function calls:
  8003 ;;		_IdleI2C
  8004 ;;		_ReadI2C
  8005 ;;		_WriteI2C
  8006 ;; This function is called by:
  8007 ;;		_read_packet_from_page
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text28
  8012  001DBA                     __ptext28:
  8013                           	opt stack 0
  8014  001DBA                     _rom_byte_read:
  8015                           	opt stack 24
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;incstack = 0
  8019  001DBA  FFFF               	dw	65535
  8020                           
  8021                           ;myeeprom.c: 31: unsigned char data = 0;
  8022  001DBC  0E00               	movlw	0
  8023  001DBE  6E53               	movwf	rom_byte_read@data,c
  8024                           
  8025                           ;myeeprom.c: 32: unsigned char msb, lsb;
  8026                           ;myeeprom.c: 33: msb = address >> 8;
  8027  001DC0  C04D  F04E         	movff	rom_byte_read@address+1,??_rom_byte_read
  8028  001DC4  C04E  F04F         	movff	??_rom_byte_read,??_rom_byte_read+1
  8029  001DC8  6A50               	clrf	(??_rom_byte_read+2)& (0+255),c
  8030  001DCA  504F               	movf	??_rom_byte_read+1,w,c
  8031  001DCC  6E51               	movwf	rom_byte_read@msb,c
  8032                           
  8033                           ;myeeprom.c: 34: lsb = address & 0x00FF;
  8034  001DCE  C04C  F052         	movff	rom_byte_read@address,rom_byte_read@lsb
  8035                           
  8036                           ;myeeprom.c: 36: RE1 = 1;
  8037  001DD2  8284               	bsf	3972,1,c	;volatile
  8038                           
  8039                           ;myeeprom.c: 37: IdleI2C();
  8040  001DD4  ECA8  F011         	call	_IdleI2C	;wreg free
  8041                           
  8042                           ;myeeprom.c: 38: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  8043  001DD8  80C5               	bsf	4037,0,c	;volatile
  8044  001DDA                     l272:
  8045  001DDA  B0C5               	btfsc	4037,0,c	;volatile
  8046  001DDC  D7FE               	goto	l272
  8047                           
  8048                           ;myeeprom.c: 39: WriteI2C(device & 0xFE);
  8049  001DDE  502C               	movf	_device,w,c
  8050  001DE0  0BFE               	andlw	254
  8051  001DE2  EC16  F00F         	call	_WriteI2C
  8052                           
  8053                           ;myeeprom.c: 40: IdleI2C();
  8054  001DE6  ECA8  F011         	call	_IdleI2C	;wreg free
  8055                           
  8056                           ;myeeprom.c: 41: WriteI2C(msb);
  8057  001DEA  5051               	movf	rom_byte_read@msb,w,c
  8058  001DEC  EC16  F00F         	call	_WriteI2C
  8059                           
  8060                           ;myeeprom.c: 42: IdleI2C();
  8061  001DF0  ECA8  F011         	call	_IdleI2C	;wreg free
  8062                           
  8063                           ;myeeprom.c: 43: WriteI2C(lsb);
  8064  001DF4  5052               	movf	rom_byte_read@lsb,w,c
  8065  001DF6  EC16  F00F         	call	_WriteI2C
  8066                           
  8067                           ;myeeprom.c: 44: IdleI2C();
  8068  001DFA  ECA8  F011         	call	_IdleI2C	;wreg free
  8069                           
  8070                           ;myeeprom.c: 46: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  8071  001DFE  82C5               	bsf	4037,1,c	;volatile
  8072  001E00                     l275:
  8073  001E00  B2C5               	btfsc	4037,1,c	;volatile
  8074  001E02  D7FE               	goto	l275
  8075                           
  8076                           ;myeeprom.c: 47: WriteI2C(device | 0x01);
  8077  001E04  502C               	movf	_device,w,c
  8078  001E06  0901               	iorlw	1
  8079  001E08  EC16  F00F         	call	_WriteI2C
  8080                           
  8081                           ;myeeprom.c: 48: IdleI2C();
  8082  001E0C  ECA8  F011         	call	_IdleI2C	;wreg free
  8083                           
  8084                           ;myeeprom.c: 49: data = ReadI2C();
  8085  001E10  EC17  F011         	call	_ReadI2C	;wreg free
  8086  001E14  6E53               	movwf	rom_byte_read@data,c
  8087                           
  8088                           ;myeeprom.c: 50: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  8089  001E16  8AC5               	bsf	4037,5,c	;volatile
  8090  001E18  88C5               	bsf	4037,4,c	;volatile
  8091  001E1A                     l278:
  8092  001E1A  B8C5               	btfsc	4037,4,c	;volatile
  8093  001E1C  D7FE               	goto	l278
  8094                           
  8095                           ;myeeprom.c: 51: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  8096  001E1E  84C5               	bsf	4037,2,c	;volatile
  8097  001E20                     l281:
  8098  001E20  B4C5               	btfsc	4037,2,c	;volatile
  8099  001E22  D7FE               	goto	l281
  8100                           
  8101                           ;myeeprom.c: 52: RE1 = 0;
  8102  001E24  9284               	bcf	3972,1,c	;volatile
  8103                           
  8104                           ;myeeprom.c: 53: return data;
  8105  001E26  5053               	movf	rom_byte_read@data,w,c
  8106  001E28  0012               	return	
  8107  001E2A  FFFF               	dw	65535	; errata NOP
  8108  001E2C                     __end_of_rom_byte_read:
  8109                           	opt stack 0
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           postinc0	equ	0xFEE
  8117                           wreg	equ	0xFE8
  8118                           postinc1	equ	0xFE6
  8119                           postdec1	equ	0xFE5
  8120                           fsr1l	equ	0xFE1
  8121                           indf2	equ	0xFDF
  8122                           postinc2	equ	0xFDE
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _clear_rom *****************
  8128 ;; Defined at:
  8129 ;;		line 251 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myeeprom.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  page            2   23[COMRAM] int 
  8134 ;;  word            1   25[COMRAM] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;		None               void
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8144 ;;      Params:         0       0       0       0       0       0       0
  8145 ;;      Locals:         3       0       0       0       0       0       0
  8146 ;;      Temps:          1       0       0       0       0       0       0
  8147 ;;      Totals:         4       0       0       0       0       0       0
  8148 ;;Total ram usage:        4 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    4
  8151 ;; This function calls:
  8152 ;;		_IdleI2C
  8153 ;;		_WriteI2C
  8154 ;; This function is called by:
  8155 ;;		_data_to_center
  8156 ;;		_reset_unit
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text29
  8161  001C58                     __ptext29:
  8162                           	opt stack 0
  8163  001C58                     _clear_rom:
  8164                           	opt stack 25
  8165                           
  8166                           ;incstack = 0
  8167  001C58  FFFF               	dw	65535
  8168                           
  8169                           ;myeeprom.c: 253: char word;
  8170                           ;myeeprom.c: 254: int page;
  8171                           ;myeeprom.c: 256: IdleI2C();
  8172  001C5A  ECA8  F011         	call	_IdleI2C	;wreg free
  8173                           
  8174                           ;myeeprom.c: 257: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  8175  001C5E  80C5               	bsf	4037,0,c	;volatile
  8176  001C60                     l332:
  8177  001C60  B0C5               	btfsc	4037,0,c	;volatile
  8178  001C62  D7FE               	goto	l332
  8179                           
  8180                           ;myeeprom.c: 258: WriteI2C(device & 0xFE);
  8181  001C64  502C               	movf	_device,w,c
  8182  001C66  0BFE               	andlw	254
  8183  001C68  EC16  F00F         	call	_WriteI2C
  8184                           
  8185                           ;myeeprom.c: 259: IdleI2C();
  8186  001C6C  ECA8  F011         	call	_IdleI2C	;wreg free
  8187                           
  8188                           ;myeeprom.c: 260: WriteI2C(0x00);
  8189  001C70  0E00               	movlw	0
  8190  001C72  EC16  F00F         	call	_WriteI2C
  8191                           
  8192                           ;myeeprom.c: 261: IdleI2C();
  8193  001C76  ECA8  F011         	call	_IdleI2C	;wreg free
  8194                           
  8195                           ;myeeprom.c: 262: WriteI2C(0x00);
  8196  001C7A  0E00               	movlw	0
  8197  001C7C  EC16  F00F         	call	_WriteI2C
  8198                           
  8199                           ;myeeprom.c: 263: IdleI2C();
  8200  001C80  ECA8  F011         	call	_IdleI2C	;wreg free
  8201                           
  8202                           ;myeeprom.c: 265: for(page = 0; page < 512; page++)
  8203  001C84  0E00               	movlw	0
  8204  001C86  6E4E               	movwf	clear_rom@page+1,c
  8205  001C88  0E00               	movlw	0
  8206  001C8A  6E4D               	movwf	clear_rom@page,c
  8207  001C8C  504E               	movf	clear_rom@page+1,w,c
  8208  001C8E  0A80               	xorlw	128
  8209  001C90  0F7E               	addlw	-130
  8210  001C92  0E00               	movlw	0
  8211  001C94  B4D8               	btfsc	status,2,c
  8212  001C96  5C4D               	subwf	clear_rom@page,w,c
  8213  001C98  B0D8               	btfsc	status,0,c
  8214  001C9A  D00F               	goto	l336
  8215                           
  8216                           ;myeeprom.c: 266: {
  8217                           ;myeeprom.c: 267: for(word = 0; word < 128; word++)
  8218  001C9C  0E00               	movlw	0
  8219  001C9E  6E4F               	movwf	clear_rom@word,c
  8220  001CA0  D006               	goto	L8
  8221  001CA2                     l6367:
  8222                           
  8223                           ;myeeprom.c: 268: {
  8224                           ;myeeprom.c: 269: WriteI2C(0xFF);
  8225  001CA2  0EFF               	movlw	255
  8226  001CA4  EC16  F00F         	call	_WriteI2C
  8227                           
  8228                           ;myeeprom.c: 270: IdleI2C();
  8229  001CA8  ECA8  F011         	call	_IdleI2C	;wreg free
  8230  001CAC  2A4F               	incf	clear_rom@word,f,c
  8231  001CAE                     L8:
  8232  001CAE  0E7F               	movlw	127
  8233  001CB0  644F               	cpfsgt	clear_rom@word,c
  8234  001CB2  D7F7               	goto	l6367
  8235  001CB4  4A4D               	infsnz	clear_rom@page,f,c
  8236  001CB6  2A4E               	incf	clear_rom@page+1,f,c
  8237  001CB8  D7E9               	goto	L7
  8238  001CBA                     l336:
  8239                           
  8240                           ;myeeprom.c: 271: }
  8241                           ;myeeprom.c: 272: }
  8242                           ;myeeprom.c: 274: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  8243  001CBA  84C5               	bsf	4037,2,c	;volatile
  8244  001CBC                     l339:
  8245  001CBC  B4C5               	btfsc	4037,2,c	;volatile
  8246  001CBE  D7FE               	goto	l339
  8247                           
  8248                           ;myeeprom.c: 275: _delay(100000);
  8249  001CC0  0E62               	movlw	98
  8250  001CC2  6E4C               	movwf	??_clear_rom& (0+255),c
  8251  001CC4  0E76               	movlw	118
  8252  001CC6                     u5207:
  8253  001CC6  2EE8               	decfsz	wreg,f,c
  8254  001CC8  D7FE               	goto	u5207
  8255  001CCA  2E4C               	decfsz	??_clear_rom& (0+255),f,c
  8256  001CCC  D7FC               	goto	u5207
  8257  001CCE  D000               	nop2	
  8258                           
  8259                           ;myeeprom.c: 276: return;
  8260  001CD0  0012               	return	
  8261  001CD2  FFFF               	dw	65535	; errata NOP
  8262  001CD4                     __end_of_clear_rom:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postinc1	equ	0xFE6
  8273                           postdec1	equ	0xFE5
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _Clear_Packet *****************
  8282 ;; Defined at:
  8283 ;;		line 155 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\packet.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  i               1   19[COMRAM] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8297 ;;      Params:         0       0       0       0       0       0       0
  8298 ;;      Locals:         1       0       0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0
  8300 ;;      Totals:         1       0       0       0       0       0       0
  8301 ;;Total ram usage:        1 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    2
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_Creat_RTC_Packet
  8308 ;;		_getting_data
  8309 ;;		_rtc_setting
  8310 ;;		_data_to_center
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           	psect	text30
  8315  0021FE                     __ptext30:
  8316                           	opt stack 0
  8317  0021FE                     _Clear_Packet:
  8318                           	opt stack 26
  8319                           
  8320                           ;incstack = 0
  8321  0021FE  FFFF               	dw	65535
  8322                           
  8323                           ;packet.c: 157: char i = 0;
  8324  002200  0E00               	movlw	0
  8325  002202  6E49               	movwf	Clear_Packet@i,c
  8326                           
  8327                           ;packet.c: 158: for(i = 0; i < 128; i++)
  8328  002204  0E00               	movlw	0
  8329  002206  6E49               	movwf	Clear_Packet@i,c
  8330  002208  D00D               	goto	L9
  8331  00220A                     l5995:
  8332                           
  8333                           ;packet.c: 159: PACKET[i] = 0xFF;
  8334  00220A  5049               	movf	Clear_Packet@i,w,c
  8335  00220C  0D01               	mullw	1
  8336  00220E  0100               	movlb	0	; () banked
  8337  002210  0E80               	movlw	low _PACKET	;volatile
  8338  002212  24F3               	addwf	prodl,w,c
  8339  002214  6ED9               	movwf	fsr2l,c
  8340  002216  0100               	movlb	0	; () banked
  8341  002218  0E00               	movlw	high _PACKET	;volatile
  8342  00221A  20F4               	addwfc	prodh,w,c
  8343  00221C  6EDA               	movwf	fsr2h,c
  8344  00221E  0EFF               	movlw	255
  8345  002220  6EDF               	movwf	indf2,c
  8346                           
  8347                           ; BSR set to: 0
  8348  002222  2A49               	incf	Clear_Packet@i,f,c
  8349  002224                     L9:
  8350                           
  8351                           ; BSR set to: 0
  8352  002224  0E7F               	movlw	127
  8353  002226  6449               	cpfsgt	Clear_Packet@i,c
  8354  002228  D7F0               	goto	l5995
  8355                           
  8356                           ; BSR set to: 0
  8357  00222A  0012               	return	
  8358  00222C  FFFF               	dw	65535	; errata NOP
  8359  00222E                     __end_of_Clear_Packet:
  8360                           	opt stack 0
  8361                           tblptru	equ	0xFF8
  8362                           tblptrh	equ	0xFF7
  8363                           tblptrl	equ	0xFF6
  8364                           tablat	equ	0xFF5
  8365                           prodh	equ	0xFF4
  8366                           prodl	equ	0xFF3
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           postinc1	equ	0xFE6
  8370                           postdec1	equ	0xFE5
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function _beep *****************
  8379 ;; Defined at:
  8380 ;;		line 183 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\rtu.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  del             2   22[COMRAM] unsigned int 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;		None
  8385 ;; Return value:  Size  Location     Type
  8386 ;;		None               void
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0, cstack
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8394 ;;      Params:         2       0       0       0       0       0       0
  8395 ;;      Locals:         0       0       0       0       0       0       0
  8396 ;;      Temps:          0       0       0       0       0       0       0
  8397 ;;      Totals:         2       0       0       0       0       0       0
  8398 ;;Total ram usage:        2 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    3
  8401 ;; This function calls:
  8402 ;;		_MyDelay
  8403 ;; This function is called by:
  8404 ;;		_main
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           	psect	text31
  8409  002324                     __ptext31:
  8410                           	opt stack 0
  8411  002324                     _beep:
  8412                           	opt stack 27
  8413                           
  8414                           ;incstack = 0
  8415  002324  FFFF               	dw	65535
  8416                           
  8417                           ;rtu.c: 185: RD7 = 1;
  8418  002326  8E83               	bsf	3971,7,c	;volatile
  8419                           
  8420                           ;rtu.c: 186: MyDelay(del);
  8421  002328  C04C  F049         	movff	beep@del,MyDelay@ms
  8422  00232C  C04D  F04A         	movff	beep@del+1,MyDelay@ms+1
  8423  002330  EC53  F011         	call	_MyDelay	;wreg free
  8424                           
  8425                           ;rtu.c: 187: RD7 = 0;
  8426  002334  9E83               	bcf	3971,7,c	;volatile
  8427  002336  0012               	return	
  8428  002338  FFFF               	dw	65535	; errata NOP
  8429  00233A                     __end_of_beep:
  8430                           	opt stack 0
  8431                           tblptru	equ	0xFF8
  8432                           tblptrh	equ	0xFF7
  8433                           tblptrl	equ	0xFF6
  8434                           tablat	equ	0xFF5
  8435                           prodh	equ	0xFF4
  8436                           prodl	equ	0xFF3
  8437                           postinc0	equ	0xFEE
  8438                           wreg	equ	0xFE8
  8439                           postinc1	equ	0xFE6
  8440                           postdec1	equ	0xFE5
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           fsr2h	equ	0xFDA
  8445                           fsr2l	equ	0xFD9
  8446                           status	equ	0xFD8
  8447                           
  8448 ;; *************** function _RTUInit *****************
  8449 ;; Defined at:
  8450 ;;		line 15 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\rtu.c"
  8451 ;; Parameters:    Size  Location     Type
  8452 ;;		None
  8453 ;; Auto vars:     Size  Location     Type
  8454 ;;  adr             2   33[COMRAM] unsigned int 
  8455 ;;  low             1   32[COMRAM] unsigned char 
  8456 ;;  high            1   31[COMRAM] unsigned char 
  8457 ;;  count           1    0        unsigned char 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;		None               void
  8460 ;; Registers used:
  8461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8467 ;;      Params:         0       0       0       0       0       0       0
  8468 ;;      Locals:         4       0       0       0       0       0       0
  8469 ;;      Temps:          0       0       0       0       0       0       0
  8470 ;;      Totals:         4       0       0       0       0       0       0
  8471 ;;Total ram usage:        4 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    5
  8474 ;; This function calls:
  8475 ;;		_LCDByte
  8476 ;;		_LCDInit
  8477 ;;		_MyDelay
  8478 ;;		_OpenI2C
  8479 ;;		_Read_b_eep
  8480 ;;		_USARTInit
  8481 ;;		_Write_b_eep
  8482 ;;		_ds1307_get_date
  8483 ;;		_ds1307_get_time
  8484 ;;		_ds1307_init
  8485 ;;		_ds1307_set_date_time
  8486 ;; This function is called by:
  8487 ;;		_main
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text32
  8492  000844                     __ptext32:
  8493                           	opt stack 0
  8494  000844                     _RTUInit:
  8495                           	opt stack 25
  8496                           
  8497                           ;incstack = 0
  8498  000844  FFFF               	dw	65535
  8499                           
  8500                           ;rtu.c: 17: unsigned char high, low, count;
  8501                           ;rtu.c: 18: unsigned int adr;
  8502                           ;rtu.c: 20: TRISA = 0x1F;
  8503  000846  0E1F               	movlw	31
  8504  000848  6E92               	movwf	3986,c	;volatile
  8505                           
  8506                           ;rtu.c: 21: TRISB = 0x01;
  8507  00084A  0E01               	movlw	1
  8508  00084C  6E93               	movwf	3987,c	;volatile
  8509                           
  8510                           ;rtu.c: 22: TRISC = 0xA0;
  8511  00084E  0EA0               	movlw	160
  8512  000850  6E94               	movwf	3988,c	;volatile
  8513                           
  8514                           ;rtu.c: 23: TRISD = 0x33;
  8515  000852  0E33               	movlw	51
  8516  000854  6E95               	movwf	3989,c	;volatile
  8517                           
  8518                           ;rtu.c: 24: TRISE = 0x00;
  8519  000856  0E00               	movlw	0
  8520  000858  6E96               	movwf	3990,c	;volatile
  8521                           
  8522                           ;rtu.c: 26: RE0 = 0;
  8523  00085A  9084               	bcf	3972,0,c	;volatile
  8524                           
  8525                           ;rtu.c: 27: RE1 = 0;
  8526  00085C  9284               	bcf	3972,1,c	;volatile
  8527                           
  8528                           ;rtu.c: 28: RE2 = 0;
  8529  00085E  9484               	bcf	3972,2,c	;volatile
  8530                           
  8531                           ;rtu.c: 29: RC0 = 0;
  8532  000860  9082               	bcf	3970,0,c	;volatile
  8533                           
  8534                           ;rtu.c: 30: RC1 = 0;
  8535  000862  9282               	bcf	3970,1,c	;volatile
  8536                           
  8537                           ;rtu.c: 32: PORTB = 0x00;
  8538  000864  0E00               	movlw	0
  8539  000866  6E81               	movwf	3969,c	;volatile
  8540                           
  8541                           ;rtu.c: 35: RC2 = 0;
  8542  000868  9482               	bcf	3970,2,c	;volatile
  8543                           
  8544                           ;rtu.c: 38: for(c = 0; c < 5; c++)
  8545  00086A  0E00               	movlw	0
  8546  00086C  6E2A               	movwf	_c,c
  8547  00086E  D00F               	goto	L10
  8548  000870                     l672:
  8549                           
  8550                           ;rtu.c: 39: {
  8551                           ;rtu.c: 40: RE0 = 1;
  8552  000870  8084               	bsf	3972,0,c	;volatile
  8553                           
  8554                           ;rtu.c: 41: MyDelay(100);
  8555  000872  0E00               	movlw	0
  8556  000874  6E4A               	movwf	MyDelay@ms+1,c
  8557  000876  0E64               	movlw	100
  8558  000878  6E49               	movwf	MyDelay@ms,c
  8559  00087A  EC53  F011         	call	_MyDelay	;wreg free
  8560                           
  8561                           ;rtu.c: 42: RE0 = 0;
  8562  00087E  9084               	bcf	3972,0,c	;volatile
  8563                           
  8564                           ;rtu.c: 43: MyDelay(100);
  8565  000880  0E00               	movlw	0
  8566  000882  6E4A               	movwf	MyDelay@ms+1,c
  8567  000884  0E64               	movlw	100
  8568  000886  6E49               	movwf	MyDelay@ms,c
  8569  000888  EC53  F011         	call	_MyDelay	;wreg free
  8570  00088C  2A2A               	incf	_c,f,c
  8571  00088E                     L10:
  8572  00088E  0E04               	movlw	4
  8573  000890  642A               	cpfsgt	_c,c
  8574  000892  D7EE               	goto	l672
  8575                           
  8576                           ;rtu.c: 44: }
  8577                           ;rtu.c: 47: Source_ID = 'z';
  8578  000894  0E7A               	movlw	122
  8579  000896  6E27               	movwf	_Source_ID,c
  8580                           
  8581                           ;rtu.c: 48: Destination_ID = 'x';
  8582  000898  0E78               	movlw	120
  8583  00089A  6E23               	movwf	_Destination_ID,c
  8584                           
  8585                           ;rtu.c: 49: Master_ID = 'm';
  8586  00089C  0E6D               	movlw	109
  8587  00089E  6E26               	movwf	_Master_ID,c
  8588                           
  8589                           ;rtu.c: 50: Destination_ID1 = 'x';
  8590  0008A0  0E78               	movlw	120
  8591  0008A2  6E24               	movwf	_Destination_ID1,c
  8592                           
  8593                           ;rtu.c: 51: Destination_ID2 = 'y';
  8594  0008A4  0E79               	movlw	121
  8595  0008A6  6E25               	movwf	_Destination_ID2,c
  8596                           
  8597                           ;rtu.c: 54: seconds = 0;
  8598  0008A8  0E00               	movlw	0
  8599  0008AA  6E34               	movwf	_seconds,c
  8600                           
  8601                           ;rtu.c: 55: sec_flag = 0;
  8602  0008AC  0E00               	movlw	0
  8603  0008AE  6E33               	movwf	_sec_flag,c
  8604                           
  8605                           ;rtu.c: 56: min_flag = 0;
  8606  0008B0  0E00               	movlw	0
  8607  0008B2  6E30               	movwf	_min_flag,c
  8608                           
  8609                           ;rtu.c: 59: device = 0xA0;
  8610  0008B4  0EA0               	movlw	160
  8611  0008B6  6E2C               	movwf	_device,c
  8612                           
  8613                           ;rtu.c: 62: high = Read_b_eep(0x00);
  8614  0008B8  0E00               	movlw	0
  8615  0008BA  6E4A               	movwf	Read_b_eep@badd+1,c
  8616  0008BC  0E00               	movlw	0
  8617  0008BE  6E49               	movwf	Read_b_eep@badd,c
  8618  0008C0  EC9D  F011         	call	_Read_b_eep	;wreg free
  8619  0008C4  6E55               	movwf	RTUInit@high,c
  8620                           
  8621                           ;rtu.c: 63: _delay(50);
  8622  0008C6  0E0A               	movlw	10
  8623  0008C8                     u5217:
  8624  0008C8  F000               	nop	
  8625  0008CA  2EE8               	decfsz	wreg,f,c
  8626  0008CC  D7FD               	goto	u5217
  8627                           
  8628                           ;rtu.c: 64: low = Read_b_eep(0x01);
  8629  0008CE  0E00               	movlw	0
  8630  0008D0  6E4A               	movwf	Read_b_eep@badd+1,c
  8631  0008D2  0E01               	movlw	1
  8632  0008D4  6E49               	movwf	Read_b_eep@badd,c
  8633  0008D6  EC9D  F011         	call	_Read_b_eep	;wreg free
  8634  0008DA  6E56               	movwf	RTUInit@low,c
  8635                           
  8636                           ;rtu.c: 65: _delay(50);
  8637  0008DC  0E0A               	movlw	10
  8638  0008DE                     u5227:
  8639  0008DE  F000               	nop	
  8640  0008E0  2EE8               	decfsz	wreg,f,c
  8641  0008E2  D7FD               	goto	u5227
  8642                           
  8643                           ;rtu.c: 67: adr = 0x0000;
  8644  0008E4  0E00               	movlw	0
  8645  0008E6  6E58               	movwf	RTUInit@adr+1,c
  8646  0008E8  0E00               	movlw	0
  8647  0008EA  6E57               	movwf	RTUInit@adr,c
  8648                           
  8649                           ;rtu.c: 68: adr = adr + high;
  8650  0008EC  5055               	movf	RTUInit@high,w,c
  8651  0008EE  2457               	addwf	RTUInit@adr,w,c
  8652  0008F0  6E57               	movwf	RTUInit@adr,c
  8653  0008F2  0E00               	movlw	0
  8654  0008F4  2058               	addwfc	RTUInit@adr+1,w,c
  8655  0008F6  6E58               	movwf	RTUInit@adr+1,c
  8656                           
  8657                           ;rtu.c: 69: adr = adr << 8;
  8658  0008F8  5057               	movf	RTUInit@adr,w,c
  8659  0008FA  6E58               	movwf	RTUInit@adr+1,c
  8660  0008FC  6A57               	clrf	RTUInit@adr,c
  8661                           
  8662                           ;rtu.c: 70: adr = adr + low;
  8663  0008FE  5056               	movf	RTUInit@low,w,c
  8664  000900  2457               	addwf	RTUInit@adr,w,c
  8665  000902  6E57               	movwf	RTUInit@adr,c
  8666  000904  0E00               	movlw	0
  8667  000906  2058               	addwfc	RTUInit@adr+1,w,c
  8668  000908  6E58               	movwf	RTUInit@adr+1,c
  8669                           
  8670                           ;rtu.c: 71: if(adr > 4)
  8671  00090A  0E05               	movlw	5
  8672  00090C  5C57               	subwf	RTUInit@adr,w,c
  8673  00090E  0E00               	movlw	0
  8674  000910  5858               	subwfb	RTUInit@adr+1,w,c
  8675  000912  A0D8               	btfss	status,0,c
  8676  000914  D004               	goto	l6695
  8677                           
  8678                           ;rtu.c: 72: adr = 0;
  8679  000916  0E00               	movlw	0
  8680  000918  6E58               	movwf	RTUInit@adr+1,c
  8681  00091A  0E00               	movlw	0
  8682  00091C  6E57               	movwf	RTUInit@adr,c
  8683  00091E                     l6695:
  8684                           
  8685                           ;rtu.c: 73: Write_Page1 = adr;
  8686  00091E  C057  F01B         	movff	RTUInit@adr,_Write_Page1
  8687  000922  C058  F01C         	movff	RTUInit@adr+1,_Write_Page1+1
  8688                           
  8689                           ;rtu.c: 76: high = Read_b_eep(0x02);
  8690  000926  0E00               	movlw	0
  8691  000928  6E4A               	movwf	Read_b_eep@badd+1,c
  8692  00092A  0E02               	movlw	2
  8693  00092C  6E49               	movwf	Read_b_eep@badd,c
  8694  00092E  EC9D  F011         	call	_Read_b_eep	;wreg free
  8695  000932  6E55               	movwf	RTUInit@high,c
  8696                           
  8697                           ;rtu.c: 77: _delay(50);
  8698  000934  0E0A               	movlw	10
  8699  000936                     u5237:
  8700  000936  F000               	nop	
  8701  000938  2EE8               	decfsz	wreg,f,c
  8702  00093A  D7FD               	goto	u5237
  8703                           
  8704                           ;rtu.c: 78: low = Read_b_eep(0x03);
  8705  00093C  0E00               	movlw	0
  8706  00093E  6E4A               	movwf	Read_b_eep@badd+1,c
  8707  000940  0E03               	movlw	3
  8708  000942  6E49               	movwf	Read_b_eep@badd,c
  8709  000944  EC9D  F011         	call	_Read_b_eep	;wreg free
  8710  000948  6E56               	movwf	RTUInit@low,c
  8711                           
  8712                           ;rtu.c: 79: _delay(50);
  8713  00094A  0E0A               	movlw	10
  8714  00094C                     u5247:
  8715  00094C  F000               	nop	
  8716  00094E  2EE8               	decfsz	wreg,f,c
  8717  000950  D7FD               	goto	u5247
  8718                           
  8719                           ;rtu.c: 81: adr = 0x0000;
  8720  000952  0E00               	movlw	0
  8721  000954  6E58               	movwf	RTUInit@adr+1,c
  8722  000956  0E00               	movlw	0
  8723  000958  6E57               	movwf	RTUInit@adr,c
  8724                           
  8725                           ;rtu.c: 82: adr = adr + high;
  8726  00095A  5055               	movf	RTUInit@high,w,c
  8727  00095C  2457               	addwf	RTUInit@adr,w,c
  8728  00095E  6E57               	movwf	RTUInit@adr,c
  8729  000960  0E00               	movlw	0
  8730  000962  2058               	addwfc	RTUInit@adr+1,w,c
  8731  000964  6E58               	movwf	RTUInit@adr+1,c
  8732                           
  8733                           ;rtu.c: 83: adr = adr << 8;
  8734  000966  5057               	movf	RTUInit@adr,w,c
  8735  000968  6E58               	movwf	RTUInit@adr+1,c
  8736  00096A  6A57               	clrf	RTUInit@adr,c
  8737                           
  8738                           ;rtu.c: 84: adr = adr + low;
  8739  00096C  5056               	movf	RTUInit@low,w,c
  8740  00096E  2457               	addwf	RTUInit@adr,w,c
  8741  000970  6E57               	movwf	RTUInit@adr,c
  8742  000972  0E00               	movlw	0
  8743  000974  2058               	addwfc	RTUInit@adr+1,w,c
  8744  000976  6E58               	movwf	RTUInit@adr+1,c
  8745                           
  8746                           ;rtu.c: 85: if(adr > 4)
  8747  000978  0E05               	movlw	5
  8748  00097A  5C57               	subwf	RTUInit@adr,w,c
  8749  00097C  0E00               	movlw	0
  8750  00097E  5858               	subwfb	RTUInit@adr+1,w,c
  8751  000980  A0D8               	btfss	status,0,c
  8752  000982  D004               	goto	l6711
  8753                           
  8754                           ;rtu.c: 86: adr = 0;
  8755  000984  0E00               	movlw	0
  8756  000986  6E58               	movwf	RTUInit@adr+1,c
  8757  000988  0E00               	movlw	0
  8758  00098A  6E57               	movwf	RTUInit@adr,c
  8759  00098C                     l6711:
  8760                           
  8761                           ;rtu.c: 87: Write_Page2 = adr;
  8762  00098C  C057  F01D         	movff	RTUInit@adr,_Write_Page2
  8763  000990  C058  F01E         	movff	RTUInit@adr+1,_Write_Page2+1
  8764                           
  8765                           ;rtu.c: 91: Read_Page1 = 0;
  8766  000994  0E00               	movlw	0
  8767  000996  6E14               	movwf	_Read_Page1+1,c
  8768  000998  0E00               	movlw	0
  8769  00099A  6E13               	movwf	_Read_Page1,c
  8770                           
  8771                           ;rtu.c: 92: Read_Page2 = 0;
  8772  00099C  0E00               	movlw	0
  8773  00099E  6E16               	movwf	_Read_Page2+1,c
  8774  0009A0  0E00               	movlw	0
  8775  0009A2  6E15               	movwf	_Read_Page2,c
  8776                           
  8777                           ;rtu.c: 95: OpenI2C(0b00001000,0b10000000);
  8778  0009A4  0E80               	movlw	128
  8779  0009A6  6E49               	movwf	OpenI2C@slew,c
  8780  0009A8  0E08               	movlw	8
  8781  0009AA  EC66  F011         	call	_OpenI2C
  8782                           
  8783                           ;rtu.c: 96: SSPADD = 0x19;
  8784  0009AE  0E19               	movlw	25
  8785  0009B0  6EC8               	movwf	4040,c	;volatile
  8786                           
  8787                           ;rtu.c: 99: ds1307_init();
  8788  0009B2  ECF8  F00A         	call	_ds1307_init	;wreg free
  8789                           
  8790                           ;rtu.c: 101: if(Read_b_eep(0x04) != 0)
  8791  0009B6  0E00               	movlw	0
  8792  0009B8  6E4A               	movwf	Read_b_eep@badd+1,c
  8793  0009BA  0E04               	movlw	4
  8794  0009BC  6E49               	movwf	Read_b_eep@badd,c
  8795  0009BE  EC9D  F011         	call	_Read_b_eep	;wreg free
  8796  0009C2  0900               	iorlw	0
  8797  0009C4  B4D8               	btfsc	status,2,c
  8798  0009C6  D022               	goto	l6729
  8799                           
  8800                           ;rtu.c: 102: {
  8801                           ;rtu.c: 103: day = 1;
  8802  0009C8  0E01               	movlw	1
  8803  0009CA  6E2B               	movwf	_day,c
  8804                           
  8805                           ;rtu.c: 104: ` month = 1;
  8806  0009CC  0E01               	movlw	1
  8807  0009CE  6E31               	movwf	_month,c
  8808                           
  8809                           ;rtu.c: 105: year = 15;
  8810  0009D0  0E0F               	movlw	15
  8811  0009D2  6E35               	movwf	_year,c
  8812                           
  8813                           ;rtu.c: 106: dow = 2;
  8814  0009D4  0E02               	movlw	2
  8815  0009D6  6E2D               	movwf	_dow,c
  8816                           
  8817                           ;rtu.c: 107: hr = 1;
  8818  0009D8  0E01               	movlw	1
  8819  0009DA  6E2E               	movwf	_hr,c
  8820                           
  8821                           ;rtu.c: 108: min = 30;
  8822  0009DC  0E1E               	movlw	30
  8823  0009DE  6E2F               	movwf	_min,c
  8824                           
  8825                           ;rtu.c: 109: sec = 25;
  8826  0009E0  0E19               	movlw	25
  8827  0009E2  6E32               	movwf	_sec,c
  8828                           
  8829                           ;rtu.c: 110: ds1307_set_date_time();
  8830  0009E4  EC9B  F00A         	call	_ds1307_set_date_time	;wreg free
  8831                           
  8832                           ;rtu.c: 111: MyDelay(100);
  8833  0009E8  0E00               	movlw	0
  8834  0009EA  6E4A               	movwf	MyDelay@ms+1,c
  8835  0009EC  0E64               	movlw	100
  8836  0009EE  6E49               	movwf	MyDelay@ms,c
  8837  0009F0  EC53  F011         	call	_MyDelay	;wreg free
  8838                           
  8839                           ;rtu.c: 112: Write_b_eep(0x04,0);
  8840  0009F4  0E00               	movlw	0
  8841  0009F6  6E4A               	movwf	Write_b_eep@badd+1,c
  8842  0009F8  0E04               	movlw	4
  8843  0009FA  6E49               	movwf	Write_b_eep@badd,c
  8844  0009FC  0E00               	movlw	0
  8845  0009FE  6E4B               	movwf	Write_b_eep@bdat,c
  8846  000A00  ECC5  F010         	call	_Write_b_eep	;wreg free
  8847                           
  8848                           ;rtu.c: 113: _delay(50);
  8849  000A04  0E0A               	movlw	10
  8850  000A06                     u5257:
  8851  000A06  F000               	nop	
  8852  000A08  2EE8               	decfsz	wreg,f,c
  8853  000A0A  D7FD               	goto	u5257
  8854  000A0C                     l6729:
  8855                           
  8856                           ;rtu.c: 114: }
  8857                           ;rtu.c: 117: ds1307_get_date();
  8858  000A0C  EC4B  F00C         	call	_ds1307_get_date	;wreg free
  8859                           
  8860                           ;rtu.c: 118: MyDelay(100);
  8861  000A10  0E00               	movlw	0
  8862  000A12  6E4A               	movwf	MyDelay@ms+1,c
  8863  000A14  0E64               	movlw	100
  8864  000A16  6E49               	movwf	MyDelay@ms,c
  8865  000A18  EC53  F011         	call	_MyDelay	;wreg free
  8866                           
  8867                           ;rtu.c: 120: ds1307_get_time();
  8868  000A1C  ECED  F00D         	call	_ds1307_get_time	;wreg free
  8869                           
  8870                           ;rtu.c: 121: MyDelay(100);
  8871  000A20  0E00               	movlw	0
  8872  000A22  6E4A               	movwf	MyDelay@ms+1,c
  8873  000A24  0E64               	movlw	100
  8874  000A26  6E49               	movwf	MyDelay@ms,c
  8875  000A28  EC53  F011         	call	_MyDelay	;wreg free
  8876                           
  8877                           ;rtu.c: 125: RB1 = 1;
  8878  000A2C  8281               	bsf	3969,1,c	;volatile
  8879                           
  8880                           ;rtu.c: 126: LCDInit(0B00000000);
  8881  000A2E  0E00               	movlw	0
  8882  000A30  EC6A  F00D         	call	_LCDInit
  8883                           
  8884                           ;rtu.c: 128: (LCDByte(0b00000001,0));
  8885  000A34  0E00               	movlw	0
  8886  000A36  6E4C               	movwf	LCDByte@isdata,c
  8887  000A38  0E01               	movlw	1
  8888  000A3A  ECAF  F00F         	call	_LCDByte
  8889                           
  8890                           ;rtu.c: 131: USARTInit(9600);
  8891  000A3E  0E25               	movlw	37
  8892  000A40  6E4A               	movwf	USARTInit@baud_rate+1,c
  8893  000A42  0E80               	movlw	128
  8894  000A44  6E49               	movwf	USARTInit@baud_rate,c
  8895  000A46  ECAC  F00D         	call	_USARTInit	;wreg free
  8896                           
  8897                           ;rtu.c: 134: INTEDG0 = 1;
  8898  000A4A  8CF1               	bsf	intcon2,6,c	;volatile
  8899                           
  8900                           ;rtu.c: 135: INT0IE = 1;
  8901  000A4C  88F2               	bsf	intcon,4,c	;volatile
  8902                           
  8903                           ;rtu.c: 136: (INTCONbits.GIE = 1);
  8904  000A4E  8EF2               	bsf	intcon,7,c	;volatile
  8905  000A50  0012               	return	
  8906  000A52  FFFF               	dw	65535	; errata NOP
  8907  000A54                     __end_of_RTUInit:
  8908                           	opt stack 0
  8909                           tblptru	equ	0xFF8
  8910                           tblptrh	equ	0xFF7
  8911                           tblptrl	equ	0xFF6
  8912                           tablat	equ	0xFF5
  8913                           prodh	equ	0xFF4
  8914                           prodl	equ	0xFF3
  8915                           intcon	equ	0xFF2
  8916                           intcon2	equ	0xFF1
  8917                           postinc0	equ	0xFEE
  8918                           wreg	equ	0xFE8
  8919                           postinc1	equ	0xFE6
  8920                           postdec1	equ	0xFE5
  8921                           fsr1l	equ	0xFE1
  8922                           indf2	equ	0xFDF
  8923                           postinc2	equ	0xFDE
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function _ds1307_set_date_time *****************
  8929 ;; Defined at:
  8930 ;;		line 45 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;		None               void
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8944 ;;      Params:         0       0       0       0       0       0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0
  8947 ;;      Totals:         0       0       0       0       0       0       0
  8948 ;;Total ram usage:        0 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    4
  8951 ;; This function calls:
  8952 ;;		_IdleI2C
  8953 ;;		_WriteI2C
  8954 ;;		_bin2bcd
  8955 ;; This function is called by:
  8956 ;;		_RTUInit
  8957 ;;		_rtc_setting
  8958 ;;		_reset_unit
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text33
  8963  001536                     __ptext33:
  8964                           	opt stack 0
  8965  001536                     _ds1307_set_date_time:
  8966                           	opt stack 25
  8967                           
  8968                           ;incstack = 0
  8969  001536  FFFF               	dw	65535
  8970                           
  8971                           ;myrtc.C: 47: sec &= 0x7F;
  8972  001538  9E32               	bcf	_sec,7,c
  8973                           
  8974                           ;myrtc.C: 48: hr &= 0x3F;
  8975  00153A  0E3F               	movlw	63
  8976  00153C  162E               	andwf	_hr,f,c
  8977                           
  8978                           ;myrtc.C: 50: sec = bin2bcd(sec);
  8979  00153E  5032               	movf	_sec,w,c
  8980  001540  EC2D  F011         	call	_bin2bcd
  8981  001544  6E32               	movwf	_sec,c
  8982                           
  8983                           ;myrtc.C: 51: min = bin2bcd(min);
  8984  001546  502F               	movf	_min,w,c
  8985  001548  EC2D  F011         	call	_bin2bcd
  8986  00154C  6E2F               	movwf	_min,c
  8987                           
  8988                           ;myrtc.C: 52: hr = bin2bcd(hr);
  8989  00154E  502E               	movf	_hr,w,c
  8990  001550  EC2D  F011         	call	_bin2bcd
  8991  001554  6E2E               	movwf	_hr,c
  8992                           
  8993                           ;myrtc.C: 53: dow = bin2bcd(dow);
  8994  001556  502D               	movf	_dow,w,c
  8995  001558  EC2D  F011         	call	_bin2bcd
  8996  00155C  6E2D               	movwf	_dow,c
  8997                           
  8998                           ;myrtc.C: 54: day = bin2bcd(day);
  8999  00155E  502B               	movf	_day,w,c
  9000  001560  EC2D  F011         	call	_bin2bcd
  9001  001564  6E2B               	movwf	_day,c
  9002                           
  9003                           ;myrtc.C: 55: month = bin2bcd(month);
  9004  001566  5031               	movf	_month,w,c
  9005  001568  EC2D  F011         	call	_bin2bcd
  9006  00156C  6E31               	movwf	_month,c
  9007                           
  9008                           ;myrtc.C: 56: year = bin2bcd(year);
  9009  00156E  5035               	movf	_year,w,c
  9010  001570  EC2D  F011         	call	_bin2bcd
  9011  001574  6E35               	movwf	_year,c
  9012                           
  9013                           ;myrtc.C: 58: IdleI2C();
  9014  001576  ECA8  F011         	call	_IdleI2C	;wreg free
  9015                           
  9016                           ;myrtc.C: 59: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  9017  00157A  80C5               	bsf	4037,0,c	;volatile
  9018  00157C                     l397:
  9019  00157C  B0C5               	btfsc	4037,0,c	;volatile
  9020  00157E  D7FE               	goto	l397
  9021                           
  9022                           ;myrtc.C: 60: WriteI2C(0xD0);
  9023  001580  0ED0               	movlw	208
  9024  001582  EC16  F00F         	call	_WriteI2C
  9025                           
  9026                           ;myrtc.C: 61: IdleI2C();
  9027  001586  ECA8  F011         	call	_IdleI2C	;wreg free
  9028                           
  9029                           ;myrtc.C: 62: WriteI2C(0x00);
  9030  00158A  0E00               	movlw	0
  9031  00158C  EC16  F00F         	call	_WriteI2C
  9032                           
  9033                           ;myrtc.C: 63: IdleI2C();
  9034  001590  ECA8  F011         	call	_IdleI2C	;wreg free
  9035                           
  9036                           ;myrtc.C: 64: WriteI2C(sec);
  9037  001594  5032               	movf	_sec,w,c
  9038  001596  EC16  F00F         	call	_WriteI2C
  9039                           
  9040                           ;myrtc.C: 65: IdleI2C();
  9041  00159A  ECA8  F011         	call	_IdleI2C	;wreg free
  9042                           
  9043                           ;myrtc.C: 66: WriteI2C(min);
  9044  00159E  502F               	movf	_min,w,c
  9045  0015A0  EC16  F00F         	call	_WriteI2C
  9046                           
  9047                           ;myrtc.C: 67: IdleI2C();
  9048  0015A4  ECA8  F011         	call	_IdleI2C	;wreg free
  9049                           
  9050                           ;myrtc.C: 68: WriteI2C(hr);
  9051  0015A8  502E               	movf	_hr,w,c
  9052  0015AA  EC16  F00F         	call	_WriteI2C
  9053                           
  9054                           ;myrtc.C: 69: IdleI2C();
  9055  0015AE  ECA8  F011         	call	_IdleI2C	;wreg free
  9056                           
  9057                           ;myrtc.C: 70: WriteI2C(dow);
  9058  0015B2  502D               	movf	_dow,w,c
  9059  0015B4  EC16  F00F         	call	_WriteI2C
  9060                           
  9061                           ;myrtc.C: 71: IdleI2C();
  9062  0015B8  ECA8  F011         	call	_IdleI2C	;wreg free
  9063                           
  9064                           ;myrtc.C: 72: WriteI2C(day);
  9065  0015BC  502B               	movf	_day,w,c
  9066  0015BE  EC16  F00F         	call	_WriteI2C
  9067                           
  9068                           ;myrtc.C: 73: IdleI2C();
  9069  0015C2  ECA8  F011         	call	_IdleI2C	;wreg free
  9070                           
  9071                           ;myrtc.C: 74: WriteI2C(month);
  9072  0015C6  5031               	movf	_month,w,c
  9073  0015C8  EC16  F00F         	call	_WriteI2C
  9074                           
  9075                           ;myrtc.C: 75: IdleI2C();
  9076  0015CC  ECA8  F011         	call	_IdleI2C	;wreg free
  9077                           
  9078                           ;myrtc.C: 76: WriteI2C(year);
  9079  0015D0  5035               	movf	_year,w,c
  9080  0015D2  EC16  F00F         	call	_WriteI2C
  9081                           
  9082                           ;myrtc.C: 77: IdleI2C();
  9083  0015D6  ECA8  F011         	call	_IdleI2C	;wreg free
  9084                           
  9085                           ;myrtc.C: 78: WriteI2C(0x10);
  9086  0015DA  0E10               	movlw	16
  9087  0015DC  EC16  F00F         	call	_WriteI2C
  9088                           
  9089                           ;myrtc.C: 79: IdleI2C();
  9090  0015E0  ECA8  F011         	call	_IdleI2C	;wreg free
  9091                           
  9092                           ;myrtc.C: 80: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  9093  0015E4  84C5               	bsf	4037,2,c	;volatile
  9094  0015E6                     l400:
  9095  0015E6  A4C5               	btfss	4037,2,c	;volatile
  9096  0015E8  0012               	return	
  9097  0015EA  FFFF               	dw	65535	; assembler added errata NOP
  9098  0015EC  D7FC               	goto	l400
  9099  0015EE  FFFF               	dw	65535	; errata NOP
  9100  0015F0                     __end_of_ds1307_set_date_time:
  9101                           	opt stack 0
  9102                           tblptru	equ	0xFF8
  9103                           tblptrh	equ	0xFF7
  9104                           tblptrl	equ	0xFF6
  9105                           tablat	equ	0xFF5
  9106                           prodh	equ	0xFF4
  9107                           prodl	equ	0xFF3
  9108                           intcon	equ	0xFF2
  9109                           intcon2	equ	0xFF1
  9110                           postinc0	equ	0xFEE
  9111                           wreg	equ	0xFE8
  9112                           postinc1	equ	0xFE6
  9113                           postdec1	equ	0xFE5
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           fsr2h	equ	0xFDA
  9118                           fsr2l	equ	0xFD9
  9119                           status	equ	0xFD8
  9120                           
  9121 ;; *************** function _ds1307_init *****************
  9122 ;; Defined at:
  9123 ;;		line 4 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;		None
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;  seconds         1   22[COMRAM] unsigned char 
  9128 ;; Return value:  Size  Location     Type
  9129 ;;		None               void
  9130 ;; Registers used:
  9131 ;;		wreg, status,2, status,0, cstack
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9137 ;;      Params:         0       0       0       0       0       0       0
  9138 ;;      Locals:         1       0       0       0       0       0       0
  9139 ;;      Temps:          0       0       0       0       0       0       0
  9140 ;;      Totals:         1       0       0       0       0       0       0
  9141 ;;Total ram usage:        1 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    4
  9144 ;; This function calls:
  9145 ;;		_IdleI2C
  9146 ;;		_ReadI2C
  9147 ;;		_WriteI2C
  9148 ;;		_bcd2bin
  9149 ;;		_bin2bcd
  9150 ;; This function is called by:
  9151 ;;		_RTUInit
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text34
  9156  0015F0                     __ptext34:
  9157                           	opt stack 0
  9158  0015F0                     _ds1307_init:
  9159                           	opt stack 25
  9160                           
  9161                           ;incstack = 0
  9162  0015F0  FFFF               	dw	65535
  9163                           
  9164                           ;myrtc.C: 6: unsigned char seconds = 0;
  9165  0015F2  0E00               	movlw	0
  9166  0015F4  6E4C               	movwf	ds1307_init@seconds,c
  9167                           
  9168                           ;myrtc.C: 8: IdleI2C();
  9169  0015F6  ECA8  F011         	call	_IdleI2C	;wreg free
  9170                           
  9171                           ;myrtc.C: 9: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  9172  0015FA  80C5               	bsf	4037,0,c	;volatile
  9173  0015FC                     l373:
  9174  0015FC  B0C5               	btfsc	4037,0,c	;volatile
  9175  0015FE  D7FE               	goto	l373
  9176                           
  9177                           ;myrtc.C: 10: WriteI2C(0xD0);
  9178  001600  0ED0               	movlw	208
  9179  001602  EC16  F00F         	call	_WriteI2C
  9180                           
  9181                           ;myrtc.C: 11: IdleI2C();
  9182  001606  ECA8  F011         	call	_IdleI2C	;wreg free
  9183                           
  9184                           ;myrtc.C: 12: WriteI2C(0x00);
  9185  00160A  0E00               	movlw	0
  9186  00160C  EC16  F00F         	call	_WriteI2C
  9187                           
  9188                           ;myrtc.C: 13: IdleI2C();
  9189  001610  ECA8  F011         	call	_IdleI2C	;wreg free
  9190                           
  9191                           ;myrtc.C: 14: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  9192  001614  82C5               	bsf	4037,1,c	;volatile
  9193  001616                     l376:
  9194  001616  B2C5               	btfsc	4037,1,c	;volatile
  9195  001618  D7FE               	goto	l376
  9196                           
  9197                           ;myrtc.C: 15: WriteI2C(0xD1);
  9198  00161A  0ED1               	movlw	209
  9199  00161C  EC16  F00F         	call	_WriteI2C
  9200                           
  9201                           ;myrtc.C: 16: seconds = ReadI2C();
  9202  001620  EC17  F011         	call	_ReadI2C	;wreg free
  9203  001624  6E4C               	movwf	ds1307_init@seconds,c
  9204                           
  9205                           ;myrtc.C: 17: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9206  001626  8AC5               	bsf	4037,5,c	;volatile
  9207  001628  88C5               	bsf	4037,4,c	;volatile
  9208  00162A                     l379:
  9209  00162A  B8C5               	btfsc	4037,4,c	;volatile
  9210  00162C  D7FE               	goto	l379
  9211                           
  9212                           ;myrtc.C: 18: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  9213  00162E  84C5               	bsf	4037,2,c	;volatile
  9214  001630                     l382:
  9215  001630  B4C5               	btfsc	4037,2,c	;volatile
  9216  001632  D7FE               	goto	l382
  9217                           
  9218                           ;myrtc.C: 20: seconds = bcd2bin(seconds);
  9219  001634  504C               	movf	ds1307_init@seconds,w,c
  9220  001636  EC40  F011         	call	_bcd2bin
  9221  00163A  6E4C               	movwf	ds1307_init@seconds,c
  9222                           
  9223                           ;myrtc.C: 21: seconds &= 0x7F;
  9224  00163C  9E4C               	bcf	ds1307_init@seconds,7,c
  9225                           
  9226                           ;myrtc.C: 22: seconds = bin2bcd(seconds);
  9227  00163E  504C               	movf	ds1307_init@seconds,w,c
  9228  001640  EC2D  F011         	call	_bin2bcd
  9229  001644  6E4C               	movwf	ds1307_init@seconds,c
  9230                           
  9231                           ;myrtc.C: 24: _delay(10);
  9232  001646  0E02               	movlw	2
  9233  001648                     u5267:
  9234  001648  F000               	nop	
  9235  00164A  2EE8               	decfsz	wreg,f,c
  9236  00164C  D7FD               	goto	u5267
  9237                           
  9238                           ;myrtc.C: 26: IdleI2C();
  9239  00164E  ECA8  F011         	call	_IdleI2C	;wreg free
  9240                           
  9241                           ;myrtc.C: 27: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  9242  001652  80C5               	bsf	4037,0,c	;volatile
  9243  001654                     l385:
  9244  001654  B0C5               	btfsc	4037,0,c	;volatile
  9245  001656  D7FE               	goto	l385
  9246                           
  9247                           ;myrtc.C: 28: WriteI2C(0xD0);
  9248  001658  0ED0               	movlw	208
  9249  00165A  EC16  F00F         	call	_WriteI2C
  9250                           
  9251                           ;myrtc.C: 29: IdleI2C();
  9252  00165E  ECA8  F011         	call	_IdleI2C	;wreg free
  9253                           
  9254                           ;myrtc.C: 30: WriteI2C(0x00);
  9255  001662  0E00               	movlw	0
  9256  001664  EC16  F00F         	call	_WriteI2C
  9257                           
  9258                           ;myrtc.C: 31: IdleI2C();
  9259  001668  ECA8  F011         	call	_IdleI2C	;wreg free
  9260                           
  9261                           ;myrtc.C: 32: WriteI2C(seconds);
  9262  00166C  504C               	movf	ds1307_init@seconds,w,c
  9263  00166E  EC16  F00F         	call	_WriteI2C
  9264                           
  9265                           ;myrtc.C: 33: IdleI2C();
  9266  001672  ECA8  F011         	call	_IdleI2C	;wreg free
  9267                           
  9268                           ;myrtc.C: 34: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  9269  001676  82C5               	bsf	4037,1,c	;volatile
  9270  001678                     l388:
  9271  001678  B2C5               	btfsc	4037,1,c	;volatile
  9272  00167A  D7FE               	goto	l388
  9273                           
  9274                           ;myrtc.C: 35: WriteI2C(0xD0);
  9275  00167C  0ED0               	movlw	208
  9276  00167E  EC16  F00F         	call	_WriteI2C
  9277                           
  9278                           ;myrtc.C: 36: IdleI2C();
  9279  001682  ECA8  F011         	call	_IdleI2C	;wreg free
  9280                           
  9281                           ;myrtc.C: 37: WriteI2C(0x07);
  9282  001686  0E07               	movlw	7
  9283  001688  EC16  F00F         	call	_WriteI2C
  9284                           
  9285                           ;myrtc.C: 38: IdleI2C();
  9286  00168C  ECA8  F011         	call	_IdleI2C	;wreg free
  9287                           
  9288                           ;myrtc.C: 39: WriteI2C(0x10);
  9289  001690  0E10               	movlw	16
  9290  001692  EC16  F00F         	call	_WriteI2C
  9291                           
  9292                           ;myrtc.C: 40: IdleI2C();
  9293  001696  ECA8  F011         	call	_IdleI2C	;wreg free
  9294                           
  9295                           ;myrtc.C: 41: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  9296  00169A  84C5               	bsf	4037,2,c	;volatile
  9297  00169C                     l391:
  9298  00169C  A4C5               	btfss	4037,2,c	;volatile
  9299  00169E  0012               	return	
  9300  0016A0  FFFF               	dw	65535	; assembler added errata NOP
  9301  0016A2  D7FC               	goto	l391
  9302  0016A4  FFFF               	dw	65535	; errata NOP
  9303  0016A6                     __end_of_ds1307_init:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           intcon	equ	0xFF2
  9312                           intcon2	equ	0xFF1
  9313                           postinc0	equ	0xFEE
  9314                           wreg	equ	0xFE8
  9315                           postinc1	equ	0xFE6
  9316                           postdec1	equ	0xFE5
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function _bin2bcd *****************
  9325 ;; Defined at:
  9326 ;;		line 135 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;  binary_value    1    wreg     unsigned char 
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;  binary_value    1   19[COMRAM] unsigned char 
  9331 ;;  temp            1   21[COMRAM] unsigned char 
  9332 ;;  retval          1   20[COMRAM] unsigned char 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      unsigned char 
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9342 ;;      Params:         0       0       0       0       0       0       0
  9343 ;;      Locals:         3       0       0       0       0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0
  9345 ;;      Totals:         3       0       0       0       0       0       0
  9346 ;;Total ram usage:        3 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    2
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_ds1307_init
  9353 ;;		_ds1307_set_date_time
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text35
  9358  00225A                     __ptext35:
  9359                           	opt stack 0
  9360  00225A                     _bin2bcd:
  9361                           	opt stack 26
  9362                           
  9363                           ;incstack = 0
  9364  00225A  FFFF               	dw	65535
  9365                           
  9366                           ;bin2bcd@binary_value stored from wreg
  9367  00225C  6E49               	movwf	bin2bcd@binary_value,c
  9368                           
  9369                           ;myrtc.C: 137: unsigned char temp;
  9370                           ;myrtc.C: 138: unsigned char retval;
  9371                           ;myrtc.C: 140: temp = binary_value;
  9372  00225E  C049  F04B         	movff	bin2bcd@binary_value,bin2bcd@temp
  9373                           
  9374                           ;myrtc.C: 141: retval = 0;
  9375  002262  0E00               	movlw	0
  9376  002264  6E4A               	movwf	bin2bcd@retval,c
  9377  002266                     l5949:
  9378                           
  9379                           ;myrtc.C: 144: {
  9380                           ;myrtc.C: 147: if(temp >= 10)
  9381  002266  0E09               	movlw	9
  9382  002268  644B               	cpfsgt	bin2bcd@temp,c
  9383  00226A  D005               	goto	l5953
  9384                           
  9385                           ;myrtc.C: 148: {
  9386                           ;myrtc.C: 149: temp -= 10;
  9387  00226C  0E0A               	movlw	10
  9388  00226E  5E4B               	subwf	bin2bcd@temp,f,c
  9389                           
  9390                           ;myrtc.C: 150: retval += 0x10;
  9391  002270  0E10               	movlw	16
  9392  002272  264A               	addwf	bin2bcd@retval,f,c
  9393                           
  9394                           ;myrtc.C: 151: }
  9395  002274  D7F8               	goto	l5949
  9396  002276                     l5953:
  9397                           
  9398                           ;myrtc.C: 152: else
  9399                           ;myrtc.C: 153: {
  9400                           ;myrtc.C: 154: retval += temp;
  9401  002276  504B               	movf	bin2bcd@temp,w,c
  9402  002278  264A               	addwf	bin2bcd@retval,f,c
  9403                           
  9404                           ;myrtc.C: 156: }
  9405                           ;myrtc.C: 157: }
  9406                           ;myrtc.C: 159: return(retval);
  9407                           
  9408                           ;myrtc.C: 155: break;
  9409  00227A  504A               	movf	bin2bcd@retval,w,c
  9410  00227C  0012               	return	
  9411  00227E  FFFF               	dw	65535	; errata NOP
  9412  002280                     __end_of_bin2bcd:
  9413                           	opt stack 0
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           intcon2	equ	0xFF1
  9422                           postinc0	equ	0xFEE
  9423                           wreg	equ	0xFE8
  9424                           postinc1	equ	0xFE6
  9425                           postdec1	equ	0xFE5
  9426                           fsr1l	equ	0xFE1
  9427                           indf2	equ	0xFDF
  9428                           postinc2	equ	0xFDE
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _ds1307_get_time *****************
  9434 ;; Defined at:
  9435 ;;		line 111 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9449 ;;      Params:         0       0       0       0       0       0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    4
  9456 ;; This function calls:
  9457 ;;		_IdleI2C
  9458 ;;		_ReadI2C
  9459 ;;		_WriteI2C
  9460 ;;		_bcd2bin
  9461 ;; This function is called by:
  9462 ;;		_RTUInit
  9463 ;;		_main
  9464 ;;		_rtc_setting
  9465 ;;		_reset_unit
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           	psect	text36
  9470  001BDA                     __ptext36:
  9471                           	opt stack 0
  9472  001BDA                     _ds1307_get_time:
  9473                           	opt stack 25
  9474                           
  9475                           ;incstack = 0
  9476  001BDA  FFFF               	dw	65535
  9477                           
  9478                           ;myrtc.C: 113: IdleI2C();
  9479  001BDC  ECA8  F011         	call	_IdleI2C	;wreg free
  9480                           
  9481                           ;myrtc.C: 114: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  9482  001BE0  80C5               	bsf	4037,0,c	;volatile
  9483  001BE2                     l430:
  9484  001BE2  B0C5               	btfsc	4037,0,c	;volatile
  9485  001BE4  D7FE               	goto	l430
  9486                           
  9487                           ;myrtc.C: 115: WriteI2C(0xD0);
  9488  001BE6  0ED0               	movlw	208
  9489  001BE8  EC16  F00F         	call	_WriteI2C
  9490                           
  9491                           ;myrtc.C: 116: IdleI2C();
  9492  001BEC  ECA8  F011         	call	_IdleI2C	;wreg free
  9493                           
  9494                           ;myrtc.C: 117: WriteI2C(0x00);
  9495  001BF0  0E00               	movlw	0
  9496  001BF2  EC16  F00F         	call	_WriteI2C
  9497                           
  9498                           ;myrtc.C: 118: IdleI2C();
  9499  001BF6  ECA8  F011         	call	_IdleI2C	;wreg free
  9500                           
  9501                           ;myrtc.C: 119: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  9502  001BFA  82C5               	bsf	4037,1,c	;volatile
  9503  001BFC                     l433:
  9504  001BFC  B2C5               	btfsc	4037,1,c	;volatile
  9505  001BFE  D7FE               	goto	l433
  9506                           
  9507                           ;myrtc.C: 120: WriteI2C(0xD1);
  9508  001C00  0ED1               	movlw	209
  9509  001C02  EC16  F00F         	call	_WriteI2C
  9510                           
  9511                           ;myrtc.C: 121: sec = ReadI2C();
  9512  001C06  EC17  F011         	call	_ReadI2C	;wreg free
  9513  001C0A  6E32               	movwf	_sec,c
  9514                           
  9515                           ;myrtc.C: 122: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9516  001C0C  9AC5               	bcf	4037,5,c	;volatile
  9517  001C0E  88C5               	bsf	4037,4,c	;volatile
  9518  001C10                     l436:
  9519  001C10  B8C5               	btfsc	4037,4,c	;volatile
  9520  001C12  D7FE               	goto	l436
  9521                           
  9522                           ;myrtc.C: 123: min = ReadI2C();
  9523  001C14  EC17  F011         	call	_ReadI2C	;wreg free
  9524  001C18  6E2F               	movwf	_min,c
  9525                           
  9526                           ;myrtc.C: 124: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9527  001C1A  9AC5               	bcf	4037,5,c	;volatile
  9528  001C1C  88C5               	bsf	4037,4,c	;volatile
  9529  001C1E                     l439:
  9530  001C1E  B8C5               	btfsc	4037,4,c	;volatile
  9531  001C20  D7FE               	goto	l439
  9532                           
  9533                           ;myrtc.C: 125: hr = ReadI2C();
  9534  001C22  EC17  F011         	call	_ReadI2C	;wreg free
  9535  001C26  6E2E               	movwf	_hr,c
  9536                           
  9537                           ;myrtc.C: 126: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9538  001C28  8AC5               	bsf	4037,5,c	;volatile
  9539  001C2A  88C5               	bsf	4037,4,c	;volatile
  9540  001C2C                     l442:
  9541  001C2C  B8C5               	btfsc	4037,4,c	;volatile
  9542  001C2E  D7FE               	goto	l442
  9543                           
  9544                           ;myrtc.C: 127: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  9545  001C30  84C5               	bsf	4037,2,c	;volatile
  9546  001C32                     l445:
  9547  001C32  B4C5               	btfsc	4037,2,c	;volatile
  9548  001C34  D7FE               	goto	l445
  9549                           
  9550                           ;myrtc.C: 130: sec = bcd2bin(sec & 0x7f);
  9551  001C36  5032               	movf	_sec,w,c
  9552  001C38  0B7F               	andlw	127
  9553  001C3A  EC40  F011         	call	_bcd2bin
  9554  001C3E  6E32               	movwf	_sec,c
  9555                           
  9556                           ;myrtc.C: 131: min = bcd2bin(min & 0x7f);
  9557  001C40  502F               	movf	_min,w,c
  9558  001C42  0B7F               	andlw	127
  9559  001C44  EC40  F011         	call	_bcd2bin
  9560  001C48  6E2F               	movwf	_min,c
  9561                           
  9562                           ;myrtc.C: 132: hr = bcd2bin(hr & 0x3f);
  9563  001C4A  502E               	movf	_hr,w,c
  9564  001C4C  0B3F               	andlw	63
  9565  001C4E  EC40  F011         	call	_bcd2bin
  9566  001C52  6E2E               	movwf	_hr,c
  9567  001C54  0012               	return	
  9568  001C56  FFFF               	dw	65535	; errata NOP
  9569  001C58                     __end_of_ds1307_get_time:
  9570                           	opt stack 0
  9571                           tblptru	equ	0xFF8
  9572                           tblptrh	equ	0xFF7
  9573                           tblptrl	equ	0xFF6
  9574                           tablat	equ	0xFF5
  9575                           prodh	equ	0xFF4
  9576                           prodl	equ	0xFF3
  9577                           intcon	equ	0xFF2
  9578                           intcon2	equ	0xFF1
  9579                           postinc0	equ	0xFEE
  9580                           wreg	equ	0xFE8
  9581                           postinc1	equ	0xFE6
  9582                           postdec1	equ	0xFE5
  9583                           fsr1l	equ	0xFE1
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           
  9590 ;; *************** function _ds1307_get_date *****************
  9591 ;; Defined at:
  9592 ;;		line 83 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9606 ;;      Params:         0       0       0       0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    4
  9613 ;; This function calls:
  9614 ;;		_IdleI2C
  9615 ;;		_ReadI2C
  9616 ;;		_WriteI2C
  9617 ;;		_bcd2bin
  9618 ;; This function is called by:
  9619 ;;		_RTUInit
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text37
  9624  001896                     __ptext37:
  9625                           	opt stack 0
  9626  001896                     _ds1307_get_date:
  9627                           	opt stack 25
  9628                           
  9629                           ;incstack = 0
  9630  001896  FFFF               	dw	65535
  9631                           
  9632                           ;myrtc.C: 85: IdleI2C();
  9633  001898  ECA8  F011         	call	_IdleI2C	;wreg free
  9634                           
  9635                           ;myrtc.C: 86: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  9636  00189C  80C5               	bsf	4037,0,c	;volatile
  9637  00189E                     l406:
  9638  00189E  B0C5               	btfsc	4037,0,c	;volatile
  9639  0018A0  D7FE               	goto	l406
  9640                           
  9641                           ;myrtc.C: 87: WriteI2C(0xD0);
  9642  0018A2  0ED0               	movlw	208
  9643  0018A4  EC16  F00F         	call	_WriteI2C
  9644                           
  9645                           ;myrtc.C: 88: IdleI2C();
  9646  0018A8  ECA8  F011         	call	_IdleI2C	;wreg free
  9647                           
  9648                           ;myrtc.C: 89: WriteI2C(0x03);
  9649  0018AC  0E03               	movlw	3
  9650  0018AE  EC16  F00F         	call	_WriteI2C
  9651                           
  9652                           ;myrtc.C: 90: IdleI2C();
  9653  0018B2  ECA8  F011         	call	_IdleI2C	;wreg free
  9654                           
  9655                           ;myrtc.C: 92: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  9656  0018B6  82C5               	bsf	4037,1,c	;volatile
  9657  0018B8                     l409:
  9658  0018B8  B2C5               	btfsc	4037,1,c	;volatile
  9659  0018BA  D7FE               	goto	l409
  9660                           
  9661                           ;myrtc.C: 93: WriteI2C(0xD1);
  9662  0018BC  0ED1               	movlw	209
  9663  0018BE  EC16  F00F         	call	_WriteI2C
  9664                           
  9665                           ;myrtc.C: 94: IdleI2C();
  9666  0018C2  ECA8  F011         	call	_IdleI2C	;wreg free
  9667                           
  9668                           ;myrtc.C: 95: dow = ReadI2C();
  9669  0018C6  EC17  F011         	call	_ReadI2C	;wreg free
  9670  0018CA  6E2D               	movwf	_dow,c
  9671                           
  9672                           ;myrtc.C: 96: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9673  0018CC  9AC5               	bcf	4037,5,c	;volatile
  9674  0018CE  88C5               	bsf	4037,4,c	;volatile
  9675  0018D0                     l412:
  9676  0018D0  B8C5               	btfsc	4037,4,c	;volatile
  9677  0018D2  D7FE               	goto	l412
  9678                           
  9679                           ;myrtc.C: 97: day = ReadI2C();
  9680  0018D4  EC17  F011         	call	_ReadI2C	;wreg free
  9681  0018D8  6E2B               	movwf	_day,c
  9682                           
  9683                           ;myrtc.C: 98: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9684  0018DA  9AC5               	bcf	4037,5,c	;volatile
  9685  0018DC  88C5               	bsf	4037,4,c	;volatile
  9686  0018DE                     l415:
  9687  0018DE  B8C5               	btfsc	4037,4,c	;volatile
  9688  0018E0  D7FE               	goto	l415
  9689                           
  9690                           ;myrtc.C: 99: month = ReadI2C();
  9691  0018E2  EC17  F011         	call	_ReadI2C	;wreg free
  9692  0018E6  6E31               	movwf	_month,c
  9693                           
  9694                           ;myrtc.C: 100: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9695  0018E8  9AC5               	bcf	4037,5,c	;volatile
  9696  0018EA  88C5               	bsf	4037,4,c	;volatile
  9697  0018EC                     l418:
  9698  0018EC  B8C5               	btfsc	4037,4,c	;volatile
  9699  0018EE  D7FE               	goto	l418
  9700                           
  9701                           ;myrtc.C: 101: year = ReadI2C();
  9702  0018F0  EC17  F011         	call	_ReadI2C	;wreg free
  9703  0018F4  6E35               	movwf	_year,c
  9704                           
  9705                           ;myrtc.C: 102: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  9706  0018F6  8AC5               	bsf	4037,5,c	;volatile
  9707  0018F8  88C5               	bsf	4037,4,c	;volatile
  9708  0018FA                     l421:
  9709  0018FA  B8C5               	btfsc	4037,4,c	;volatile
  9710  0018FC  D7FE               	goto	l421
  9711                           
  9712                           ;myrtc.C: 103: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  9713  0018FE  84C5               	bsf	4037,2,c	;volatile
  9714  001900                     l424:
  9715  001900  B4C5               	btfsc	4037,2,c	;volatile
  9716  001902  D7FE               	goto	l424
  9717                           
  9718                           ;myrtc.C: 105: dow = bcd2bin(dow & 0x7f);
  9719  001904  502D               	movf	_dow,w,c
  9720  001906  0B7F               	andlw	127
  9721  001908  EC40  F011         	call	_bcd2bin
  9722  00190C  6E2D               	movwf	_dow,c
  9723                           
  9724                           ;myrtc.C: 106: day = bcd2bin(day & 0x3f);
  9725  00190E  502B               	movf	_day,w,c
  9726  001910  0B3F               	andlw	63
  9727  001912  EC40  F011         	call	_bcd2bin
  9728  001916  6E2B               	movwf	_day,c
  9729                           
  9730                           ;myrtc.C: 107: month = bcd2bin(month & 0x1f);
  9731  001918  5031               	movf	_month,w,c
  9732  00191A  0B1F               	andlw	31
  9733  00191C  EC40  F011         	call	_bcd2bin
  9734  001920  6E31               	movwf	_month,c
  9735                           
  9736                           ;myrtc.C: 108: year = bcd2bin(year);
  9737  001922  5035               	movf	_year,w,c
  9738  001924  EC40  F011         	call	_bcd2bin
  9739  001928  6E35               	movwf	_year,c
  9740  00192A  0012               	return	
  9741  00192C  FFFF               	dw	65535	; errata NOP
  9742  00192E                     __end_of_ds1307_get_date:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           intcon	equ	0xFF2
  9751                           intcon2	equ	0xFF1
  9752                           postinc0	equ	0xFEE
  9753                           wreg	equ	0xFE8
  9754                           postinc1	equ	0xFE6
  9755                           postdec1	equ	0xFE5
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function _bcd2bin *****************
  9764 ;; Defined at:
  9765 ;;		line 164 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\myrtc.C"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  bcd_value       1    wreg     unsigned char 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  bcd_value       1   20[COMRAM] unsigned char 
  9770 ;;  temp            1   21[COMRAM] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      unsigned char 
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9780 ;;      Params:         0       0       0       0       0       0       0
  9781 ;;      Locals:         2       0       0       0       0       0       0
  9782 ;;      Temps:          1       0       0       0       0       0       0
  9783 ;;      Totals:         3       0       0       0       0       0       0
  9784 ;;Total ram usage:        3 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    2
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_ds1307_init
  9791 ;;		_ds1307_get_date
  9792 ;;		_ds1307_get_time
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           	psect	text38
  9797  002280                     __ptext38:
  9798                           	opt stack 0
  9799  002280                     _bcd2bin:
  9800                           	opt stack 26
  9801                           
  9802                           ;incstack = 0
  9803  002280  FFFF               	dw	65535
  9804                           
  9805                           ;bcd2bin@bcd_value stored from wreg
  9806  002282  6E4A               	movwf	bcd2bin@bcd_value,c
  9807                           
  9808                           ;myrtc.C: 166: unsigned char temp;
  9809                           ;myrtc.C: 168: temp = bcd_value;
  9810  002284  C04A  F04B         	movff	bcd2bin@bcd_value,bcd2bin@temp
  9811                           
  9812                           ;myrtc.C: 170: temp >>= 1;
  9813  002288  90D8               	bcf	status,0,c
  9814  00228A  324B               	rrcf	bcd2bin@temp,f,c
  9815                           
  9816                           ;myrtc.C: 172: temp &= 0x78;
  9817  00228C  0E78               	movlw	120
  9818  00228E  164B               	andwf	bcd2bin@temp,f,c
  9819                           
  9820                           ;myrtc.C: 176: return(temp + (temp >> 2) + (bcd_value & 0x0f));
  9821  002290  C04A  F049         	movff	bcd2bin@bcd_value,??_bcd2bin
  9822  002294  0E0F               	movlw	15
  9823  002296  1649               	andwf	??_bcd2bin,f,c
  9824  002298  404B               	rrncf	bcd2bin@temp,w,c
  9825  00229A  42E8               	rrncf	wreg,f,c
  9826  00229C  0B3F               	andlw	63
  9827  00229E  2449               	addwf	??_bcd2bin,w,c
  9828  0022A0  244B               	addwf	bcd2bin@temp,w,c
  9829  0022A2  0012               	return	
  9830  0022A4  FFFF               	dw	65535	; errata NOP
  9831  0022A6                     __end_of_bcd2bin:
  9832                           	opt stack 0
  9833                           tblptru	equ	0xFF8
  9834                           tblptrh	equ	0xFF7
  9835                           tblptrl	equ	0xFF6
  9836                           tablat	equ	0xFF5
  9837                           prodh	equ	0xFF4
  9838                           prodl	equ	0xFF3
  9839                           intcon	equ	0xFF2
  9840                           intcon2	equ	0xFF1
  9841                           postinc0	equ	0xFEE
  9842                           wreg	equ	0xFE8
  9843                           postinc1	equ	0xFE6
  9844                           postdec1	equ	0xFE5
  9845                           fsr1l	equ	0xFE1
  9846                           indf2	equ	0xFDF
  9847                           postinc2	equ	0xFDE
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function _WriteI2C *****************
  9853 ;; Defined at:
  9854 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_writ.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  data_out        1    wreg     unsigned char 
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;  data_out        1   21[COMRAM] unsigned char 
  9859 ;; Return value:  Size  Location     Type
  9860 ;;                  1    wreg      char 
  9861 ;; Registers used:
  9862 ;;		wreg, status,2, status,0, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9868 ;;      Params:         0       0       0       0       0       0       0
  9869 ;;      Locals:         1       0       0       0       0       0       0
  9870 ;;      Temps:          1       0       0       0       0       0       0
  9871 ;;      Totals:         2       0       0       0       0       0       0
  9872 ;;Total ram usage:        2 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    3
  9875 ;; This function calls:
  9876 ;;		_IdleI2C
  9877 ;; This function is called by:
  9878 ;;		_rom_byte_write
  9879 ;;		_rom_byte_read
  9880 ;;		_clear_rom
  9881 ;;		_ds1307_init
  9882 ;;		_ds1307_set_date_time
  9883 ;;		_ds1307_get_date
  9884 ;;		_ds1307_get_time
  9885 ;;		_rom_page_write
  9886 ;;		_rom_page_read
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           	psect	text39
  9891  001E2C                     __ptext39:
  9892                           	opt stack 0
  9893  001E2C                     _WriteI2C:
  9894                           	opt stack 25
  9895                           
  9896                           ;incstack = 0
  9897  001E2C  FFFF               	dw	65535
  9898                           
  9899                           ;WriteI2C@data_out stored from wreg
  9900  001E2E  6E4B               	movwf	WriteI2C@data_out,c
  9901  001E30  C04B  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  9902  001E34  BEC6               	btfsc	4038,7,c	;volatile
  9903  001E36  D02C               	goto	l1217
  9904                           
  9905                           ;	Return value of _WriteI2C is never used
  9906  001E38  CFC6 F04A          	movff	4038,??_WriteI2C	;volatile
  9907  001E3C  0E0F               	movlw	15
  9908  001E3E  164A               	andwf	??_WriteI2C,f,c
  9909  001E40  504A               	movf	??_WriteI2C,w,c
  9910  001E42  0A08               	xorlw	8
  9911  001E44  B4D8               	btfsc	status,2,c
  9912  001E46  D00F               	goto	l5703
  9913  001E48  CFC6 F04A          	movff	4038,??_WriteI2C	;volatile
  9914  001E4C  0E0F               	movlw	15
  9915  001E4E  164A               	andwf	??_WriteI2C,f,c
  9916  001E50  504A               	movf	??_WriteI2C,w,c
  9917  001E52  0A0B               	xorlw	11
  9918  001E54  B4D8               	btfsc	status,2,c
  9919  001E56  D007               	goto	l5703
  9920  001E58  88C6               	bsf	4038,4,c	;volatile
  9921  001E5A                     l1220:
  9922  001E5A  A69E               	btfss	3998,3,c	;volatile
  9923  001E5C  D7FE               	goto	l1220
  9924  001E5E  B4C7               	btfsc	4039,2,c	;volatile
  9925  001E60  D017               	goto	l1217
  9926  001E62  50C7               	movf	4039,w,c	;volatile
  9927  001E64  D015               	goto	l1217
  9928  001E66                     l5703:
  9929  001E66  CFC6 F04A          	movff	4038,??_WriteI2C	;volatile
  9930  001E6A  0E0F               	movlw	15
  9931  001E6C  164A               	andwf	??_WriteI2C,f,c
  9932  001E6E  504A               	movf	??_WriteI2C,w,c
  9933  001E70  0A08               	xorlw	8
  9934  001E72  B4D8               	btfsc	status,2,c
  9935  001E74  D008               	goto	l1229
  9936  001E76  CFC6 F04A          	movff	4038,??_WriteI2C	;volatile
  9937  001E7A  0E0F               	movlw	15
  9938  001E7C  164A               	andwf	??_WriteI2C,f,c
  9939  001E7E  504A               	movf	??_WriteI2C,w,c
  9940  001E80  0A0B               	xorlw	11
  9941  001E82  A4D8               	btfss	status,2,c
  9942  001E84  D005               	goto	l1217
  9943  001E86                     l1229:
  9944  001E86  B0C7               	btfsc	4039,0,c	;volatile
  9945  001E88  D7FE               	goto	l1229
  9946  001E8A  ECA8  F011         	call	_IdleI2C	;wreg free
  9947  001E8E  50C5               	movf	4037,w,c	;volatile
  9948  001E90                     l1217:
  9949  001E90  0012               	return	
  9950  001E92  FFFF               	dw	65535	; errata NOP
  9951  001E94                     __end_of_WriteI2C:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           intcon2	equ	0xFF1
  9961                           postinc0	equ	0xFEE
  9962                           wreg	equ	0xFE8
  9963                           postinc1	equ	0xFE6
  9964                           postdec1	equ	0xFE5
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972 ;; *************** function _IdleI2C *****************
  9973 ;; Defined at:
  9974 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_idle.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;		None
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;		None
  9979 ;; Return value:  Size  Location     Type
  9980 ;;		None               void
  9981 ;; Registers used:
  9982 ;;		wreg, status,2, status,0
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9988 ;;      Params:         0       0       0       0       0       0       0
  9989 ;;      Locals:         0       0       0       0       0       0       0
  9990 ;;      Temps:          1       0       0       0       0       0       0
  9991 ;;      Totals:         1       0       0       0       0       0       0
  9992 ;;Total ram usage:        1 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:    2
  9995 ;; This function calls:
  9996 ;;		Nothing
  9997 ;; This function is called by:
  9998 ;;		_rom_byte_write
  9999 ;;		_rom_byte_read
 10000 ;;		_clear_rom
 10001 ;;		_ds1307_init
 10002 ;;		_ds1307_set_date_time
 10003 ;;		_ds1307_get_date
 10004 ;;		_ds1307_get_time
 10005 ;;		_WriteI2C
 10006 ;;		_rom_page_write
 10007 ;;		_rom_page_read
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           	psect	text40
 10012  002350                     __ptext40:
 10013                           	opt stack 0
 10014  002350                     _IdleI2C:
 10015                           	opt stack 25
 10016                           
 10017                           ;incstack = 0
 10018  002350  FFFF               	dw	65535
 10019  002352                     l5617:
 10020  002352  CFC5 F049          	movff	4037,??_IdleI2C	;volatile
 10021  002356  0E1F               	movlw	31
 10022  002358  1649               	andwf	??_IdleI2C,f,c
 10023  00235A  B4D8               	btfsc	status,2,c
 10024  00235C  B4C7               	btfsc	4039,2,c	;volatile
 10025  00235E  D7F9               	goto	l5617
 10026  002360  0012               	return	
 10027  002362  FFFF               	dw	65535	; errata NOP
 10028  002364                     __end_of_IdleI2C:
 10029                           	opt stack 0
 10030                           tblptru	equ	0xFF8
 10031                           tblptrh	equ	0xFF7
 10032                           tblptrl	equ	0xFF6
 10033                           tablat	equ	0xFF5
 10034                           prodh	equ	0xFF4
 10035                           prodl	equ	0xFF3
 10036                           intcon	equ	0xFF2
 10037                           intcon2	equ	0xFF1
 10038                           postinc0	equ	0xFEE
 10039                           wreg	equ	0xFE8
 10040                           postinc1	equ	0xFE6
 10041                           postdec1	equ	0xFE5
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           fsr2h	equ	0xFDA
 10046                           fsr2l	equ	0xFD9
 10047                           status	equ	0xFD8
 10048                           
 10049 ;; *************** function _ReadI2C *****************
 10050 ;; Defined at:
 10051 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_read.c"
 10052 ;; Parameters:    Size  Location     Type
 10053 ;;		None
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      unsigned char 
 10058 ;; Registers used:
 10059 ;;		wreg, status,2, status,0
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10065 ;;      Params:         0       0       0       0       0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0
 10067 ;;      Temps:          1       0       0       0       0       0       0
 10068 ;;      Totals:         1       0       0       0       0       0       0
 10069 ;;Total ram usage:        1 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    2
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_rom_byte_read
 10076 ;;		_ds1307_init
 10077 ;;		_ds1307_get_date
 10078 ;;		_ds1307_get_time
 10079 ;;		_rom_page_read
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           	psect	text41
 10084  00222E                     __ptext41:
 10085                           	opt stack 0
 10086  00222E                     _ReadI2C:
 10087                           	opt stack 26
 10088                           
 10089                           ;incstack = 0
 10090  00222E  FFFF               	dw	65535
 10091  002230  CFC6 F049          	movff	4038,??_ReadI2C	;volatile
 10092  002234  0E0F               	movlw	15
 10093  002236  1649               	andwf	??_ReadI2C,f,c
 10094  002238  5049               	movf	??_ReadI2C,w,c
 10095  00223A  0A08               	xorlw	8
 10096  00223C  B4D8               	btfsc	status,2,c
 10097  00223E  D007               	goto	l1195
 10098  002240  CFC6 F049          	movff	4038,??_ReadI2C	;volatile
 10099  002244  0E0F               	movlw	15
 10100  002246  1649               	andwf	??_ReadI2C,f,c
 10101  002248  5049               	movf	??_ReadI2C,w,c
 10102  00224A  0A0B               	xorlw	11
 10103  00224C  B4D8               	btfsc	status,2,c
 10104  00224E                     l1195:
 10105  00224E  86C5               	bsf	4037,3,c	;volatile
 10106  002250                     l1196:
 10107  002250  A0C7               	btfss	4039,0,c	;volatile
 10108  002252  D7FE               	goto	l1196
 10109  002254  50C9               	movf	4041,w,c	;volatile
 10110  002256  0012               	return	
 10111  002258  FFFF               	dw	65535	; errata NOP
 10112  00225A                     __end_of_ReadI2C:
 10113                           	opt stack 0
 10114                           tblptru	equ	0xFF8
 10115                           tblptrh	equ	0xFF7
 10116                           tblptrl	equ	0xFF6
 10117                           tablat	equ	0xFF5
 10118                           prodh	equ	0xFF4
 10119                           prodl	equ	0xFF3
 10120                           intcon	equ	0xFF2
 10121                           intcon2	equ	0xFF1
 10122                           postinc0	equ	0xFEE
 10123                           wreg	equ	0xFE8
 10124                           postinc1	equ	0xFE6
 10125                           postdec1	equ	0xFE5
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function _Write_b_eep *****************
 10134 ;; Defined at:
 10135 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;  badd            2   19[COMRAM] unsigned int 
 10138 ;;  bdat            1   21[COMRAM] unsigned char 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  GIE_BIT_VAL     1   22[COMRAM] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, status,2
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10150 ;;      Params:         3       0       0       0       0       0       0
 10151 ;;      Locals:         1       0       0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0
 10153 ;;      Totals:         4       0       0       0       0       0       0
 10154 ;;Total ram usage:        4 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    2
 10157 ;; This function calls:
 10158 ;;		Nothing
 10159 ;; This function is called by:
 10160 ;;		_RTUInit
 10161 ;;		_getting_data
 10162 ;;		_rtc_setting
 10163 ;;		_data_to_center
 10164 ;;		_reset_unit
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           	psect	text42
 10169  00218A                     __ptext42:
 10170                           	opt stack 0
 10171  00218A                     _Write_b_eep:
 10172                           	opt stack 27
 10173                           
 10174                           ;incstack = 0
 10175  00218A  FFFF               	dw	65535
 10176  00218C  0E00               	movlw	0
 10177  00218E  6E4C               	movwf	Write_b_eep@GIE_BIT_VAL,c
 10178  002190  C049  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 10179  002194  C04B  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 10180  002198  9EA6               	bcf	4006,7,c	;volatile
 10181  00219A  9CA6               	bcf	4006,6,c	;volatile
 10182  00219C  84A6               	bsf	4006,2,c	;volatile
 10183  00219E  0E00               	movlw	0
 10184  0021A0  BEF2               	btfsc	intcon,7,c	;volatile
 10185  0021A2  0E01               	movlw	1
 10186  0021A4  6E4C               	movwf	Write_b_eep@GIE_BIT_VAL,c
 10187  0021A6  9EF2               	bcf	intcon,7,c	;volatile
 10188  0021A8  0E55               	movlw	85
 10189  0021AA  6EA7               	movwf	4007,c	;volatile
 10190  0021AC  0EAA               	movlw	170
 10191  0021AE  6EA7               	movwf	4007,c	;volatile
 10192  0021B0  82A6               	bsf	4006,1,c	;volatile
 10193  0021B2                     l1158:
 10194  0021B2  B2A6               	btfsc	4006,1,c	;volatile
 10195  0021B4  D7FE               	goto	l1158
 10196  0021B6  B04C               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 10197  0021B8  D002               	bra	u4095
 10198  0021BA  9EF2               	bcf	intcon,7,c	;volatile
 10199  0021BC  D001               	bra	u4096
 10200  0021BE                     u4095:
 10201  0021BE  8EF2               	bsf	intcon,7,c	;volatile
 10202  0021C0                     u4096:
 10203  0021C0  94A6               	bcf	4006,2,c	;volatile
 10204  0021C2  0012               	return	
 10205  0021C4  FFFF               	dw	65535	; errata NOP
 10206  0021C6                     __end_of_Write_b_eep:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           intcon2	equ	0xFF1
 10216                           postinc0	equ	0xFEE
 10217                           wreg	equ	0xFE8
 10218                           postinc1	equ	0xFE6
 10219                           postdec1	equ	0xFE5
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           fsr2h	equ	0xFDA
 10224                           fsr2l	equ	0xFD9
 10225                           status	equ	0xFD8
 10226                           
 10227 ;; *************** function _USARTInit *****************
 10228 ;; Defined at:
 10229 ;;		line 6 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  baud_rate       2   19[COMRAM] unsigned int 
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;		None
 10234 ;; Return value:  Size  Location     Type
 10235 ;;		None               void
 10236 ;; Registers used:
 10237 ;;		wreg, status,2, status,0
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10243 ;;      Params:         2       0       0       0       0       0       0
 10244 ;;      Locals:         0       0       0       0       0       0       0
 10245 ;;      Temps:          2       0       0       0       0       0       0
 10246 ;;      Totals:         4       0       0       0       0       0       0
 10247 ;;Total ram usage:        4 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    2
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_RTUInit
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text43
 10258  001B58                     __ptext43:
 10259                           	opt stack 0
 10260  001B58                     _USARTInit:
 10261                           	opt stack 27
 10262                           
 10263                           ;incstack = 0
 10264  001B58  FFFF               	dw	65535
 10265                           
 10266                           ;usart_pic18.c: 9: UQFront=UQEnd=-1;
 10267  001B5A  6828               	setf	_UQEnd,c	;volatile
 10268  001B5C  6829               	setf	_UQFront,c	;volatile
 10269                           
 10270                           ;usart_pic18.c: 13: switch(baud_rate)
 10271  001B5E  D009               	goto	l6599
 10272  001B60                     l6589:
 10273                           
 10274                           ;usart_pic18.c: 16: SPBRG=64;
 10275  001B60  0E40               	movlw	64
 10276  001B62  D005               	goto	L13
 10277  001B64                     l6591:
 10278                           
 10279                           ;usart_pic18.c: 19: SPBRG=32;
 10280  001B64  0E20               	movlw	32
 10281  001B66  D003               	goto	L13
 10282  001B68                     l6593:
 10283                           
 10284                           ;usart_pic18.c: 22: SPBRG=15;
 10285  001B68  0E0F               	movlw	15
 10286  001B6A  D001               	goto	L13
 10287  001B6C                     l6595:
 10288                           
 10289                           ;usart_pic18.c: 25: SPBRG=10;
 10290  001B6C  0E0A               	movlw	10
 10291  001B6E                     L13:
 10292  001B6E  6EAF               	movwf	4015,c	;volatile
 10293                           
 10294                           ;usart_pic18.c: 26: break;
 10295  001B70  D025               	goto	l949
 10296  001B72                     l6599:
 10297  001B72  C049  F04B         	movff	USARTInit@baud_rate,??_USARTInit
 10298  001B76  C04A  F04C         	movff	USARTInit@baud_rate+1,??_USARTInit+1
 10299                           
 10300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 10301                           ; Switch size 1, requested type "space"
 10302                           ; Number of cases is 4, Range of values is 37 to 225
 10303                           ; switch strategies available:
 10304                           ; Name         Instructions Cycles
 10305                           ; simple_byte           13     7 (average)
 10306                           ;	Chosen strategy is simple_byte
 10307  001B7A  504C               	movf	??_USARTInit+1,w,c
 10308  001B7C  0A25               	xorlw	37	; case 37
 10309  001B7E  B4D8               	btfsc	status,2,c
 10310  001B80  D00A               	goto	l7805
 10311  001B82  0A6E               	xorlw	110	; case 75
 10312  001B84  B4D8               	btfsc	status,2,c
 10313  001B86  D00C               	goto	l7807
 10314  001B88  0ADD               	xorlw	221	; case 150
 10315  001B8A  B4D8               	btfsc	status,2,c
 10316  001B8C  D00E               	goto	l7809
 10317  001B8E  0A77               	xorlw	119	; case 225
 10318  001B90  B4D8               	btfsc	status,2,c
 10319  001B92  D010               	goto	l7811
 10320  001B94  D013               	goto	l949
 10321  001B96                     l7805:
 10322                           
 10323                           ; Switch size 1, requested type "space"
 10324                           ; Number of cases is 1, Range of values is 128 to 128
 10325                           ; switch strategies available:
 10326                           ; Name         Instructions Cycles
 10327                           ; simple_byte            4     3 (average)
 10328                           ;	Chosen strategy is simple_byte
 10329  001B96  504B               	movf	??_USARTInit,w,c
 10330  001B98  0A80               	xorlw	128	; case 128
 10331  001B9A  B4D8               	btfsc	status,2,c
 10332  001B9C  D7E1               	goto	l6589
 10333  001B9E  D00E               	goto	l949
 10334  001BA0                     l7807:
 10335                           
 10336                           ; Switch size 1, requested type "space"
 10337                           ; Number of cases is 1, Range of values is 0 to 0
 10338                           ; switch strategies available:
 10339                           ; Name         Instructions Cycles
 10340                           ; simple_byte            4     3 (average)
 10341                           ;	Chosen strategy is simple_byte
 10342  001BA0  504B               	movf	??_USARTInit,w,c
 10343  001BA2  0A00               	xorlw	0	; case 0
 10344  001BA4  B4D8               	btfsc	status,2,c
 10345  001BA6  D7DE               	goto	l6591
 10346  001BA8  D009               	goto	l949
 10347  001BAA                     l7809:
 10348                           
 10349                           ; Switch size 1, requested type "space"
 10350                           ; Number of cases is 1, Range of values is 0 to 0
 10351                           ; switch strategies available:
 10352                           ; Name         Instructions Cycles
 10353                           ; simple_byte            4     3 (average)
 10354                           ;	Chosen strategy is simple_byte
 10355  001BAA  504B               	movf	??_USARTInit,w,c
 10356  001BAC  0A00               	xorlw	0	; case 0
 10357  001BAE  B4D8               	btfsc	status,2,c
 10358  001BB0  D7DB               	goto	l6593
 10359  001BB2  D004               	goto	l949
 10360  001BB4                     l7811:
 10361                           
 10362                           ; Switch size 1, requested type "space"
 10363                           ; Number of cases is 1, Range of values is 0 to 0
 10364                           ; switch strategies available:
 10365                           ; Name         Instructions Cycles
 10366                           ; simple_byte            4     3 (average)
 10367                           ;	Chosen strategy is simple_byte
 10368  001BB4  504B               	movf	??_USARTInit,w,c
 10369  001BB6  0A00               	xorlw	0	; case 0
 10370  001BB8  B4D8               	btfsc	status,2,c
 10371  001BBA  D7D8               	goto	l6595
 10372  001BBC                     l949:
 10373                           
 10374                           ;usart_pic18.c: 30: TRISCbits.RC6 = 0;
 10375  001BBC  9C94               	bcf	3988,6,c	;volatile
 10376                           
 10377                           ;usart_pic18.c: 31: TRISCbits.RC7 = 1;
 10378  001BBE  8E94               	bsf	3988,7,c	;volatile
 10379                           
 10380                           ;usart_pic18.c: 34: TXSTAbits.TX9=0;
 10381  001BC0  9CAC               	bcf	4012,6,c	;volatile
 10382                           
 10383                           ;usart_pic18.c: 35: TXSTAbits.TXEN=1;
 10384  001BC2  8AAC               	bsf	4012,5,c	;volatile
 10385                           
 10386                           ;usart_pic18.c: 36: TXSTAbits.SYNC=0;
 10387  001BC4  98AC               	bcf	4012,4,c	;volatile
 10388                           
 10389                           ;usart_pic18.c: 37: TXSTAbits.BRGH=1;
 10390  001BC6  84AC               	bsf	4012,2,c	;volatile
 10391                           
 10392                           ;usart_pic18.c: 40: RCSTAbits.SPEN=1;
 10393  001BC8  8EAB               	bsf	4011,7,c	;volatile
 10394                           
 10395                           ;usart_pic18.c: 41: RCSTAbits.RX9=0;
 10396  001BCA  9CAB               	bcf	4011,6,c	;volatile
 10397                           
 10398                           ;usart_pic18.c: 42: RCSTAbits.CREN=1;
 10399  001BCC  88AB               	bsf	4011,4,c	;volatile
 10400                           
 10401                           ;usart_pic18.c: 43: RCSTAbits.ADDEN=0;
 10402  001BCE  96AB               	bcf	4011,3,c	;volatile
 10403                           
 10404                           ;usart_pic18.c: 46: RCIE=1;
 10405  001BD0  8A9D               	bsf	3997,5,c	;volatile
 10406                           
 10407                           ;usart_pic18.c: 47: PEIE=1;
 10408  001BD2  8CF2               	bsf	intcon,6,c	;volatile
 10409                           
 10410                           ;usart_pic18.c: 49: (INTCONbits.GIE = 1);
 10411  001BD4  8EF2               	bsf	intcon,7,c	;volatile
 10412  001BD6  0012               	return	
 10413  001BD8  FFFF               	dw	65535	; errata NOP
 10414  001BDA                     __end_of_USARTInit:
 10415                           	opt stack 0
 10416                           tblptru	equ	0xFF8
 10417                           tblptrh	equ	0xFF7
 10418                           tblptrl	equ	0xFF6
 10419                           tablat	equ	0xFF5
 10420                           prodh	equ	0xFF4
 10421                           prodl	equ	0xFF3
 10422                           intcon	equ	0xFF2
 10423                           intcon2	equ	0xFF1
 10424                           postinc0	equ	0xFEE
 10425                           wreg	equ	0xFE8
 10426                           postinc1	equ	0xFE6
 10427                           postdec1	equ	0xFE5
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function _Read_b_eep *****************
 10436 ;; Defined at:
 10437 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  badd            2   19[COMRAM] unsigned int 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;		None
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  1    wreg      unsigned char 
 10444 ;; Registers used:
 10445 ;;		wreg, status,2
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10451 ;;      Params:         2       0       0       0       0       0       0
 10452 ;;      Locals:         0       0       0       0       0       0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0
 10454 ;;      Totals:         2       0       0       0       0       0       0
 10455 ;;Total ram usage:        2 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    2
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_Creat_RTC_Packet
 10462 ;;		_RTUInit
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           	psect	text44
 10467  00233A                     __ptext44:
 10468                           	opt stack 0
 10469  00233A                     _Read_b_eep:
 10470                           	opt stack 26
 10471                           
 10472                           ;incstack = 0
 10473  00233A  FFFF               	dw	65535
 10474  00233C  C049  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 10475  002340  9CA6               	bcf	4006,6,c	;volatile
 10476  002342  9EA6               	bcf	4006,7,c	;volatile
 10477  002344  80A6               	bsf	4006,0,c	;volatile
 10478  002346  F000               	nop	
 10479  002348  F000               	nop	
 10480  00234A  50A8               	movf	4008,w,c	;volatile
 10481  00234C  0012               	return	
 10482  00234E  FFFF               	dw	65535	; errata NOP
 10483  002350                     __end_of_Read_b_eep:
 10484                           	opt stack 0
 10485                           tblptru	equ	0xFF8
 10486                           tblptrh	equ	0xFF7
 10487                           tblptrl	equ	0xFF6
 10488                           tablat	equ	0xFF5
 10489                           prodh	equ	0xFF4
 10490                           prodl	equ	0xFF3
 10491                           intcon	equ	0xFF2
 10492                           intcon2	equ	0xFF1
 10493                           postinc0	equ	0xFEE
 10494                           wreg	equ	0xFE8
 10495                           postinc1	equ	0xFE6
 10496                           postdec1	equ	0xFE5
 10497                           fsr1l	equ	0xFE1
 10498                           indf2	equ	0xFDF
 10499                           postinc2	equ	0xFDE
 10500                           fsr2h	equ	0xFDA
 10501                           fsr2l	equ	0xFD9
 10502                           status	equ	0xFD8
 10503                           
 10504 ;; *************** function _OpenI2C *****************
 10505 ;; Defined at:
 10506 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\i2c\i2c_open.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  sync_mode       1    wreg     unsigned char 
 10509 ;;  slew            1   19[COMRAM] unsigned char 
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;  sync_mode       1   20[COMRAM] unsigned char 
 10512 ;; Return value:  Size  Location     Type
 10513 ;;		None               void
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10521 ;;      Params:         1       0       0       0       0       0       0
 10522 ;;      Locals:         1       0       0       0       0       0       0
 10523 ;;      Temps:          0       0       0       0       0       0       0
 10524 ;;      Totals:         2       0       0       0       0       0       0
 10525 ;;Total ram usage:        2 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    2
 10528 ;; This function calls:
 10529 ;;		Nothing
 10530 ;; This function is called by:
 10531 ;;		_RTUInit
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           	psect	text45
 10536  0022CC                     __ptext45:
 10537                           	opt stack 0
 10538  0022CC                     _OpenI2C:
 10539                           	opt stack 27
 10540                           
 10541                           ;incstack = 0
 10542  0022CC  FFFF               	dw	65535
 10543                           
 10544                           ;OpenI2C@sync_mode stored from wreg
 10545  0022CE  6E4A               	movwf	OpenI2C@sync_mode,c
 10546  0022D0  0E3F               	movlw	63
 10547  0022D2  16C7               	andwf	4039,f,c	;volatile
 10548  0022D4  0E00               	movlw	0
 10549  0022D6  6EC6               	movwf	4038,c	;volatile
 10550  0022D8  0E00               	movlw	0
 10551  0022DA  6EC5               	movwf	4037,c	;volatile
 10552  0022DC  504A               	movf	OpenI2C@sync_mode,w,c
 10553  0022DE  12C6               	iorwf	4038,f,c	;volatile
 10554  0022E0  5049               	movf	OpenI2C@slew,w,c
 10555  0022E2  12C7               	iorwf	4039,f,c	;volatile
 10556  0022E4  8694               	bsf	3988,3,c	;volatile
 10557  0022E6  8894               	bsf	3988,4,c	;volatile
 10558  0022E8  8AC6               	bsf	4038,5,c	;volatile
 10559  0022EA  0012               	return	
 10560  0022EC  FFFF               	dw	65535	; errata NOP
 10561  0022EE                     __end_of_OpenI2C:
 10562                           	opt stack 0
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           postinc1	equ	0xFE6
 10574                           postdec1	equ	0xFE5
 10575                           fsr1l	equ	0xFE1
 10576                           indf2	equ	0xFDF
 10577                           postinc2	equ	0xFDE
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _MyDelay *****************
 10583 ;; Defined at:
 10584 ;;		line 139 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\rtu.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  ms              2   19[COMRAM] unsigned int 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;		None
 10589 ;; Return value:  Size  Location     Type
 10590 ;;		None               void
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10598 ;;      Params:         2       0       0       0       0       0       0
 10599 ;;      Locals:         0       0       0       0       0       0       0
 10600 ;;      Temps:          1       0       0       0       0       0       0
 10601 ;;      Totals:         3       0       0       0       0       0       0
 10602 ;;Total ram usage:        3 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    2
 10605 ;; This function calls:
 10606 ;;		Nothing
 10607 ;; This function is called by:
 10608 ;;		_RTUInit
 10609 ;;		_beep
 10610 ;;		_main
 10611 ;;		_getting_data
 10612 ;;		_rtc_setting
 10613 ;;		_data_to_center
 10614 ;;		_tx_packet
 10615 ;;		_reset_unit
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text46
 10620  0022A6                     __ptext46:
 10621                           	opt stack 0
 10622  0022A6                     _MyDelay:
 10623                           	opt stack 26
 10624                           
 10625                           ;incstack = 0
 10626  0022A6  FFFF               	dw	65535
 10627                           
 10628                           ;rtu.c: 141: while(ms > 0)
 10629  0022A8  D00A               	goto	l680
 10630  0022AA                     l6017:
 10631                           
 10632                           ;rtu.c: 142: {
 10633                           ;rtu.c: 143: _delay((unsigned long)((1)*(100000000/4000.0)));
 10634  0022AA  0E19               	movlw	25
 10635  0022AC  6E4B               	movwf	??_MyDelay& (0+255),c
 10636  0022AE  0E5D               	movlw	93
 10637  0022B0                     u5277:
 10638  0022B0  2EE8               	decfsz	wreg,f,c
 10639  0022B2  D7FE               	goto	u5277
 10640  0022B4  2E4B               	decfsz	??_MyDelay& (0+255),f,c
 10641  0022B6  D7FC               	goto	u5277
 10642                           
 10643                           ;rtu.c: 144: ms--;
 10644  0022B8  0649               	decf	MyDelay@ms,f,c
 10645  0022BA  A0D8               	btfss	status,0,c
 10646  0022BC  064A               	decf	MyDelay@ms+1,f,c
 10647  0022BE                     l680:
 10648  0022BE  504A               	movf	MyDelay@ms+1,w,c
 10649  0022C0  1049               	iorwf	MyDelay@ms,w,c
 10650  0022C2  B4D8               	btfsc	status,2,c
 10651  0022C4  0012               	return	
 10652  0022C6  FFFF               	dw	65535	; assembler added errata NOP
 10653  0022C8  D7F0               	goto	l6017
 10654  0022CA  FFFF               	dw	65535	; errata NOP
 10655  0022CC                     __end_of_MyDelay:
 10656                           	opt stack 0
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           intcon2	equ	0xFF1
 10665                           postinc0	equ	0xFEE
 10666                           wreg	equ	0xFE8
 10667                           postinc1	equ	0xFE6
 10668                           postdec1	equ	0xFE5
 10669                           fsr1l	equ	0xFE1
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           fsr2h	equ	0xFDA
 10673                           fsr2l	equ	0xFD9
 10674                           status	equ	0xFD8
 10675                           
 10676 ;; *************** function _LCDInit *****************
 10677 ;; Defined at:
 10678 ;;		line 152 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;  style           1    wreg     unsigned char 
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  style           1   29[COMRAM] unsigned char 
 10683 ;;  __i             1   30[COMRAM] unsigned char 
 10684 ;; Return value:  Size  Location     Type
 10685 ;;		None               void
 10686 ;; Registers used:
 10687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10688 ;; Tracked objects:
 10689 ;;		On entry : 0/0
 10690 ;;		On exit  : 0/0
 10691 ;;		Unchanged: 0/0
 10692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10693 ;;      Params:         0       0       0       0       0       0       0
 10694 ;;      Locals:         2       0       0       0       0       0       0
 10695 ;;      Temps:          1       0       0       0       0       0       0
 10696 ;;      Totals:         3       0       0       0       0       0       0
 10697 ;;Total ram usage:        3 bytes
 10698 ;; Hardware stack levels used:    1
 10699 ;; Hardware stack levels required when called:    4
 10700 ;; This function calls:
 10701 ;;		_LCDBusyLoop
 10702 ;;		_LCDByte
 10703 ;; This function is called by:
 10704 ;;		_RTUInit
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text47
 10709  001AD4                     __ptext47:
 10710                           	opt stack 0
 10711  001AD4                     _LCDInit:
 10712                           	opt stack 25
 10713                           
 10714                           ;incstack = 0
 10715  001AD4  FFFF               	dw	65535
 10716                           
 10717                           ;LCDInit@style stored from wreg
 10718  001AD6  6E53               	movwf	LCDInit@style,c
 10719                           
 10720                           ;lcd_hd44780_pic18.c: 168: _delay((unsigned long)((30)*(10000000/4000.0)));
 10721  001AD8  0E4A               	movlw	74
 10722  001ADA  6E52               	movwf	??_LCDInit& (0+255),c
 10723  001ADC  0E18               	movlw	24
 10724  001ADE                     u5287:
 10725  001ADE  2EE8               	decfsz	wreg,f,c
 10726  001AE0  D7FE               	goto	u5287
 10727  001AE2  2E52               	decfsz	??_LCDInit& (0+255),f,c
 10728  001AE4  D7FC               	goto	u5287
 10729  001AE6  D000               	nop2	
 10730                           
 10731                           ;lcd_hd44780_pic18.c: 171: TRISB&=(~(0x0F<<4));
 10732  001AE8  0E0F               	movlw	15
 10733  001AEA  1693               	andwf	3987,f,c	;volatile
 10734                           
 10735                           ;lcd_hd44780_pic18.c: 173: TRISDbits.TRISD6=0;
 10736  001AEC  9C95               	bcf	3989,6,c	;volatile
 10737                           
 10738                           ;lcd_hd44780_pic18.c: 174: TRISDbits.TRISD2=0;
 10739  001AEE  9495               	bcf	3989,2,c	;volatile
 10740                           
 10741                           ;lcd_hd44780_pic18.c: 175: TRISDbits.TRISD3=0;
 10742  001AF0  9695               	bcf	3989,3,c	;volatile
 10743                           
 10744                           ;lcd_hd44780_pic18.c: 177: PORTB&=(~(0x0F<<4));
 10745  001AF2  0E0F               	movlw	15
 10746  001AF4  1681               	andwf	3969,f,c	;volatile
 10747                           
 10748                           ;lcd_hd44780_pic18.c: 179: (RD6=0);
 10749  001AF6  9C83               	bcf	3971,6,c	;volatile
 10750                           
 10751                           ;lcd_hd44780_pic18.c: 180: (RD3=0);
 10752  001AF8  9683               	bcf	3971,3,c	;volatile
 10753                           
 10754                           ;lcd_hd44780_pic18.c: 181: (RD2=0);
 10755  001AFA  9483               	bcf	3971,2,c	;volatile
 10756                           
 10757                           ;lcd_hd44780_pic18.c: 184: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 10758  001AFC  F000               	nop	
 10759                           
 10760                           ;lcd_hd44780_pic18.c: 186: (RD6=1);
 10761  001AFE  8C83               	bsf	3971,6,c	;volatile
 10762                           
 10763                           ;lcd_hd44780_pic18.c: 187: PORTB|=((0b00000010)<<4);
 10764  001B00  8A81               	bsf	3969,5,c	;volatile
 10765                           
 10766                           ;lcd_hd44780_pic18.c: 188: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10767  001B02  D000               	nop2		;2 cycle nop
 10768                           
 10769                           ;lcd_hd44780_pic18.c: 189: (RD6=0);
 10770  001B04  9C83               	bcf	3971,6,c	;volatile
 10771                           
 10772                           ;lcd_hd44780_pic18.c: 190: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10773  001B06  D000               	nop2		;2 cycle nop
 10774                           
 10775                           ;lcd_hd44780_pic18.c: 193: LCDBusyLoop();
 10776  001B08  EC09  F010         	call	_LCDBusyLoop	;wreg free
 10777                           
 10778                           ;lcd_hd44780_pic18.c: 198: (LCDByte(0b00101000,0));
 10779  001B0C  0E00               	movlw	0
 10780  001B0E  6E4C               	movwf	LCDByte@isdata,c
 10781  001B10  0E28               	movlw	40
 10782  001B12  ECAF  F00F         	call	_LCDByte
 10783                           
 10784                           ;lcd_hd44780_pic18.c: 199: (LCDByte(0b00001100|style,0));
 10785  001B16  0E00               	movlw	0
 10786  001B18  6E4C               	movwf	LCDByte@isdata,c
 10787  001B1A  5053               	movf	LCDInit@style,w,c
 10788  001B1C  090C               	iorlw	12
 10789  001B1E  ECAF  F00F         	call	_LCDByte
 10790                           
 10791                           ;lcd_hd44780_pic18.c: 202: (LCDByte(0b01000000,0));
 10792  001B22  0E00               	movlw	0
 10793  001B24  6E4C               	movwf	LCDByte@isdata,c
 10794  001B26  0E40               	movlw	64
 10795  001B28  ECAF  F00F         	call	_LCDByte
 10796                           
 10797                           ;lcd_hd44780_pic18.c: 204: uint8_t __i;
 10798                           ;lcd_hd44780_pic18.c: 205: for(__i=0;__i<sizeof(__cgram);__i++)
 10799  001B2C  0E00               	movlw	0
 10800  001B2E  6E54               	movwf	LCDInit@__i,c
 10801  001B30  D00E               	goto	L14
 10802  001B32                     l6251:
 10803                           
 10804                           ;lcd_hd44780_pic18.c: 206: (LCDByte(__cgram[__i],1));
 10805  001B32  0E01               	movlw	1
 10806  001B34  6E4C               	movwf	LCDByte@isdata,c
 10807  001B36  5054               	movf	LCDInit@__i,w,c
 10808  001B38  0D01               	mullw	1
 10809  001B3A  0E65               	movlw	low ___cgram
 10810  001B3C  24F3               	addwf	prodl,w,c
 10811  001B3E  6ED9               	movwf	fsr2l,c
 10812  001B40  0E00               	movlw	high ___cgram
 10813  001B42  20F4               	addwfc	prodh,w,c
 10814  001B44  6EDA               	movwf	fsr2h,c
 10815  001B46  50DF               	movf	indf2,w,c
 10816  001B48  ECAF  F00F         	call	_LCDByte
 10817  001B4C  2A54               	incf	LCDInit@__i,f,c
 10818  001B4E                     L14:
 10819  001B4E  0E07               	movlw	7
 10820  001B50  6454               	cpfsgt	LCDInit@__i,c
 10821  001B52  D7EF               	goto	l6251
 10822  001B54  0012               	return	
 10823  001B56  FFFF               	dw	65535	; errata NOP
 10824  001B58                     __end_of_LCDInit:
 10825                           	opt stack 0
 10826                           tblptru	equ	0xFF8
 10827                           tblptrh	equ	0xFF7
 10828                           tblptrl	equ	0xFF6
 10829                           tablat	equ	0xFF5
 10830                           prodh	equ	0xFF4
 10831                           prodl	equ	0xFF3
 10832                           intcon	equ	0xFF2
 10833                           intcon2	equ	0xFF1
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           postinc1	equ	0xFE6
 10837                           postdec1	equ	0xFE5
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           fsr2h	equ	0xFDA
 10842                           fsr2l	equ	0xFD9
 10843                           status	equ	0xFD8
 10844                           
 10845 ;; *************** function _LCDByte *****************
 10846 ;; Defined at:
 10847 ;;		line 39 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;  c               1    wreg     unsigned char 
 10850 ;;  isdata          1   22[COMRAM] unsigned char 
 10851 ;; Auto vars:     Size  Location     Type
 10852 ;;  c               1   26[COMRAM] unsigned char 
 10853 ;;  temp            1   27[COMRAM] unsigned char 
 10854 ;;  ln              1   25[COMRAM] unsigned char 
 10855 ;;  hn              1   24[COMRAM] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;		None               void
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10865 ;;      Params:         1       0       0       0       0       0       0
 10866 ;;      Locals:         4       0       0       0       0       0       0
 10867 ;;      Temps:          1       0       0       0       0       0       0
 10868 ;;      Totals:         6       0       0       0       0       0       0
 10869 ;;Total ram usage:        6 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    3
 10872 ;; This function calls:
 10873 ;;		_LCDBusyLoop
 10874 ;; This function is called by:
 10875 ;;		_Eco_Test
 10876 ;;		_Eco_Replay
 10877 ;;		_Send_Packet
 10878 ;;		_Receive_Packet
 10879 ;;		_LCDInit
 10880 ;;		_LCDWriteString
 10881 ;;		_LCDWriteInt
 10882 ;;		_LCDGotoXY
 10883 ;;		_RTUInit
 10884 ;;		_main
 10885 ;;		_getting_data
 10886 ;;		_rtc_setting
 10887 ;;		_data_to_center
 10888 ;;		_local_display
 10889 ;;		_tx_packet
 10890 ;;		_reset_unit
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           	psect	text48
 10895  001F5E                     __ptext48:
 10896                           	opt stack 0
 10897  001F5E                     _LCDByte:
 10898                           	opt stack 23
 10899                           
 10900                           ;incstack = 0
 10901  001F5E  FFFF               	dw	65535
 10902                           
 10903                           ;LCDByte@c stored from wreg
 10904  001F60  6E50               	movwf	LCDByte@c,c
 10905                           
 10906                           ;lcd_hd44780_pic18.c: 48: uint8_t hn,ln;
 10907                           ;lcd_hd44780_pic18.c: 49: uint8_t temp;
 10908                           ;lcd_hd44780_pic18.c: 51: hn=c>>4;
 10909  001F62  3850               	swapf	LCDByte@c,w,c
 10910  001F64  0B0F               	andlw	15
 10911  001F66  6E4E               	movwf	LCDByte@hn,c
 10912                           
 10913                           ;lcd_hd44780_pic18.c: 52: ln=(c & 0x0F);
 10914  001F68  5050               	movf	LCDByte@c,w,c
 10915  001F6A  0B0F               	andlw	15
 10916  001F6C  6E4F               	movwf	LCDByte@ln,c
 10917                           
 10918                           ;lcd_hd44780_pic18.c: 54: if(isdata==0)
 10919  001F6E  664C               	tstfsz	LCDByte@isdata,c
 10920  001F70  D002               	goto	l188
 10921                           
 10922                           ;lcd_hd44780_pic18.c: 55: (RD2=0);
 10923  001F72  9483               	bcf	3971,2,c	;volatile
 10924  001F74  D001               	goto	l189
 10925  001F76                     l188:
 10926                           
 10927                           ;lcd_hd44780_pic18.c: 56: else
 10928                           ;lcd_hd44780_pic18.c: 57: (RD2=1);
 10929  001F76  8483               	bsf	3971,2,c	;volatile
 10930  001F78                     l189:
 10931                           
 10932                           ;lcd_hd44780_pic18.c: 59: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 10933  001F78  F000               	nop	
 10934                           
 10935                           ;lcd_hd44780_pic18.c: 61: (RD6=1);
 10936  001F7A  8C83               	bsf	3971,6,c	;volatile
 10937                           
 10938                           ;lcd_hd44780_pic18.c: 65: temp=(PORTB & (~(0X0F<<4)))|((hn<<4));
 10939  001F7C  C04E  F04D         	movff	LCDByte@hn,??_LCDByte
 10940  001F80  3A4D               	swapf	??_LCDByte,f,c
 10941  001F82  0EF0               	movlw	240
 10942  001F84  164D               	andwf	??_LCDByte,f,c
 10943  001F86  5081               	movf	3969,w,c	;volatile
 10944  001F88  0B0F               	andlw	15
 10945  001F8A  104D               	iorwf	??_LCDByte,w,c
 10946  001F8C  6E51               	movwf	LCDByte@temp,c
 10947                           
 10948                           ;lcd_hd44780_pic18.c: 66: PORTB=temp;
 10949  001F8E  C051  FF81         	movff	LCDByte@temp,3969	;volatile
 10950                           
 10951                           ;lcd_hd44780_pic18.c: 68: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10952  001F92  D000               	nop2		;2 cycle nop
 10953                           
 10954                           ;lcd_hd44780_pic18.c: 72: (RD6=0);
 10955  001F94  9C83               	bcf	3971,6,c	;volatile
 10956                           
 10957                           ;lcd_hd44780_pic18.c: 74: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10958  001F96  D000               	nop2		;2 cycle nop
 10959                           
 10960                           ;lcd_hd44780_pic18.c: 77: (RD6=1);
 10961  001F98  8C83               	bsf	3971,6,c	;volatile
 10962                           
 10963                           ;lcd_hd44780_pic18.c: 79: temp=(PORTB & (~(0X0F<<4)))|((ln<<4));
 10964  001F9A  C04F  F04D         	movff	LCDByte@ln,??_LCDByte
 10965  001F9E  3A4D               	swapf	??_LCDByte,f,c
 10966  001FA0  0EF0               	movlw	240
 10967  001FA2  164D               	andwf	??_LCDByte,f,c
 10968  001FA4  5081               	movf	3969,w,c	;volatile
 10969  001FA6  0B0F               	andlw	15
 10970  001FA8  104D               	iorwf	??_LCDByte,w,c
 10971  001FAA  6E51               	movwf	LCDByte@temp,c
 10972                           
 10973                           ;lcd_hd44780_pic18.c: 81: PORTB=temp;
 10974  001FAC  C051  FF81         	movff	LCDByte@temp,3969	;volatile
 10975                           
 10976                           ;lcd_hd44780_pic18.c: 83: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10977  001FB0  D000               	nop2		;2 cycle nop
 10978                           
 10979                           ;lcd_hd44780_pic18.c: 87: (RD6=0);
 10980  001FB2  9C83               	bcf	3971,6,c	;volatile
 10981                           
 10982                           ;lcd_hd44780_pic18.c: 89: _delay((unsigned long)((1)*(10000000/4000000.0)));
 10983  001FB4  D000               	nop2		;2 cycle nop
 10984                           
 10985                           ;lcd_hd44780_pic18.c: 91: LCDBusyLoop();
 10986  001FB6  EC09  F010         	call	_LCDBusyLoop	;wreg free
 10987  001FBA  0012               	return	
 10988  001FBC  FFFF               	dw	65535	; errata NOP
 10989  001FBE                     __end_of_LCDByte:
 10990                           	opt stack 0
 10991                           tblptru	equ	0xFF8
 10992                           tblptrh	equ	0xFF7
 10993                           tblptrl	equ	0xFF6
 10994                           tablat	equ	0xFF5
 10995                           prodh	equ	0xFF4
 10996                           prodl	equ	0xFF3
 10997                           intcon	equ	0xFF2
 10998                           intcon2	equ	0xFF1
 10999                           postinc0	equ	0xFEE
 11000                           wreg	equ	0xFE8
 11001                           postinc1	equ	0xFE6
 11002                           postdec1	equ	0xFE5
 11003                           fsr1l	equ	0xFE1
 11004                           indf2	equ	0xFDF
 11005                           postinc2	equ	0xFDE
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function _LCDBusyLoop *****************
 11011 ;; Defined at:
 11012 ;;		line 94 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\lcd_hd44780_pic18.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;		None
 11015 ;; Auto vars:     Size  Location     Type
 11016 ;;  status          1   21[COMRAM] unsigned char 
 11017 ;;  temp            1   20[COMRAM] unsigned char 
 11018 ;;  busy            1   19[COMRAM] unsigned char 
 11019 ;; Return value:  Size  Location     Type
 11020 ;;		None               void
 11021 ;; Registers used:
 11022 ;;		wreg, status,2, status,0
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11028 ;;      Params:         0       0       0       0       0       0       0
 11029 ;;      Locals:         3       0       0       0       0       0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0
 11031 ;;      Totals:         3       0       0       0       0       0       0
 11032 ;;Total ram usage:        3 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    2
 11035 ;; This function calls:
 11036 ;;		Nothing
 11037 ;; This function is called by:
 11038 ;;		_LCDByte
 11039 ;;		_LCDInit
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text49
 11044  002012                     __ptext49:
 11045                           	opt stack 0
 11046  002012                     _LCDBusyLoop:
 11047                           	opt stack 23
 11048                           
 11049                           ;incstack = 0
 11050  002012  FFFF               	dw	65535
 11051                           
 11052                           ;lcd_hd44780_pic18.c: 98: uint8_t busy,status=0x00,temp;
 11053  002014  0E00               	movlw	0
 11054  002016  6E4B               	movwf	LCDBusyLoop@status,c
 11055                           
 11056                           ;lcd_hd44780_pic18.c: 101: TRISB|=(0x0f<<4);
 11057  002018  0EF0               	movlw	240
 11058  00201A  1293               	iorwf	3987,f,c	;volatile
 11059                           
 11060                           ;lcd_hd44780_pic18.c: 104: (RD3=1);
 11061  00201C  8683               	bsf	3971,3,c	;volatile
 11062                           
 11063                           ;lcd_hd44780_pic18.c: 105: (RD2=0);
 11064  00201E  9483               	bcf	3971,2,c	;volatile
 11065                           
 11066                           ;lcd_hd44780_pic18.c: 109: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 11067  002020  F000               	nop	
 11068  002022                     l5493:
 11069                           
 11070                           ;lcd_hd44780_pic18.c: 113: {
 11071                           ;lcd_hd44780_pic18.c: 115: (RD6=1);
 11072  002022  8C83               	bsf	3971,6,c	;volatile
 11073                           
 11074                           ;lcd_hd44780_pic18.c: 118: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 11075  002024  F000               	nop	
 11076                           
 11077                           ;lcd_hd44780_pic18.c: 120: status=(PORTB>>4);
 11078  002026  3881               	swapf	3969,w,c	;volatile
 11079  002028  0B0F               	andlw	15
 11080  00202A  6E4B               	movwf	LCDBusyLoop@status,c
 11081                           
 11082                           ;lcd_hd44780_pic18.c: 121: status=status<<4;
 11083  00202C  384B               	swapf	LCDBusyLoop@status,w,c
 11084  00202E  0BF0               	andlw	240
 11085  002030  6E4B               	movwf	LCDBusyLoop@status,c
 11086                           
 11087                           ;lcd_hd44780_pic18.c: 123: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 11088  002032  F000               	nop	
 11089                           
 11090                           ;lcd_hd44780_pic18.c: 126: (RD6=0);
 11091  002034  9C83               	bcf	3971,6,c	;volatile
 11092                           
 11093                           ;lcd_hd44780_pic18.c: 127: _delay((unsigned long)((1)*(10000000/4000000.0)));
 11094  002036  D000               	nop2		;2 cycle nop
 11095                           
 11096                           ;lcd_hd44780_pic18.c: 129: (RD6=1);
 11097  002038  8C83               	bsf	3971,6,c	;volatile
 11098                           
 11099                           ;lcd_hd44780_pic18.c: 130: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 11100  00203A  F000               	nop	
 11101                           
 11102                           ;lcd_hd44780_pic18.c: 132: temp=(PORTB>>4);
 11103  00203C  3881               	swapf	3969,w,c	;volatile
 11104  00203E  0B0F               	andlw	15
 11105  002040  6E4A               	movwf	LCDBusyLoop@temp,c
 11106                           
 11107                           ;lcd_hd44780_pic18.c: 133: temp&=0x0F;
 11108  002042  0E0F               	movlw	15
 11109  002044  164A               	andwf	LCDBusyLoop@temp,f,c
 11110                           
 11111                           ;lcd_hd44780_pic18.c: 135: status=status|temp;
 11112  002046  504B               	movf	LCDBusyLoop@status,w,c
 11113  002048  104A               	iorwf	LCDBusyLoop@temp,w,c
 11114  00204A  6E4B               	movwf	LCDBusyLoop@status,c
 11115                           
 11116                           ;lcd_hd44780_pic18.c: 137: busy=status & 0b10000000;
 11117  00204C  504B               	movf	LCDBusyLoop@status,w,c
 11118  00204E  0B80               	andlw	128
 11119  002050  6E49               	movwf	LCDBusyLoop@busy,c
 11120                           
 11121                           ;lcd_hd44780_pic18.c: 139: _delay((unsigned long)((0.5)*(10000000/4000000.0)));
 11122  002052  F000               	nop	
 11123                           
 11124                           ;lcd_hd44780_pic18.c: 141: (RD6=0);
 11125  002054  9C83               	bcf	3971,6,c	;volatile
 11126                           
 11127                           ;lcd_hd44780_pic18.c: 142: _delay((unsigned long)((1)*(10000000/4000000.0)));
 11128  002056  D000               	nop2		;2 cycle nop
 11129                           
 11130                           ;lcd_hd44780_pic18.c: 143: }while(busy);
 11131  002058  6649               	tstfsz	LCDBusyLoop@busy,c
 11132  00205A  D7E3               	goto	l5493
 11133                           
 11134                           ;lcd_hd44780_pic18.c: 145: (RD3=0);
 11135  00205C  9683               	bcf	3971,3,c	;volatile
 11136                           
 11137                           ;lcd_hd44780_pic18.c: 148: TRISB&=(~(0x0F<<4));
 11138  00205E  0E0F               	movlw	15
 11139  002060  1693               	andwf	3987,f,c	;volatile
 11140  002062  0012               	return	
 11141  002064  FFFF               	dw	65535	; errata NOP
 11142  002066                     __end_of_LCDBusyLoop:
 11143                           	opt stack 0
 11144                           tblptru	equ	0xFF8
 11145                           tblptrh	equ	0xFF7
 11146                           tblptrl	equ	0xFF6
 11147                           tablat	equ	0xFF5
 11148                           prodh	equ	0xFF4
 11149                           prodl	equ	0xFF3
 11150                           intcon	equ	0xFF2
 11151                           intcon2	equ	0xFF1
 11152                           postinc0	equ	0xFEE
 11153                           wreg	equ	0xFE8
 11154                           postinc1	equ	0xFE6
 11155                           postdec1	equ	0xFE5
 11156                           fsr1l	equ	0xFE1
 11157                           indf2	equ	0xFDF
 11158                           postinc2	equ	0xFDE
 11159                           fsr2h	equ	0xFDA
 11160                           fsr2l	equ	0xFD9
 11161                           status	equ	0xFD8
 11162                           
 11163 ;; *************** function _ISR *****************
 11164 ;; Defined at:
 11165 ;;		line 7 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\isr.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;		None
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;		None
 11170 ;; Return value:  Size  Location     Type
 11171 ;;		None               void
 11172 ;; Registers used:
 11173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11179 ;;      Params:         0       0       0       0       0       0       0
 11180 ;;      Locals:         0       0       0       0       0       0       0
 11181 ;;      Temps:         14       0       0       0       0       0       0
 11182 ;;      Totals:        14       0       0       0       0       0       0
 11183 ;;Total ram usage:       14 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; Hardware stack levels required when called:    1
 11186 ;; This function calls:
 11187 ;;		_SecondsInt
 11188 ;;		_USARTHandleRxInt
 11189 ;; This function is called by:
 11190 ;;		Interrupt level 2
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           	psect	intcode
 11195  000008                     __pintcode:
 11196                           	opt stack 0
 11197  000008                     _ISR:
 11198                           	opt stack 22
 11199                           
 11200                           ;incstack = 0
 11201  000008  FFFF               	dw	65535	; errata NOP
 11202  00000A  CFFA F03B          	movff	pclath,??_ISR
 11203  00000E  CFFB F03C          	movff	pclatu,??_ISR+1
 11204  000012  CFE9 F03D          	movff	fsr0l,??_ISR+2
 11205  000016  CFEA F03E          	movff	fsr0h,??_ISR+3
 11206  00001A  CFE1 F03F          	movff	fsr1l,??_ISR+4
 11207  00001E  CFE2 F040          	movff	fsr1h,??_ISR+5
 11208  000022  CFD9 F041          	movff	fsr2l,??_ISR+6
 11209  000026  CFDA F042          	movff	fsr2h,??_ISR+7
 11210  00002A  CFF3 F043          	movff	prodl,??_ISR+8
 11211  00002E  CFF4 F044          	movff	prodh,??_ISR+9
 11212  000032  CFF6 F045          	movff	tblptrl,??_ISR+10
 11213  000036  CFF7 F046          	movff	tblptrh,??_ISR+11
 11214  00003A  CFF8 F047          	movff	tblptru,??_ISR+12
 11215  00003E  CFF5 F048          	movff	tablat,??_ISR+13
 11216                           
 11217                           ;isr.c: 9: if (RCIE && RCIF) {
 11218  000042  BA9D               	btfsc	3997,5,c	;volatile
 11219  000044  AA9E               	btfss	3998,5,c	;volatile
 11220  000046  D003               	goto	i2l165
 11221                           
 11222                           ;isr.c: 10: USARTHandleRxInt();
 11223  000048  EC6A  F00E         	call	_USARTHandleRxInt	;wreg free
 11224  00004C  D006               	goto	i2l166
 11225  00004E                     i2l165:
 11226                           
 11227                           ;isr.c: 12: }
 11228                           ;isr.c: 14: if(INT0IE && INT0IF) {
 11229  00004E  B8F2               	btfsc	intcon,4,c	;volatile
 11230  000050  A2F2               	btfss	intcon,1,c	;volatile
 11231  000052  D003               	goto	i2l166
 11232                           
 11233                           ;isr.c: 15: SecondsInt();
 11234  000054  EC77  F011         	call	_SecondsInt	;wreg free
 11235                           
 11236                           ;isr.c: 16: INT0IF = 0;
 11237  000058  92F2               	bcf	intcon,1,c	;volatile
 11238  00005A                     i2l166:
 11239  00005A  C048  FFF5         	movff	??_ISR+13,tablat
 11240  00005E  C047  FFF8         	movff	??_ISR+12,tblptru
 11241  000062  C046  FFF7         	movff	??_ISR+11,tblptrh
 11242  000066  C045  FFF6         	movff	??_ISR+10,tblptrl
 11243  00006A  C044  FFF4         	movff	??_ISR+9,prodh
 11244  00006E  C043  FFF3         	movff	??_ISR+8,prodl
 11245  000072  C042  FFDA         	movff	??_ISR+7,fsr2h
 11246  000076  C041  FFD9         	movff	??_ISR+6,fsr2l
 11247  00007A  C040  FFE2         	movff	??_ISR+5,fsr1h
 11248  00007E  C03F  FFE1         	movff	??_ISR+4,fsr1l
 11249  000082  C03E  FFEA         	movff	??_ISR+3,fsr0h
 11250  000086  C03D  FFE9         	movff	??_ISR+2,fsr0l
 11251  00008A  C03C  FFFB         	movff	??_ISR+1,pclatu
 11252  00008E  C03B  FFFA         	movff	??_ISR,pclath
 11253  000092  0011               	retfie		f
 11254  000094  FFFF               	dw	65535	; errata NOP
 11255  000096                     __end_of_ISR:
 11256                           	opt stack 0
 11257                           pclatu	equ	0xFFB
 11258                           pclath	equ	0xFFA
 11259                           tblptru	equ	0xFF8
 11260                           tblptrh	equ	0xFF7
 11261                           tblptrl	equ	0xFF6
 11262                           tablat	equ	0xFF5
 11263                           prodh	equ	0xFF4
 11264                           prodl	equ	0xFF3
 11265                           intcon	equ	0xFF2
 11266                           intcon2	equ	0xFF1
 11267                           postinc0	equ	0xFEE
 11268                           fsr0h	equ	0xFEA
 11269                           fsr0l	equ	0xFE9
 11270                           wreg	equ	0xFE8
 11271                           postinc1	equ	0xFE6
 11272                           postdec1	equ	0xFE5
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8
 11280                           
 11281 ;; *************** function _USARTHandleRxInt *****************
 11282 ;; Defined at:
 11283 ;;		line 76 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\usart_pic18.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;		None
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  data            1    4[COMRAM] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;		None               void
 11290 ;; Registers used:
 11291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11297 ;;      Params:         0       0       0       0       0       0       0
 11298 ;;      Locals:         1       0       0       0       0       0       0
 11299 ;;      Temps:          4       0       0       0       0       0       0
 11300 ;;      Totals:         5       0       0       0       0       0       0
 11301 ;;Total ram usage:        5 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; This function calls:
 11304 ;;		Nothing
 11305 ;; This function is called by:
 11306 ;;		_ISR
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           	psect	text51
 11311  001CD4                     __ptext51:
 11312                           	opt stack 0
 11313  001CD4                     _USARTHandleRxInt:
 11314                           	opt stack 22
 11315                           
 11316                           ;incstack = 0
 11317  001CD4  FFFF               	dw	65535
 11318                           
 11319                           ;usart_pic18.c: 79: char data=RCREG;
 11320  001CD6  CFAE F03A          	movff	4014,USARTHandleRxInt@data	;volatile
 11321                           
 11322                           ;usart_pic18.c: 82: if(((UQEnd==128-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 11323  001CDA  5028               	movf	_UQEnd,w,c	;volatile
 11324  001CDC  0A7F               	xorlw	127
 11325  001CDE  A4D8               	btfss	status,2,c
 11326  001CE0  D003               	goto	i2l4853
 11327  001CE2  5029               	movf	_UQFront,w,c	;volatile
 11328  001CE4  B4D8               	btfsc	status,2,c
 11329  001CE6  D014               	goto	i2l4855
 11330  001CE8                     i2l4853:
 11331  001CE8  C029  F036         	movff	_UQFront,??_USARTHandleRxInt	;volatile
 11332  001CEC  6A37               	clrf	(??_USARTHandleRxInt+1)& (0+255),c
 11333  001CEE  BE36               	btfsc	??_USARTHandleRxInt& (0+255),7,c
 11334  001CF0  0637               	decf	(??_USARTHandleRxInt+1)& (0+255),f,c
 11335  001CF2  C028  F038         	movff	_UQEnd,??_USARTHandleRxInt+2	;volatile
 11336  001CF6  6A39               	clrf	(??_USARTHandleRxInt+3)& (0+255),c
 11337  001CF8  BE38               	btfsc	(??_USARTHandleRxInt+2)& (0+255),7,c
 11338  001CFA  0639               	decf	(??_USARTHandleRxInt+3)& (0+255),f,c
 11339  001CFC  0E01               	movlw	1
 11340  001CFE  2638               	addwf	??_USARTHandleRxInt+2,f,c
 11341  001D00  0E00               	movlw	0
 11342  001D02  2239               	addwfc	??_USARTHandleRxInt+3,f,c
 11343  001D04  5037               	movf	??_USARTHandleRxInt+1,w,c
 11344  001D06  1839               	xorwf	??_USARTHandleRxInt+3,w,c
 11345  001D08  E102               	bnz	i2u253_45
 11346  001D0A  5036               	movf	??_USARTHandleRxInt,w,c
 11347  001D0C  1838               	xorwf	??_USARTHandleRxInt+2,w,c
 11348  001D0E                     i2u253_45:
 11349  001D0E  B4D8               	btfsc	status,2,c
 11350  001D10                     i2l4855:
 11351                           
 11352                           ;usart_pic18.c: 83: {
 11353                           ;usart_pic18.c: 85: UQFront++;
 11354  001D10  2A29               	incf	_UQFront,f,c	;volatile
 11355                           
 11356                           ;usart_pic18.c: 87: }
 11357                           ;usart_pic18.c: 89: if(UQEnd==128-1)
 11358                           
 11359                           ;usart_pic18.c: 86: if(UQFront==128) UQFront=0;
 11360  001D12  5028               	movf	_UQEnd,w,c	;volatile
 11361  001D14  0A7F               	xorlw	127
 11362  001D16  A4D8               	btfss	status,2,c
 11363  001D18  D003               	goto	i2l4863
 11364                           
 11365                           ;usart_pic18.c: 90: UQEnd=0;
 11366  001D1A  0E00               	movlw	0
 11367  001D1C  6E28               	movwf	_UQEnd,c	;volatile
 11368  001D1E  D001               	goto	i2l4865
 11369  001D20                     i2l4863:
 11370                           
 11371                           ;usart_pic18.c: 91: else
 11372                           ;usart_pic18.c: 92: UQEnd++;
 11373  001D20  2A28               	incf	_UQEnd,f,c	;volatile
 11374  001D22                     i2l4865:
 11375                           
 11376                           ;usart_pic18.c: 94: URBuff[UQEnd]=data;
 11377  001D22  5028               	movf	_UQEnd,w,c	;volatile
 11378  001D24  0D01               	mullw	1
 11379  001D26  0101               	movlb	1	; () banked
 11380  001D28  0E00               	movlw	low _URBuff	;volatile
 11381  001D2A  24F3               	addwf	prodl,w,c
 11382  001D2C  6ED9               	movwf	fsr2l,c
 11383  001D2E  0101               	movlb	1	; () banked
 11384  001D30  0E01               	movlw	high _URBuff	;volatile
 11385  001D32  20F4               	addwfc	prodh,w,c
 11386  001D34  6EDA               	movwf	fsr2h,c
 11387  001D36  C03A  FFDF         	movff	USARTHandleRxInt@data,indf2
 11388                           
 11389                           ; BSR set to: 1
 11390                           ;usart_pic18.c: 96: if(UQFront==-1) UQFront=0;
 11391  001D3A  2829               	incf	_UQFront,w,c	;volatile
 11392  001D3C  A4D8               	btfss	status,2,c
 11393  001D3E  D002               	goto	i2l980
 11394                           
 11395                           ; BSR set to: 1
 11396  001D40  0E00               	movlw	0
 11397  001D42  6E29               	movwf	_UQFront,c	;volatile
 11398  001D44                     i2l980:
 11399                           
 11400                           ; BSR set to: 1
 11401  001D44  0012               	return	
 11402  001D46  FFFF               	dw	65535	; errata NOP
 11403  001D48                     __end_of_USARTHandleRxInt:
 11404                           	opt stack 0
 11405                           pclatu	equ	0xFFB
 11406                           pclath	equ	0xFFA
 11407                           tblptru	equ	0xFF8
 11408                           tblptrh	equ	0xFF7
 11409                           tblptrl	equ	0xFF6
 11410                           tablat	equ	0xFF5
 11411                           prodh	equ	0xFF4
 11412                           prodl	equ	0xFF3
 11413                           intcon	equ	0xFF2
 11414                           intcon2	equ	0xFF1
 11415                           postinc0	equ	0xFEE
 11416                           fsr0h	equ	0xFEA
 11417                           fsr0l	equ	0xFE9
 11418                           wreg	equ	0xFE8
 11419                           postinc1	equ	0xFE6
 11420                           postdec1	equ	0xFE5
 11421                           fsr1h	equ	0xFE2
 11422                           fsr1l	equ	0xFE1
 11423                           indf2	equ	0xFDF
 11424                           postinc2	equ	0xFDE
 11425                           fsr2h	equ	0xFDA
 11426                           fsr2l	equ	0xFD9
 11427                           status	equ	0xFD8
 11428                           
 11429 ;; *************** function _SecondsInt *****************
 11430 ;; Defined at:
 11431 ;;		line 148 in file "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Central Unit\rtu.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;		None
 11434 ;; Auto vars:     Size  Location     Type
 11435 ;;		None
 11436 ;; Return value:  Size  Location     Type
 11437 ;;		None               void
 11438 ;; Registers used:
 11439 ;;		wreg, status,2, status,0
 11440 ;; Tracked objects:
 11441 ;;		On entry : 0/0
 11442 ;;		On exit  : 0/0
 11443 ;;		Unchanged: 0/0
 11444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11445 ;;      Params:         0       0       0       0       0       0       0
 11446 ;;      Locals:         0       0       0       0       0       0       0
 11447 ;;      Temps:          0       0       0       0       0       0       0
 11448 ;;      Totals:         0       0       0       0       0       0       0
 11449 ;;Total ram usage:        0 bytes
 11450 ;; Hardware stack levels used:    1
 11451 ;; This function calls:
 11452 ;;		Nothing
 11453 ;; This function is called by:
 11454 ;;		_ISR
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           	psect	text52
 11459  0022EE                     __ptext52:
 11460                           	opt stack 0
 11461  0022EE                     _SecondsInt:
 11462                           	opt stack 22
 11463                           
 11464                           ; BSR set to: 1
 11465                           ;incstack = 0
 11466  0022EE  FFFF               	dw	65535
 11467                           
 11468                           ;rtu.c: 150: RC1 = ~RC1;
 11469  0022F0  7282               	btg	3970,1,c	;volatile
 11470                           
 11471                           ;rtu.c: 151: sec_flag = 1;
 11472  0022F2  0E01               	movlw	1
 11473  0022F4  6E33               	movwf	_sec_flag,c
 11474                           
 11475                           ;rtu.c: 152: seconds++;
 11476  0022F6  2A34               	incf	_seconds,f,c
 11477                           
 11478                           ;rtu.c: 153: if(seconds == 60)
 11479  0022F8  5034               	movf	_seconds,w,c
 11480  0022FA  0A3C               	xorlw	60
 11481  0022FC  A4D8               	btfss	status,2,c
 11482  0022FE  D004               	goto	i2l687
 11483                           
 11484                           ;rtu.c: 154: {
 11485                           ;rtu.c: 155: min_flag = 1;
 11486  002300  0E01               	movlw	1
 11487  002302  6E30               	movwf	_min_flag,c
 11488                           
 11489                           ;rtu.c: 156: seconds = 0;
 11490  002304  0E00               	movlw	0
 11491  002306  6E34               	movwf	_seconds,c
 11492  002308                     i2l687:
 11493  002308  0012               	return	
 11494  00230A  FFFF               	dw	65535	; errata NOP
 11495  00230C                     __end_of_SecondsInt:
 11496                           	opt stack 0
 11497                           pclatu	equ	0xFFB
 11498                           pclath	equ	0xFFA
 11499                           tblptru	equ	0xFF8
 11500                           tblptrh	equ	0xFF7
 11501                           tblptrl	equ	0xFF6
 11502                           tablat	equ	0xFF5
 11503                           prodh	equ	0xFF4
 11504                           prodl	equ	0xFF3
 11505                           intcon	equ	0xFF2
 11506                           intcon2	equ	0xFF1
 11507                           postinc0	equ	0xFEE
 11508                           fsr0h	equ	0xFEA
 11509                           fsr0l	equ	0xFE9
 11510                           wreg	equ	0xFE8
 11511                           postinc1	equ	0xFE6
 11512                           postdec1	equ	0xFE5
 11513                           fsr1h	equ	0xFE2
 11514                           fsr1l	equ	0xFE1
 11515                           indf2	equ	0xFDF
 11516                           postinc2	equ	0xFDE
 11517                           fsr2h	equ	0xFDA
 11518                           fsr2l	equ	0xFD9
 11519                           status	equ	0xFD8
 11520                           pclatu	equ	0xFFB
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           intcon2	equ	0xFF1
 11530                           postinc0	equ	0xFEE
 11531                           fsr0h	equ	0xFEA
 11532                           fsr0l	equ	0xFE9
 11533                           wreg	equ	0xFE8
 11534                           postinc1	equ	0xFE6
 11535                           postdec1	equ	0xFE5
 11536                           fsr1h	equ	0xFE2
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           fsr2h	equ	0xFDA
 11541                           fsr2l	equ	0xFD9
 11542                           status	equ	0xFD8
 11543                           
 11544                           	psect	rparam
 11545  0000                     pclatu	equ	0xFFB
 11546                           pclath	equ	0xFFA
 11547                           tblptru	equ	0xFF8
 11548                           tblptrh	equ	0xFF7
 11549                           tblptrl	equ	0xFF6
 11550                           tablat	equ	0xFF5
 11551                           prodh	equ	0xFF4
 11552                           prodl	equ	0xFF3
 11553                           intcon	equ	0xFF2
 11554                           intcon2	equ	0xFF1
 11555                           postinc0	equ	0xFEE
 11556                           fsr0h	equ	0xFEA
 11557                           fsr0l	equ	0xFE9
 11558                           wreg	equ	0xFE8
 11559                           postinc1	equ	0xFE6
 11560                           postdec1	equ	0xFE5
 11561                           fsr1h	equ	0xFE2
 11562                           fsr1l	equ	0xFE1
 11563                           indf2	equ	0xFDF
 11564                           postinc2	equ	0xFDE
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8


Data Sizes:
    Strings     845
    Constant    57
    Data        8
    BSS         309
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     47     108
    BANK0           128      0     128
    BANK1           256      7     135
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_76(CODE[19]), STR_75(CODE[2]), STR_74(CODE[2]), STR_73(CODE[7]), 
		 -> STR_72(CODE[6]), STR_71(CODE[17]), STR_70(CODE[17]), STR_69(CODE[16]), 
		 -> STR_68(CODE[18]), STR_67(CODE[16]), STR_66(CODE[18]), STR_65(CODE[17]), 
		 -> STR_64(CODE[2]), STR_63(CODE[2]), STR_62(CODE[21]), STR_61(CODE[21]), 
		 -> STR_60(CODE[17]), STR_59(CODE[20]), STR_58(CODE[13]), STR_57(CODE[12]), 
		 -> STR_56(CODE[13]), STR_55(CODE[14]), STR_54(CODE[18]), STR_53(CODE[2]), 
		 -> STR_52(CODE[2]), STR_51(CODE[17]), STR_50(CODE[14]), STR_49(CODE[17]), 
		 -> STR_48(CODE[14]), STR_47(CODE[16]), STR_46(CODE[18]), STR_45(CODE[11]), 
		 -> STR_44(CODE[16]), STR_43(CODE[14]), STR_42(CODE[16]), STR_41(CODE[18]), 
		 -> STR_40(CODE[11]), STR_39(CODE[16]), STR_38(CODE[17]), STR_37(CODE[14]), 
		 -> STR_36(CODE[17]), STR_35(CODE[14]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[16]), STR_31(CODE[15]), STR_30(CODE[15]), STR_29(CODE[15]), 
		 -> STR_28(CODE[16]), STR_27(CODE[15]), STR_26(CODE[13]), STR_25(CODE[11]), 
		 -> STR_24(CODE[16]), STR_23(CODE[14]), STR_22(CODE[15]), STR_21(CODE[12]), 
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[18]), STR_17(CODE[17]), 
		 -> STR_16(CODE[15]), STR_15(CODE[18]), STR_14(CODE[23]), STR_13(CODE[17]), 
		 -> STR_12(CODE[20]), STR_11(CODE[11]), STR_10(CODE[17]), STR_9(CODE[12]), 
		 -> STR_8(CODE[16]), STR_7(CODE[18]), STR_6(CODE[14]), STR_5(CODE[17]), 
		 -> STR_4(CODE[9]), STR_3(CODE[16]), STR_2(CODE[9]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _rtc_setting->_tx_packet
    _local_display->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _getting_data->_tx_packet
    _write_packet_to_page->_rom_byte_write
    _rom_byte_write->_WriteI2C
    _Receive_Packet->_Eco_Replay
    _Eco_Replay->_LCDWriteString
    _LCDGotoXY->_LCDByte
    _Creat_RTC_Packet->_Calculate_CRC
    _data_to_center->_tx_packet
    _tx_packet->_Send_Packet
    _Send_Packet->_Eco_Test
    _Eco_Test->_LCDWriteString
    _LCDWriteString->_LCDByte
    _Check_Busy_Line->_USARTDataAvailable
    _USARTFlushBuffer->_USARTDataAvailable
    _USARTFlushBuffer->_USARTReadData
    _read_packet_from_page->_rom_byte_read
    _rom_byte_read->_WriteI2C
    _clear_rom->_WriteI2C
    _beep->_MyDelay
    _RTUInit->_LCDInit
    _ds1307_set_date_time->_WriteI2C
    _ds1307_set_date_time->_bin2bcd
    _ds1307_init->_WriteI2C
    _ds1307_init->_bcd2bin
    _ds1307_init->_bin2bcd
    _ds1307_get_time->_WriteI2C
    _ds1307_get_time->_bcd2bin
    _ds1307_get_date->_WriteI2C
    _ds1307_get_date->_bcd2bin
    _WriteI2C->_IdleI2C
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _ISR in COMRAM

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_getting_data

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  359905
                                              6 BANK1      1     1      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            _MyDelay
                            _RTUInit
                               _beep
                     _data_to_center
                    _ds1307_get_time
                             _getkey
                       _getting_data
                      _local_display
                        _rtc_setting
 ---------------------------------------------------------------------------------
 (1) _rtc_setting                                          5     5      0  110425
                                              0 BANK1      5     5      0
                       _Clear_Packet
                   _Creat_RTC_Packet
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
                            _MyDelay
                     _Receive_Packet
                        _Write_b_eep
                    _ds1307_get_time
               _ds1307_set_date_time
                          _tx_packet
 ---------------------------------------------------------------------------------
 (1) _local_display                                        1     1      0   27861
                                             42 COMRAM     1     1      0
                            _LCDByte
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (2) _LCDWriteInt                                         14    11      3    7559
                                             28 COMRAM    14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     552
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     556
                                             19 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _getting_data                                         6     6      0  103201
                                              0 BANK1      6     6      0
                       _Clear_Packet
                   _Creat_RTC_Packet
                            _LCDByte
                          _LCDGotoXY
                     _LCDWriteString
                            _MyDelay
                     _Receive_Packet
                        _Write_b_eep
                          _tx_packet
               _write_packet_to_page
 ---------------------------------------------------------------------------------
 (2) _write_packet_to_page                                 9     7      2     662
                                             30 COMRAM     9     7      2
                     _rom_byte_write
 ---------------------------------------------------------------------------------
 (3) _rom_byte_write                                       8     5      3     390
                                             22 COMRAM     8     5      3
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _Receive_Packet                                       6     6      0   28379
                                             36 COMRAM     6     6      0
                          _Check_CRC
                         _Eco_Replay
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _Eco_Replay                                           4     4      0   14006
                                             32 COMRAM     4     4      0
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (3) _Check_CRC                                           15    15      0     321
                                             19 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            2     1      1    6563
                                             28 COMRAM     2     1      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _Creat_RTC_Packet                                    10    10      0     930
                                             31 COMRAM    10    10      0
                      _Calculate_CRC
                       _Clear_Packet
                       _Creat_Packet
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Creat_Packet                                         2     1      1     152
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _Calculate_CRC                                       12    10      2      92
                                             19 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _getkey                                               3     1      2     111
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _data_to_center                                       2     2      0   67034
                                              0 BANK1      2     2      0
                       _Clear_Packet
                            _LCDByte
                     _LCDWriteString
                            _MyDelay
                        _Write_b_eep
                          _clear_rom
              _read_packet_from_page
                          _tx_packet
 ---------------------------------------------------------------------------------
 (2) _tx_packet                                            2     2      0   44328
                                             45 COMRAM     2     2      0
                            _LCDByte
                     _LCDWriteString
                            _MyDelay
                        _Send_Packet
 ---------------------------------------------------------------------------------
 (3) _Send_Packet                                          7     7      0   28221
                                             38 COMRAM     7     7      0
                           _Eco_Test
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _Eco_Test                                             6     6      0   14092
                                             32 COMRAM     6     6      0
                    _Check_Busy_Line
                            _LCDByte
                     _LCDWriteString
                 _USARTDataAvailable
                   _USARTFlushBuffer
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (4) _USARTWriteChar                                       1     1      0      22
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDWriteString                                       4     2      2    9446
                                             28 COMRAM     4     2      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _Check_Busy_Line                                      4     4      0     139
                                             20 COMRAM     4     4      0
                 _USARTDataAvailable
                   _USARTFlushBuffer
 ---------------------------------------------------------------------------------
 (4) _USARTFlushBuffer                                     0     0      0      34
                 _USARTDataAvailable
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (4) _USARTReadData                                        1     1      0      34
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _USARTDataAvailable                                   1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _read_packet_from_page                               10     8      2     429
                                             30 COMRAM    10     8      2
                      _rom_byte_read
 ---------------------------------------------------------------------------------
 (3) _rom_byte_read                                        8     6      2     200
                                             22 COMRAM     8     6      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _clear_rom                                            4     4      0     114
                                             22 COMRAM     4     4      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _Clear_Packet                                         1     1      0      69
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _beep                                                 2     0      2    2341
                                             22 COMRAM     2     0      2
                            _MyDelay
 ---------------------------------------------------------------------------------
 (1) _RTUInit                                              5     5      0   18658
                                             31 COMRAM     4     4      0
                            _LCDByte
                            _LCDInit
                            _MyDelay
                            _OpenI2C
                         _Read_b_eep
                          _USARTInit
                        _Write_b_eep
                    _ds1307_get_date
                    _ds1307_get_time
                        _ds1307_init
               _ds1307_set_date_time
 ---------------------------------------------------------------------------------
 (2) _ds1307_set_date_time                                 0     0      0     115
                            _IdleI2C
                           _WriteI2C
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (2) _ds1307_init                                          1     1      0     277
                                             22 COMRAM     1     1      0
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
                            _bin2bcd
 ---------------------------------------------------------------------------------
 (3) _bin2bcd                                              3     3      0      93
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ds1307_get_time                                      0     0      0     113
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (2) _ds1307_get_date                                      0     0      0     113
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
                            _bcd2bin
 ---------------------------------------------------------------------------------
 (3) _bcd2bin                                              3     3      0      91
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             2     2      0      22
                                             20 COMRAM     2     2      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3    6120
                                             19 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            4     2      2      86
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     406
                                             19 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                             19 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _MyDelay                                              3     1      2    2253
                                             19 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              3     3      0    4476
                                             28 COMRAM     3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (5) _LCDByte                                              6     5      1    4269
                                             22 COMRAM     6     5      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (6) _LCDBusyLoop                                          3     3      0     117
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 14    14      0      23
                                              5 COMRAM    14    14      0
                         _SecondsInt
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (9) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (9) _SecondsInt                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDByte
     _LCDBusyLoop
   _LCDGotoXY
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     ___awdiv
     ___awmod
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MyDelay
   _RTUInit
     _LCDByte
       _LCDBusyLoop
     _LCDInit
       _LCDBusyLoop
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _OpenI2C
     _Read_b_eep
     _USARTInit
     _Write_b_eep
     _ds1307_get_date
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_get_time
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_init
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
       _bin2bcd
     _ds1307_set_date_time
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _bin2bcd
   _beep
     _MyDelay
   _data_to_center
     _Clear_Packet
     _LCDByte
       _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Write_b_eep
     _clear_rom
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _read_packet_from_page
       _rom_byte_read
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
   _ds1307_get_time
     _IdleI2C
     _ReadI2C
     _WriteI2C
       _IdleI2C
     _bcd2bin
   _getkey
   _getting_data
     _Clear_Packet
     _Creat_RTC_Packet
       _Calculate_CRC
       _Clear_Packet
       _Creat_Packet
       _Read_b_eep
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Receive_Packet
       _Check_CRC
       _Eco_Replay
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _USARTDataAvailable
       _USARTFlushBuffer
         _USARTDataAvailable
         _USARTReadData
       _USARTReadData
       _USARTWriteChar
     _Write_b_eep
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
     _write_packet_to_page
       _rom_byte_write
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _local_display
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
   _rtc_setting
     _Clear_Packet
     _Creat_RTC_Packet
       _Calculate_CRC
       _Clear_Packet
       _Creat_Packet
       _Read_b_eep
     _LCDByte
       _LCDBusyLoop
     _LCDGotoXY
       _LCDByte
         _LCDBusyLoop
     _LCDWriteInt
       _LCDByte
         _LCDBusyLoop
       ___awdiv
       ___awmod
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _MyDelay
     _Receive_Packet
       _Check_CRC
       _Eco_Replay
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _USARTDataAvailable
       _USARTFlushBuffer
         _USARTDataAvailable
         _USARTReadData
       _USARTReadData
       _USARTWriteChar
     _Write_b_eep
     _ds1307_get_time
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
       _bcd2bin
     _ds1307_set_date_time
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _bin2bcd
     _tx_packet
       _LCDByte
         _LCDBusyLoop
       _LCDWriteString
         _LCDByte
           _LCDBusyLoop
       _MyDelay
       _Send_Packet
         _Eco_Test
           _Check_Busy_Line
             _USARTDataAvailable
             _USARTFlushBuffer
               _USARTDataAvailable
               _USARTReadData
           _LCDByte
             _LCDBusyLoop
           _LCDWriteString
             _LCDByte
               _LCDBusyLoop
           _USARTDataAvailable
           _USARTFlushBuffer
             _USARTDataAvailable
             _USARTReadData
           _USARTReadData
           _USARTWriteChar
         _LCDByte
           _LCDBusyLoop
         _LCDWriteString
           _LCDByte
             _LCDBusyLoop
         _USARTDataAvailable
         _USARTFlushBuffer
           _USARTDataAvailable
           _USARTReadData
         _USARTReadData
         _USARTWriteChar

 _ISR (ROOT)
   _SecondsInt
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      7      87       7       52.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2F      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     173      15        0.0%
DATA                 0      0     173       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Jan 05 14:39:53 2016

                  ?_LCDBusyLoop 0036                               _c 002A               tx_packet@attempts 0063  
                   _SSPSTATbits 000FC7                              l71 20FA                              l82 129E  
                            l91 13F4                              l92 145E                              l69 20F0  
                            l97 0E90                    ___awdiv@sign 004E                              _hr 002E  
             ??_Check_Busy_Line 004A              USARTInit@baud_rate 0049                     __CFG_OSC$HS 000000  
                           l112 0CA6                             l105 0F82                             l114 0D72  
                           l115 0E38                             l230 2186                             l400 15E6  
                           l226 11B2                             l412 18D0                             l332 1C60  
                           l421 18FA                             l406 189E                             l430 1BE2  
                           l326 1AD0                             l415 18DE                             l263 1EB0  
                           l424 1900                             l336 1CBA                             l272 1DDA  
                           l409 18B8                             l433 1BFC                             l281 1E20  
                           l418 18EC                             l442 1C2C                             l266 1EE0  
                           l339 1CBC                             l275 1E00                             l188 1F76  
                           l436 1C10                             l700 1F56                             l189 1F78  
                           l445 1C32                             l373 15FC                             l541 10A0  
                           l382 1630                             l278 1E1A                             l518 12D0  
                           l439 1C1E                             l391 169C                             l376 1616  
                           l385 1654                             l379 162A                             l388 1678  
                           l397 157C                             l680 22BE                             l672 0870  
          ??_USARTDataAvailable 0049                             l695 1F36                             l696 1F5A  
                           l697 1F3E                             l698 1F46                             l699 1F4E  
                           l875 0672                             l956 2368                             l949 1BBC  
                           l991 2142                             l984 21FA                             l986 21F8  
                           _RB1 007C09                             _RC0 007C10                             _RC1 007C11  
                           _RD0 007C18                             _RC2 007C12                             _RD1 007C19  
                           _RE0 007C20                             _RD2 007C1A                             _RE1 007C21  
                           _RD3 007C1B                             _RC5 007C15                             _RE2 007C22  
                           _RD4 007C1C                             _RD5 007C1D                             _RD6 007C1E  
                           _RD7 007C1F                             _ISR 0008                  ?_USARTReadData 0036  
                  __CFG_BOR$OFF 000000                             _day 002B                             _dow 002D  
                           _min 002F                             _sec 0032            __size_of_Write_b_eep 003C  
                  ___awmod@sign 004E                             prod 000FF3                             wreg 000FE8  
             ??_ds1307_get_date 004C         LCDWriteInt@field_length 0054               ??_ds1307_get_time 004C  
               __end_of_LCDByte 1FBE                 __end_of_LCDInit 1B58                    __CFG_LVP$OFF 000000  
                  ?_LCDWriteInt 0052                            ?_ISR 0036                     LCDByte@temp 0051  
                  __CFG_WDT$OFF 000000                            l1220 1E5A                            l1217 1E90  
                          l1229 1E86                            l1158 21B2                            l1195 224E  
                          l1196 2250                            l6013 1D7E                            l6017 22AA  
                          l6009 1D58                            l6113 0C90                            l6041 1702  
                          l6043 170A                            l6035 16EC                            l6301 2152  
                          l6061 1742                            l6053 172A                            l6045 170E  
                          l6029 16CC                            l7021 0740                            l6303 2156  
                          l6311 217A                            l5601 1840                            l6305 215A  
                          l6321 1786                            l7105 0144                            l6057 1734  
                          l6081 197E                            l6073 1954                            l6251 1B32  
                          l5531 2310                            l7123 0192                            l6083 1986  
                          l5461 2140                            l5453 2126                            l5445 210A  
                          l5533 2314                            l5605 1862                            l6309 2160  
                          l6085 198A                            l6093 19A8                            l6077 1970  
                          l7037 079C                            l5703 1E66                            l5471 21D2  
                          l5607 1878                            l6183 0DDE                            l6327 17B0  
                          l5617 2352                            l5609 187C                            l6185 0DE2  
                          l7073 00AE                            l6097 19B6                            l6089 199E  
                          l6281 1146                            l6347 1AC8                            l6339 1A8A  
                          l6523 12DA                            l6515 12C4                            l5731 13B2  
                          l6187 0DE8                            l6283 114A                            l6275 1136  
                          l7403 04E6                            l5493 2022                            l5477 21F6  
                          l5653 1246                            l5805 0ED4                            l7157 025C  
                          l7165 02A2                            l7085 00EE                            l6285 115E  
                          l6269 10F0                            l7069 0838                            l7421 054E  
                          l7413 051A                            l6711 098C                            l6367 1CA2  
                          l5583 20F8                            l5575 20E0                            l5647 122E  
                          l5831 0F46                            l6199 0E20                            l7079 00CC  
                          l6287 117C                            l5569 20C8                            l5657 1256  
                          l5825 0F2E                            l6633 19F8                            l5737 13C8  
                          l5675 1286                            l5835 0F56                            l5851 0F80  
                          l6651 1A40                            l6627 19E8                            l6619 19CE  
                          l7435 05B2                            l5589 17F6                            l6629 19EA  
                          l6813 0A94                            l7429 0582                            l7445 05E6  
                          l7357 03D8                            l6591 1B64                            l6639 1A0C  
                          l7199 036C                            l7359 03E0                            l7391 0488  
                          l6593 1B68                            l5953 2276                            l6729 0A0C  
                          l6817 0AAA                            l6753 1EFE                            l5857 0F92  
                          l5769 1446                            l7811 1BB4                            l6595 1B6C  
                          l6851 0B54                            l6835 0AFA                            l5875 1036  
                          l5859 0F94                            l7395 04A8                            l7805 1B96  
                          l6589 1B60                            l5949 2266                            l6757 1F12  
                          l7807 1BA0                            l6599 1B72                            l6695 091E  
                          l6847 0B3E                            l5879 105C                            l6919 14AC  
                          l7809 1BAA                            l6881 0BE8                            l6769 1F2A  
                          l5889 109E                            l6945 152C                            l5995 220A  
                          l6971 0664                            l6869 0BA4                            l6975 0678  
                          l6983 06BE                            l6967 0658                            STR_1 7FD4  
                          STR_2 7FE7                            STR_3 7E90                            STR_4 7FDE  
                          STR_5 7E1E                            STR_6 7F4F                            STR_7 7D61  
                          STR_8 7EA0                            STR_9 7F9C                            u3325 1096  
                          u5007 13C0                            u5017 13FC                            u5107 0E7E  
                          u5027 140C                      _Eco_Replay 138C                            u5117 0E9E  
                          u5037 1424                            u4095 21BE                            u5207 1CC6  
                          u5127 0EAE                            u5047 12FC                            u4096 21C0  
                          u5217 08C8                            u5137 0EEA                            u5057 1F04  
                          u3641 10B0                            u5227 08DE                            u5147 0EFA  
                          u5067 0B20                            _PEIE 007F96                            u5237 0936  
                          u5157 0F3E                            u5077 0B38                            u3725 176E  
                          u5247 094C                            u5167 11F4                            u5087 0BCA  
                          u5257 0A06                            u3745 1A74                            u5177 1204  
                          u5097 0BE2                            u5267 1648                            u5187 123E  
                          _RCIE 007CED                            _RCIF 007CF5                            u5277 22B0  
                          u5197 20D8                            u5287 1ADE                            u4907 1EEA  
                          u4917 0D0C                            u4927 0D1C                            u4937 0D36  
                          u4857 0768                            u4947 0D46                            u4867 0232  
                          u4957 0D7A                            u4877 024A                            u4967 0D8A  
                          u4887 0342                            u4977 0DA4                            u4897 035A  
                          u4987 0DB4                            u4997 0DEE                            _Hum1 000F  
                          _Hum2 0011          __end_of_USARTWriteChar 2374                            _beep 2324  
                          _main 03B4              __size_of_LCDGotoXY 0044                            _year 0035  
                          fsr0h 000FEA                            fsr1h 000FE2                            fsr0l 000FE9  
                          fsr2h 000FDA                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9               USARTReadData@data 0049       __size_of_Creat_RTC_Packet 00EA  
                          pclat 000FFA                   Send_Packet@ts 005D                            prodh 000FF4  
                          prodl 000FF3                 __end_of_RTUInit 0A54                            start 0096  
               __end_of_IdleI2C 2364                     getkey@msecs 0049                    rtc_setting@i 0184  
                  rtc_setting@s 0182                 __end_of_ReadI2C 225A                 __end_of_MyDelay 22CC  
                         ??_ISR 003B                 __end_of_OpenI2C 22EE                   ?_getting_data 0036  
             ?_USARTHandleRxInt 0036                 ??_rom_byte_read 004E                   __CFG_OSCS$OFF 000000  
               __end_of_bcd2bin 22A6                bcd2bin@bcd_value 004A              Calculate_CRC@count 0054  
                         ?_beep 004C                           ?_main 0036                 __end_of___awdiv 174E  
            ??_USARTHandleRxInt 0036                           _EEADR 000FA9                           STR_10 7E2F  
                         STR_11 7FC9                           STR_20 7FFD                           STR_12 7CF2  
                         STR_13 7CB8                           STR_21 7F90                           STR_22 7ECE  
                         STR_30 7EB0                           STR_14 7CB2                           STR_31 7EBF  
                         STR_23 7F41                           STR_15 7D73                           STR_32 7E70  
                         STR_40 7FA8                           STR_16 7EEC                           STR_24 7E80  
                         STR_25 7FBE                           STR_17 7DC9                           STR_33 7DB8  
                         STR_41 7D3D                           STR_34 7DB8                           STR_26 7F6A  
                         STR_50 7F17                           STR_42 7E40                           STR_18 7D4F  
                         STR_19 7FFD                           STR_35 7F25                           STR_43 7F09  
                         STR_27 7EBF                           STR_51 7D85                           STR_44 7E60  
                         STR_28 7E70                           STR_60 7DEB                           STR_36 7DDA  
               __end_of___awmod 19C2                           STR_45 7FB3                           STR_37 7F33  
                         STR_29 7EDD                           STR_61 7CC9                           STR_62 7CC9  
                         STR_46 7D3D                           STR_38 7DDA                           STR_70 7DFC  
                         STR_54 7D19                           STR_47 7E40                           STR_63 7FFD  
                         STR_55 7EFB                           STR_39 7E60                           STR_71 7DA7  
                         STR_48 7F09                           STR_64 7FFD                           STR_72 7FF7  
                         STR_56 7F77                           STR_73 7FF0                           STR_57 7F84  
                         STR_49 7E0D                           STR_65 7D96                           STR_74 7FFD  
                         STR_58 7F5D                           STR_66 7D2B                           STR_75 7FFD  
                         STR_67 7E50                           STR_59 7CDE                           STR_68 7D2B  
                         STR_76 7D06                           STR_69 7E50                    LCDInit@style 0053  
              USARTWriteChar@ch 0049                 ___awdiv@divisor 004B                 __end_of_bin2bcd 2280  
                         i2l165 004E                           i2l166 005A                           i2l687 2308  
                         i2l980 1D44                 ___awdiv@counter 004D                           _RCREG 000FAE  
                         _SPBRG 000FAF                           _PORTB 000F81                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96               rtc_setting@result 0183                           _TXREG 000FAD  
                         _UQEnd 0028                   __CFG_PWRT$OFF 000000                           _Temp1 0017  
                         _Temp2 0019            __end_of_Creat_Packet 2012                  Read_b_eep@badd 0049  
        Write_b_eep@GIE_BIT_VAL 004C                           _errno 001F                           _month 0031  
                         tablat 000FF5              __size_of_USARTInit 0082                 ?_USARTWriteChar 0036  
                         status 000FD8  __size_of_read_packet_from_page 0084                __end_of_Eco_Test 12A2  
 __end_of_read_packet_from_page 1AD4                   ??_ds1307_init 004C                 __initialization 2066  
            __size_of_Check_CRC 011E                    __end_of_beep 233A                      _Read_Page1 0013  
                    _Read_Page2 0015                    __end_of_main 060A                  ??_getting_data 0180  
                    _Read_b_eep 233A                   ??_Send_Packet 005C                  _data_to_center 0A54  
    Creat_RTC_Packet@packet_crc 005C                 ??_USARTReadData 0049                          ??_beep 004E  
                        ??_main 0065               __end_of_LCDGotoXY 218A                   __activetblptr 000002  
                 LCDByte@isdata 004C                       ??_LCDByte 004D                       ??_LCDInit 0052  
              ??_rom_byte_write 004F                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADRESH 000FC4                          _ADRESL 000FC3                          _EEDATA 000FA8  
                        _EECON2 000FA7                ___awdiv@dividend 0049                __end_of_WriteI2C 1E94  
                    _SecondsInt 22EE              rtc_setting@mem_loc 0181                     ?_Eco_Replay 0036  
                     ??_RTUInit 0055                          _PACKET 0080                          _INT0IE 007F94  
                        _INT0IF 007F91                     OpenI2C@slew 0049                          i2l4853 1CE8  
                        i2l4863 1D20                          i2l4855 1D10                          i2l4865 1D22  
         __size_of_Clear_Packet 0030                       ??_IdleI2C 0049               ?_USARTFlushBuffer 0036  
                        _SSPADD 000FC8                          _SSPBUF 000FC9                Check_Busy_Line@n 004D  
                     ??_ReadI2C 0049          __size_of_Calculate_CRC 0072                          _URBuff 0100  
                     ??_MyDelay 004B                   Clear_Packet@i 0049              ??_USARTFlushBuffer 004A  
                     ??_OpenI2C 004A                  _LCDWriteString 17F2                       ??_bcd2bin 0049  
        __end_of_data_to_center 0C58                 Receive_Packet@n 005E                       ??___awdiv 004D  
                     ??___awmod 004D                       ??_bin2bcd 0049                          _device 002C  
             _Current_Read_Page 000B                          _getkey 1EFA          __size_of_local_display 00D4  
           __end_of_ds1307_init 16A6            __size_of_LCDBusyLoop 0054                          clear_0 206C  
                        clear_1 2078                          clear_2 2084                ___awdiv@quotient 004F  
               ___awmod@divisor 004B    __end_of_write_packet_to_page 17F2                 ___awmod@counter 004D  
             __end_of_USARTInit 1BDA                    __pdataCOMRAM 0065                    LCDWriteInt@i 005E  
                  LCDWriteInt@j 005C                 Send_Packet@data 0062                    __mediumconst 7C78  
           __end_of_Send_Packet 0F86                    _Clear_Packet 21FE                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8               __end_of_Check_CRC 10A4  
              __end_ofexp@coeff 7C97                    ?_rtc_setting 0036            __size_of_LCDWriteInt 0112  
              __end_oflog@coeff 7CB2                      __accesstop 0080         __end_of__initialization 20AA  
              _Creat_RTC_Packet 12A2          __end_of_LCDWriteString 1896                 _Check_Busy_Line 20B4  
                     LCDByte@hn 004E                       LCDByte@ln 004F                  rtc_setting@atm 0180  
                __pcstackCOMRAM 0036                 Check_CRC@CRC_HI 0050                 ?_data_to_center 0036  
            ds1307_init@seconds 004C                     ?_Read_b_eep 0049                 _ds1307_get_date 1896  
               _ds1307_get_time 1BDA             __size_of_Eco_Replay 00D6                     _Current_Pos 0021  
            __size_of_clear_rom 007C           __size_of_Creat_Packet 0054                   _Calculate_CRC 1D48  
                     ?_Eco_Test 0036   __size_of_ds1307_set_date_time 00BA             Receive_Packet@count 005D  
               Check_CRC@length 0055             Receive_Packet@msecs 005B                     ?_SecondsInt 0036  
                 _local_display 1462            __end_of_getting_data 03B4                      __pbssBANK0 0080  
                    __pbssBANK1 0100                    tx_packet@res 0064                 ?_LCDWriteString 0052  
                   _ds1307_init 15F0         __size_of_Receive_Packet 01E4                    _Creat_Packet 1FBE  
             Creat_RTC_Packet@i 005E                         ?_getkey 0049                     _Send_Packet 0E3C  
                     ?_WriteI2C 0036                   ??_Write_b_eep 004C                  ?_Calculate_CRC 0049  
   __size_of_USARTDataAvailable 0048                         _LCDByte 1F5E                         _LCDInit 1AD4  
                       _INTEDG0 007F8E                      ??_Eco_Test 0056                ??_USARTWriteChar 0049  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                  ?_local_display 0036  
       __end_of_Check_Busy_Line 20FE              USARTWriteInt@F3686 0006                         _SSPSTAT 000FC7  
     __size_of_USARTHandleRxInt 0074               Check_Busy_Line@ms 004B                         _RTUInit 0844  
            __size_of_tx_packet 008E             __size_of_Read_b_eep 0016                         _UQFront 0029  
                       _IdleI2C 2350               __end_of_clear_rom 1CD4            _write_packet_to_page 174E  
                       _ReadI2C 222E                         _MyDelay 22A6                         _OpenI2C 22CC  
                       __Hparam 0000         __end_of_ds1307_get_date 192E                         __Lparam 0000  
       __end_of_ds1307_get_time 1C58                         _bcd2bin 2280                         ___cgram 0065  
                       ___awdiv 16A6                         ___awmod 192E                         _bin2bcd 225A  
                  Check_CRC@CRC 0056                 __size_of_getkey 0064                    Check_CRC@sum 0052  
           __size_of_SecondsInt 001E                         __pcinit 2066                      ??_WriteI2C 004A  
                       __ramtop 0600                rom_byte_read@lsb 0052                rom_byte_read@msb 0051  
                       __ptext0 03B4                         __ptext1 060A                         __ptext2 1462  
                       __ptext3 10A4                         __ptext4 192E                         __ptext5 16A6  
                       __ptext6 009A                         beep@del 004C                         __ptext7 174E  
                       __ptext8 1E94                         __ptext9 0C58           __end_of_rom_byte_read 1E2C  
                  __size_of_ISR 008E                  _Destination_ID 0023                ___awmod@dividend 0049  
                       _seconds 0034                       _LCDGotoXY 2146             __end_of_Write_b_eep 21C6  
                     Eco_Test@n 005B            end_of_initialization 20AA                    ??_Eco_Replay 0056  
         ?_write_packet_to_page 0054                   __Lmediumconst 7C78            __size_of_rtc_setting 023A  
              Send_Packet@count 005F           _read_packet_from_page 1A50                       _RCSTAbits 000FAB  
                       postdec1 000FE5                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                     bcd2bin@temp 004B           rom_byte_write@address 004C  
               ??_Calculate_CRC 004B               __end_of_tx_packet 1A50       __size_of_USARTFlushBuffer 0018  
            __end_of_Eco_Replay 1462        __end_of_Creat_RTC_Packet 138C           __end_of_USARTReadData 21FE  
             LCDWriteString@msg 0052                    Eco_Replay@ts 0057           Creat_RTC_Packet@crc_h 0058  
         Creat_RTC_Packet@crc_l 0059           __size_of_getting_data 031A                       _USARTInit 1B58  
                     _TRISCbits 000F94                       _TRISDbits 000F95                 ??_local_display 0060  
                    ?_LCDGotoXY 0052                    Eco_Test@data 0058    read_packet_from_page@address 005B  
              ?_Check_Busy_Line 0036    read_packet_from_page@page_no 0054                       _Check_CRC 0F86  
                    main@choice 0186                      LCDInit@__i 0054                       _TXSTAbits 000FAC  
                    LCDGotoXY@x 0053                      LCDGotoXY@y 0052                       MyDelay@ms 0049  
              ??_data_to_center 0065                    Send_Packet@n 0061                  _Receive_Packet 0C58  
              ?_ds1307_get_date 0036                ?_ds1307_get_time 0036                   ??_LCDBusyLoop 0049  
                  ??_Read_b_eep 004B                Check_CRC@CRC_LOW 0051                    _getting_data 009A  
                   _Write_Page1 001B                     _Write_Page2 001D                   __pidataCOMRAM 2374  
                __end_of_getkey 1F5E                     _Write_b_eep 218A        read_packet_from_page@lsb 005A  
      read_packet_from_page@msb 0059              _Current_Write_Page 000D             start_initialization 2066  
                    ?_USARTInit 0049                     __end_of_ISR 0096             bin2bcd@binary_value 0049  
                 ??_LCDWriteInt 0055               __size_of_Eco_Test 00EC                       _Master_ID 0026  
              WriteI2C@data_out 004B                _USARTHandleRxInt 1CD4                    ??_SecondsInt 0036  
              ??_LCDWriteString 0054          ??_write_packet_to_page 0056              __end_of_Read_b_eep 2350  
                    ?_Check_CRC 0036         __size_of_rom_byte_write 0066          __end_of_Receive_Packet 0E3C  
        ?_read_packet_from_page 0054                   bin2bcd@retval 004A                    ?_ds1307_init 0036  
   write_packet_to_page@address 005A    __end_of_ds1307_set_date_time 15F0                   clear_rom@page 004D  
   write_packet_to_page@page_no 0054                   clear_rom@word 004F                        ??_getkey 004B  
            getting_data@result 0183                    ?_Send_Packet 0036            Receive_Packet@result 005F  
            __end_of_SecondsInt 230C             __end_of_LCDBusyLoop 2066               __size_of_WriteI2C 0068  
                     _Source_ID 0027                        ?_LCDByte 004C                        ?_LCDInit 0036  
                   __pbssCOMRAM 0001                        LCDByte@c 0050                   __pcstackBANK1 0180  
                   ??_LCDGotoXY 0053             __end_of__stringdata 7FFF                        ?_RTUInit 0036  
                   bin2bcd@temp 004B                        ?_IdleI2C 0036                LCDWriteInt@F3701 0001  
                Check_CRC@count 0054                        ?_ReadI2C 0036             __end_of_LCDWriteInt 11B6  
               ?_Receive_Packet 0036                        ?_MyDelay 0049                        ?_OpenI2C 0049  
                     _clear_rom 1C58                       __pintcode 0008                        ?_bcd2bin 0036  
                 __pmediumconst 7C78            rom_byte_read@address 004C                        ?___awdiv 0049  
                      ?___awmod 0049                        ?_bin2bcd 0036                     RTUInit@high 0055  
             data_to_center@lsb 0181               data_to_center@msb 0180                _USARTFlushBuffer 230C  
    __end_of_USARTDataAvailable 2146              Creat_RTC_Packet@id 005A       read_packet_from_page@data 0058  
                   ??_USARTInit 004B                 LCDBusyLoop@busy 0049              Creat_Packet@F_Code 004A  
               LCDBusyLoop@temp 004A       write_packet_to_page@count 005C                     ??_Check_CRC 0049  
                      _PIE1bits 000F9D                        i2u253_45 1D0E                        _PIR1bits 000F9E  
                    ?_clear_rom 0036                     _LCDBusyLoop 2012                LCDWriteString@cc 0055  
                   Eco_Replay@n 0058                      _ADCON0bits 000FC2                     __stringdata 7CB2  
               Write_b_eep@badd 0049                 Write_b_eep@bdat 004B                        _Data_End 0022  
             ?_Creat_RTC_Packet 0036                       _tx_packet 19C2                        _Eco_Test 11B6  
                 ?_Clear_Packet 0036                __size_of_LCDByte 0060                __size_of_LCDInit 0084  
            ??_Creat_RTC_Packet 0055            _ds1307_set_date_time 1536                Calculate_CRC@sum 0052  
                   _LCDWriteInt 10A4                       copy_data0 209E                   ??_rtc_setting 0065  
       write_packet_to_page@lsb 0059         write_packet_to_page@msb 0058                OpenI2C@sync_mode 004A  
              __size_of_RTUInit 0210                  local_display@s 0060                  _rom_byte_write 1E94  
              __size_of_IdleI2C 0014                      _EECON1bits 000FA6          __size_of_rom_byte_read 0072  
       __size_of_USARTWriteChar 0010                __size_of_ReadI2C 002C                        __Hrparam 0000  
              __size_of_MyDelay 0026                __size_of_OpenI2C 0022                        __Lrparam 0000  
          __size_of_ds1307_init 00B6                __size_of_bcd2bin 0026        __end_of_USARTHandleRxInt 1D48  
            rom_byte_write@byte 004E                __size_of___awdiv 00A8                __size_of___awmod 0094  
              __size_of_bin2bcd 0026               LCDBusyLoop@status 004B                        _WriteI2C 1E2C  
         __end_of_Calculate_CRC 1DBA                    ?_Write_b_eep 0049            __size_of_Send_Packet 014A  
                ??_Clear_Packet 0049                 getting_data@lsb 0185                 getting_data@msb 0184  
                    ?_tx_packet 0036               rom_byte_read@data 0053           ?_ds1307_set_date_time 0036  
                      __ptext10 138C                        __ptext11 0F86                        __ptext20 11B6  
                      __ptext12 2146                        __ptext21 2364                        __ptext13 12A2  
                      __ptext30 21FE                        __ptext22 17F2                        __ptext14 1FBE  
                      __ptext31 2324                        __ptext23 20B4                        __ptext15 1D48  
                      __ptext40 2350                        __ptext32 0844                        __ptext24 230C  
                      __ptext16 1EFA                        __ptext41 222E                        __ptext33 1536  
                      __ptext25 21C6                        __ptext17 0A54                        __ptext42 218A  
                      __ptext34 15F0                        __ptext26 20FE                        __ptext18 19C2  
                      __ptext51 1CD4                        __ptext43 1B58                        __ptext35 225A  
                      __ptext27 1A50                        __ptext19 0E3C                        __ptext52 22EE  
                      __ptext44 233A                        __ptext36 1BDA                        __ptext28 1DBA  
                      __ptext45 22CC                        __ptext37 1896                        __ptext29 1C58  
                      __ptext46 22A6                        __ptext38 2280                        __ptext47 1AD4  
                      __ptext39 1E2C                        __ptext48 1F5E                        __ptext49 2012  
                    RTUInit@adr 0057                      RTUInit@low 0056           __end_of_local_display 1536  
        __end_of_rom_byte_write 1EFA         ??_read_packet_from_page 0056                   __size_of_beep 0016  
                 __size_of_main 0256                 _Destination_ID1 0024                 _Destination_ID2 0025  
                      _min_flag 0030            Creat_Packet@Readings 0049                        _sec_flag 0033  
        __size_of_USARTReadData 0038        __size_of_Check_Busy_Line 004A             __end_of_rtc_setting 0844  
                   ??_clear_rom 004C                   ?_Creat_Packet 0049                      Eco_Test@re 0057  
                    Eco_Test@ts 0059        __size_of_ds1307_get_date 0098        __size_of_ds1307_get_time 007E  
                      exp@coeff 7C79                        log@coeff 7C97                   _rom_byte_read 1DBA  
                    _INTCONbits 000FF2               rom_byte_write@lsb 0053               rom_byte_write@msb 0052  
              ??_Receive_Packet 005A                        intlevel2 237C                 ?_rom_byte_write 004C  
      __end_of_USARTFlushBuffer 2324                  LCDWriteInt@val 0052                  LCDWriteInt@str 0057  
 __size_of_write_packet_to_page 00A4                  ??_Creat_Packet 004A               Send_Packet@result 0060  
       __size_of_data_to_center 0204                  ?_rom_byte_read 004C                     ??_tx_packet 0063  
                 _USARTReadData 21C6          ??_ds1307_set_date_time 004C            USARTHandleRxInt@data 003A  
                   _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5              _USARTDataAvailable 20FE  
    read_packet_from_page@count 005D                  Eco_Replay@data 0059                     _rtc_setting 060A  
           ?_USARTDataAvailable 0036                  _USARTWriteChar 2364            __end_of_Clear_Packet 222E  
       Creat_RTC_Packet@mem_loc 005B         __size_of_LCDWriteString 00A4  
