
# 1 "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit 2\packet.c"

# 35 "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit 2\packet.h"
volatile unsigned char PACKET[128];
volatile char Current_Pos;
volatile char Data_End;


void Creat_Packet(char F_Code, char Readings);
void Creat_RTC_Packet();
void Clear_Packet();
char Add_Reading_To_Packet(int t1, int h1, int t2, int h2);
int Calculate_CRC();
char Check_CRC();

# 6 "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit 2\myrtc.h"
unsigned char day;
unsigned char month;
unsigned char year;
unsigned char dow;
unsigned char hr;
unsigned char min;
unsigned char sec;

void ds1307_init();
void ds1307_set_date_time();
void ds1307_get_date();
void ds1307_get_time();
unsigned char bin2bcd(unsigned char binary_value);
unsigned char bcd2bin(unsigned char bcd_value);

# 10 "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit 2\rtu.h"
unsigned char Source_ID;
unsigned char Destination_ID;
unsigned char sec_flag;
unsigned char min_flag;
unsigned char seconds;
float thresh_temp1, thresh_hum1, thresh_temp2, thresh_hum2;
float trig_temp1, trig_hum1,trig_temp2, trig_hum2;


void RTUInit();
void MyDelay(unsigned int ms);
void SecondsInt();
unsigned char getkey(unsigned int msecs);
void beep(unsigned int del);

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.33\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 6 "E:\Study Material\XC8 PROJECTS\Remote Station Monitor\Remote Terminal Unit 2\packet.c"
void Creat_Packet(char F_Code, char Readings)
{
PACKET[0] = 0xFA;
PACKET[1] = (Readings * 8) + 16;
PACKET[2] = Source_ID;
PACKET[3] = Destination_ID;
PACKET[4] = F_Code;
PACKET[5] = Readings;


ds1307_get_time();
MyDelay(100);

PACKET[6] = year;
PACKET[7] = month;
PACKET[8] = day;
PACKET[9] = dow;
PACKET[10] = hr;
PACKET[11] = min;
PACKET[12] = sec;

Current_Pos = 13;
Data_End = Readings * 8 + 13;
}

void Creat_RTC_Packet()
{
Clear_Packet();
Creat_Packet(3, 0);

unsigned int packet_crc = 0;
unsigned char crc_h = 0, crc_l = 0;

packet_crc = Calculate_CRC();
crc_h = packet_crc >> 8;
crc_l = packet_crc & 0x00FF;

PACKET[Current_Pos] = crc_h;
Current_Pos++;
PACKET[Current_Pos] = crc_l;
Current_Pos++;
PACKET[Current_Pos] = 0xEA;

}
char Add_Reading_To_Packet(int t1, int h1, int t2, int h2)
{
char t1_h, t1_l, h1_h, h1_l;
char t2_h, t2_l, h2_h, h2_l;
int CRC;
char CRC_HI, CRC_LOW;

t1_h = t1 >> 8;
t1_l = t1 & 0x00FF;

h1_h = h1 >> 8;
h1_l = h1 & 0x00FF;

t2_h = t2 >> 8;
t2_l = t2 & 0x00FF;

h2_h = h2 >> 8;
h2_l = h2 & 0x00FF;

PACKET[Current_Pos] = t1_h;
Current_Pos++;
PACKET[Current_Pos] = t1_l;
Current_Pos++;
PACKET[Current_Pos] = h1_h;
Current_Pos++;
PACKET[Current_Pos] = h1_l;
Current_Pos++;
PACKET[Current_Pos] = t2_h;
Current_Pos++;
PACKET[Current_Pos] = t2_l;
Current_Pos++;
PACKET[Current_Pos] = h2_h;
Current_Pos++;
PACKET[Current_Pos] = h2_l;
Current_Pos++;

if(Current_Pos == Data_End)
{

CRC = Calculate_CRC();
CRC_HI = CRC >> 8;
CRC_LOW = CRC & 0x00FF;
PACKET[Current_Pos] = CRC_HI;
Current_Pos++;
PACKET[Current_Pos] = CRC_LOW;
Current_Pos++;
PACKET[Current_Pos] = 0xEA;
return 0;
}
return 1;
}

int Calculate_CRC()
{
char count;
int sum = 0;

for(count = 0; count <= Data_End - 1; count++)
sum = sum + PACKET[count];
return sum;
}

char Check_CRC()
{
char count = 0, length = 0, CRC_HI, CRC_LOW;
int sum, CRC;


while(PACKET[length] != 0xEA)
length++;

CRC_LOW = PACKET[length - 1];
CRC_HI = PACKET[length - 2];
CRC = 0x0000;
CRC = CRC + CRC_HI;
CRC = CRC << 8;
CRC = CRC + CRC_LOW;

sum = 0;

for(count = 0; count < length - 2; count++)
sum = sum + PACKET[count];

if(sum == CRC)
return 1;
else
return 0;
}

void Clear_Packet()
{
char i = 0;
for(i = 0; i < 128; i++)
PACKET[i] = 0xFF;
}
