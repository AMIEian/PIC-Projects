

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Sep 10 13:43:30 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F870
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  000A                     	;# 
    26  000B                     	;# 
    27  000C                     	;# 
    28  000D                     	;# 
    29  000E                     	;# 
    30  000E                     	;# 
    31  000F                     	;# 
    32  0010                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0015                     	;# 
    36  0015                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001E                     	;# 
    43  001F                     	;# 
    44  0081                     	;# 
    45  0085                     	;# 
    46  0086                     	;# 
    47  0087                     	;# 
    48  008C                     	;# 
    49  008D                     	;# 
    50  008E                     	;# 
    51  0092                     	;# 
    52  0098                     	;# 
    53  0099                     	;# 
    54  009E                     	;# 
    55  009F                     	;# 
    56  010C                     	;# 
    57  010D                     	;# 
    58  010E                     	;# 
    59  010F                     	;# 
    60  018C                     	;# 
    61  018D                     	;# 
    62                           
    63                           	psect	idataCOMMON
    64  017E                     __pidataCOMMON:	
    65                           
    66                           ;initializer for _index_2
    67  017E  3410               	retlw	16
    68  000C                     _PIR1bits	set	12
    69  0005                     _PORTA	set	5
    70  0006                     _PORTB	set	6
    71  0007                     _PORTC	set	7
    72  001A                     _RCREG	set	26
    73  0018                     _RCSTAbits	set	24
    74  0019                     _TXREG	set	25
    75  005F                     _GIE	set	95
    76  005E                     _PEIE	set	94
    77  002D                     _RA5	set	45
    78  003C                     _RC4	set	60
    79  0065                     _RCIF	set	101
    80  009F                     _ADCON1	set	159
    81  0099                     _SPBRG	set	153
    82  0085                     _TRISA	set	133
    83  0086                     _TRISB	set	134
    84  0087                     _TRISC	set	135
    85  0098                     _TXSTAbits	set	152
    86  0465                     _RCIE	set	1125
    87                           
    88                           	psect	cinit
    89  0011                     start_initialization:	
    90                           ; #config settings
    91                           
    92  0011                     __initialization:	
    93                           
    94                           ; Clear objects allocated to COMMON
    95  0011  3070               	movlw	low __pbssCOMMON
    96  0012  0084               	movwf	4
    97  0013  3076               	movlw	low (__pbssCOMMON+6)
    98  0014  216E               	fcall	clear_ram0
    99                           
   100                           ; Clear objects allocated to BANK0
   101  0015  1383               	bcf	3,7	;select IRP bank0
   102  0016  3020               	movlw	low __pbssBANK0
   103  0017  0084               	movwf	4
   104  0018  3043               	movlw	low (__pbssBANK0+35)
   105  0019  216E               	fcall	clear_ram0
   106                           
   107                           ; Initialize objects allocated to COMMON
   108  001A  217E               	fcall	__pidataCOMMON	;fetch initializer
   109  001B  00FC               	movwf	__pdataCOMMON& (0+127)
   110  001C                     end_of_initialization:	
   111                           ;End of C runtime variable initialization code
   112                           
   113  001C                     __end_of__initialization:	
   114  001C  0183               	clrf	3
   115  001D  281E               	ljmp	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMMON
   118  0070                     __pbssCOMMON:	
   119  0070                     _PortB_Value:	
   120  0070                     	ds	1
   121  0071                     _address_1:	
   122  0071                     	ds	1
   123  0072                     _ch:	
   124  0072                     	ds	1
   125  0073                     _count:	
   126  0073                     	ds	1
   127  0074                     _index:	
   128  0074                     	ds	1
   129  0075                     _index_1:	
   130  0075                     	ds	1
   131                           
   132                           	psect	dataCOMMON
   133  007C                     __pdataCOMMON:	
   134  007C                     _index_2:	
   135  007C                     	ds	1
   136                           
   137                           	psect	bssBANK0
   138  0020                     __pbssBANK0:	
   139  0020                     _data:	
   140  0020                     	ds	32
   141  0040                     _address_2:	
   142  0040                     	ds	1
   143  0041                     _flag:	
   144  0041                     	ds	1
   145  0042                     _micro_secs:	
   146  0042                     	ds	1
   147                           
   148                           	psect	clrtext
   149  016E                     clear_ram0:	
   150                           ;	Called with FSR containing the base address, and
   151                           ;	W with the last address+1
   152                           
   153  016E  0064               	clrwdt	;clear the watchdog before getting into this loop
   154  016F                     clrloop0:	
   155  016F  0180               	clrf	0	;clear RAM location pointed to by FSR
   156  0170  0A84               	incf	4,f	;increment pointer
   157  0171  0604               	xorwf	4,w	;XOR with final address
   158  0172  1903               	btfsc	3,2	;have we reached the end yet?
   159  0173  3400               	retlw	0	;all done for this memory range, return
   160  0174  0604               	xorwf	4,w	;XOR again to restore value
   161  0175  296F               	goto	clrloop0	;do the next byte
   162                           
   163                           	psect	cstackCOMMON
   164  0076                     __pcstackCOMMON:	
   165  0076                     ?_USARTWriteChar:	
   166  0076                     ?_main:	
   167                           ; 0 bytes @ 0x0
   168                           
   169  0076                     ?_ISR:	
   170                           ; 0 bytes @ 0x0
   171                           
   172  0076                     ??_ISR:	
   173                           ; 0 bytes @ 0x0
   174                           
   175                           
   176                           ; 0 bytes @ 0x0
   177  0076                     	ds	6
   178                           
   179                           	psect	cstackBANK0
   180  0043                     __pcstackBANK0:	
   181  0043                     ??_USARTWriteChar:	
   182  0043                     USARTWriteChar@ch:	
   183                           ; 0 bytes @ 0x0
   184                           
   185                           
   186                           ; 1 bytes @ 0x0
   187  0043                     	ds	1
   188  0044                     ??_main:	
   189                           
   190                           ; 0 bytes @ 0x1
   191  0044                     	ds	3
   192                           
   193                           	psect	maintext
   194  001E                     __pmaintext:	
   195 ;;
   196 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   197 ;;
   198 ;; *************** function _main *****************
   199 ;; Defined at:
   200 ;;		line 22 in file "E:\Study Material\XC8 PROJECTS\Milk Display\Milk_display.c"
   201 ;; Parameters:    Size  Location     Type
   202 ;;		None
   203 ;; Auto vars:     Size  Location     Type
   204 ;;		None
   205 ;; Return value:  Size  Location     Type
   206 ;;		None               void
   207 ;; Registers used:
   208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   209 ;; Tracked objects:
   210 ;;		On entry : 17F/0
   211 ;;		On exit  : 0/0
   212 ;;		Unchanged: 0/0
   213 ;; Data sizes:     COMMON   BANK0   BANK1
   214 ;;      Params:         0       0       0
   215 ;;      Locals:         0       0       0
   216 ;;      Temps:          0       3       0
   217 ;;      Totals:         0       3       0
   218 ;;Total ram usage:        3 bytes
   219 ;; Hardware stack levels required when called:    2
   220 ;; This function calls:
   221 ;;		_USARTWriteChar
   222 ;; This function is called by:
   223 ;;		Startup code after reset
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           
   228                           ;psect for function _main
   229  001E                     _main:	
   230                           
   231                           ;Milk_display.c: 24: TRISA = 0x00;
   232                           
   233                           ;incstack = 0
   234                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   235  001E  1683               	bsf	3,5	;RP0=1, select bank1
   236  001F  1303               	bcf	3,6	;RP1=0, select bank1
   237  0020  0185               	clrf	5	;volatile
   238                           
   239                           ;Milk_display.c: 25: TRISB = 0x00;
   240  0021  0186               	clrf	6	;volatile
   241                           
   242                           ;Milk_display.c: 26: TRISC = 0xC0;
   243  0022  30C0               	movlw	192
   244  0023  0087               	movwf	7	;volatile
   245                           
   246                           ;Milk_display.c: 27: ADCON1 = 0x06;
   247  0024  3006               	movlw	6
   248  0025  009F               	movwf	31	;volatile
   249                           
   250                           ;Milk_display.c: 29: PORTB = 0xFF;
   251  0026  30FF               	movlw	255
   252  0027  1283               	bcf	3,5	;RP0=0, select bank0
   253  0028  1303               	bcf	3,6	;RP1=0, select bank0
   254  0029  0086               	movwf	6	;volatile
   255                           
   256                           ;Milk_display.c: 30: PORTA = 0xFF;
   257  002A  30FF               	movlw	255
   258  002B  0085               	movwf	5	;volatile
   259                           
   260                           ;Milk_display.c: 31: PORTC = 0xFF;
   261  002C  30FF               	movlw	255
   262  002D  0087               	movwf	7	;volatile
   263                           
   264                           ;Milk_display.c: 33: for(count = 0; count <= 4; count++)
   265  002E  01F3               	clrf	_count
   266  002F  3005               	movlw	5
   267  0030  0273               	subwf	_count,w
   268  0031  1803               	btfsc	3,0
   269  0032  285B               	goto	l923
   270  0033                     l67:	
   271                           
   272                           ;Milk_display.c: 34: {
   273                           ;Milk_display.c: 35: RC4 = 0;
   274  0033  1207               	bcf	7,4	;volatile
   275                           
   276                           ;Milk_display.c: 36: _delay(1000000);
   277  0034  3006               	movlw	6
   278  0035  00C6               	movwf	??_main+2
   279  0036  3013               	movlw	19
   280  0037  00C5               	movwf	??_main+1
   281  0038  30B1               	movlw	177
   282  0039  00C4               	movwf	??_main
   283  003A                     u487:	
   284  003A  0BC4               	decfsz	??_main,f
   285  003B  283A               	goto	u487
   286  003C  0BC5               	decfsz	??_main+1,f
   287  003D  283A               	goto	u487
   288  003E  0BC6               	decfsz	??_main+2,f
   289  003F  283A               	goto	u487
   290  0040  2841               	nop2
   291                           
   292                           ;Milk_display.c: 37: RC4 = 1;
   293  0041  1283               	bcf	3,5	;RP0=0, select bank0
   294  0042  1303               	bcf	3,6	;RP1=0, select bank0
   295  0043  1607               	bsf	7,4	;volatile
   296                           
   297                           ;Milk_display.c: 38: _delay(1000000);
   298  0044  3006               	movlw	6
   299  0045  00C6               	movwf	??_main+2
   300  0046  3013               	movlw	19
   301  0047  00C5               	movwf	??_main+1
   302  0048  30B1               	movlw	177
   303  0049  00C4               	movwf	??_main
   304  004A                     u497:	
   305  004A  0BC4               	decfsz	??_main,f
   306  004B  284A               	goto	u497
   307  004C  0BC5               	decfsz	??_main+1,f
   308  004D  284A               	goto	u497
   309  004E  0BC6               	decfsz	??_main+2,f
   310  004F  284A               	goto	u497
   311  0050  2851               	nop2
   312  0051  3001               	movlw	1
   313  0052  1283               	bcf	3,5	;RP0=0, select bank0
   314  0053  1303               	bcf	3,6	;RP1=0, select bank0
   315  0054  00C4               	movwf	??_main
   316  0055  0844               	movf	??_main,w
   317  0056  07F3               	addwf	_count,f
   318  0057  3005               	movlw	5
   319  0058  0273               	subwf	_count,w
   320  0059  1C03               	skipc
   321  005A  2833               	goto	l67
   322  005B                     l923:	
   323                           
   324                           ;Milk_display.c: 39: }
   325                           ;Milk_display.c: 42: SPBRG=25;
   326  005B  3019               	movlw	25
   327  005C  1683               	bsf	3,5	;RP0=1, select bank1
   328  005D  1303               	bcf	3,6	;RP1=0, select bank1
   329  005E  0099               	movwf	25	;volatile
   330                           
   331                           ;Milk_display.c: 45: TXSTAbits.TX9=0;
   332  005F  1318               	bcf	24,6	;volatile
   333                           
   334                           ;Milk_display.c: 46: TXSTAbits.TXEN=1;
   335  0060  1698               	bsf	24,5	;volatile
   336                           
   337                           ;Milk_display.c: 47: TXSTAbits.SYNC=0;
   338  0061  1218               	bcf	24,4	;volatile
   339                           
   340                           ;Milk_display.c: 48: TXSTAbits.BRGH=1;
   341  0062  1518               	bsf	24,2	;volatile
   342                           
   343                           ;Milk_display.c: 51: RCSTAbits.SPEN=1;
   344  0063  1283               	bcf	3,5	;RP0=0, select bank0
   345  0064  1303               	bcf	3,6	;RP1=0, select bank0
   346  0065  1798               	bsf	24,7	;volatile
   347                           
   348                           ;Milk_display.c: 52: RCSTAbits.RX9=0;
   349  0066  1318               	bcf	24,6	;volatile
   350                           
   351                           ;Milk_display.c: 53: RCSTAbits.CREN=1;
   352  0067  1618               	bsf	24,4	;volatile
   353                           
   354                           ;Milk_display.c: 54: RCSTAbits.ADDEN=0;
   355  0068  1198               	bcf	24,3	;volatile
   356                           
   357                           ;Milk_display.c: 57: RCIE=1;
   358  0069  1683               	bsf	3,5	;RP0=1, select bank1
   359  006A  1303               	bcf	3,6	;RP1=0, select bank1
   360  006B  168C               	bsf	12,5	;volatile
   361                           
   362                           ;Milk_display.c: 58: PEIE=1;
   363  006C  170B               	bsf	11,6	;volatile
   364                           
   365                           ;Milk_display.c: 61: (GIE = 1);
   366  006D  178B               	bsf	11,7	;volatile
   367  006E                     l69:	
   368                           ;Milk_display.c: 63: while(1)
   369                           
   370                           
   371                           ;Milk_display.c: 64: {
   372                           ;Milk_display.c: 65: PORTB = 0xFF;
   373  006E  30FF               	movlw	255
   374  006F  1283               	bcf	3,5	;RP0=0, select bank0
   375  0070  0086               	movwf	6	;volatile
   376                           
   377                           ;Milk_display.c: 66: _delay(10);
   378  0071  3003               	movlw	3
   379  0072  00C4               	movwf	??_main
   380  0073                     u507:	
   381  0073  0BC4               	decfsz	??_main,f
   382  0074  2873               	goto	u507
   383                           
   384                           ;Milk_display.c: 68: if(data[index_1] != 'B')
   385  0075  0875               	movf	_index_1,w
   386  0076  3E20               	addlw	_data& (0+255)
   387  0077  0084               	movwf	4
   388  0078  1383               	bcf	3,7	;select IRP bank0
   389  0079  0800               	movf	0,w
   390  007A  3A42               	xorlw	66
   391  007B  1903               	skipnz
   392  007C  28A0               	goto	l961
   393                           
   394                           ;Milk_display.c: 69: {
   395                           ;Milk_display.c: 70: PortB_Value = 0x00;
   396  007D  01F0               	clrf	_PortB_Value
   397                           
   398                           ;Milk_display.c: 71: PortB_Value = address_1;
   399  007E  0871               	movf	_address_1,w
   400  007F  1283               	bcf	3,5	;RP0=0, select bank0
   401  0080  1303               	bcf	3,6	;RP1=0, select bank0
   402  0081  00C4               	movwf	??_main
   403  0082  0844               	movf	??_main,w
   404  0083  00F0               	movwf	_PortB_Value
   405                           
   406                           ;Milk_display.c: 72: PortB_Value = PortB_Value << 4;
   407  0084  0870               	movf	_PortB_Value,w
   408  0085  00C4               	movwf	??_main
   409  0086  3003               	movlw	3
   410  0087                     u435:	
   411  0087  1003               	clrc
   412  0088  0DC4               	rlf	??_main,f
   413  0089  3EFF               	addlw	-1
   414  008A  1D03               	skipz
   415  008B  2887               	goto	u435
   416  008C  1003               	clrc
   417  008D  0D44               	rlf	??_main,w
   418  008E  00C5               	movwf	??_main+1
   419  008F  0845               	movf	??_main+1,w
   420  0090  00F0               	movwf	_PortB_Value
   421                           
   422                           ;Milk_display.c: 73: PortB_Value = PortB_Value & 0xF0;
   423  0091  0870               	movf	_PortB_Value,w
   424  0092  39F0               	andlw	240
   425  0093  00C4               	movwf	??_main
   426  0094  0844               	movf	??_main,w
   427  0095  00F0               	movwf	_PortB_Value
   428                           
   429                           ;Milk_display.c: 74: PortB_Value = PortB_Value | data[index_1];
   430  0096  0875               	movf	_index_1,w
   431  0097  3E20               	addlw	_data& (0+255)
   432  0098  0084               	movwf	4
   433  0099  0800               	movf	0,w
   434  009A  0470               	iorwf	_PortB_Value,w
   435  009B  00C4               	movwf	??_main
   436  009C  0844               	movf	??_main,w
   437  009D  00F0               	movwf	_PortB_Value
   438                           
   439                           ;Milk_display.c: 75: PORTB = PortB_Value;
   440  009E  0870               	movf	_PortB_Value,w
   441  009F  0086               	movwf	6	;volatile
   442  00A0                     l961:	
   443                           
   444                           ;Milk_display.c: 76: }
   445                           ;Milk_display.c: 78: index_1++;
   446  00A0  3001               	movlw	1
   447  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   448  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   449  00A3  00C4               	movwf	??_main
   450  00A4  0844               	movf	??_main,w
   451  00A5  07F5               	addwf	_index_1,f
   452                           
   453                           ;Milk_display.c: 79: address_1++;
   454  00A6  3001               	movlw	1
   455  00A7  00C4               	movwf	??_main
   456  00A8  0844               	movf	??_main,w
   457  00A9  07F1               	addwf	_address_1,f
   458                           
   459                           ;Milk_display.c: 80: if(index_1 == 16)
   460  00AA  0875               	movf	_index_1,w
   461  00AB  3A10               	xorlw	16
   462  00AC  1D03               	skipz
   463  00AD  28B0               	goto	l969
   464                           
   465                           ;Milk_display.c: 81: {
   466                           ;Milk_display.c: 82: index_1 = 0;
   467  00AE  01F5               	clrf	_index_1
   468                           
   469                           ;Milk_display.c: 83: address_1 = 0;
   470  00AF  01F1               	clrf	_address_1
   471  00B0                     l969:	
   472                           
   473                           ;Milk_display.c: 84: }
   474                           ;Milk_display.c: 86: PORTA = 0xFF;
   475  00B0  30FF               	movlw	255
   476  00B1  0085               	movwf	5	;volatile
   477                           
   478                           ;Milk_display.c: 87: PORTC = 0xFF;
   479  00B2  30FF               	movlw	255
   480  00B3  0087               	movwf	7	;volatile
   481                           
   482                           ;Milk_display.c: 88: _delay(10);
   483  00B4  3003               	movlw	3
   484  00B5  00C4               	movwf	??_main
   485  00B6                     u517:	
   486  00B6  0BC4               	decfsz	??_main,f
   487  00B7  28B6               	goto	u517
   488                           
   489                           ;Milk_display.c: 90: if(data[index_2] != 'B')
   490  00B8  087C               	movf	_index_2,w
   491  00B9  3E20               	addlw	_data& (0+255)
   492  00BA  0084               	movwf	4
   493  00BB  1383               	bcf	3,7	;select IRP bank0
   494  00BC  0800               	movf	0,w
   495  00BD  3A42               	xorlw	66
   496  00BE  1903               	skipnz
   497  00BF  28CD               	goto	l983
   498                           
   499                           ;Milk_display.c: 91: {
   500                           ;Milk_display.c: 92: PORTA = address_2;
   501  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   502  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   503  00C2  0840               	movf	_address_2,w
   504  00C3  0085               	movwf	5	;volatile
   505                           
   506                           ;Milk_display.c: 93: PORTC = PORTC & 0xF0;
   507  00C4  0807               	movf	7,w	;volatile
   508  00C5  39F0               	andlw	240
   509  00C6  0087               	movwf	7	;volatile
   510                           
   511                           ;Milk_display.c: 94: PORTC = PORTC | data[index_2];
   512  00C7  087C               	movf	_index_2,w
   513  00C8  3E20               	addlw	_data& (0+255)
   514  00C9  0084               	movwf	4
   515  00CA  0800               	movf	0,w
   516  00CB  0407               	iorwf	7,w	;volatile
   517  00CC  0087               	movwf	7	;volatile
   518  00CD                     l983:	
   519                           
   520                           ;Milk_display.c: 95: }
   521                           ;Milk_display.c: 97: index_2++;
   522  00CD  3001               	movlw	1
   523  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   524  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   525  00D0  00C4               	movwf	??_main
   526  00D1  0844               	movf	??_main,w
   527  00D2  07FC               	addwf	_index_2,f
   528                           
   529                           ;Milk_display.c: 98: address_2++;
   530  00D3  3001               	movlw	1
   531  00D4  00C4               	movwf	??_main
   532  00D5  0844               	movf	??_main,w
   533  00D6  07C0               	addwf	_address_2,f
   534                           
   535                           ;Milk_display.c: 99: if(index_2 == 32)
   536  00D7  087C               	movf	_index_2,w
   537  00D8  3A20               	xorlw	32
   538  00D9  1D03               	skipz
   539  00DA  28E0               	goto	l993
   540                           
   541                           ;Milk_display.c: 100: {
   542                           ;Milk_display.c: 101: index_2 = 16;
   543  00DB  3010               	movlw	16
   544  00DC  00C4               	movwf	??_main
   545  00DD  0844               	movf	??_main,w
   546  00DE  00FC               	movwf	_index_2
   547                           
   548                           ;Milk_display.c: 102: address_2 = 0;
   549  00DF  01C0               	clrf	_address_2
   550  00E0                     l993:	
   551                           
   552                           ;Milk_display.c: 103: }
   553                           ;Milk_display.c: 105: RA5 = 1;
   554  00E0  1685               	bsf	5,5	;volatile
   555                           
   556                           ;Milk_display.c: 106: _delay(10);
   557  00E1  3003               	movlw	3
   558  00E2  00C4               	movwf	??_main
   559  00E3                     u527:	
   560  00E3  0BC4               	decfsz	??_main,f
   561  00E4  28E3               	goto	u527
   562                           
   563                           ;Milk_display.c: 107: RA5 = 0;
   564  00E5  1283               	bcf	3,5	;RP0=0, select bank0
   565  00E6  1303               	bcf	3,6	;RP1=0, select bank0
   566  00E7  1285               	bcf	5,5	;volatile
   567                           
   568                           ;Milk_display.c: 109: _delay(1500);
   569  00E8  30D6               	movlw	214
   570  00E9  00C4               	movwf	??_main
   571  00EA                     u537:	
   572  00EA  28EB               	nop2
   573  00EB  28EC               	nop2
   574  00EC  0BC4               	decfsz	??_main,f
   575  00ED  28EA               	goto	u537
   576  00EE  0000               	nop
   577                           
   578                           ;Milk_display.c: 110: if(flag == 1)
   579  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   580  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   581  00F1  0841               	movf	_flag,w
   582  00F2  3A01               	xorlw	1
   583  00F3  1D03               	skipz
   584  00F4  286E               	goto	l69
   585                           
   586                           ;Milk_display.c: 111: {
   587                           ;Milk_display.c: 112: USARTWriteChar(ch);
   588  00F5  0872               	movf	_ch,w
   589  00F6  2176               	fcall	_USARTWriteChar
   590                           
   591                           ;Milk_display.c: 113: flag = 0;
   592  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   593  00F8  1303               	bcf	3,6	;RP1=0, select bank0
   594  00F9  01C1               	clrf	_flag
   595  00FA  286E               	goto	l69
   596  00FB                     __end_of_main:	
   597                           
   598                           	psect	text1
   599  0176                     __ptext1:	
   600 ;; *************** function _USARTWriteChar *****************
   601 ;; Defined at:
   602 ;;		line 162 in file "E:\Study Material\XC8 PROJECTS\Milk Display\Milk_display.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;  ch              1    wreg     unsigned char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  ch              1    0[BANK0 ] unsigned char 
   607 ;; Return value:  Size  Location     Type
   608 ;;		None               void
   609 ;; Registers used:
   610 ;;		wreg
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMMON   BANK0   BANK1
   616 ;;      Params:         0       0       0
   617 ;;      Locals:         0       1       0
   618 ;;      Temps:          0       0       0
   619 ;;      Totals:         0       1       0
   620 ;;Total ram usage:        1 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; Hardware stack levels required when called:    1
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           
   631                           ;psect for function _USARTWriteChar
   632  0176                     _USARTWriteChar:	
   633                           
   634                           ;incstack = 0
   635                           ; Regs used in _USARTWriteChar: [wreg]
   636                           ;USARTWriteChar@ch stored from wreg
   637  0176  1283               	bcf	3,5	;RP0=0, select bank0
   638  0177  1303               	bcf	3,6	;RP1=0, select bank0
   639  0178  00C3               	movwf	USARTWriteChar@ch
   640  0179                     l91:	
   641                           ;Milk_display.c: 164: while(!PIR1bits.TXIF);
   642                           
   643  0179  1E0C               	btfss	12,4	;volatile
   644  017A  2979               	goto	l91
   645                           
   646                           ;Milk_display.c: 165: TXREG=ch;
   647  017B  0843               	movf	USARTWriteChar@ch,w
   648  017C  0099               	movwf	25	;volatile
   649  017D  0008               	return
   650  017E                     __end_of_USARTWriteChar:	
   651                           
   652                           	psect	text2
   653  00FB                     __ptext2:	
   654 ;; *************** function _ISR *****************
   655 ;; Defined at:
   656 ;;		line 118 in file "E:\Study Material\XC8 PROJECTS\Milk Display\Milk_display.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;		None               void
   663 ;; Registers used:
   664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0   BANK1
   670 ;;      Params:         0       0       0
   671 ;;      Locals:         0       0       0
   672 ;;      Temps:          6       0       0
   673 ;;      Totals:         6       0       0
   674 ;;Total ram usage:        6 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		Interrupt level 1
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _ISR
   685  00FB                     _ISR:	
   686                           
   687                           ;Milk_display.c: 120: if (RCIE && RCIF) {
   688  00FB  1683               	bsf	3,5	;RP0=1, select bank1
   689  00FC  1303               	bcf	3,6	;RP1=0, select bank1
   690  00FD  1E8C               	btfss	12,5	;volatile
   691  00FE  2961               	goto	i1l83
   692  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   693  0100  1303               	bcf	3,6	;RP1=0, select bank0
   694  0101  1E8C               	btfss	12,5	;volatile
   695  0102  2961               	goto	i1l83
   696                           
   697                           ;Milk_display.c: 121: ch = (char)RCREG;
   698  0103  081A               	movf	26,w	;volatile
   699  0104  00F6               	movwf	??_ISR
   700  0105  0876               	movf	??_ISR,w
   701  0106  00F2               	movwf	_ch
   702                           
   703                           ;Milk_display.c: 122: if((ch-48) >= 0x00 && (ch-48) <= 0x09)
   704  0107  0872               	movf	_ch,w
   705  0108  3ED0               	addlw	208
   706  0109  00F6               	movwf	??_ISR
   707  010A  30FF               	movlw	255
   708  010B  1803               	skipnc
   709  010C  3000               	movlw	0
   710  010D  00F7               	movwf	??_ISR+1
   711  010E  1BF7               	btfsc	??_ISR+1,7
   712  010F  2925               	goto	i1l855
   713  0110  0872               	movf	_ch,w
   714  0111  3ED0               	addlw	208
   715  0112  00F6               	movwf	??_ISR
   716  0113  30FF               	movlw	255
   717  0114  1803               	skipnc
   718  0115  3000               	movlw	0
   719  0116  00F7               	movwf	??_ISR+1
   720  0117  0877               	movf	??_ISR+1,w
   721  0118  3A80               	xorlw	128
   722  0119  00FF               	movwf	127
   723  011A  3080               	movlw	128
   724  011B  027F               	subwf	127,w
   725  011C  1D03               	skipz
   726  011D  2920               	goto	u32_25
   727  011E  300A               	movlw	10
   728  011F  0276               	subwf	??_ISR,w
   729  0120                     u32_25:	
   730  0120  1803               	skipnc
   731  0121  2925               	goto	i1l855
   732                           
   733                           ;Milk_display.c: 123: {
   734                           ;Milk_display.c: 124: data[index] = ch - 48;
   735  0122  0872               	movf	_ch,w
   736  0123  3ED0               	addlw	208
   737  0124  292A               	goto	L1
   738  0125                     i1l855:	
   739                           ;Milk_display.c: 129: return;
   740                           
   741                           ;Milk_display.c: 128: index = 0;
   742                           
   743                           ;Milk_display.c: 127: if(index == 32)
   744                           
   745                           ;Milk_display.c: 126: index++;
   746                           
   747                           ;Milk_display.c: 125: flag = 1;
   748                           
   749                           
   750                           ;Milk_display.c: 130: }
   751                           ;Milk_display.c: 132: if(ch == 'B')
   752  0125  0872               	movf	_ch,w
   753  0126  3A42               	xorlw	66
   754  0127  1D03               	skipz
   755  0128  293F               	goto	i1l869
   756                           
   757                           ;Milk_display.c: 133: {
   758                           ;Milk_display.c: 134: data[index] = 0x0F;
   759  0129  300F               	movlw	15
   760  012A                     L1:	
   761  012A  00F6               	movwf	??_ISR
   762  012B  0874               	movf	_index,w
   763  012C  3E20               	addlw	_data& (0+255)
   764  012D  0084               	movwf	4
   765  012E  0876               	movf	??_ISR,w
   766  012F  1383               	bcf	3,7	;select IRP bank0
   767  0130  0080               	movwf	0
   768                           
   769                           ;Milk_display.c: 135: flag = 1;
   770  0131  1283               	bcf	3,5	;RP0=0, select bank0
   771  0132  1303               	bcf	3,6	;RP1=0, select bank0
   772  0133  01C1               	clrf	_flag
   773  0134  0AC1               	incf	_flag,f
   774                           
   775                           ;Milk_display.c: 137: index++;
   776  0135  3001               	movlw	1
   777  0136  00F6               	movwf	??_ISR
   778  0137  0876               	movf	??_ISR,w
   779  0138  07F4               	addwf	_index,f
   780                           
   781                           ;Milk_display.c: 138: if(index == 32)
   782  0139  0874               	movf	_index,w
   783  013A  3A20               	xorlw	32
   784  013B  1D03               	skipz
   785  013C  2961               	goto	i1l83
   786                           
   787                           ;Milk_display.c: 139: index = 0;
   788  013D  01F4               	clrf	_index
   789                           
   790                           ;Milk_display.c: 140: return;
   791  013E  2961               	goto	i1l83
   792  013F                     i1l869:	
   793                           
   794                           ;Milk_display.c: 141: }
   795                           ;Milk_display.c: 143: if(ch == 'R')
   796  013F  0872               	movf	_ch,w
   797  0140  3A52               	xorlw	82
   798  0141  1D03               	skipz
   799  0142  2961               	goto	i1l83
   800                           
   801                           ;Milk_display.c: 144: {
   802                           ;Milk_display.c: 145: for(index = 0; index < 32; index++)
   803  0143  01F4               	clrf	_index
   804  0144  3020               	movlw	32
   805  0145  0274               	subwf	_index,w
   806  0146  1803               	btfsc	3,0
   807  0147  2955               	goto	i1l883
   808  0148                     i1l877:	
   809                           
   810                           ;Milk_display.c: 146: {
   811                           ;Milk_display.c: 147: data[index] = 0x00;
   812  0148  0874               	movf	_index,w
   813  0149  3E20               	addlw	_data& (0+255)
   814  014A  0084               	movwf	4
   815  014B  1383               	bcf	3,7	;select IRP bank0
   816  014C  0180               	clrf	0
   817  014D  3001               	movlw	1
   818  014E  00F6               	movwf	??_ISR
   819  014F  0876               	movf	??_ISR,w
   820  0150  07F4               	addwf	_index,f
   821  0151  3020               	movlw	32
   822  0152  0274               	subwf	_index,w
   823  0153  1C03               	skipc
   824  0154  2948               	goto	i1l877
   825  0155                     i1l883:	
   826                           
   827                           ;Milk_display.c: 148: }
   828                           ;Milk_display.c: 149: index = 0;
   829  0155  01F4               	clrf	_index
   830                           
   831                           ;Milk_display.c: 150: index_1 = 0;
   832  0156  01F5               	clrf	_index_1
   833                           
   834                           ;Milk_display.c: 151: index_2 = 16;
   835  0157  3010               	movlw	16
   836  0158  00F6               	movwf	??_ISR
   837  0159  0876               	movf	??_ISR,w
   838  015A  00FC               	movwf	_index_2
   839                           
   840                           ;Milk_display.c: 152: address_1 = 0;
   841  015B  01F1               	clrf	_address_1
   842                           
   843                           ;Milk_display.c: 153: address_2 = 0;
   844  015C  1283               	bcf	3,5	;RP0=0, select bank0
   845  015D  1303               	bcf	3,6	;RP1=0, select bank0
   846  015E  01C0               	clrf	_address_2
   847                           
   848                           ;Milk_display.c: 154: flag = 1;
   849  015F  01C1               	clrf	_flag
   850  0160  0AC1               	incf	_flag,f
   851  0161                     i1l83:	
   852                           ;Milk_display.c: 156: }
   853                           ;Milk_display.c: 157: return;
   854                           
   855                           ;Milk_display.c: 155: return;
   856                           
   857  0161  087B               	movf	??_ISR+5,w
   858  0162  1283               	bcf	3,5	;RP0=0, select bank0
   859  0163  1303               	bcf	3,6	;RP1=0, select bank0
   860  0164  00FF               	movwf	127
   861  0165  087A               	movf	??_ISR+4,w
   862  0166  008A               	movwf	10
   863  0167  0879               	movf	??_ISR+3,w
   864  0168  0084               	movwf	4
   865  0169  0E78               	swapf	(??_ISR+2)^(0+-128),w
   866  016A  0083               	movwf	3
   867  016B  0EFE               	swapf	126,f
   868  016C  0E7E               	swapf	126,w
   869  016D  0009               	retfie
   870  016E                     __end_of_ISR:	
   871  007E                     btemp	set	126	;btemp
   872  007E                     wtemp	set	126
   873  007E                     wtemp0	set	126
   874  0080                     wtemp1	set	128
   875  0082                     wtemp2	set	130
   876  0084                     wtemp3	set	132
   877  0086                     wtemp4	set	134
   878  0088                     wtemp5	set	136
   879  007F                     wtemp6	set	127
   880  007E                     ttemp	set	126
   881  007E                     ttemp0	set	126
   882  0081                     ttemp1	set	129
   883  0084                     ttemp2	set	132
   884  0087                     ttemp3	set	135
   885  007F                     ttemp4	set	127
   886  007E                     ltemp	set	126
   887  007E                     ltemp0	set	126
   888  0082                     ltemp1	set	130
   889  0086                     ltemp2	set	134
   890  0080                     ltemp3	set	128
   891                           
   892                           	psect	intentry
   893  0004                     __pintentry:	
   894                           ;incstack = 0
   895                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
   896                           
   897  0004                     interrupt_function:	
   898  007E                     saved_w	set	btemp
   899  0004  00FE               	movwf	btemp
   900  0005  0E03               	swapf	3,w
   901  0006  00F8               	movwf	??_ISR+2
   902  0007  0804               	movf	4,w
   903  0008  00F9               	movwf	??_ISR+3
   904  0009  080A               	movf	10,w
   905  000A  00FA               	movwf	??_ISR+4
   906  000B  1283               	bcf	3,5	;RP0=0, select bank0
   907  000C  1303               	bcf	3,6	;RP1=0, select bank0
   908  000D  087F               	movf	btemp+1,w
   909  000E  00FB               	movwf	??_ISR+5
   910  000F  28FB               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      13
    BANK0            80      4      39
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_USARTWriteChar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      31
                                              1 BANK0      3     3      0
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (1) _USARTWriteChar                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteChar

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       7        0.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4      27       5       48.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      34       8        0.0%
ABS                  0      0      34       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Sep 10 13:43:30 2015

                     l91 0179                       l67 0033                       l69 006E  
                     _ch 0072                       fsr 0004                      l923 005B  
                    l961 00A0                      l983 00CD                      l993 00E0  
                    l969 00B0                      _GIE 005F                      _RA5 002D  
                    _RC4 003C                      u435 0087                      u507 0073  
                    _ISR 00FB                      u517 00B6                      u527 00E3  
                    u537 00EA                      u487 003A                      u497 004A  
                    fsr0 0004                      indf 0000                     ?_ISR 0076  
                   _PEIE 005E                     _RCIE 0465                     _RCIF 0065  
                   i1l83 0161   __end_of_USARTWriteChar 017E                     _data 0020  
                   _flag 0041                     _main 001E                     btemp 007E  
                   ltemp 007E                     start 0010                     ttemp 007E  
                   wtemp 007E                    ??_ISR 0076                    ?_main 0076  
       USARTWriteChar@ch 0043                    i1l855 0125                    i1l883 0155  
                  i1l877 0148                    i1l869 013F                    _RCREG 001A  
                  u32_25 0120                    _SPBRG 0099                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TXREG 0019  
                  _count 0073                    _index 0074                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080          ?_USARTWriteChar 0076                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 0011             __end_of_main 00FB                   ??_main 0044  
                 _ADCON1 009F             __pdataCOMMON 007C                   saved_w 007E  
__end_of__initialization 001C           __pcstackCOMMON 0076               __pbssBANK0 0020  
             __pmaintext 001E               __pintentry 0004         ??_USARTWriteChar 0043  
            _PortB_Value 0070               _micro_secs 0042                  __ptext1 0176  
                __ptext2 00FB             __size_of_ISR 0073                  _index_1 0075  
                _index_2 007C                  clrloop0 016F     end_of_initialization 001C  
              _RCSTAbits 0018                _TXSTAbits 0098            __pidataCOMMON 017E  
    start_initialization 0011              __end_of_ISR 016E              __pbssCOMMON 0070  
              ___latbits 0000            __pcstackBANK0 0043                _address_1 0071  
              _address_2 0040        interrupt_function 0004                clear_ram0 016E  
               _PIR1bits 000C  __size_of_USARTWriteChar 0008            __size_of_main 00DD  
               intlevel1 0000           _USARTWriteChar 0176  
