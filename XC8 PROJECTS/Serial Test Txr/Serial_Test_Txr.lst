

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Oct 23 20:18:58 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F870
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     	;# 
    21  0001                     	;# 
    22  0002                     	;# 
    23  0003                     	;# 
    24  0004                     	;# 
    25  0005                     	;# 
    26  0006                     	;# 
    27  0007                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000D                     	;# 
    32  000E                     	;# 
    33  000E                     	;# 
    34  000F                     	;# 
    35  0010                     	;# 
    36  0011                     	;# 
    37  0012                     	;# 
    38  0015                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001E                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  0087                     	;# 
    51  008C                     	;# 
    52  008D                     	;# 
    53  008E                     	;# 
    54  0092                     	;# 
    55  0098                     	;# 
    56  0099                     	;# 
    57  009E                     	;# 
    58  009F                     	;# 
    59  010C                     	;# 
    60  010D                     	;# 
    61  010E                     	;# 
    62  010F                     	;# 
    63  018C                     	;# 
    64  018D                     	;# 
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0092                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0092                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  000C                     _PIR1bits	set	12
   156  001A                     _RCREG	set	26
   157  0018                     _RCSTAbits	set	24
   158  0019                     _TXREG	set	25
   159  005F                     _GIE	set	95
   160  005E                     _PEIE	set	94
   161  0030                     _RB0	set	48
   162  0031                     _RB1	set	49
   163  0065                     _RCIF	set	101
   164  0099                     _SPBRG	set	153
   165  0086                     _TRISB	set	134
   166  0098                     _TXSTAbits	set	152
   167  0465                     _RCIE	set	1125
   168                           
   169                           	psect	text0
   170  0000                     __ptext0:	
   171                           ; #config settings
   172                           
   173                           
   174                           	psect	cinit
   175  0011                     start_initialization:	
   176                           ;psect for function _USARTHandleRxInt
   177                           
   178  0011                     __initialization:	
   179                           
   180                           ; Clear objects allocated to COMMON
   181  0011  01F9               	clrf	__pbssCOMMON& (0+127)
   182  0012  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   183                           
   184                           ; Clear objects allocated to BANK0
   185  0013  1383               	bcf	3,7	;select IRP bank0
   186  0014  3020               	movlw	low __pbssBANK0
   187  0015  0084               	movwf	4
   188  0016  3065               	movlw	low (__pbssBANK0+69)
   189  0017  2162               	fcall	clear_ram0
   190  0018                     end_of_initialization:	
   191                           ;End of C runtime variable initialization code
   192                           
   193  0018                     __end_of__initialization:	
   194  0018  0183               	clrf	3
   195  0019  281A               	ljmp	_main	;jump to C main() function
   196                           
   197                           	psect	bssCOMMON
   198  0079                     __pbssCOMMON:	
   199  0079                     _UQEnd:	
   200  0079                     	ds	1
   201  007A                     _UQFront:	
   202  007A                     	ds	1
   203                           
   204                           	psect	bssBANK0
   205  0020                     __pbssBANK0:	
   206  0020                     _URBuff:	
   207  0020                     	ds	64
   208  0060                     USARTWriteInt@F769:	
   209  0060                     	ds	5
   210                           
   211                           	psect	clrtext
   212  0162                     clear_ram0:	
   213                           ;	Called with FSR containing the base address, and
   214                           ;	W with the last address+1
   215                           
   216  0162  0064               	clrwdt	;clear the watchdog before getting into this loop
   217  0163                     clrloop0:	
   218  0163  0180               	clrf	0	;clear RAM location pointed to by FSR
   219  0164  0A84               	incf	4,f	;increment pointer
   220  0165  0604               	xorwf	4,w	;XOR with final address
   221  0166  1903               	btfsc	3,2	;have we reached the end yet?
   222  0167  3400               	retlw	0	;all done for this memory range, return
   223  0168  0604               	xorwf	4,w	;XOR again to restore value
   224  0169  2963               	goto	clrloop0	;do the next byte
   225                           
   226                           	psect	cstackCOMMON
   227  0070                     __pcstackCOMMON:	
   228  0070                     ?_USARTHandleRxInt:	
   229  0070                     ??_USARTHandleRxInt:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_USARTWriteChar:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_ISR:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_main:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_USARTDataAvailable:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ?_USARTReadData:	
   245                           ; 1 bytes @ 0x0
   246                           
   247                           
   248                           ; 1 bytes @ 0x0
   249  0070                     	ds	4
   250  0074                     USARTHandleRxInt@data:	
   251                           
   252                           ; 1 bytes @ 0x4
   253  0074                     	ds	1
   254  0075                     ??_ISR:	
   255                           
   256                           ; 0 bytes @ 0x5
   257  0075                     	ds	4
   258                           
   259                           	psect	cstackBANK0
   260  0065                     __pcstackBANK0:	
   261  0065                     ?_USARTInit:	
   262  0065                     ??_USARTWriteChar:	
   263                           ; 0 bytes @ 0x0
   264                           
   265  0065                     ??_USARTDataAvailable:	
   266                           ; 0 bytes @ 0x0
   267                           
   268  0065                     ??_USARTReadData:	
   269                           ; 0 bytes @ 0x0
   270                           
   271  0065                     USARTWriteChar@ch:	
   272                           ; 0 bytes @ 0x0
   273                           
   274  0065                     USARTInit@baud_rate:	
   275                           ; 1 bytes @ 0x0
   276                           
   277                           
   278                           ; 2 bytes @ 0x0
   279  0065                     	ds	1
   280  0066                     USARTReadData@data:	
   281                           
   282                           ; 1 bytes @ 0x1
   283  0066                     	ds	1
   284  0067                     ??_USARTInit:	
   285                           
   286                           ; 0 bytes @ 0x2
   287  0067                     	ds	1
   288  0068                     ??_main:	
   289                           
   290                           ; 0 bytes @ 0x3
   291  0068                     	ds	3
   292  006B                     main@count:	
   293                           
   294                           ; 1 bytes @ 0x6
   295  006B                     	ds	1
   296  006C                     main@data:	
   297                           
   298                           ; 1 bytes @ 0x7
   299  006C                     	ds	1
   300                           
   301                           	psect	maintext
   302  001A                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 10 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\SerTestTxr.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;  data            1    7[BANK0 ] unsigned char 
   313 ;;  count           1    6[BANK0 ] unsigned char 
   314 ;; Return value:  Size  Location     Type
   315 ;;		None               void
   316 ;; Registers used:
   317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : 17F/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0   BANK1
   323 ;;      Params:         0       0       0
   324 ;;      Locals:         0       2       0
   325 ;;      Temps:          0       3       0
   326 ;;      Totals:         0       5       0
   327 ;;Total ram usage:        5 bytes
   328 ;; Hardware stack levels required when called:    3
   329 ;; This function calls:
   330 ;;		_USARTDataAvailable
   331 ;;		_USARTInit
   332 ;;		_USARTReadData
   333 ;;		_USARTWriteChar
   334 ;; This function is called by:
   335 ;;		Startup code after reset
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339                           
   340                           ;psect for function _main
   341  001A                     _main:	
   342                           
   343                           ;SerTestTxr.c: 12: TRISB = 0x00;
   344                           
   345                           ;incstack = 0
   346                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   347  001A  1683               	bsf	3,5	;RP0=1, select bank1
   348  001B  1303               	bcf	3,6	;RP1=0, select bank1
   349  001C  0186               	clrf	6	;volatile
   350                           
   351                           ;SerTestTxr.c: 13: char count;
   352                           ;SerTestTxr.c: 14: for(count = 0; count < 10; count++)
   353  001D  1283               	bcf	3,5	;RP0=0, select bank0
   354  001E  1303               	bcf	3,6	;RP1=0, select bank0
   355  001F  01EB               	clrf	main@count
   356  0020  300A               	movlw	10
   357  0021  026B               	subwf	main@count,w
   358  0022  1803               	btfsc	3,0
   359  0023  284C               	goto	l1037
   360  0024                     l41:	
   361                           
   362                           ;SerTestTxr.c: 15: {
   363                           ;SerTestTxr.c: 16: RB1 = 1;
   364  0024  1486               	bsf	6,1	;volatile
   365                           
   366                           ;SerTestTxr.c: 17: _delay(1000000);
   367  0025  3006               	movlw	6
   368  0026  00EA               	movwf	??_main+2
   369  0027  3013               	movlw	19
   370  0028  00E9               	movwf	??_main+1
   371  0029  30B1               	movlw	177
   372  002A  00E8               	movwf	??_main
   373  002B                     u817:	
   374  002B  0BE8               	decfsz	??_main,f
   375  002C  282B               	goto	u817
   376  002D  0BE9               	decfsz	??_main+1,f
   377  002E  282B               	goto	u817
   378  002F  0BEA               	decfsz	??_main+2,f
   379  0030  282B               	goto	u817
   380  0031  2832               	nop2
   381                           
   382                           ;SerTestTxr.c: 18: RB1 = 0;
   383  0032  1283               	bcf	3,5	;RP0=0, select bank0
   384  0033  1303               	bcf	3,6	;RP1=0, select bank0
   385  0034  1086               	bcf	6,1	;volatile
   386                           
   387                           ;SerTestTxr.c: 19: _delay(1000000);
   388  0035  3006               	movlw	6
   389  0036  00EA               	movwf	??_main+2
   390  0037  3013               	movlw	19
   391  0038  00E9               	movwf	??_main+1
   392  0039  30B1               	movlw	177
   393  003A  00E8               	movwf	??_main
   394  003B                     u827:	
   395  003B  0BE8               	decfsz	??_main,f
   396  003C  283B               	goto	u827
   397  003D  0BE9               	decfsz	??_main+1,f
   398  003E  283B               	goto	u827
   399  003F  0BEA               	decfsz	??_main+2,f
   400  0040  283B               	goto	u827
   401  0041  2842               	nop2
   402  0042  3001               	movlw	1
   403  0043  1283               	bcf	3,5	;RP0=0, select bank0
   404  0044  1303               	bcf	3,6	;RP1=0, select bank0
   405  0045  00E8               	movwf	??_main
   406  0046  0868               	movf	??_main,w
   407  0047  07EB               	addwf	main@count,f
   408  0048  300A               	movlw	10
   409  0049  026B               	subwf	main@count,w
   410  004A  1C03               	skipc
   411  004B  2824               	goto	l41
   412  004C                     l1037:	
   413                           
   414                           ;SerTestTxr.c: 20: }
   415                           ;SerTestTxr.c: 23: USARTInit(9600);
   416  004C  3080               	movlw	128
   417  004D  00E5               	movwf	USARTInit@baud_rate
   418  004E  3025               	movlw	37
   419  004F  00E6               	movwf	USARTInit@baud_rate+1
   420  0050  2079               	fcall	_USARTInit
   421  0051                     l44:	
   422                           ;SerTestTxr.c: 29: {
   423                           
   424                           ;SerTestTxr.c: 26: {
   425                           ;SerTestTxr.c: 28: while(RB0 == 0)
   426                           
   427                           ;SerTestTxr.c: 25: while(1)
   428                           
   429  0051  1283               	bcf	3,5	;RP0=0, select bank0
   430  0052  1303               	bcf	3,6	;RP1=0, select bank0
   431  0053  1C06               	btfss	6,0	;volatile
   432  0054  2851               	goto	l44
   433                           
   434                           ;SerTestTxr.c: 30: }
   435                           ;SerTestTxr.c: 33: USARTWriteChar('R');
   436  0055  3052               	movlw	82
   437  0056  216A               	fcall	_USARTWriteChar
   438  0057                     l1041:	
   439                           ;SerTestTxr.c: 37: {
   440                           
   441                           ;SerTestTxr.c: 36: while(USARTDataAvailable() == 0)
   442                           
   443  0057  2128               	fcall	_USARTDataAvailable
   444  0058  3A00               	xorlw	0
   445  0059  1903               	skipnz
   446  005A  2857               	goto	l1041
   447                           
   448                           ;SerTestTxr.c: 38: }
   449                           ;SerTestTxr.c: 42: char data=USARTReadData();
   450  005B  2104               	fcall	_USARTReadData
   451  005C  1283               	bcf	3,5	;RP0=0, select bank0
   452  005D  1303               	bcf	3,6	;RP1=0, select bank0
   453  005E  00E8               	movwf	??_main
   454  005F  0868               	movf	??_main,w
   455  0060  00EC               	movwf	main@data
   456                           
   457                           ;SerTestTxr.c: 44: if(data == 'R')
   458  0061  086C               	movf	main@data,w
   459  0062  3A52               	xorlw	82
   460  0063  1903               	btfsc	3,2
   461                           
   462                           ;SerTestTxr.c: 45: RB1 = 1;
   463  0064  1486               	bsf	6,1	;volatile
   464  0065                     l51:	
   465                           ;SerTestTxr.c: 49: {
   466                           
   467                           ;SerTestTxr.c: 48: while(RB0 == 1)
   468                           
   469  0065  1806               	btfsc	6,0	;volatile
   470  0066  2865               	goto	l51
   471                           
   472                           ;SerTestTxr.c: 50: }
   473                           ;SerTestTxr.c: 53: USARTWriteChar('B');
   474  0067  3042               	movlw	66
   475  0068  216A               	fcall	_USARTWriteChar
   476  0069                     l1051:	
   477                           ;SerTestTxr.c: 57: {
   478                           
   479                           ;SerTestTxr.c: 56: while(USARTDataAvailable() == 0)
   480                           
   481  0069  2128               	fcall	_USARTDataAvailable
   482  006A  3A00               	xorlw	0
   483  006B  1903               	skipnz
   484  006C  2869               	goto	l1051
   485                           
   486                           ;SerTestTxr.c: 58: }
   487                           ;SerTestTxr.c: 62: char data=USARTReadData();
   488  006D  2104               	fcall	_USARTReadData
   489  006E  1283               	bcf	3,5	;RP0=0, select bank0
   490  006F  1303               	bcf	3,6	;RP1=0, select bank0
   491  0070  00E8               	movwf	??_main
   492  0071  0868               	movf	??_main,w
   493  0072  00EC               	movwf	main@data
   494                           
   495                           ;SerTestTxr.c: 64: if(data == 'B')
   496  0073  086C               	movf	main@data,w
   497  0074  3A42               	xorlw	66
   498  0075  1D03               	skipz
   499  0076  2851               	goto	l44
   500                           
   501                           ;SerTestTxr.c: 65: RB1 = 0;
   502  0077  1086               	bcf	6,1	;volatile
   503  0078  2851               	goto	l44
   504  0079                     __end_of_main:	
   505                           
   506                           	psect	text1
   507  016A                     __ptext1:	
   508 ;; *************** function _USARTWriteChar *****************
   509 ;; Defined at:
   510 ;;		line 71 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\usart_pic16.c"
   511 ;; Parameters:    Size  Location     Type
   512 ;;  ch              1    wreg     unsigned char 
   513 ;; Auto vars:     Size  Location     Type
   514 ;;  ch              1    0[BANK0 ] unsigned char 
   515 ;; Return value:  Size  Location     Type
   516 ;;		None               void
   517 ;; Registers used:
   518 ;;		wreg
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMMON   BANK0   BANK1
   524 ;;      Params:         0       0       0
   525 ;;      Locals:         0       1       0
   526 ;;      Temps:          0       0       0
   527 ;;      Totals:         0       1       0
   528 ;;Total ram usage:        1 bytes
   529 ;; Hardware stack levels used:    1
   530 ;; Hardware stack levels required when called:    2
   531 ;; This function calls:
   532 ;;		Nothing
   533 ;; This function is called by:
   534 ;;		_main
   535 ;;		_USARTWriteString
   536 ;;		_USARTWriteLine
   537 ;;		_USARTWriteInt
   538 ;;		_USARTGotoNewLine
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           
   543                           ;psect for function _USARTWriteChar
   544  016A                     _USARTWriteChar:	
   545                           
   546                           ;incstack = 0
   547                           ; Regs used in _USARTWriteChar: [wreg]
   548                           ;USARTWriteChar@ch stored from wreg
   549  016A  1283               	bcf	3,5	;RP0=0, select bank0
   550  016B  1303               	bcf	3,6	;RP1=0, select bank0
   551  016C  00E5               	movwf	USARTWriteChar@ch
   552  016D                     l96:	
   553                           ;usart_pic16.c: 73: while(!PIR1bits.TXIF);
   554                           
   555  016D  1E0C               	btfss	12,4	;volatile
   556  016E  296D               	goto	l96
   557                           
   558                           ;usart_pic16.c: 75: TXREG=ch;
   559  016F  0865               	movf	USARTWriteChar@ch,w
   560  0170  0099               	movwf	25	;volatile
   561  0171  0008               	return
   562  0172                     __end_of_USARTWriteChar:	
   563                           
   564                           	psect	text2
   565  0104                     __ptext2:	
   566 ;; *************** function _USARTReadData *****************
   567 ;; Defined at:
   568 ;;		line 119 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\usart_pic16.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  data            1    1[BANK0 ] unsigned char 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      unsigned char 
   575 ;; Registers used:
   576 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMMON   BANK0   BANK1
   582 ;;      Params:         0       0       0
   583 ;;      Locals:         0       1       0
   584 ;;      Temps:          0       1       0
   585 ;;      Totals:         0       2       0
   586 ;;Total ram usage:        2 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    2
   589 ;; This function calls:
   590 ;;		Nothing
   591 ;; This function is called by:
   592 ;;		_main
   593 ;;		_USARTReadBuffer
   594 ;;		_USARTFlushBuffer
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           
   599                           ;psect for function _USARTReadData
   600  0104                     _USARTReadData:	
   601                           
   602                           ;usart_pic16.c: 121: char data;
   603                           ;usart_pic16.c: 124: if(UQFront==-1)
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
   607  0104  087A               	movf	_UQFront,w	;volatile
   608  0105  3AFF               	xorlw	-1
   609  0106  1D03               	skipz
   610  0107  290A               	goto	l999
   611                           
   612                           ;usart_pic16.c: 125: return 0;
   613  0108  3000               	movlw	0
   614  0109  0008               	return
   615  010A                     l999:	
   616                           
   617                           ;usart_pic16.c: 127: data=URBuff[UQFront];
   618  010A  087A               	movf	_UQFront,w
   619  010B  3E20               	addlw	_URBuff& (0+255)
   620  010C  0084               	movwf	4
   621  010D  1383               	bcf	3,7	;select IRP bank0
   622  010E  0800               	movf	0,w
   623  010F  1283               	bcf	3,5	;RP0=0, select bank0
   624  0110  1303               	bcf	3,6	;RP1=0, select bank0
   625  0111  00E5               	movwf	??_USARTReadData
   626  0112  0865               	movf	??_USARTReadData,w
   627  0113  00E6               	movwf	USARTReadData@data
   628                           
   629                           ;usart_pic16.c: 129: if(UQFront==UQEnd)
   630  0114  087A               	movf	_UQFront,w	;volatile
   631  0115  0679               	xorwf	_UQEnd,w	;volatile
   632  0116  1D03               	skipz
   633  0117  291E               	goto	l1005
   634                           
   635                           ;usart_pic16.c: 130: {
   636                           ;usart_pic16.c: 133: UQFront=UQEnd=-1;
   637  0118  30FF               	movlw	-1
   638  0119  00F9               	movwf	_UQEnd	;volatile
   639  011A  00E5               	movwf	??_USARTReadData
   640  011B  0865               	movf	??_USARTReadData,w
   641  011C  00FA               	movwf	_UQFront	;volatile
   642                           
   643                           ;usart_pic16.c: 134: }
   644  011D  2926               	goto	l1011
   645  011E                     l1005:	
   646                           
   647                           ;usart_pic16.c: 135: else
   648                           ;usart_pic16.c: 136: {
   649                           ;usart_pic16.c: 137: UQFront++;
   650  011E  3001               	movlw	1
   651  011F  00E5               	movwf	??_USARTReadData
   652  0120  0865               	movf	??_USARTReadData,w
   653  0121  07FA               	addwf	_UQFront,f	;volatile
   654                           
   655                           ;usart_pic16.c: 139: if(UQFront==64)
   656  0122  087A               	movf	_UQFront,w	;volatile
   657  0123  3A40               	xorlw	64
   658  0124  1903               	btfsc	3,2
   659                           
   660                           ;usart_pic16.c: 140: UQFront=0;
   661  0125  01FA               	clrf	_UQFront	;volatile
   662  0126                     l1011:	
   663                           
   664                           ;usart_pic16.c: 141: }
   665                           ;usart_pic16.c: 143: return data;
   666  0126  0866               	movf	USARTReadData@data,w
   667  0127  0008               	return
   668  0128                     __end_of_USARTReadData:	
   669                           
   670                           	psect	text3
   671  0079                     __ptext3:	
   672 ;; *************** function _USARTInit *****************
   673 ;; Defined at:
   674 ;;		line 31 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\usart_pic16.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  baud_rate       2    0[BANK0 ] unsigned int 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;		None               void
   681 ;; Registers used:
   682 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1
   688 ;;      Params:         0       2       0
   689 ;;      Locals:         0       0       0
   690 ;;      Temps:          0       1       0
   691 ;;      Totals:         0       3       0
   692 ;;Total ram usage:        3 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    2
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           
   703                           ;psect for function _USARTInit
   704  0079                     _USARTInit:	
   705                           
   706                           ;usart_pic16.c: 34: UQFront=UQEnd=-1;
   707                           
   708                           ;incstack = 0
   709                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
   710  0079  30FF               	movlw	-1
   711  007A  00F9               	movwf	_UQEnd	;volatile
   712  007B  1283               	bcf	3,5	;RP0=0, select bank0
   713  007C  1303               	bcf	3,6	;RP1=0, select bank0
   714  007D  00E7               	movwf	??_USARTInit
   715  007E  0867               	movf	??_USARTInit,w
   716  007F  00FA               	movwf	_UQFront	;volatile
   717                           
   718                           ;usart_pic16.c: 37: switch(baud_rate)
   719  0080  288C               	goto	l945
   720  0081                     l935:	
   721                           ;usart_pic16.c: 38: {
   722                           ;usart_pic16.c: 39: case 9600:
   723                           
   724                           
   725                           ;usart_pic16.c: 40: SPBRG=25;
   726  0081  3019               	movlw	25
   727  0082  2888               	goto	L3
   728  0083                     l937:	
   729                           ;usart_pic16.c: 42: case 19200:
   730                           
   731                           ;usart_pic16.c: 41: break;
   732                           
   733                           
   734                           ;usart_pic16.c: 43: SPBRG=12;
   735  0083  300C               	movlw	12
   736  0084  2888               	goto	L3
   737  0085                     l939:	
   738                           ;usart_pic16.c: 45: case 28800:
   739                           
   740                           ;usart_pic16.c: 44: break;
   741                           
   742                           
   743                           ;usart_pic16.c: 46: SPBRG=8;
   744  0085  3008               	movlw	8
   745  0086  2888               	goto	L3
   746  0087                     l941:	
   747                           ;usart_pic16.c: 48: case 33600:
   748                           
   749                           ;usart_pic16.c: 47: break;
   750                           
   751                           
   752                           ;usart_pic16.c: 49: SPBRG=6;
   753  0087  3006               	movlw	6
   754  0088                     L3:	
   755  0088  1683               	bsf	3,5	;RP0=1, select bank1
   756  0089  1303               	bcf	3,6	;RP1=0, select bank1
   757  008A  0099               	movwf	25	;volatile
   758                           
   759                           ;usart_pic16.c: 51: }
   760                           
   761                           ;usart_pic16.c: 50: break;
   762  008B  28AF               	goto	l89
   763  008C                     l945:	
   764                           
   765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
   766                           ; Switch size 1, requested type "space"
   767                           ; Number of cases is 4, Range of values is 37 to 131
   768                           ; switch strategies available:
   769                           ; Name         Instructions Cycles
   770                           ; simple_byte           13     7 (average)
   771                           ; direct_byte          104     9 (fixed)
   772                           ; jumptable            263     9 (fixed)
   773                           ;	Chosen strategy is simple_byte
   774  008C  1283               	bcf	3,5	;RP0=0, select bank0
   775  008D  0866               	movf	USARTInit@baud_rate+1,w
   776  008E  3A25               	xorlw	37	; case 37
   777  008F  1903               	skipnz
   778  0090  289B               	goto	l1291
   779  0091  3A6E               	xorlw	110	; case 75
   780  0092  1903               	skipnz
   781  0093  28A0               	goto	l1293
   782  0094  3A3B               	xorlw	59	; case 112
   783  0095  1903               	skipnz
   784  0096  28A5               	goto	l1295
   785  0097  3AF3               	xorlw	243	; case 131
   786  0098  1903               	skipnz
   787  0099  28AA               	goto	l1297
   788  009A  28AF               	goto	l89
   789  009B                     l1291:	
   790                           
   791                           ; Switch size 1, requested type "space"
   792                           ; Number of cases is 1, Range of values is 128 to 128
   793                           ; switch strategies available:
   794                           ; Name         Instructions Cycles
   795                           ; simple_byte            4     3 (average)
   796                           ; direct_byte           10     9 (fixed)
   797                           ; jumptable            263     9 (fixed)
   798                           ;	Chosen strategy is simple_byte
   799  009B  0865               	movf	USARTInit@baud_rate,w
   800  009C  3A80               	xorlw	128	; case 128
   801  009D  1903               	skipnz
   802  009E  2881               	goto	l935
   803  009F  28AF               	goto	l89
   804  00A0                     l1293:	
   805                           
   806                           ; Switch size 1, requested type "space"
   807                           ; Number of cases is 1, Range of values is 0 to 0
   808                           ; switch strategies available:
   809                           ; Name         Instructions Cycles
   810                           ; simple_byte            4     3 (average)
   811                           ; direct_byte            7     6 (fixed)
   812                           ; jumptable            260     6 (fixed)
   813                           ;	Chosen strategy is simple_byte
   814  00A0  0865               	movf	USARTInit@baud_rate,w
   815  00A1  3A00               	xorlw	0	; case 0
   816  00A2  1903               	skipnz
   817  00A3  2883               	goto	l937
   818  00A4  28AF               	goto	l89
   819  00A5                     l1295:	
   820                           
   821                           ; Switch size 1, requested type "space"
   822                           ; Number of cases is 1, Range of values is 128 to 128
   823                           ; switch strategies available:
   824                           ; Name         Instructions Cycles
   825                           ; simple_byte            4     3 (average)
   826                           ; direct_byte           10     9 (fixed)
   827                           ; jumptable            263     9 (fixed)
   828                           ;	Chosen strategy is simple_byte
   829  00A5  0865               	movf	USARTInit@baud_rate,w
   830  00A6  3A80               	xorlw	128	; case 128
   831  00A7  1903               	skipnz
   832  00A8  2885               	goto	l939
   833  00A9  28AF               	goto	l89
   834  00AA                     l1297:	
   835                           
   836                           ; Switch size 1, requested type "space"
   837                           ; Number of cases is 1, Range of values is 64 to 64
   838                           ; switch strategies available:
   839                           ; Name         Instructions Cycles
   840                           ; simple_byte            4     3 (average)
   841                           ; direct_byte           10     9 (fixed)
   842                           ; jumptable            263     9 (fixed)
   843                           ;	Chosen strategy is simple_byte
   844  00AA  0865               	movf	USARTInit@baud_rate,w
   845  00AB  3A40               	xorlw	64	; case 64
   846  00AC  1903               	skipnz
   847  00AD  2887               	goto	l941
   848  00AE  28AF               	goto	l89
   849  00AF                     l89:	
   850                           
   851                           ;usart_pic16.c: 53: TXSTAbits.TX9=0;
   852  00AF  1683               	bsf	3,5	;RP0=1, select bank1
   853  00B0  1303               	bcf	3,6	;RP1=0, select bank1
   854  00B1  1318               	bcf	24,6	;volatile
   855                           
   856                           ;usart_pic16.c: 54: TXSTAbits.TXEN=1;
   857  00B2  1698               	bsf	24,5	;volatile
   858                           
   859                           ;usart_pic16.c: 55: TXSTAbits.SYNC=0;
   860  00B3  1218               	bcf	24,4	;volatile
   861                           
   862                           ;usart_pic16.c: 56: TXSTAbits.BRGH=1;
   863  00B4  1518               	bsf	24,2	;volatile
   864                           
   865                           ;usart_pic16.c: 59: RCSTAbits.SPEN=1;
   866  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   867  00B6  1303               	bcf	3,6	;RP1=0, select bank0
   868  00B7  1798               	bsf	24,7	;volatile
   869                           
   870                           ;usart_pic16.c: 60: RCSTAbits.RX9=0;
   871  00B8  1318               	bcf	24,6	;volatile
   872                           
   873                           ;usart_pic16.c: 61: RCSTAbits.CREN=1;
   874  00B9  1618               	bsf	24,4	;volatile
   875                           
   876                           ;usart_pic16.c: 62: RCSTAbits.ADDEN=0;
   877  00BA  1198               	bcf	24,3	;volatile
   878                           
   879                           ;usart_pic16.c: 65: RCIE=1;
   880  00BB  1683               	bsf	3,5	;RP0=1, select bank1
   881  00BC  1303               	bcf	3,6	;RP1=0, select bank1
   882  00BD  168C               	bsf	12,5	;volatile
   883                           
   884                           ;usart_pic16.c: 66: PEIE=1;
   885  00BE  170B               	bsf	11,6	;volatile
   886                           
   887                           ;usart_pic16.c: 68: (GIE = 1);
   888  00BF  178B               	bsf	11,7	;volatile
   889  00C0  0008               	return
   890  00C1                     __end_of_USARTInit:	
   891                           
   892                           	psect	text4
   893  0128                     __ptext4:	
   894 ;; *************** function _USARTDataAvailable *****************
   895 ;; Defined at:
   896 ;;		line 146 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\usart_pic16.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      unsigned char 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1
   910 ;;      Params:         0       0       0
   911 ;;      Locals:         0       0       0
   912 ;;      Temps:          0       1       0
   913 ;;      Totals:         0       1       0
   914 ;;Total ram usage:        1 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    2
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_main
   921 ;;		_USARTFlushBuffer
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _USARTDataAvailable
   927  0128                     _USARTDataAvailable:	
   928                           
   929                           ;usart_pic16.c: 148: if(UQFront==-1) return 0;
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
   933  0128  087A               	movf	_UQFront,w	;volatile
   934  0129  3AFF               	xorlw	-1
   935  012A  1D03               	skipz
   936  012B  292E               	goto	l973
   937  012C  3000               	movlw	0
   938  012D  0008               	return
   939  012E                     l973:	
   940                           
   941                           ;usart_pic16.c: 149: if(UQFront<UQEnd)
   942  012E  087A               	movf	_UQFront,w	;volatile
   943  012F  3A80               	xorlw	128
   944  0130  1283               	bcf	3,5	;RP0=0, select bank0
   945  0131  1303               	bcf	3,6	;RP1=0, select bank0
   946  0132  00E5               	movwf	??_USARTDataAvailable
   947  0133  0879               	movf	_UQEnd,w	;volatile
   948  0134  3A80               	xorlw	128
   949  0135  02E5               	subwf	??_USARTDataAvailable,f
   950  0136  1803               	skipnc
   951  0137  293D               	goto	l981
   952                           
   953                           ;usart_pic16.c: 150: return(UQEnd-UQFront+1);
   954  0138  037A               	decf	_UQFront,w	;volatile
   955  0139  3AFF               	xorlw	255
   956  013A  0779               	addwf	_UQEnd,w	;volatile
   957  013B  3E01               	addlw	1
   958  013C  0008               	return
   959  013D                     l981:	
   960                           
   961                           ;usart_pic16.c: 151: else if(UQFront>UQEnd)
   962  013D  0879               	movf	_UQEnd,w	;volatile
   963  013E  3A80               	xorlw	128
   964  013F  00E5               	movwf	??_USARTDataAvailable
   965  0140  087A               	movf	_UQFront,w	;volatile
   966  0141  3A80               	xorlw	128
   967  0142  02E5               	subwf	??_USARTDataAvailable,f
   968  0143  1803               	skipnc
   969  0144  294A               	goto	l989
   970                           
   971                           ;usart_pic16.c: 152: return (64-UQFront+UQEnd+1);
   972  0145  037A               	decf	_UQFront,w	;volatile
   973  0146  3AFF               	xorlw	255
   974  0147  0779               	addwf	_UQEnd,w	;volatile
   975  0148  3E41               	addlw	65
   976  0149  0008               	return
   977  014A                     l989:	
   978                           
   979                           ;usart_pic16.c: 153: else
   980                           ;usart_pic16.c: 154: return 1;
   981  014A  3001               	movlw	1
   982  014B  0008               	return
   983  014C                     __end_of_USARTDataAvailable:	
   984                           
   985                           	psect	text5
   986  014C                     __ptext5:	
   987 ;; *************** function _ISR *****************
   988 ;; Defined at:
   989 ;;		line 6 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\isr.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;		None               void
   996 ;; Registers used:
   997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMMON   BANK0   BANK1
  1003 ;;      Params:         0       0       0
  1004 ;;      Locals:         0       0       0
  1005 ;;      Temps:          4       0       0
  1006 ;;      Totals:         4       0       0
  1007 ;;Total ram usage:        4 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    1
  1010 ;; This function calls:
  1011 ;;		_USARTHandleRxInt
  1012 ;; This function is called by:
  1013 ;;		Interrupt level 1
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           
  1018                           ;psect for function _ISR
  1019  014C                     _ISR:	
  1020                           
  1021                           ;isr.c: 8: if (RCIE && RCIF) {
  1022  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1023  014D  1303               	bcf	3,6	;RP1=0, select bank1
  1024  014E  1E8C               	btfss	12,5	;volatile
  1025  014F  2955               	goto	i1l16
  1026  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0152  1E8C               	btfss	12,5	;volatile
  1029  0153  2955               	goto	i1l16
  1030                           
  1031                           ;isr.c: 9: USARTHandleRxInt();
  1032  0154  20C1               	fcall	_USARTHandleRxInt
  1033  0155                     i1l16:	
  1034                           ;isr.c: 10: return;
  1035                           
  1036  0155  0878               	movf	??_ISR+3,w
  1037  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0158  00FF               	movwf	127
  1040  0159  0877               	movf	??_ISR+2,w
  1041  015A  008A               	movwf	10
  1042  015B  0876               	movf	??_ISR+1,w
  1043  015C  0084               	movwf	4
  1044  015D  0E75               	swapf	??_ISR^(0+-128),w
  1045  015E  0083               	movwf	3
  1046  015F  0EFE               	swapf	126,f
  1047  0160  0E7E               	swapf	126,w
  1048  0161  0009               	retfie
  1049  0162                     __end_of_ISR:	
  1050                           
  1051                           	psect	intentry
  1052  0004                     __pintentry:	
  1053                           ;incstack = 0
  1054                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1055                           
  1056  0004                     interrupt_function:	
  1057  007E                     saved_w	set	btemp
  1058  0004  00FE               	movwf	btemp
  1059  0005  0E03               	swapf	3,w
  1060  0006  00F5               	movwf	??_ISR
  1061  0007  0804               	movf	4,w
  1062  0008  00F6               	movwf	??_ISR+1
  1063  0009  080A               	movf	10,w
  1064  000A  00F7               	movwf	??_ISR+2
  1065  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1066  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1067  000D  087F               	movf	btemp+1,w
  1068  000E  00F8               	movwf	??_ISR+3
  1069  000F  294C               	ljmp	_ISR
  1070                           
  1071                           	psect	text6
  1072  00C1                     __ptext6:	
  1073 ;; *************** function _USARTHandleRxInt *****************
  1074 ;; Defined at:
  1075 ;;		line 95 in file "E:\Study Material\XC8 PROJECTS\Serial Test Txr\usart_pic16.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  data            1    4[COMMON] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;		None               void
  1082 ;; Registers used:
  1083 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0   BANK1
  1089 ;;      Params:         0       0       0
  1090 ;;      Locals:         1       0       0
  1091 ;;      Temps:          4       0       0
  1092 ;;      Totals:         5       0       0
  1093 ;;Total ram usage:        5 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_ISR
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function _USARTHandleRxInt
  1104  00C1                     _USARTHandleRxInt:	
  1105                           
  1106                           ;usart_pic16.c: 98: char data=RCREG;
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
  1110  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1111  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1112  00C3  081A               	movf	26,w	;volatile
  1113  00C4  00F0               	movwf	??_USARTHandleRxInt
  1114  00C5  0870               	movf	??_USARTHandleRxInt,w
  1115  00C6  00F4               	movwf	USARTHandleRxInt@data
  1116                           
  1117                           ;usart_pic16.c: 101: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  1118  00C7  0879               	movf	_UQEnd,w	;volatile
  1119  00C8  3A3F               	xorlw	63
  1120  00C9  1903               	btfsc	3,2
  1121  00CA  087A               	movf	_UQFront,w	;volatile
  1122  00CB  1903               	btfsc	3,2
  1123  00CC  28E4               	goto	i1l631
  1124  00CD  087A               	movf	_UQFront,w	;volatile
  1125  00CE  00F0               	movwf	??_USARTHandleRxInt
  1126  00CF  01F1               	clrf	??_USARTHandleRxInt+1
  1127  00D0  1BF0               	btfsc	??_USARTHandleRxInt,7
  1128  00D1  03F1               	decf	??_USARTHandleRxInt+1,f
  1129  00D2  3001               	movlw	1
  1130  00D3  0779               	addwf	_UQEnd,w	;volatile
  1131  00D4  00F2               	movwf	??_USARTHandleRxInt+2
  1132  00D5  01F3               	clrf	??_USARTHandleRxInt+3
  1133  00D6  1803               	skipnc
  1134  00D7  0AF3               	incf	??_USARTHandleRxInt+3,f
  1135  00D8  1BF9               	btfsc	_UQEnd,7	;volatile
  1136  00D9  03F3               	decf	??_USARTHandleRxInt+3,f
  1137  00DA  0871               	movf	??_USARTHandleRxInt+1,w
  1138  00DB  0673               	xorwf	??_USARTHandleRxInt+3,w
  1139  00DC  1D03               	skipz
  1140  00DD  28E0               	goto	u4_25
  1141  00DE  0870               	movf	??_USARTHandleRxInt,w
  1142  00DF  0672               	xorwf	??_USARTHandleRxInt+2,w
  1143  00E0                     u4_25:	
  1144  00E0  1D03               	skipz
  1145  00E1  28EC               	goto	i1l637
  1146  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1147  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1148  00E4                     i1l631:	
  1149                           
  1150                           ;usart_pic16.c: 102: {
  1151                           ;usart_pic16.c: 104: UQFront++;
  1152  00E4  3001               	movlw	1
  1153  00E5  00F0               	movwf	??_USARTHandleRxInt
  1154  00E6  0870               	movf	??_USARTHandleRxInt,w
  1155  00E7  07FA               	addwf	_UQFront,f	;volatile
  1156                           
  1157                           ;usart_pic16.c: 105: if(UQFront==64) UQFront=0;
  1158  00E8  087A               	movf	_UQFront,w	;volatile
  1159  00E9  3A40               	xorlw	64
  1160  00EA  1903               	btfsc	3,2
  1161  00EB  01FA               	clrf	_UQFront	;volatile
  1162  00EC                     i1l637:	
  1163                           
  1164                           ;usart_pic16.c: 106: }
  1165                           ;usart_pic16.c: 108: if(UQEnd==64-1)
  1166  00EC  0879               	movf	_UQEnd,w	;volatile
  1167  00ED  3A3F               	xorlw	63
  1168  00EE  1D03               	skipz
  1169  00EF  28F2               	goto	i1l641
  1170                           
  1171                           ;usart_pic16.c: 109: UQEnd=0;
  1172  00F0  01F9               	clrf	_UQEnd	;volatile
  1173  00F1  28F6               	goto	i1l643
  1174  00F2                     i1l641:	
  1175                           
  1176                           ;usart_pic16.c: 110: else
  1177                           ;usart_pic16.c: 111: UQEnd++;
  1178  00F2  3001               	movlw	1
  1179  00F3  00F0               	movwf	??_USARTHandleRxInt
  1180  00F4  0870               	movf	??_USARTHandleRxInt,w
  1181  00F5  07F9               	addwf	_UQEnd,f	;volatile
  1182  00F6                     i1l643:	
  1183                           
  1184                           ;usart_pic16.c: 113: URBuff[UQEnd]=data;
  1185  00F6  0874               	movf	USARTHandleRxInt@data,w
  1186  00F7  00F0               	movwf	??_USARTHandleRxInt
  1187  00F8  0879               	movf	_UQEnd,w
  1188  00F9  3E20               	addlw	_URBuff& (0+255)
  1189  00FA  0084               	movwf	4
  1190  00FB  0870               	movf	??_USARTHandleRxInt,w
  1191  00FC  1383               	bcf	3,7	;select IRP bank0
  1192  00FD  0080               	movwf	0
  1193                           
  1194                           ;usart_pic16.c: 115: if(UQFront==-1) UQFront=0;
  1195  00FE  087A               	movf	_UQFront,w	;volatile
  1196  00FF  3AFF               	xorlw	-1
  1197  0100  1D03               	skipz
  1198  0101  0008               	return
  1199  0102  01FA               	clrf	_UQFront	;volatile
  1200  0103  0008               	return
  1201  0104                     __end_of_USARTHandleRxInt:	
  1202  007E                     btemp	set	126	;btemp
  1203  007E                     wtemp	set	126
  1204  007E                     wtemp0	set	126
  1205  0080                     wtemp1	set	128
  1206  0082                     wtemp2	set	130
  1207  0084                     wtemp3	set	132
  1208  0086                     wtemp4	set	134
  1209  0088                     wtemp5	set	136
  1210  007F                     wtemp6	set	127
  1211  007E                     ttemp	set	126
  1212  007E                     ttemp0	set	126
  1213  0081                     ttemp1	set	129
  1214  0084                     ttemp2	set	132
  1215  0087                     ttemp3	set	135
  1216  007F                     ttemp4	set	127
  1217  007E                     ltemp	set	126
  1218  007E                     ltemp0	set	126
  1219  0082                     ltemp1	set	130
  1220  0086                     ltemp2	set	134
  1221  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80      8      77
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_USARTInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     212
                                              3 BANK0      5     5      0
                 _USARTDataAvailable
                          _USARTInit
                      _USARTReadData
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (1) _USARTWriteChar                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USARTReadData                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _USARTDataAvailable                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0      15
                                              5 COMMON     4     4      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (3) _USARTHandleRxInt                                     5     5      0      15
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTDataAvailable
   _USARTInit
   _USARTReadData
   _USARTWriteChar

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      58       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      4D       5       96.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            20      0       0       6        0.0%
BANK1               20      0       0       7        0.0%
DATA                 0      0      58       8        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Oct 23 20:18:58 2015

                         l41 0024                           l51 0065                           l44 0051  
                         l96 016D                           l89 00AF                           fsr 0004  
         USARTInit@baud_rate 0065         ??_USARTDataAvailable 0065                          l941 0087  
                        l935 0081                          l937 0083                          l945 008C  
                        l939 0085                          l981 013D                          l973 012E  
                        _GIE 005F                          l989 014A                          l999 010A  
                        _RB0 0030                          _RB1 0031                          _ISR 014C  
                        u817 002B                          u827 003B               ?_USARTReadData 0070  
                        fsr0 0004                          indf 0000                         ?_ISR 0070  
                       l1011 0126                         l1005 011E                         l1041 0057  
                       l1051 0069                         l1037 004C                         l1291 009B  
                       l1293 00A0                         l1295 00A5                         l1297 00AA  
                       _PEIE 005E                         i1l16 0155                         _RCIE 0465  
                       _RCIF 0065                         u4_25 00E0       __end_of_USARTWriteChar 0172  
                       _main 001A                         btemp 007E            USARTReadData@data 0066  
                       ltemp 007E                         start 0010                         ttemp 007E  
                       wtemp 007E                        ??_ISR 0075            ?_USARTHandleRxInt 0070  
                      ?_main 0070           ??_USARTHandleRxInt 0070             USARTWriteChar@ch 0065  
                      i1l631 00E4                        i1l641 00F2                        i1l643 00F6  
                      i1l637 00EC                        _RCREG 001A                        _SPBRG 0099  
                      _TRISB 0086                        _TXREG 0019                        _UQEnd 0079  
                      pclath 000A                        ltemp0 007E                        ltemp1 0082  
                      ltemp2 0086                        ltemp3 0080           __size_of_USARTInit 0048  
            ?_USARTWriteChar 0070                        ttemp0 007E                        ttemp1 0081  
                      ttemp2 0084                        ttemp3 0087                        ttemp4 007F  
                      status 0003                        wtemp0 007E                        wtemp1 0080  
                      wtemp2 0082                        wtemp3 0084                        wtemp4 0086  
                      wtemp5 0088                        wtemp6 007F              __initialization 0011  
               __end_of_main 0079              ??_USARTReadData 0065                       ??_main 0068  
          USARTWriteInt@F769 0060                       _URBuff 0020            __end_of_USARTInit 00C1  
                     saved_w 007E      __end_of__initialization 0018               __pcstackCOMMON 0070  
                 __pbssBANK0 0020                   __pmaintext 001A                   __pintentry 0004  
__size_of_USARTDataAvailable 0024             ??_USARTWriteChar 0065    __size_of_USARTHandleRxInt 0043  
                    _UQFront 007A                      __ptext0 0000                      __ptext1 016A  
                    __ptext2 0104                      __ptext3 0079                      __ptext4 0128  
                    __ptext5 014C                      __ptext6 00C1                 __size_of_ISR 0016  
                    clrloop0 0163         end_of_initialization 0018                    _RCSTAbits 0018  
      __end_of_USARTReadData 0128                    _USARTInit 0079                    _TXSTAbits 0098  
        start_initialization 0011                   ?_USARTInit 0065                  __end_of_ISR 0162  
           _USARTHandleRxInt 00C1                  __pbssCOMMON 0079                    ___latbits 0000  
              __pcstackBANK0 0065   __end_of_USARTDataAvailable 014C                  ??_USARTInit 0067  
          interrupt_function 0004                    clear_ram0 0162                     _PIR1bits 000C  
                  main@count 006B      __size_of_USARTWriteChar 0008     __end_of_USARTHandleRxInt 0104  
              __size_of_main 005F       __size_of_USARTReadData 0024                     main@data 006C  
                   intlevel1 0000                _USARTReadData 0104         USARTHandleRxInt@data 0074  
         _USARTDataAvailable 0128          ?_USARTDataAvailable 0070               _USARTWriteChar 016A  
