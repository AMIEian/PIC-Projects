

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Sep 04 19:26:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F870
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     	;# 
    13  0001                     	;# 
    14  0002                     	;# 
    15  0003                     	;# 
    16  0004                     	;# 
    17  0005                     	;# 
    18  0006                     	;# 
    19  0007                     	;# 
    20  000A                     	;# 
    21  000B                     	;# 
    22  000C                     	;# 
    23  000D                     	;# 
    24  000E                     	;# 
    25  000E                     	;# 
    26  000F                     	;# 
    27  0010                     	;# 
    28  0011                     	;# 
    29  0012                     	;# 
    30  0015                     	;# 
    31  0015                     	;# 
    32  0016                     	;# 
    33  0017                     	;# 
    34  0018                     	;# 
    35  0019                     	;# 
    36  001A                     	;# 
    37  001E                     	;# 
    38  001F                     	;# 
    39  0081                     	;# 
    40  0085                     	;# 
    41  0086                     	;# 
    42  0087                     	;# 
    43  008C                     	;# 
    44  008D                     	;# 
    45  008E                     	;# 
    46  0092                     	;# 
    47  0098                     	;# 
    48  0099                     	;# 
    49  009E                     	;# 
    50  009F                     	;# 
    51  010C                     	;# 
    52  010D                     	;# 
    53  010E                     	;# 
    54  010F                     	;# 
    55  018C                     	;# 
    56  018D                     	;# 
    57  0005                     _PORTA	set	5
    58  0006                     _PORTB	set	6
    59  0007                     _PORTC	set	7
    60  0030                     _RB0	set	48
    61  0031                     _RB1	set	49
    62  0032                     _RB2	set	50
    63  0038                     _RC0	set	56
    64  0039                     _RC1	set	57
    65  003A                     _RC2	set	58
    66  009F                     _ADCON1	set	159
    67  0085                     _TRISA	set	133
    68  0086                     _TRISB	set	134
    69  0087                     _TRISC	set	135
    70                           
    71                           	psect	text0
    72  0000                     __ptext0:	
    73                           ; #config settings
    74                           
    75                           
    76                           	psect	cinit
    77  07FD                     start_initialization:	
    78                           ;psect for function _Scan_Column
    79                           
    80  07FD                     __initialization:	
    81                           
    82                           ; Clear objects allocated to COMMON
    83  07FD  01F8               	clrf	__pbssCOMMON& (0+127)
    84  07FE                     end_of_initialization:	
    85                           ;End of C runtime variable initialization code
    86                           
    87  07FE                     __end_of__initialization:	
    88  07FE  0183               	clrf	3
    89  07FF  2F64               	ljmp	_main	;jump to C main() function
    90                           
    91                           	psect	bssCOMMON
    92  0078                     __pbssCOMMON:	
    93  0078                     _column:	
    94  0078                     	ds	1
    95                           
    96                           	psect	cstackCOMMON
    97  0070                     __pcstackCOMMON:	
    98  0070                     ?_Send_Data:	
    99  0070                     ?_Scan_Column:	
   100                           ; 0 bytes @ 0x0
   101                           
   102  0070                     ??_Scan_Column:	
   103                           ; 0 bytes @ 0x0
   104                           
   105  0070                     ?_main:	
   106                           ; 0 bytes @ 0x0
   107                           
   108  0070                     Send_Data@number:	
   109                           ; 0 bytes @ 0x0
   110                           
   111                           
   112                           ; 2 bytes @ 0x0
   113  0070                     	ds	2
   114  0072                     ??_Send_Data:	
   115  0072                     Send_Data@Flag:	
   116                           ; 0 bytes @ 0x2
   117                           
   118                           
   119                           ; 2 bytes @ 0x2
   120  0072                     	ds	2
   121  0074                     Send_Data@bits:	
   122                           
   123                           ; 2 bytes @ 0x4
   124  0074                     	ds	2
   125  0076                     Send_Data@Mask:	
   126                           
   127                           ; 2 bytes @ 0x6
   128  0076                     	ds	2
   129  0078                     ??_main:	
   130                           
   131                           	psect	maintext
   132  0764                     __pmaintext:	
   133                           ; 0 bytes @ 0x8
   134 ;;
   135 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   136 ;;
   137 ;; *************** function _main *****************
   138 ;; Defined at:
   139 ;;		line 18 in file "E:\Study Material\XC8 PROJECTS\Scrolling Message 595\test.c"
   140 ;; Parameters:    Size  Location     Type
   141 ;;		None
   142 ;; Auto vars:     Size  Location     Type
   143 ;;		None
   144 ;; Return value:  Size  Location     Type
   145 ;;		None               void
   146 ;; Registers used:
   147 ;;		wreg, status,2, status,0, pclath, cstack
   148 ;; Tracked objects:
   149 ;;		On entry : 17F/0
   150 ;;		On exit  : 0/0
   151 ;;		Unchanged: 0/0
   152 ;; Data sizes:     COMMON   BANK0   BANK1
   153 ;;      Params:         0       0       0
   154 ;;      Locals:         0       0       0
   155 ;;      Temps:          0       0       0
   156 ;;      Totals:         0       0       0
   157 ;;Total ram usage:        0 bytes
   158 ;; Hardware stack levels required when called:    1
   159 ;; This function calls:
   160 ;;		_Scan_Column
   161 ;;		_Send_Data
   162 ;; This function is called by:
   163 ;;		Startup code after reset
   164 ;; This function uses a non-reentrant model
   165 ;;
   166                           
   167                           
   168                           ;psect for function _main
   169  0764                     _main:	
   170                           
   171                           ;test.c: 20: ADCON1 = 0x06;
   172                           
   173                           ;incstack = 0
   174                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   175  0764  3006               	movlw	6
   176  0765  1683               	bsf	3,5	;RP0=1, select bank1
   177  0766  1303               	bcf	3,6	;RP1=0, select bank1
   178  0767  009F               	movwf	31	;volatile
   179                           
   180                           ;test.c: 22: TRISA = 0x00;
   181  0768  0185               	clrf	5	;volatile
   182                           
   183                           ;test.c: 23: TRISB = 0x00;
   184  0769  0186               	clrf	6	;volatile
   185                           
   186                           ;test.c: 24: TRISC = 0x00;
   187  076A  0187               	clrf	7	;volatile
   188                           
   189                           ;test.c: 25: PORTA = 0x00;
   190  076B  1283               	bcf	3,5	;RP0=0, select bank0
   191  076C  1303               	bcf	3,6	;RP1=0, select bank0
   192  076D  0185               	clrf	5	;volatile
   193                           
   194                           ;test.c: 26: PORTB = 0x00;
   195  076E  0186               	clrf	6	;volatile
   196                           
   197                           ;test.c: 27: PORTC = 0x00;
   198  076F  0187               	clrf	7	;volatile
   199  0770                     l558:	
   200                           ;test.c: 29: while(1)
   201                           
   202                           
   203                           ;test.c: 30: {
   204                           ;test.c: 31: Send_Data(0xFFFF);
   205  0770  30FF               	movlw	255
   206  0771  00F0               	movwf	Send_Data@number
   207  0772  30FF               	movlw	255
   208  0773  00F1               	movwf	Send_Data@number+1
   209  0774  27AF               	fcall	_Send_Data
   210                           
   211                           ;test.c: 32: _delay(1);
   212  0775  0000               	nop
   213                           
   214                           ;test.c: 33: Scan_Column();
   215  0776  2779               	fcall	_Scan_Column
   216                           
   217                           ;test.c: 34: _delay(1);
   218  0777  0000               	nop
   219  0778  2F70               	goto	l558
   220  0779                     __end_of_main:	
   221                           
   222                           	psect	text1
   223  07AF                     __ptext1:	
   224 ;; *************** function _Send_Data *****************
   225 ;; Defined at:
   226 ;;		line 70 in file "E:\Study Material\XC8 PROJECTS\Scrolling Message 595\test.c"
   227 ;; Parameters:    Size  Location     Type
   228 ;;  number          2    0[COMMON] unsigned int 
   229 ;; Auto vars:     Size  Location     Type
   230 ;;  Mask            2    6[COMMON] unsigned int 
   231 ;;  bits            2    4[COMMON] unsigned short 
   232 ;;  Flag            2    2[COMMON] unsigned short 
   233 ;; Return value:  Size  Location     Type
   234 ;;		None               void
   235 ;; Registers used:
   236 ;;		wreg, status,2, status,0
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMMON   BANK0   BANK1
   242 ;;      Params:         2       0       0
   243 ;;      Locals:         6       0       0
   244 ;;      Temps:          0       0       0
   245 ;;      Totals:         8       0       0
   246 ;;Total ram usage:        8 bytes
   247 ;; Hardware stack levels used:    1
   248 ;; This function calls:
   249 ;;		Nothing
   250 ;; This function is called by:
   251 ;;		_main
   252 ;; This function uses a non-reentrant model
   253 ;;
   254                           
   255                           
   256                           ;psect for function _Send_Data
   257  07AF                     _Send_Data:	
   258                           
   259                           ;test.c: 72: unsigned short bits, Flag;
   260                           ;test.c: 73: unsigned int Mask;
   261                           ;test.c: 74: PORTC = 0x00;
   262                           
   263                           ;incstack = 0
   264                           ; Regs used in _Send_Data: [wreg+status,2+status,0]
   265  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   266  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   267  07B1  0187               	clrf	7	;volatile
   268                           
   269                           ;test.c: 76: Mask = 0x0001;
   270  07B2  3001               	movlw	1
   271  07B3  00F6               	movwf	Send_Data@Mask
   272  07B4  3000               	movlw	0
   273  07B5  00F7               	movwf	Send_Data@Mask+1
   274                           
   275                           ;test.c: 77: for (bits=0; bits<16; bits++)
   276  07B6  01F4               	clrf	Send_Data@bits
   277  07B7  01F5               	clrf	Send_Data@bits+1
   278  07B8  3000               	movlw	0
   279  07B9  0275               	subwf	Send_Data@bits+1,w
   280  07BA  3010               	movlw	16
   281  07BB  1903               	skipnz
   282  07BC  0274               	subwf	Send_Data@bits,w
   283  07BD  1803               	btfsc	3,0
   284  07BE  2FF5               	goto	l50
   285  07BF                     l518:	
   286                           
   287                           ;test.c: 78: {
   288                           ;test.c: 79: Flag = number & Mask;
   289  07BF  0876               	movf	Send_Data@Mask,w
   290  07C0  0570               	andwf	Send_Data@number,w
   291  07C1  00F2               	movwf	Send_Data@Flag
   292  07C2  0877               	movf	Send_Data@Mask+1,w
   293  07C3  0571               	andwf	Send_Data@number+1,w
   294  07C4  00F3               	movwf	Send_Data@Flag+1
   295                           
   296                           ;test.c: 80: if(Flag == 0)
   297  07C5  0873               	movf	Send_Data@Flag+1,w
   298  07C6  0472               	iorwf	Send_Data@Flag,w
   299  07C7  1D03               	skipz
   300  07C8  2FD4               	goto	l524
   301                           
   302                           ;test.c: 81: {
   303                           ;test.c: 82: RC0 = 0;
   304  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   305  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   306  07CB  1007               	bcf	7,0	;volatile
   307                           
   308                           ;test.c: 83: _delay(1);
   309  07CC  0000               	nop
   310                           
   311                           ;test.c: 84: RC1 = 1;
   312  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   313  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   314  07CF  1487               	bsf	7,1	;volatile
   315                           
   316                           ;test.c: 85: _delay(1);
   317  07D0  0000               	nop
   318                           
   319                           ;test.c: 86: RC1 = 0;
   320  07D1  1283               	bcf	3,5	;RP0=0, select bank0
   321  07D2  1303               	bcf	3,6	;RP1=0, select bank0
   322  07D3  1087               	bcf	7,1	;volatile
   323  07D4                     l524:	
   324                           
   325                           ;test.c: 87: }
   326                           ;test.c: 88: if(Flag > 0)
   327  07D4  0873               	movf	Send_Data@Flag+1,w
   328  07D5  0472               	iorwf	Send_Data@Flag,w
   329  07D6  1903               	skipnz
   330  07D7  2FE3               	goto	l528
   331                           
   332                           ;test.c: 89: {
   333                           ;test.c: 90: RC0 = 1;
   334  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   335  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   336  07DA  1407               	bsf	7,0	;volatile
   337                           
   338                           ;test.c: 91: _delay(1);
   339  07DB  0000               	nop
   340                           
   341                           ;test.c: 92: RC1 = 1;
   342  07DC  1283               	bcf	3,5	;RP0=0, select bank0
   343  07DD  1303               	bcf	3,6	;RP1=0, select bank0
   344  07DE  1487               	bsf	7,1	;volatile
   345                           
   346                           ;test.c: 93: _delay(1);
   347  07DF  0000               	nop
   348                           
   349                           ;test.c: 94: RC1 = 0;
   350  07E0  1283               	bcf	3,5	;RP0=0, select bank0
   351  07E1  1303               	bcf	3,6	;RP1=0, select bank0
   352  07E2  1087               	bcf	7,1	;volatile
   353  07E3                     l528:	
   354                           
   355                           ;test.c: 95: }
   356                           ;test.c: 96: Mask = Mask << 1;
   357  07E3  1003               	clrc
   358  07E4  0D76               	rlf	Send_Data@Mask,w
   359  07E5  00F6               	movwf	Send_Data@Mask
   360  07E6  0D77               	rlf	Send_Data@Mask+1,w
   361  07E7  00F7               	movwf	Send_Data@Mask+1
   362  07E8  3001               	movlw	1
   363  07E9  07F4               	addwf	Send_Data@bits,f
   364  07EA  1803               	skipnc
   365  07EB  0AF5               	incf	Send_Data@bits+1,f
   366  07EC  3000               	movlw	0
   367  07ED  07F5               	addwf	Send_Data@bits+1,f
   368  07EE  3000               	movlw	0
   369  07EF  0275               	subwf	Send_Data@bits+1,w
   370  07F0  3010               	movlw	16
   371  07F1  1903               	skipnz
   372  07F2  0274               	subwf	Send_Data@bits,w
   373  07F3  1C03               	skipc
   374  07F4  2FBF               	goto	l518
   375  07F5                     l50:	
   376                           
   377                           ;test.c: 97: }
   378                           ;test.c: 99: RC2 = 1;
   379  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   380  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   381  07F7  1507               	bsf	7,2	;volatile
   382                           
   383                           ;test.c: 100: _delay(1);
   384  07F8  0000               	nop
   385                           
   386                           ;test.c: 101: RC2 = 0;
   387  07F9  1283               	bcf	3,5	;RP0=0, select bank0
   388  07FA  1303               	bcf	3,6	;RP1=0, select bank0
   389  07FB  1107               	bcf	7,2	;volatile
   390  07FC  0008               	return
   391  07FD                     __end_of_Send_Data:	
   392                           
   393                           	psect	text2
   394  0779                     __ptext2:	
   395 ;; *************** function _Scan_Column *****************
   396 ;; Defined at:
   397 ;;		line 38 in file "E:\Study Material\XC8 PROJECTS\Scrolling Message 595\test.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;		None
   402 ;; Return value:  Size  Location     Type
   403 ;;		None               void
   404 ;; Registers used:
   405 ;;		wreg, status,2, status,0
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMMON   BANK0   BANK1
   411 ;;      Params:         0       0       0
   412 ;;      Locals:         0       0       0
   413 ;;      Temps:          1       0       0
   414 ;;      Totals:         1       0       0
   415 ;;Total ram usage:        1 bytes
   416 ;; Hardware stack levels used:    1
   417 ;; This function calls:
   418 ;;		Nothing
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _Scan_Column
   426  0779                     _Scan_Column:	
   427                           
   428                           ;test.c: 40: if(column == 0)
   429                           
   430                           ;incstack = 0
   431                           ; Regs used in _Scan_Column: [wreg+status,2+status,0]
   432  0779  08F8               	movf	_column,f
   433  077A  1D03               	skipz
   434  077B  2F8F               	goto	l534
   435                           
   436                           ;test.c: 41: {
   437                           ;test.c: 42: RB0 = 1;
   438  077C  1283               	bcf	3,5	;RP0=0, select bank0
   439  077D  1303               	bcf	3,6	;RP1=0, select bank0
   440  077E  1406               	bsf	6,0	;volatile
   441                           
   442                           ;test.c: 43: _delay(1);
   443  077F  0000               	nop
   444                           
   445                           ;test.c: 44: RB1 = 1;
   446  0780  1283               	bcf	3,5	;RP0=0, select bank0
   447  0781  1303               	bcf	3,6	;RP1=0, select bank0
   448  0782  1486               	bsf	6,1	;volatile
   449                           
   450                           ;test.c: 45: _delay(1);
   451  0783  0000               	nop
   452                           
   453                           ;test.c: 46: RB1 = 0;
   454  0784  1283               	bcf	3,5	;RP0=0, select bank0
   455  0785  1303               	bcf	3,6	;RP1=0, select bank0
   456  0786  1086               	bcf	6,1	;volatile
   457                           
   458                           ;test.c: 47: _delay(1);
   459  0787  0000               	nop
   460                           
   461                           ;test.c: 49: RB2 = 1;
   462  0788  1283               	bcf	3,5	;RP0=0, select bank0
   463  0789  1303               	bcf	3,6	;RP1=0, select bank0
   464  078A  1506               	bsf	6,2	;volatile
   465                           
   466                           ;test.c: 50: _delay(1);
   467  078B  0000               	nop
   468                           
   469                           ;test.c: 51: RB2 = 0;
   470  078C  1283               	bcf	3,5	;RP0=0, select bank0
   471  078D  1303               	bcf	3,6	;RP1=0, select bank0
   472  078E  1106               	bcf	6,2	;volatile
   473  078F                     l534:	
   474                           
   475                           ;test.c: 52: }
   476                           ;test.c: 53: if(column != 0)
   477  078F  0878               	movf	_column,w
   478  0790  1903               	btfsc	3,2
   479  0791  2FA5               	goto	l538
   480                           
   481                           ;test.c: 54: {
   482                           ;test.c: 55: RB0 = 0;
   483  0792  1283               	bcf	3,5	;RP0=0, select bank0
   484  0793  1303               	bcf	3,6	;RP1=0, select bank0
   485  0794  1006               	bcf	6,0	;volatile
   486                           
   487                           ;test.c: 56: _delay(1);
   488  0795  0000               	nop
   489                           
   490                           ;test.c: 57: RB1 = 1;
   491  0796  1283               	bcf	3,5	;RP0=0, select bank0
   492  0797  1303               	bcf	3,6	;RP1=0, select bank0
   493  0798  1486               	bsf	6,1	;volatile
   494                           
   495                           ;test.c: 58: _delay(1);
   496  0799  0000               	nop
   497                           
   498                           ;test.c: 59: RB1 = 0;
   499  079A  1283               	bcf	3,5	;RP0=0, select bank0
   500  079B  1303               	bcf	3,6	;RP1=0, select bank0
   501  079C  1086               	bcf	6,1	;volatile
   502                           
   503                           ;test.c: 60: _delay(1);
   504  079D  0000               	nop
   505                           
   506                           ;test.c: 62: RB2 = 1;
   507  079E  1283               	bcf	3,5	;RP0=0, select bank0
   508  079F  1303               	bcf	3,6	;RP1=0, select bank0
   509  07A0  1506               	bsf	6,2	;volatile
   510                           
   511                           ;test.c: 63: _delay(1);
   512  07A1  0000               	nop
   513                           
   514                           ;test.c: 64: RB2 = 0;
   515  07A2  1283               	bcf	3,5	;RP0=0, select bank0
   516  07A3  1303               	bcf	3,6	;RP1=0, select bank0
   517  07A4  1106               	bcf	6,2	;volatile
   518  07A5                     l538:	
   519                           
   520                           ;test.c: 65: }
   521                           ;test.c: 66: column++;
   522  07A5  3001               	movlw	1
   523  07A6  00F0               	movwf	??_Scan_Column
   524  07A7  0870               	movf	??_Scan_Column,w
   525  07A8  07F8               	addwf	_column,f
   526                           
   527                           ;test.c: 67: if(column > 39)
   528  07A9  3028               	movlw	40
   529  07AA  0278               	subwf	_column,w
   530  07AB  1C03               	skipc
   531  07AC  0008               	return
   532                           
   533                           ;test.c: 68: column = 0;
   534  07AD  01F8               	clrf	_column
   535  07AE  0008               	return
   536  07AF                     __end_of_Scan_Column:	
   537  007E                     btemp	set	126	;btemp
   538  007E                     wtemp	set	126
   539  007E                     wtemp0	set	126
   540  0080                     wtemp1	set	128
   541  0082                     wtemp2	set	130
   542  0084                     wtemp3	set	132
   543  0086                     wtemp4	set	134
   544  0088                     wtemp5	set	136
   545  007F                     wtemp6	set	127
   546  007E                     ttemp	set	126
   547  007E                     ttemp0	set	126
   548  0081                     ttemp1	set	129
   549  0084                     ttemp2	set	132
   550  0087                     ttemp3	set	135
   551  007F                     ttemp4	set	127
   552  007E                     ltemp	set	126
   553  007E                     ltemp0	set	126
   554  0082                     ltemp1	set	130
   555  0086                     ltemp2	set	134
   556  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Send_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     148
                        _Scan_Column
                          _Send_Data
 ---------------------------------------------------------------------------------
 (1) _Send_Data                                            8     6      2     148
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (1) _Scan_Column                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Scan_Column
   _Send_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            20      0       0       6        0.0%
BANK1               20      0       0       7        0.0%
DATA                 0      0       9       8        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Sep 04 19:26:59 2015

          Send_Data@Flag 0072            Send_Data@Mask 0076            Send_Data@bits 0074  
                     l50 07F5                      l524 07D4                      l534 078F  
                    l518 07BF                      l528 07E3                      l538 07A5  
                    l558 0770                      _RB0 0030                      _RB1 0031  
                    _RC0 0038                      _RB2 0032                      _RC1 0039  
                    _RC2 003A          Send_Data@number 0070                     _main 0764  
                   btemp 007E                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E                    ?_main 0070  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
          ??_Scan_Column 0070                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 07FD             __end_of_main 0779                   ??_main 0078  
                 _ADCON1 009F      __end_of_Scan_Column 07AF       __size_of_Send_Data 004E  
                 _column 0078  __end_of__initialization 07FE           __pcstackCOMMON 0070  
            _Scan_Column 0779        __end_of_Send_Data 07FD               __pmaintext 0764  
                __ptext0 0000                  __ptext1 07AF                  __ptext2 0779  
   end_of_initialization 07FE             ?_Scan_Column 0070      start_initialization 07FD  
              _Send_Data 07AF              __pbssCOMMON 0078                ___latbits 0000  
             ?_Send_Data 0070     __size_of_Scan_Column 0036              ??_Send_Data 0072  
          __size_of_main 0015  
